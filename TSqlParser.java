// Generated from TSqlParser.g4 by ANTLR 4.7.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ADD=1, ALL=2, ALTER=3, AND=4, ANY=5, AS=6, ASC=7, AUTHORIZATION=8, BACKSLASH=9, 
		BACKUP=10, BEGIN=11, BETWEEN=12, BREAK=13, BROWSE=14, BULK=15, BY=16, 
		CASCADE=17, CASE=18, CHECK=19, CHECKPOINT=20, CLOSE=21, CLUSTERED=22, 
		COALESCE=23, COLLATE=24, COLUMN=25, COMMIT=26, COMPUTE=27, CONSTRAINT=28, 
		CONTAINS=29, CONTAINSTABLE=30, CONTINUE=31, CONVERT=32, CREATE=33, CROSS=34, 
		CURRENT=35, CURRENT_DATE=36, CURRENT_TIME=37, CURRENT_TIMESTAMP=38, CURRENT_USER=39, 
		CURSOR=40, DATABASE=41, DBCC=42, DEALLOCATE=43, DECLARE=44, DEFAULT=45, 
		DELETE=46, DENY=47, DESC=48, DISK=49, DISTINCT=50, DISTRIBUTED=51, DOUBLE=52, 
		DOUBLE_BACK_SLASH=53, DOUBLE_FORWARD_SLASH=54, DROP=55, DUMP=56, ELSE=57, 
		END=58, ERRLVL=59, ESCAPE=60, EXCEPT=61, EXECUTE=62, EXISTS=63, EXIT=64, 
		EXTERNAL=65, FETCH=66, FILE=67, FILLFACTOR=68, FOR=69, FOREIGN=70, FREETEXT=71, 
		FREETEXTTABLE=72, FROM=73, FULL=74, FUNCTION=75, GOTO=76, GRANT=77, GROUP=78, 
		HAVING=79, HOLDLOCK=80, IDENTITY=81, IDENTITY_INSERT=82, IDENTITYCOL=83, 
		IF=84, IN=85, INDEX=86, INNER=87, INSERT=88, INTERSECT=89, INTO=90, IS=91, 
		JOIN=92, KEY=93, KILL=94, LEFT=95, LIKE=96, LINENO=97, LOAD=98, MERGE=99, 
		NATIONAL=100, NEGOTIATE=101, NOCHECK=102, NONCLUSTERED=103, NOT=104, NULL_=105, 
		NULLIF=106, OF=107, OFF=108, OFFSETS=109, ON=110, OPEN=111, OPENDATASOURCE=112, 
		OPENQUERY=113, OPENROWSET=114, OPENJSON=115, OPENXML=116, OPTION=117, 
		OR=118, ORDER=119, OUTER=120, OVER=121, PERCENT=122, PIVOT=123, PLAN=124, 
		PRECISION=125, PRIMARY=126, PRINT=127, PROC=128, PROCEDURE=129, PUBLIC=130, 
		RAISERROR=131, RAW=132, READ=133, READTEXT=134, RECONFIGURE=135, REFERENCES=136, 
		REPLICATION=137, RESTORE=138, RESTRICT=139, RETURN=140, REVERT=141, REVOKE=142, 
		RIGHT=143, ROLLBACK=144, ROWCOUNT=145, ROWGUIDCOL=146, RULE=147, SAVE=148, 
		SCHEMA=149, SECURITYAUDIT=150, SELECT=151, SEMANTICKEYPHRASETABLE=152, 
		SEMANTICSIMILARITYDETAILSTABLE=153, SEMANTICSIMILARITYTABLE=154, SESSION_USER=155, 
		SET=156, SETUSER=157, SHUTDOWN=158, SOME=159, STATISTICS=160, SYSTEM_USER=161, 
		TABLE=162, TABLESAMPLE=163, TEXTSIZE=164, THEN=165, TO=166, TOP=167, TRAN=168, 
		TRANSACTION=169, TRIGGER=170, TRUNCATE=171, TSEQUAL=172, UNION=173, UNIQUE=174, 
		UNPIVOT=175, UPDATE=176, UPDATETEXT=177, USE=178, USER=179, VALUES=180, 
		VARYING=181, VIEW=182, WAITFOR=183, WHEN=184, WHERE=185, WHILE=186, WITH=187, 
		WITHIN=188, WRITETEXT=189, DOLLAR_PARTITION=190, ABSOLUTE=191, AT_KEYWORD=192, 
		ACCENT_SENSITIVITY=193, ACTION=194, ACTIVATION=195, ACTIVE=196, ADDRESS=197, 
		AES_128=198, AES_192=199, AES_256=200, AFFINITY=201, AFTER=202, AGGREGATE=203, 
		ALGORITHM=204, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=205, ALLOW_SNAPSHOT_ISOLATION=206, 
		ALLOWED=207, ANSI_NULL_DEFAULT=208, ANSI_NULLS=209, ANSI_PADDING=210, 
		ANSI_WARNINGS=211, APPLICATION_LOG=212, APPLY=213, ARITHABORT=214, ASSEMBLY=215, 
		AUDIT=216, AUDIT_GUID=217, AUTO=218, AUTO_CLEANUP=219, AUTO_CLOSE=220, 
		AUTO_CREATE_STATISTICS=221, AUTO_SHRINK=222, AUTO_UPDATE_STATISTICS=223, 
		AUTO_UPDATE_STATISTICS_ASYNC=224, AUTOGROW_ALL_FILES=225, AUTOGROW_SINGLE_FILE=226, 
		AVAILABILITY=227, AVG=228, BACKUP_PRIORITY=229, BEGIN_DIALOG=230, BIGINT=231, 
		BINARY_KEYWORD=232, BINARY_BASE64=233, BINARY_CHECKSUM=234, BINDING=235, 
		BLOB_STORAGE=236, BROKER=237, BROKER_INSTANCE=238, BULK_LOGGED=239, CALLER=240, 
		CAP_CPU_PERCENT=241, CAST=242, TRY_CAST=243, CATALOG=244, CATCH=245, CHANGE_RETENTION=246, 
		CHANGE_TRACKING=247, CHECKSUM=248, CHECKSUM_AGG=249, CLEANUP=250, COLLECTION=251, 
		COLUMN_MASTER_KEY=252, COMMITTED=253, COMPATIBILITY_LEVEL=254, CONCAT=255, 
		CONCAT_NULL_YIELDS_NULL=256, CONTENT=257, CONTROL=258, COOKIE=259, COUNT=260, 
		COUNT_BIG=261, COUNTER=262, CPU=263, CREATE_NEW=264, CREATION_DISPOSITION=265, 
		CREDENTIAL=266, CRYPTOGRAPHIC=267, CUME_DIST=268, CURSOR_CLOSE_ON_COMMIT=269, 
		CURSOR_DEFAULT=270, DATA=271, DATE_CORRELATION_OPTIMIZATION=272, DATEADD=273, 
		DATEDIFF=274, DATENAME=275, DATEPART=276, DAYS=277, DB_CHAINING=278, DB_FAILOVER=279, 
		DECRYPTION=280, DEFAULT_DOUBLE_QUOTE=281, DEFAULT_FULLTEXT_LANGUAGE=282, 
		DEFAULT_LANGUAGE=283, DELAY=284, DELAYED_DURABILITY=285, DELETED=286, 
		DENSE_RANK=287, DEPENDENTS=288, DES=289, DESCRIPTION=290, DESX=291, DHCP=292, 
		DIALOG=293, DIRECTORY_NAME=294, DISABLE=295, DISABLE_BROKER=296, DISABLED=297, 
		DISK_DRIVE=298, DOCUMENT=299, DYNAMIC=300, ELEMENTS=301, EMERGENCY=302, 
		EMPTY=303, ENABLE=304, ENABLE_BROKER=305, ENCRYPTED_VALUE=306, ENCRYPTION=307, 
		ENDPOINT_URL=308, ERROR_BROKER_CONVERSATIONS=309, EXCLUSIVE=310, EXECUTABLE=311, 
		EXIST=312, EXPAND=313, EXPIRY_DATE=314, EXPLICIT=315, FAIL_OPERATION=316, 
		FAILOVER_MODE=317, FAILURE=318, FAILURE_CONDITION_LEVEL=319, FAST=320, 
		FAST_FORWARD=321, FILEGROUP=322, FILEGROWTH=323, FILENAME=324, FILEPATH=325, 
		FILESTREAM=326, FILTER=327, FIRST=328, FIRST_VALUE=329, FOLLOWING=330, 
		FORCE=331, FORCE_FAILOVER_ALLOW_DATA_LOSS=332, FORCED=333, FORMAT=334, 
		FORWARD_ONLY=335, FULLSCAN=336, FULLTEXT=337, GB=338, GETDATE=339, GETUTCDATE=340, 
		GLOBAL=341, GO_BATCH=342, GO=343, GROUP_MAX_REQUESTS=344, GROUPING=345, 
		GROUPING_ID=346, HADR=347, HASH=348, HEALTH_CHECK_TIMEOUT=349, HIGH=350, 
		HONOR_BROKER_PRIORITY=351, HOURS=352, IDENTITY_VALUE=353, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=354, 
		IMMEDIATE=355, IMPERSONATE=356, IMPORTANCE=357, INCLUDE_NULL_VALUES=358, 
		INCREMENTAL=359, INITIATOR=360, INPUT=361, INSENSITIVE=362, INSERTED=363, 
		INT=364, IP=365, ISOLATION=366, JOB=367, JSON=368, KB=369, KEEP=370, KEEPFIXED=371, 
		KEY_SOURCE=372, KEYS=373, KEYSET=374, LAG=375, LAST=376, LAST_VALUE=377, 
		LEAD=378, LEVEL=379, LIST=380, LISTENER=381, LISTENER_URL=382, LOB_COMPACTION=383, 
		LOCAL=384, LOCATION=385, LOCK=386, LOCK_ESCALATION=387, LOGIN=388, LOOP=389, 
		LOW=390, MANUAL=391, MARK=392, MATERIALIZED=393, MAX=394, MAX_CPU_PERCENT=395, 
		MAX_DOP=396, MAX_FILES=397, MAX_IOPS_PER_VOLUME=398, MAX_MEMORY_PERCENT=399, 
		MAX_PROCESSES=400, MAX_QUEUE_READERS=401, MAX_ROLLOVER_FILES=402, MAXDOP=403, 
		MAXRECURSION=404, MAXSIZE=405, MB=406, MEDIUM=407, MEMORY_OPTIMIZED_DATA=408, 
		MESSAGE=409, MIN=410, MIN_ACTIVE_ROWVERSION=411, MIN_CPU_PERCENT=412, 
		MIN_IOPS_PER_VOLUME=413, MIN_MEMORY_PERCENT=414, MINUTES=415, MIRROR_ADDRESS=416, 
		MIXED_PAGE_ALLOCATION=417, MODE=418, MODIFY=419, MOVE=420, MULTI_USER=421, 
		NAME=422, NESTED_TRIGGERS=423, NEW_ACCOUNT=424, NEW_BROKER=425, NEW_PASSWORD=426, 
		NEWNAME=427, NEXT=428, NO=429, NO_TRUNCATE=430, NO_WAIT=431, NOCOUNT=432, 
		NODES=433, NOEXPAND=434, NON_TRANSACTED_ACCESS=435, NORECOMPUTE=436, NORECOVERY=437, 
		NOWAIT=438, NTILE=439, NUMANODE=440, NUMBER=441, NUMERIC_ROUNDABORT=442, 
		OBJECT=443, OFFLINE=444, OFFSET=445, OLD_ACCOUNT=446, ONLINE=447, ONLY=448, 
		OPEN_EXISTING=449, OPTIMISTIC=450, OPTIMIZE=451, OUT=452, OUTPUT=453, 
		OVERRIDE=454, OWNER=455, PAGE_VERIFY=456, PARAMETERIZATION=457, PARTITION=458, 
		PARTITIONS=459, PARTNER=460, PATH=461, PERCENT_RANK=462, PERCENTILE_CONT=463, 
		PERCENTILE_DISC=464, POISON_MESSAGE_HANDLING=465, POOL=466, PORT=467, 
		PRECEDING=468, PRIMARY_ROLE=469, PRIOR=470, PRIORITY=471, PRIORITY_LEVEL=472, 
		PRIVATE=473, PRIVATE_KEY=474, PRIVILEGES=475, PROCEDURE_NAME=476, PROPERTY=477, 
		PROVIDER=478, PROVIDER_KEY_NAME=479, QUERY=480, QUEUE=481, QUEUE_DELAY=482, 
		QUOTED_IDENTIFIER=483, RANGE=484, RANK=485, RC2=486, RC4=487, RC4_128=488, 
		READ_COMMITTED_SNAPSHOT=489, READ_ONLY=490, READ_ONLY_ROUTING_LIST=491, 
		READ_WRITE=492, READONLY=493, READWRITE=494, REBUILD=495, RECEIVE=496, 
		RECOMPILE=497, RECOVERY=498, RECURSIVE_TRIGGERS=499, RELATIVE=500, REMOTE=501, 
		REMOTE_SERVICE_NAME=502, REMOVE=503, REORGANIZE=504, REPEATABLE=505, REPLICA=506, 
		REQUEST_MAX_CPU_TIME_SEC=507, REQUEST_MAX_MEMORY_GRANT_PERCENT=508, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=509, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=510, RESERVE_DISK_SPACE=511, 
		RESOURCE=512, RESOURCE_MANAGER_LOCATION=513, RESTRICTED_USER=514, RETENTION=515, 
		ROBUST=516, ROOT=517, ROUTE=518, ROW=519, ROW_NUMBER=520, ROWGUID=521, 
		ROWS=522, SAMPLE=523, SCHEMABINDING=524, SCOPED=525, SCROLL=526, SCROLL_LOCKS=527, 
		SEARCH=528, SECONDARY=529, SECONDARY_ONLY=530, SECONDARY_ROLE=531, SECONDS=532, 
		SECRET=533, SECURITY=534, SECURITY_LOG=535, SEEDING_MODE=536, SELF=537, 
		SEMI_SENSITIVE=538, SEND=539, SENT=540, SEQUENCE=541, SERIALIZABLE=542, 
		SESSION_TIMEOUT=543, SETERROR=544, SHARE=545, SHOWPLAN=546, SIGNATURE=547, 
		SIMPLE=548, SINGLE_USER=549, SIZE=550, SMALLINT=551, SNAPSHOT=552, SPATIAL_WINDOW_MAX_CELLS=553, 
		STANDBY=554, START_DATE=555, STATIC=556, STATS_STREAM=557, STATUS=558, 
		STATUSONLY=559, STDEV=560, STDEVP=561, STOPLIST=562, STRING_AGG=563, STUFF=564, 
		SUBJECT=565, SUBSCRIPTION=566, SUM=567, SUSPEND=568, SYMMETRIC=569, SYNCHRONOUS_COMMIT=570, 
		SYNONYM=571, SYSTEM=572, TAKE=573, TARGET_RECOVERY_TIME=574, TB=575, TEXTIMAGE_ON=576, 
		THROW=577, TIES=578, TIME=579, TIMEOUT=580, TIMER=581, TINYINT=582, TORN_PAGE_DETECTION=583, 
		TRANSFORM_NOISE_WORDS=584, TRIPLE_DES=585, TRIPLE_DES_3KEY=586, TRUSTWORTHY=587, 
		TRY=588, TSQL=589, TWO_DIGIT_YEAR_CUTOFF=590, TYPE=591, TYPE_WARNING=592, 
		UNBOUNDED=593, UNCOMMITTED=594, UNKNOWN=595, UNLIMITED=596, UOW=597, USING=598, 
		VALID_XML=599, VALIDATION=600, VALUE=601, VAR=602, VARBINARY_KEYWORD=603, 
		VARP=604, VIEW_METADATA=605, VIEWS=606, WAIT=607, WELL_FORMED_XML=608, 
		WITHOUT_ARRAY_WRAPPER=609, WORK=610, WORKLOAD=611, XML=612, XMLDATA=613, 
		XMLNAMESPACES=614, XMLSCHEMA=615, XSINIL=616, ZONE=617, DOLLAR_ACTION=618, 
		ABORT_AFTER_WAIT=619, ABSENT=620, AES=621, ALLOW_CONNECTIONS=622, ALLOW_MULTIPLE_EVENT_LOSS=623, 
		ALLOW_SINGLE_EVENT_LOSS=624, ANONYMOUS=625, APPEND=626, APPLICATION=627, 
		ASYMMETRIC=628, ASYNCHRONOUS_COMMIT=629, AUTHENTICATION=630, AUTOMATED_BACKUP_PREFERENCE=631, 
		AUTOMATIC=632, AVAILABILITY_MODE=633, BEFORE=634, BLOCK=635, BLOCKERS=636, 
		BLOCKSIZE=637, BLOCKING_HIERARCHY=638, BUFFER=639, BUFFERCOUNT=640, CACHE=641, 
		CALLED=642, CERTIFICATE=643, CHANGETABLE=644, CHANGES=645, CHECK_POLICY=646, 
		CHECK_EXPIRATION=647, CLASSIFIER_FUNCTION=648, CLUSTER=649, COMPRESSION=650, 
		CONFIGURATION=651, CONTAINMENT=652, CONTEXT=653, CONTINUE_AFTER_ERROR=654, 
		CONTRACT=655, CONTRACT_NAME=656, CONVERSATION=657, COPY_ONLY=658, CYCLE=659, 
		DATA_COMPRESSION=660, DATA_SOURCE=661, DATABASE_MIRRORING=662, DEFAULT_DATABASE=663, 
		DEFAULT_SCHEMA=664, DIAGNOSTICS=665, DIFFERENTIAL=666, DTC_SUPPORT=667, 
		ENABLED=668, ENDPOINT=669, ERROR=670, EVENT=671, EVENTDATA=672, EVENT_RETENTION_MODE=673, 
		EXECUTABLE_FILE=674, EXPIREDATE=675, EXTENSION=676, EXTERNAL_ACCESS=677, 
		FAILOVER=678, FAILURECONDITIONLEVEL=679, FAN_IN=680, FILE_SNAPSHOT=681, 
		FORCESEEK=682, FORCE_SERVICE_ALLOW_DATA_LOSS=683, GET=684, GOVERNOR=685, 
		HASHED=686, HEALTHCHECKTIMEOUT=687, IIF=688, IO=689, INCLUDE=690, INCREMENT=691, 
		INFINITE=692, INIT=693, INSTEAD=694, ISNULL=695, KERBEROS=696, KEY_PATH=697, 
		KEY_STORE_PROVIDER_NAME=698, LANGUAGE=699, LIBRARY=700, LIFETIME=701, 
		LINUX=702, LISTENER_IP=703, LISTENER_PORT=704, LOCAL_SERVICE_NAME=705, 
		LOG=706, MATCHED=707, MASTER=708, MAX_MEMORY=709, MAXTRANSFER=710, MAXVALUE=711, 
		MAX_DISPATCH_LATENCY=712, MAX_DURATION=713, MAX_EVENT_SIZE=714, MAX_SIZE=715, 
		MAX_OUTSTANDING_IO_PER_VOLUME=716, MEDIADESCRIPTION=717, MEDIANAME=718, 
		MEMBER=719, MEMORY_PARTITION_MODE=720, MESSAGE_FORWARDING=721, MESSAGE_FORWARD_SIZE=722, 
		MINVALUE=723, MIRROR=724, MUST_CHANGE=725, NOFORMAT=726, NOINIT=727, NONE=728, 
		NOREWIND=729, NOSKIP=730, NOUNLOAD=731, NO_CHECKSUM=732, NO_COMPRESSION=733, 
		NO_EVENT_LOSS=734, NOTIFICATION=735, NTLM=736, OLD_PASSWORD=737, ON_FAILURE=738, 
		PAGE=739, PARAM_NODE=740, PARTIAL=741, PASSWORD=742, PERMISSION_SET=743, 
		PER_CPU=744, PER_DB=745, PER_NODE=746, PERSISTED=747, PLATFORM=748, POLICY=749, 
		PREDICATE=750, PROCESS=751, PROFILE=752, PYTHON=753, R=754, READ_WRITE_FILEGROUPS=755, 
		REGENERATE=756, RELATED_CONVERSATION=757, RELATED_CONVERSATION_GROUP=758, 
		REQUIRED=759, RESET=760, RESTART=761, RESUME=762, RETAINDAYS=763, RETURNS=764, 
		REWIND=765, ROLE=766, RSA_512=767, RSA_1024=768, RSA_2048=769, RSA_3072=770, 
		RSA_4096=771, SAFETY=772, SAFE=773, SCHEDULER=774, SCHEME=775, SERVER=776, 
		SERVICE=777, SERVICE_BROKER=778, SERVICE_NAME=779, SESSION=780, SHRINKLOG=781, 
		SID=782, SKIP_KEYWORD=783, SOFTNUMA=784, SOURCE=785, SPECIFICATION=786, 
		SPLIT=787, SQLDUMPERFLAGS=788, SQLDUMPERPATH=789, SQLDUMPERTIMEOUT=790, 
		STATE=791, STATS=792, START=793, STARTED=794, STARTUP_STATE=795, STOP=796, 
		STOPPED=797, STOP_ON_ERROR=798, SUPPORTED=799, SWITCH=800, TAPE=801, TARGET=802, 
		TCP=803, TRACK_CAUSALITY=804, TRANSFER=805, UNCHECKED=806, UNLOCK=807, 
		UNSAFE=808, URL=809, USED=810, VERBOSELOGGING=811, VISIBILITY=812, WAIT_AT_LOW_PRIORITY=813, 
		WINDOWS=814, WITHOUT=815, WITNESS=816, VARCHAR=817, NVARCHAR=818, SPACE=819, 
		COMMENT=820, LINE_COMMENT=821, DOUBLE_QUOTE_ID=822, SINGLE_QUOTE=823, 
		SQUARE_BRACKET_ID=824, LOCAL_ID=825, DECIMAL=826, ID=827, STRING=828, 
		BINARY=829, FLOAT=830, REAL=831, EQUAL=832, GREATER=833, LESS=834, EXCLAMATION=835, 
		PLUS_ASSIGN=836, MINUS_ASSIGN=837, MULT_ASSIGN=838, DIV_ASSIGN=839, MOD_ASSIGN=840, 
		AND_ASSIGN=841, XOR_ASSIGN=842, OR_ASSIGN=843, DOUBLE_BAR=844, DOT=845, 
		UNDERLINE=846, AT=847, SHARP=848, DOLLAR=849, LR_BRACKET=850, RR_BRACKET=851, 
		COMMA=852, SEMI=853, COLON=854, STAR=855, DIVIDE=856, MODULE=857, PLUS=858, 
		MINUS=859, BIT_NOT=860, BIT_OR=861, BIT_AND=862, BIT_XOR=863, IPV4_ADDR=864, 
		IPV6_ADDR=865, ANSI_DEFAULTS=866, ANSI_NULL_DFLT_OFF=867, ANSI_NULL_DFLT_ON=868, 
		ARITHIGNORE=869, FMTONLY=870, FORCEPLAN=871, IMPLICIT_TRANSACTIONS=872, 
		NOEXEC=873, PARSEONLY=874, REMOTE_PROC_TRANSACTIONS=875, SHOWPLAN_ALL=876, 
		SHOWPLAN_TEXT=877, SHOWPLAN_XML=878, XACT_ABORT=879, VERSION=880;
	public static final int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_batch_level_statement = 2, RULE_sql_clauses = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_create_application_role = 26, RULE_drop_aggregate = 27, RULE_drop_application_role = 28, 
		RULE_alter_assembly = 29, RULE_alter_assembly_start = 30, RULE_alter_assembly_clause = 31, 
		RULE_alter_assembly_from_clause = 32, RULE_alter_assembly_from_clause_start = 33, 
		RULE_alter_assembly_drop_clause = 34, RULE_alter_assembly_drop_multiple_files = 35, 
		RULE_alter_assembly_drop = 36, RULE_alter_assembly_add_clause = 37, RULE_alter_asssembly_add_clause_start = 38, 
		RULE_alter_assembly_client_file_clause = 39, RULE_alter_assembly_file_name = 40, 
		RULE_alter_assembly_file_bits = 41, RULE_alter_assembly_as = 42, RULE_alter_assembly_with_clause = 43, 
		RULE_alter_assembly_with = 44, RULE_client_assembly_specifier = 45, RULE_assembly_option = 46, 
		RULE_network_file_share = 47, RULE_network_computer = 48, RULE_network_file_start = 49, 
		RULE_file_path = 50, RULE_file_directory_path_separator = 51, RULE_local_file = 52, 
		RULE_local_drive = 53, RULE_multiple_local_files = 54, RULE_multiple_local_file_start = 55, 
		RULE_create_assembly = 56, RULE_drop_assembly = 57, RULE_alter_asymmetric_key = 58, 
		RULE_alter_asymmetric_key_start = 59, RULE_asymmetric_key_option = 60, 
		RULE_asymmetric_key_option_start = 61, RULE_asymmetric_key_password_change_option = 62, 
		RULE_create_asymmetric_key = 63, RULE_drop_asymmetric_key = 64, RULE_alter_authorization = 65, 
		RULE_authorization_grantee = 66, RULE_entity_to = 67, RULE_colon_colon = 68, 
		RULE_alter_authorization_start = 69, RULE_alter_authorization_for_sql_database = 70, 
		RULE_alter_authorization_for_azure_dw = 71, RULE_alter_authorization_for_parallel_dw = 72, 
		RULE_class_type = 73, RULE_class_type_for_sql_database = 74, RULE_class_type_for_azure_dw = 75, 
		RULE_class_type_for_parallel_dw = 76, RULE_drop_availability_group = 77, 
		RULE_alter_availability_group = 78, RULE_alter_availability_group_start = 79, 
		RULE_alter_availability_group_options = 80, RULE_ip_v4_failover = 81, 
		RULE_ip_v6_failover = 82, RULE_create_or_alter_broker_priority = 83, RULE_drop_broker_priority = 84, 
		RULE_alter_certificate = 85, RULE_alter_column_encryption_key = 86, RULE_create_column_encryption_key = 87, 
		RULE_drop_certificate = 88, RULE_drop_column_encryption_key = 89, RULE_drop_column_master_key = 90, 
		RULE_drop_contract = 91, RULE_drop_credential = 92, RULE_drop_cryptograhic_provider = 93, 
		RULE_drop_database = 94, RULE_drop_database_audit_specification = 95, 
		RULE_drop_database_encryption_key = 96, RULE_drop_database_scoped_credential = 97, 
		RULE_drop_default = 98, RULE_drop_endpoint = 99, RULE_drop_external_data_source = 100, 
		RULE_drop_external_file_format = 101, RULE_drop_external_library = 102, 
		RULE_drop_external_resource_pool = 103, RULE_drop_external_table = 104, 
		RULE_drop_event_notifications = 105, RULE_drop_event_session = 106, RULE_drop_fulltext_catalog = 107, 
		RULE_drop_fulltext_index = 108, RULE_drop_fulltext_stoplist = 109, RULE_drop_login = 110, 
		RULE_drop_master_key = 111, RULE_drop_message_type = 112, RULE_drop_partition_function = 113, 
		RULE_drop_partition_scheme = 114, RULE_drop_queue = 115, RULE_drop_remote_service_binding = 116, 
		RULE_drop_resource_pool = 117, RULE_drop_db_role = 118, RULE_drop_route = 119, 
		RULE_drop_rule = 120, RULE_drop_schema = 121, RULE_drop_search_property_list = 122, 
		RULE_drop_security_policy = 123, RULE_drop_sequence = 124, RULE_drop_server_audit = 125, 
		RULE_drop_server_audit_specification = 126, RULE_drop_server_role = 127, 
		RULE_drop_service = 128, RULE_drop_signature = 129, RULE_drop_statistics_name_azure_dw_and_pdw = 130, 
		RULE_drop_symmetric_key = 131, RULE_drop_synonym = 132, RULE_drop_user = 133, 
		RULE_drop_workload_group = 134, RULE_drop_xml_schema_collection = 135, 
		RULE_disable_trigger = 136, RULE_enable_trigger = 137, RULE_lock_table = 138, 
		RULE_truncate_table = 139, RULE_create_column_master_key = 140, RULE_alter_credential = 141, 
		RULE_create_credential = 142, RULE_alter_cryptographic_provider = 143, 
		RULE_create_cryptographic_provider = 144, RULE_create_event_notification = 145, 
		RULE_create_or_alter_event_session = 146, RULE_event_session_predicate_expression = 147, 
		RULE_event_session_predicate_factor = 148, RULE_event_session_predicate_leaf = 149, 
		RULE_alter_external_data_source = 150, RULE_alter_external_library = 151, 
		RULE_create_external_library = 152, RULE_alter_external_resource_pool = 153, 
		RULE_create_external_resource_pool = 154, RULE_alter_fulltext_catalog = 155, 
		RULE_create_fulltext_catalog = 156, RULE_alter_fulltext_stoplist = 157, 
		RULE_create_fulltext_stoplist = 158, RULE_alter_login_sql_server = 159, 
		RULE_create_login_sql_server = 160, RULE_alter_login_azure_sql = 161, 
		RULE_create_login_azure_sql = 162, RULE_alter_login_azure_sql_dw_and_pdw = 163, 
		RULE_create_login_pdw = 164, RULE_alter_master_key_sql_server = 165, RULE_create_master_key_sql_server = 166, 
		RULE_alter_master_key_azure_sql = 167, RULE_create_master_key_azure_sql = 168, 
		RULE_alter_message_type = 169, RULE_alter_partition_function = 170, RULE_alter_partition_scheme = 171, 
		RULE_alter_remote_service_binding = 172, RULE_create_remote_service_binding = 173, 
		RULE_create_resource_pool = 174, RULE_alter_resource_governor = 175, RULE_alter_db_role = 176, 
		RULE_create_db_role = 177, RULE_create_route = 178, RULE_create_rule = 179, 
		RULE_alter_schema_sql = 180, RULE_create_schema = 181, RULE_create_schema_azure_sql_dw_and_pdw = 182, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 183, RULE_create_search_property_list = 184, 
		RULE_create_security_policy = 185, RULE_alter_sequence = 186, RULE_create_sequence = 187, 
		RULE_alter_server_audit = 188, RULE_create_server_audit = 189, RULE_alter_server_audit_specification = 190, 
		RULE_create_server_audit_specification = 191, RULE_alter_server_configuration = 192, 
		RULE_alter_server_role = 193, RULE_create_server_role = 194, RULE_alter_server_role_pdw = 195, 
		RULE_alter_service = 196, RULE_create_service = 197, RULE_alter_service_master_key = 198, 
		RULE_alter_symmetric_key = 199, RULE_create_synonym = 200, RULE_alter_user = 201, 
		RULE_create_user = 202, RULE_create_user_azure_sql_dw = 203, RULE_alter_user_azure_sql = 204, 
		RULE_alter_workload_group = 205, RULE_create_workload_group = 206, RULE_create_xml_schema_collection = 207, 
		RULE_create_partition_function = 208, RULE_create_partition_scheme = 209, 
		RULE_create_queue = 210, RULE_queue_settings = 211, RULE_alter_queue = 212, 
		RULE_queue_action = 213, RULE_queue_rebuild_options = 214, RULE_create_contract = 215, 
		RULE_conversation_statement = 216, RULE_message_statement = 217, RULE_merge_statement = 218, 
		RULE_when_matches = 219, RULE_merge_matched = 220, RULE_merge_not_matched = 221, 
		RULE_delete_statement = 222, RULE_delete_statement_from = 223, RULE_insert_statement = 224, 
		RULE_insert_statement_value = 225, RULE_receive_statement = 226, RULE_select_statement_standalone = 227, 
		RULE_select_statement = 228, RULE_time = 229, RULE_update_statement = 230, 
		RULE_output_clause = 231, RULE_output_dml_list_elem = 232, RULE_create_database = 233, 
		RULE_create_index = 234, RULE_create_xml_index = 235, RULE_create_or_alter_procedure = 236, 
		RULE_as_external_name = 237, RULE_create_or_alter_trigger = 238, RULE_create_or_alter_dml_trigger = 239, 
		RULE_dml_trigger_option = 240, RULE_dml_trigger_operation = 241, RULE_create_or_alter_ddl_trigger = 242, 
		RULE_ddl_trigger_operation = 243, RULE_create_or_alter_function = 244, 
		RULE_func_body_returns_select = 245, RULE_func_body_returns_table = 246, 
		RULE_func_body_returns_scalar = 247, RULE_procedure_param = 248, RULE_procedure_option = 249, 
		RULE_function_option = 250, RULE_create_statistics = 251, RULE_update_statistics = 252, 
		RULE_create_table = 253, RULE_table_indices = 254, RULE_table_options = 255, 
		RULE_create_view = 256, RULE_view_attribute = 257, RULE_alter_table = 258, 
		RULE_switch_partition = 259, RULE_low_priority_lock_wait = 260, RULE_alter_database = 261, 
		RULE_add_or_modify_files = 262, RULE_filespec = 263, RULE_add_or_modify_filegroups = 264, 
		RULE_filegroup_updatability_option = 265, RULE_database_optionspec = 266, 
		RULE_auto_option = 267, RULE_change_tracking_option = 268, RULE_change_tracking_option_list = 269, 
		RULE_containment_option = 270, RULE_cursor_option = 271, RULE_alter_endpoint = 272, 
		RULE_database_mirroring_option = 273, RULE_mirroring_set_option = 274, 
		RULE_mirroring_partner = 275, RULE_mirroring_witness = 276, RULE_witness_partner_equal = 277, 
		RULE_partner_option = 278, RULE_witness_option = 279, RULE_witness_server = 280, 
		RULE_partner_server = 281, RULE_mirroring_host_port_seperator = 282, RULE_partner_server_tcp_prefix = 283, 
		RULE_port_number = 284, RULE_host = 285, RULE_date_correlation_optimization_option = 286, 
		RULE_db_encryption_option = 287, RULE_db_state_option = 288, RULE_db_update_option = 289, 
		RULE_db_user_access_option = 290, RULE_delayed_durability_option = 291, 
		RULE_external_access_option = 292, RULE_hadr_options = 293, RULE_mixed_page_allocation_option = 294, 
		RULE_parameterization_option = 295, RULE_recovery_option = 296, RULE_service_broker_option = 297, 
		RULE_snapshot_option = 298, RULE_sql_option = 299, RULE_target_recovery_time_option = 300, 
		RULE_termination = 301, RULE_drop_index = 302, RULE_drop_relational_or_xml_or_spatial_index = 303, 
		RULE_drop_backward_compatible_index = 304, RULE_drop_procedure = 305, 
		RULE_drop_trigger = 306, RULE_drop_dml_trigger = 307, RULE_drop_ddl_trigger = 308, 
		RULE_drop_function = 309, RULE_drop_statistics = 310, RULE_drop_table = 311, 
		RULE_drop_view = 312, RULE_create_type = 313, RULE_drop_type = 314, RULE_rowset_function_limited = 315, 
		RULE_openquery = 316, RULE_opendatasource = 317, RULE_declare_statement = 318, 
		RULE_xml_declaration = 319, RULE_cursor_statement = 320, RULE_backup_database = 321, 
		RULE_backup_log = 322, RULE_backup_certificate = 323, RULE_backup_master_key = 324, 
		RULE_backup_service_master_key = 325, RULE_kill_statement = 326, RULE_kill_process = 327, 
		RULE_kill_query_notification = 328, RULE_kill_stats_job = 329, RULE_execute_statement = 330, 
		RULE_execute_body_batch = 331, RULE_execute_body = 332, RULE_execute_statement_arg = 333, 
		RULE_execute_statement_arg_named = 334, RULE_execute_statement_arg_unnamed = 335, 
		RULE_execute_parameter = 336, RULE_execute_var_string = 337, RULE_security_statement = 338, 
		RULE_principal_id = 339, RULE_create_certificate = 340, RULE_existing_keys = 341, 
		RULE_private_key_options = 342, RULE_generate_new_keys = 343, RULE_date_options = 344, 
		RULE_open_key = 345, RULE_close_key = 346, RULE_create_key = 347, RULE_key_options = 348, 
		RULE_algorithm = 349, RULE_encryption_mechanism = 350, RULE_decryption_mechanism = 351, 
		RULE_grant_permission = 352, RULE_set_statement = 353, RULE_transaction_statement = 354, 
		RULE_go_batch_statement = 355, RULE_go_statement = 356, RULE_use_statement = 357, 
		RULE_setuser_statement = 358, RULE_reconfigure_statement = 359, RULE_shutdown_statement = 360, 
		RULE_dbcc_special = 361, RULE_dbcc_clause = 362, RULE_dbcc_command = 363, 
		RULE_dbcc_options = 364, RULE_execute_clause = 365, RULE_declare_local = 366, 
		RULE_table_type_definition = 367, RULE_table_type_indices = 368, RULE_xml_type_definition = 369, 
		RULE_xml_schema_collection = 370, RULE_column_def_table_constraints = 371, 
		RULE_column_def_table_constraint = 372, RULE_column_definition = 373, 
		RULE_materialized_column_definition = 374, RULE_column_constraint = 375, 
		RULE_table_constraint = 376, RULE_on_delete = 377, RULE_on_update = 378, 
		RULE_index_options = 379, RULE_index_option = 380, RULE_declare_cursor = 381, 
		RULE_declare_set_cursor_common = 382, RULE_declare_set_cursor_common_partial = 383, 
		RULE_fetch_cursor = 384, RULE_set_special = 385, RULE_constant_LOCAL_ID = 386, 
		RULE_expression = 387, RULE_time_zone = 388, RULE_primitive_expression = 389, 
		RULE_case_expression = 390, RULE_unary_operator_expression = 391, RULE_bracket_expression = 392, 
		RULE_constant_expression = 393, RULE_subquery = 394, RULE_with_expression = 395, 
		RULE_common_table_expression = 396, RULE_update_elem = 397, RULE_update_elem_merge = 398, 
		RULE_search_condition = 399, RULE_predicate = 400, RULE_query_expression = 401, 
		RULE_sql_union = 402, RULE_query_specification = 403, RULE_top_clause = 404, 
		RULE_top_percent = 405, RULE_top_count = 406, RULE_order_by_clause = 407, 
		RULE_for_clause = 408, RULE_xml_common_directives = 409, RULE_order_by_expression = 410, 
		RULE_group_by_item = 411, RULE_option_clause = 412, RULE_option = 413, 
		RULE_optimize_for_arg = 414, RULE_select_list = 415, RULE_udt_method_arguments = 416, 
		RULE_asterisk = 417, RULE_column_elem = 418, RULE_udt_elem = 419, RULE_expression_elem = 420, 
		RULE_select_list_elem = 421, RULE_table_sources = 422, RULE_table_source = 423, 
		RULE_table_source_item_joined = 424, RULE_table_source_item = 425, RULE_open_xml = 426, 
		RULE_open_json = 427, RULE_json_declaration = 428, RULE_json_column_declaration = 429, 
		RULE_schema_declaration = 430, RULE_column_declaration = 431, RULE_change_table = 432, 
		RULE_change_table_changes = 433, RULE_change_table_version = 434, RULE_join_part = 435, 
		RULE_join_on = 436, RULE_cross_join = 437, RULE_apply_ = 438, RULE_pivot = 439, 
		RULE_unpivot = 440, RULE_pivot_clause = 441, RULE_unpivot_clause = 442, 
		RULE_full_column_name_list = 443, RULE_table_name_with_hint = 444, RULE_rowset_function = 445, 
		RULE_bulk_option = 446, RULE_derived_table = 447, RULE_function_call = 448, 
		RULE_partition_function = 449, RULE_freetext_function = 450, RULE_freetext_predicate = 451, 
		RULE_built_in_functions = 452, RULE_xml_data_type_methods = 453, RULE_value_method = 454, 
		RULE_value_call = 455, RULE_query_method = 456, RULE_query_call = 457, 
		RULE_exist_method = 458, RULE_exist_call = 459, RULE_modify_method = 460, 
		RULE_modify_call = 461, RULE_nodes_method = 462, RULE_switch_section = 463, 
		RULE_switch_search_condition_section = 464, RULE_as_column_alias = 465, 
		RULE_as_table_alias = 466, RULE_table_alias = 467, RULE_with_table_hints = 468, 
		RULE_insert_with_table_hints = 469, RULE_table_hint = 470, RULE_index_value = 471, 
		RULE_column_alias_list = 472, RULE_column_alias = 473, RULE_table_value_constructor = 474, 
		RULE_expression_list = 475, RULE_ranking_windowed_function = 476, RULE_aggregate_windowed_function = 477, 
		RULE_analytic_windowed_function = 478, RULE_all_distinct_expression = 479, 
		RULE_over_clause = 480, RULE_row_or_range_clause = 481, RULE_window_frame_extent = 482, 
		RULE_window_frame_bound = 483, RULE_window_frame_preceding = 484, RULE_window_frame_following = 485, 
		RULE_create_database_option = 486, RULE_database_filestream_option = 487, 
		RULE_database_file_spec = 488, RULE_file_group = 489, RULE_file_spec = 490, 
		RULE_entity_name = 491, RULE_entity_name_for_azure_dw = 492, RULE_entity_name_for_parallel_dw = 493, 
		RULE_full_table_name = 494, RULE_table_name = 495, RULE_simple_name = 496, 
		RULE_func_proc_name_schema = 497, RULE_func_proc_name_database_schema = 498, 
		RULE_func_proc_name_server_database_schema = 499, RULE_ddl_object = 500, 
		RULE_full_column_name = 501, RULE_column_name_list_with_order = 502, RULE_insert_column_name_list = 503, 
		RULE_insert_column_id = 504, RULE_column_name_list = 505, RULE_cursor_name = 506, 
		RULE_on_off = 507, RULE_clustered = 508, RULE_null_notnull = 509, RULE_null_or_default = 510, 
		RULE_scalar_function_name = 511, RULE_begin_conversation_timer = 512, 
		RULE_begin_conversation_dialog = 513, RULE_contract_name = 514, RULE_service_name = 515, 
		RULE_end_conversation = 516, RULE_waitfor_conversation = 517, RULE_get_conversation = 518, 
		RULE_queue_id = 519, RULE_send_conversation = 520, RULE_data_type = 521, 
		RULE_default_value = 522, RULE_constant = 523, RULE_sign = 524, RULE_keyword = 525, 
		RULE_id_ = 526, RULE_simple_id = 527, RULE_id_or_string = 528, RULE_comparison_operator = 529, 
		RULE_assignment_operator = 530, RULE_file_size = 531;
	public static final String[] ruleNames = {
		"tsql_file", "batch", "batch_level_statement", "sql_clauses", "dml_clause", 
		"ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
		"break_statement", "continue_statement", "goto_statement", "return_statement", 
		"if_statement", "throw_statement", "throw_error_number", "throw_message", 
		"throw_state", "try_catch_statement", "waitfor_statement", "while_statement", 
		"print_statement", "raiseerror_statement", "empty_statement", "another_statement", 
		"alter_application_role", "create_application_role", "drop_aggregate", 
		"drop_application_role", "alter_assembly", "alter_assembly_start", "alter_assembly_clause", 
		"alter_assembly_from_clause", "alter_assembly_from_clause_start", "alter_assembly_drop_clause", 
		"alter_assembly_drop_multiple_files", "alter_assembly_drop", "alter_assembly_add_clause", 
		"alter_asssembly_add_clause_start", "alter_assembly_client_file_clause", 
		"alter_assembly_file_name", "alter_assembly_file_bits", "alter_assembly_as", 
		"alter_assembly_with_clause", "alter_assembly_with", "client_assembly_specifier", 
		"assembly_option", "network_file_share", "network_computer", "network_file_start", 
		"file_path", "file_directory_path_separator", "local_file", "local_drive", 
		"multiple_local_files", "multiple_local_file_start", "create_assembly", 
		"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "drop_availability_group", 
		"alter_availability_group", "alter_availability_group_start", "alter_availability_group_options", 
		"ip_v4_failover", "ip_v6_failover", "create_or_alter_broker_priority", 
		"drop_broker_priority", "alter_certificate", "alter_column_encryption_key", 
		"create_column_encryption_key", "drop_certificate", "drop_column_encryption_key", 
		"drop_column_master_key", "drop_contract", "drop_credential", "drop_cryptograhic_provider", 
		"drop_database", "drop_database_audit_specification", "drop_database_encryption_key", 
		"drop_database_scoped_credential", "drop_default", "drop_endpoint", "drop_external_data_source", 
		"drop_external_file_format", "drop_external_library", "drop_external_resource_pool", 
		"drop_external_table", "drop_event_notifications", "drop_event_session", 
		"drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
		"drop_login", "drop_master_key", "drop_message_type", "drop_partition_function", 
		"drop_partition_scheme", "drop_queue", "drop_remote_service_binding", 
		"drop_resource_pool", "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
		"drop_search_property_list", "drop_security_policy", "drop_sequence", 
		"drop_server_audit", "drop_server_audit_specification", "drop_server_role", 
		"drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_event_notification", 
		"create_or_alter_event_session", "event_session_predicate_expression", 
		"event_session_predicate_factor", "event_session_predicate_leaf", "alter_external_data_source", 
		"alter_external_library", "create_external_library", "alter_external_resource_pool", 
		"create_external_resource_pool", "alter_fulltext_catalog", "create_fulltext_catalog", 
		"alter_fulltext_stoplist", "create_fulltext_stoplist", "alter_login_sql_server", 
		"create_login_sql_server", "alter_login_azure_sql", "create_login_azure_sql", 
		"alter_login_azure_sql_dw_and_pdw", "create_login_pdw", "alter_master_key_sql_server", 
		"create_master_key_sql_server", "alter_master_key_azure_sql", "create_master_key_azure_sql", 
		"alter_message_type", "alter_partition_function", "alter_partition_scheme", 
		"alter_remote_service_binding", "create_remote_service_binding", "create_resource_pool", 
		"alter_resource_governor", "alter_db_role", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
		"alter_symmetric_key", "create_synonym", "alter_user", "create_user", 
		"create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_partition_function", 
		"create_partition_scheme", "create_queue", "queue_settings", "alter_queue", 
		"queue_action", "queue_rebuild_options", "create_contract", "conversation_statement", 
		"message_statement", "merge_statement", "when_matches", "merge_matched", 
		"merge_not_matched", "delete_statement", "delete_statement_from", "insert_statement", 
		"insert_statement_value", "receive_statement", "select_statement_standalone", 
		"select_statement", "time", "update_statement", "output_clause", "output_dml_list_elem", 
		"create_database", "create_index", "create_xml_index", "create_or_alter_procedure", 
		"as_external_name", "create_or_alter_trigger", "create_or_alter_dml_trigger", 
		"dml_trigger_option", "dml_trigger_operation", "create_or_alter_ddl_trigger", 
		"ddl_trigger_operation", "create_or_alter_function", "func_body_returns_select", 
		"func_body_returns_table", "func_body_returns_scalar", "procedure_param", 
		"procedure_option", "function_option", "create_statistics", "update_statistics", 
		"create_table", "table_indices", "table_options", "create_view", "view_attribute", 
		"alter_table", "switch_partition", "low_priority_lock_wait", "alter_database", 
		"add_or_modify_files", "filespec", "add_or_modify_filegroups", "filegroup_updatability_option", 
		"database_optionspec", "auto_option", "change_tracking_option", "change_tracking_option_list", 
		"containment_option", "cursor_option", "alter_endpoint", "database_mirroring_option", 
		"mirroring_set_option", "mirroring_partner", "mirroring_witness", "witness_partner_equal", 
		"partner_option", "witness_option", "witness_server", "partner_server", 
		"mirroring_host_port_seperator", "partner_server_tcp_prefix", "port_number", 
		"host", "date_correlation_optimization_option", "db_encryption_option", 
		"db_state_option", "db_update_option", "db_user_access_option", "delayed_durability_option", 
		"external_access_option", "hadr_options", "mixed_page_allocation_option", 
		"parameterization_option", "recovery_option", "service_broker_option", 
		"snapshot_option", "sql_option", "target_recovery_time_option", "termination", 
		"drop_index", "drop_relational_or_xml_or_spatial_index", "drop_backward_compatible_index", 
		"drop_procedure", "drop_trigger", "drop_dml_trigger", "drop_ddl_trigger", 
		"drop_function", "drop_statistics", "drop_table", "drop_view", "create_type", 
		"drop_type", "rowset_function_limited", "openquery", "opendatasource", 
		"declare_statement", "xml_declaration", "cursor_statement", "backup_database", 
		"backup_log", "backup_certificate", "backup_master_key", "backup_service_master_key", 
		"kill_statement", "kill_process", "kill_query_notification", "kill_stats_job", 
		"execute_statement", "execute_body_batch", "execute_body", "execute_statement_arg", 
		"execute_statement_arg_named", "execute_statement_arg_unnamed", "execute_parameter", 
		"execute_var_string", "security_statement", "principal_id", "create_certificate", 
		"existing_keys", "private_key_options", "generate_new_keys", "date_options", 
		"open_key", "close_key", "create_key", "key_options", "algorithm", "encryption_mechanism", 
		"decryption_mechanism", "grant_permission", "set_statement", "transaction_statement", 
		"go_batch_statement", "go_statement", "use_statement", "setuser_statement", 
		"reconfigure_statement", "shutdown_statement", "dbcc_special", "dbcc_clause", 
		"dbcc_command", "dbcc_options", "execute_clause", "declare_local", "table_type_definition", 
		"table_type_indices", "xml_type_definition", "xml_schema_collection", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"materialized_column_definition", "column_constraint", "table_constraint", 
		"on_delete", "on_update", "index_options", "index_option", "declare_cursor", 
		"declare_set_cursor_common", "declare_set_cursor_common_partial", "fetch_cursor", 
		"set_special", "constant_LOCAL_ID", "expression", "time_zone", "primitive_expression", 
		"case_expression", "unary_operator_expression", "bracket_expression", 
		"constant_expression", "subquery", "with_expression", "common_table_expression", 
		"update_elem", "update_elem_merge", "search_condition", "predicate", "query_expression", 
		"sql_union", "query_specification", "top_clause", "top_percent", "top_count", 
		"order_by_clause", "for_clause", "xml_common_directives", "order_by_expression", 
		"group_by_item", "option_clause", "option", "optimize_for_arg", "select_list", 
		"udt_method_arguments", "asterisk", "column_elem", "udt_elem", "expression_elem", 
		"select_list_elem", "table_sources", "table_source", "table_source_item_joined", 
		"table_source_item", "open_xml", "open_json", "json_declaration", "json_column_declaration", 
		"schema_declaration", "column_declaration", "change_table", "change_table_changes", 
		"change_table_version", "join_part", "join_on", "cross_join", "apply_", 
		"pivot", "unpivot", "pivot_clause", "unpivot_clause", "full_column_name_list", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "partition_function", "freetext_function", "freetext_predicate", 
		"built_in_functions", "xml_data_type_methods", "value_method", "value_call", 
		"query_method", "query_call", "exist_method", "exist_call", "modify_method", 
		"modify_call", "nodes_method", "switch_section", "switch_search_condition_section", 
		"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
		"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
		"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function", 
		"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
		"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
		"window_frame_preceding", "window_frame_following", "create_database_option", 
		"database_filestream_option", "database_file_spec", "file_group", "file_spec", 
		"entity_name", "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
		"full_table_name", "table_name", "simple_name", "func_proc_name_schema", 
		"func_proc_name_database_schema", "func_proc_name_server_database_schema", 
		"ddl_object", "full_column_name", "column_name_list_with_order", "insert_column_name_list", 
		"insert_column_id", "column_name_list", "cursor_name", "on_off", "clustered", 
		"null_notnull", "null_or_default", "scalar_function_name", "begin_conversation_timer", 
		"begin_conversation_dialog", "contract_name", "service_name", "end_conversation", 
		"waitfor_conversation", "get_conversation", "queue_id", "send_conversation", 
		"data_type", "default_value", "constant", "sign", "keyword", "id_", "simple_id", 
		"id_or_string", "comparison_operator", "assignment_operator", "file_size"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'ADD'", "'ALL'", "'ALTER'", "'AND'", "'ANY'", "'AS'", "'ASC'", 
		"'AUTHORIZATION'", "'\\'", "'BACKUP'", "'BEGIN'", "'BETWEEN'", "'BREAK'", 
		"'BROWSE'", "'BULK'", "'BY'", "'CASCADE'", "'CASE'", "'CHECK'", "'CHECKPOINT'", 
		"'CLOSE'", "'CLUSTERED'", "'COALESCE'", "'COLLATE'", "'COLUMN'", "'COMMIT'", 
		"'COMPUTE'", "'CONSTRAINT'", "'CONTAINS'", "'CONTAINSTABLE'", "'CONTINUE'", 
		null, "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DBCC'", 
		"'DEALLOCATE'", "'DECLARE'", "'DEFAULT'", "'DELETE'", "'DENY'", "'DESC'", 
		"'DISK'", "'DISTINCT'", "'DISTRIBUTED'", "'DOUBLE'", "'\\\\'", "'//'", 
		"'DROP'", "'DUMP'", "'ELSE'", "'END'", "'ERRLVL'", "'ESCAPE'", "'EXCEPT'", 
		null, "'EXISTS'", "'EXIT'", "'EXTERNAL'", "'FETCH'", "'FILE'", "'FILLFACTOR'", 
		"'FOR'", "'FOREIGN'", "'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", 
		"'FUNCTION'", "'GOTO'", "'GRANT'", "'GROUP'", "'HAVING'", "'HOLDLOCK'", 
		"'IDENTITY'", "'IDENTITY_INSERT'", "'IDENTITYCOL'", "'IF'", "'IN'", "'INDEX'", 
		"'INNER'", "'INSERT'", "'INTERSECT'", "'INTO'", "'IS'", "'JOIN'", "'KEY'", 
		"'KILL'", "'LEFT'", "'LIKE'", "'LINENO'", "'LOAD'", "'MERGE'", "'NATIONAL'", 
		"'NEGOTIATE'", "'NOCHECK'", "'NONCLUSTERED'", "'NOT'", "'NULL'", "'NULLIF'", 
		"'OF'", "'OFF'", "'OFFSETS'", "'ON'", "'OPEN'", "'OPENDATASOURCE'", "'OPENQUERY'", 
		"'OPENROWSET'", "'OPENJSON'", "'OPENXML'", "'OPTION'", "'OR'", "'ORDER'", 
		"'OUTER'", "'OVER'", "'PERCENT'", "'PIVOT'", "'PLAN'", "'PRECISION'", 
		"'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", "'PUBLIC'", "'RAISERROR'", 
		"'RAW'", "'READ'", "'READTEXT'", "'RECONFIGURE'", "'REFERENCES'", "'REPLICATION'", 
		"'RESTORE'", "'RESTRICT'", "'RETURN'", "'REVERT'", "'REVOKE'", "'RIGHT'", 
		"'ROLLBACK'", "'ROWCOUNT'", "'ROWGUIDCOL'", "'RULE'", "'SAVE'", "'SCHEMA'", 
		"'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
		"'SEMANTICSIMILARITYTABLE'", "'SESSION_USER'", "'SET'", "'SETUSER'", "'SHUTDOWN'", 
		"'SOME'", "'STATISTICS'", "'SYSTEM_USER'", "'TABLE'", "'TABLESAMPLE'", 
		"'TEXTSIZE'", "'THEN'", "'TO'", "'TOP'", "'TRAN'", "'TRANSACTION'", "'TRIGGER'", 
		"'TRUNCATE'", "'TSEQUAL'", "'UNION'", "'UNIQUE'", "'UNPIVOT'", "'UPDATE'", 
		"'UPDATETEXT'", "'USE'", "'USER'", "'VALUES'", "'VARYING'", "'VIEW'", 
		"'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WITHIN'", "'WRITETEXT'", 
		"'$PARTITION'", "'ABSOLUTE'", "'AT'", "'ACCENT_SENSITIVITY'", "'ACTION'", 
		"'ACTIVATION'", "'ACTIVE'", "'ADDRESS'", "'AES_128'", "'AES_192'", "'AES_256'", 
		"'AFFINITY'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_SNAPSHOT_ISOLATION'", "'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", 
		"'ANSI_PADDING'", "'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", 
		"'ASSEMBLY'", "'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
		"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
		"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AUTOGROW_ALL_FILES'", "'AUTOGROW_SINGLE_FILE'", 
		"'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", "'BEGIN_DIALOG'", "'BIGINT'", 
		"'BINARY'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", "'BINDING'", "'BLOB_STORAGE'", 
		"'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", "'CALLER'", "'CAP_CPU_PERCENT'", 
		"'CAST'", "'TRY_CAST'", "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", 
		"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
		"'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", "'CONCAT'", 
		"'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", "'COUNT'", 
		"'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
		"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CUME_DIST'", "'CURSOR_CLOSE_ON_COMMIT'", 
		"'CURSOR_DEFAULT'", "'DATA'", "'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", 
		"'DATEDIFF'", "'DATENAME'", "'DATEPART'", "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", 
		"'DECRYPTION'", null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", 
		"'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", "'DEPENDENTS'", 
		"'DES'", "'DESCRIPTION'", "'DESX'", "'DHCP'", "'DIALOG'", "'DIRECTORY_NAME'", 
		"'DISABLE'", "'DISABLE_BROKER'", "'DISABLED'", null, "'DOCUMENT'", "'DYNAMIC'", 
		"'ELEMENTS'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLE_BROKER'", 
		"'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'", 
		"'EXCLUSIVE'", "'EXECUTABLE'", "'EXIST'", "'EXPAND'", "'EXPIRY_DATE'", 
		"'EXPLICIT'", "'FAIL_OPERATION'", "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
		"'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", "'FILENAME'", 
		"'FILEPATH'", "'FILESTREAM'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", 
		"'FOLLOWING'", "'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCED'", 
		"'FORMAT'", "'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", "'GB'", "'GETDATE'", 
		"'GETUTCDATE'", "'GLOBAL'", null, "'GO'", "'GROUP_MAX_REQUESTS'", "'GROUPING'", 
		"'GROUPING_ID'", "'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", "'HIGH'", 
		"'HONOR_BROKER_PRIORITY'", "'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
		"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
		"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
		"'INT'", "'IP'", "'ISOLATION'", "'JOB'", "'JSON'", "'KB'", "'KEEP'", "'KEEPFIXED'", 
		"'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", "'LAST_VALUE'", 
		"'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", "'LOB_COMPACTION'", 
		"'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", 
		"'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", "'MAX'", "'MAX_CPU_PERCENT'", 
		"'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY_PERCENT'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAXDOP'", 
		"'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
		"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
		"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
		"'NEWNAME'", "'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", 
		"'NODES'", "'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
		"'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
		"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
		"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
		"'OVERRIDE'", "'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", 
		"'PARTITIONS'", "'PARTNER'", "'PATH'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
		"'PERCENTILE_DISC'", "'POISON_MESSAGE_HANDLING'", "'POOL'", "'PORT'", 
		"'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
		"'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
		"'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", "'QUEUE_DELAY'", 
		"'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
		"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READONLY'", "'READWRITE'", "'REBUILD'", "'RECEIVE'", 
		"'RECOMPILE'", "'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", 
		"'REMOTE_SERVICE_NAME'", "'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", 
		"'REQUEST_MAX_CPU_TIME_SEC'", "'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
		"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
		"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
		"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
		"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
		"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
		"'SECRET'", "'SECURITY'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", 
		"'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", "'SERIALIZABLE'", 
		"'SESSION_TIMEOUT'", "'SETERROR'", "'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", 
		"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", 
		"'STANDBY'", "'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", 
		"'STATUSONLY'", "'STDEV'", "'STDEVP'", "'STOPLIST'", "'STRING_AGG'", "'STUFF'", 
		"'SUBJECT'", "'SUBSCRIPTION'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", 
		"'SYNONYM'", "'SYSTEM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", "'TB'", "'TEXTIMAGE_ON'", 
		"'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", "'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", 
		"'TRANSFORM_NOISE_WORDS'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", 
		"'TRY'", "'TSQL'", "'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", 
		"'UNBOUNDED'", "'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'UOW'", "'USING'", 
		"'VALID_XML'", "'VALIDATION'", "'VALUE'", "'VAR'", "'VARBINARY'", "'VARP'", 
		"'VIEW_METADATA'", "'VIEWS'", "'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", 
		"'WORK'", "'WORKLOAD'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", 
		"'XSINIL'", "'ZONE'", "'$ACTION'", "'ABORT_AFTER_WAIT'", "'ABSENT'", "'AES'", 
		"'ALLOW_CONNECTIONS'", "'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_SINGLE_EVENT_LOSS'", 
		"'ANONYMOUS'", "'APPEND'", "'APPLICATION'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", 
		"'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", "'AUTOMATIC'", "'AVAILABILITY_MODE'", 
		"'BEFORE'", "'BLOCK'", "'BLOCKERS'", "'BLOCKSIZE'", "'BLOCKING_HIERARCHY'", 
		"'BUFFER'", "'BUFFERCOUNT'", "'CACHE'", "'CALLED'", "'CERTIFICATE'", "'CHANGETABLE'", 
		"'CHANGES'", "'CHECK_POLICY'", "'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", 
		"'CLUSTER'", "'COMPRESSION'", "'CONFIGURATION'", "'CONTAINMENT'", "'CONTEXT'", 
		"'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", "'CONVERSATION'", 
		"'COPY_ONLY'", "'CYCLE'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", "'DATABASE_MIRRORING'", 
		"'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", 
		"'DTC_SUPPORT'", "'ENABLED'", "'ENDPOINT'", "'ERROR'", "'EVENT'", null, 
		"'EVENT_RETENTION_MODE'", "'EXECUTABLE_FILE'", "'EXPIREDATE'", "'EXTENSION'", 
		"'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", "'FAN_IN'", 
		"'FILE_SNAPSHOT'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", "'GET'", 
		"'GOVERNOR'", "'HASHED'", "'HEALTHCHECKTIMEOUT'", "'IIF'", "'IO'", "'INCLUDE'", 
		"'INCREMENT'", "'INFINITE'", "'INIT'", "'INSTEAD'", "'ISNULL'", "'KERBEROS'", 
		"'KEY_PATH'", "'KEY_STORE_PROVIDER_NAME'", "'LANGUAGE'", "'LIBRARY'", 
		"'LIFETIME'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", "'LOCAL_SERVICE_NAME'", 
		"'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", "'MAXTRANSFER'", "'MAXVALUE'", 
		"'MAX_DISPATCH_LATENCY'", "'MAX_DURATION'", "'MAX_EVENT_SIZE'", "'MAX_SIZE'", 
		"'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", "'MEDIANAME'", 
		"'MEMBER'", "'MEMORY_PARTITION_MODE'", "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", 
		"'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", "'NOFORMAT'", "'NOINIT'", "'NONE'", 
		"'NOREWIND'", "'NOSKIP'", "'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", 
		"'NO_EVENT_LOSS'", "'NOTIFICATION'", "'NTLM'", "'OLD_PASSWORD'", "'ON_FAILURE'", 
		"'PAGE'", "'PARAM_NODE'", "'PARTIAL'", "'PASSWORD'", "'PERMISSION_SET'", 
		"'PER_CPU'", "'PER_DB'", "'PER_NODE'", "'PERSISTED'", "'PLATFORM'", "'POLICY'", 
		"'PREDICATE'", "'PROCESS'", "'PROFILE'", "'PYTHON'", "'R'", "'READ_WRITE_FILEGROUPS'", 
		"'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
		"'REQUIRED'", "'RESET'", "'RESTART'", "'RESUME'", "'RETAINDAYS'", "'RETURNS'", 
		"'REWIND'", "'ROLE'", "'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", 
		"'RSA_4096'", "'SAFETY'", "'SAFE'", "'SCHEDULER'", "'SCHEME'", "'SERVER'", 
		"'SERVICE'", "'SERVICE_BROKER'", "'SERVICE_NAME'", "'SESSION'", "'SHRINKLOG'", 
		"'SID'", "'SKIP'", "'SOFTNUMA'", "'SOURCE'", "'SPECIFICATION'", "'SPLIT'", 
		"'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", "'STATE'", 
		"'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", "'STOP'", "'STOPPED'", 
		"'STOP_ON_ERROR'", "'SUPPORTED'", "'SWITCH'", "'TAPE'", "'TARGET'", "'TCP'", 
		"'TRACK_CAUSALITY'", "'TRANSFER'", "'UNCHECKED'", "'UNLOCK'", "'UNSAFE'", 
		"'URL'", "'USED'", "'VERBOSELOGGING'", "'VISIBILITY'", "'WAIT_AT_LOW_PRIORITY'", 
		"'WINDOWS'", "'WITHOUT'", "'WITNESS'", "'VARCHAR'", "'NVARCHAR'", null, 
		null, null, null, "'''", null, null, null, null, null, null, null, null, 
		"'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
		"'^='", "'|='", "'||'", "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", 
		"','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", 
		"'&'", "'^'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "AUTHORIZATION", 
		"BACKSLASH", "BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", 
		"BY", "CASCADE", "CASE", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED", 
		"COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINS", 
		"CONTAINSTABLE", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", 
		"DATABASE", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", "DENY", 
		"DESC", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
		"DOUBLE_FORWARD_SLASH", "DROP", "DUMP", "ELSE", "END", "ERRLVL", "ESCAPE", 
		"EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXTERNAL", "FETCH", "FILE", "FILLFACTOR", 
		"FOR", "FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", 
		"GOTO", "GRANT", "GROUP", "HAVING", "HOLDLOCK", "IDENTITY", "IDENTITY_INSERT", 
		"IDENTITYCOL", "IF", "IN", "INDEX", "INNER", "INSERT", "INTERSECT", "INTO", 
		"IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", "LINENO", "LOAD", "MERGE", 
		"NATIONAL", "NEGOTIATE", "NOCHECK", "NONCLUSTERED", "NOT", "NULL_", "NULLIF", 
		"OF", "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", 
		"OPENJSON", "OPENXML", "OPTION", "OR", "ORDER", "OUTER", "OVER", "PERCENT", 
		"PIVOT", "PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", 
		"PUBLIC", "RAISERROR", "RAW", "READ", "READTEXT", "RECONFIGURE", "REFERENCES", 
		"REPLICATION", "RESTORE", "RESTRICT", "RETURN", "REVERT", "REVOKE", "RIGHT", 
		"ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", "SECURITYAUDIT", 
		"SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
		"SEMANTICSIMILARITYTABLE", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", 
		"SOME", "STATISTICS", "SYSTEM_USER", "TABLE", "TABLESAMPLE", "TEXTSIZE", 
		"THEN", "TO", "TOP", "TRAN", "TRANSACTION", "TRIGGER", "TRUNCATE", "TSEQUAL", 
		"UNION", "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", "USE", "USER", "VALUES", 
		"VARYING", "VIEW", "WAITFOR", "WHEN", "WHERE", "WHILE", "WITH", "WITHIN", 
		"WRITETEXT", "DOLLAR_PARTITION", "ABSOLUTE", "AT_KEYWORD", "ACCENT_SENSITIVITY", 
		"ACTION", "ACTIVATION", "ACTIVE", "ADDRESS", "AES_128", "AES_192", "AES_256", 
		"AFFINITY", "AFTER", "AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
		"ALLOW_SNAPSHOT_ISOLATION", "ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", 
		"ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG", "APPLY", "ARITHABORT", 
		"ASSEMBLY", "AUDIT", "AUDIT_GUID", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", 
		"AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
		"AUTOGROW_ALL_FILES", "AUTOGROW_SINGLE_FILE", "AVAILABILITY", "AVG", "BACKUP_PRIORITY", 
		"BEGIN_DIALOG", "BIGINT", "BINARY_KEYWORD", "BINARY_BASE64", "BINARY_CHECKSUM", 
		"BINDING", "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BULK_LOGGED", 
		"CALLER", "CAP_CPU_PERCENT", "CAST", "TRY_CAST", "CATALOG", "CATCH", "CHANGE_RETENTION", 
		"CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", "COLLECTION", 
		"COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
		"CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "COUNTER", "CPU", 
		"CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", "CRYPTOGRAPHIC", "CUME_DIST", 
		"CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", "DATA", "DATE_CORRELATION_OPTIMIZATION", 
		"DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DAYS", "DB_CHAINING", 
		"DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
		"DEPENDENTS", "DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", 
		"DISABLE", "DISABLE_BROKER", "DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", 
		"ELEMENTS", "EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", 
		"ENCRYPTION", "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", 
		"EXECUTABLE", "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", 
		"FAILOVER_MODE", "FAILURE", "FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", 
		"FILEGROUP", "FILEGROWTH", "FILENAME", "FILEPATH", "FILESTREAM", "FILTER", 
		"FIRST", "FIRST_VALUE", "FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
		"FORCED", "FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", 
		"GETUTCDATE", "GLOBAL", "GO_BATCH", "GO", "GROUP_MAX_REQUESTS", "GROUPING", 
		"GROUPING_ID", "HADR", "HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", 
		"HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
		"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JOB", "JSON", 
		"KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", "LAST", 
		"LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", 
		"MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", "MAX_DOP", 
		"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
		"MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
		"MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", 
		"MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
		"NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
		"NEWNAME", "NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", 
		"NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOWAIT", 
		"NTILE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", 
		"OFFSET", "OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", "OPTIMISTIC", 
		"OPTIMIZE", "OUT", "OUTPUT", "OVERRIDE", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", 
		"PARTITION", "PARTITIONS", "PARTNER", "PATH", "PERCENT_RANK", "PERCENTILE_CONT", 
		"PERCENTILE_DISC", "POISON_MESSAGE_HANDLING", "POOL", "PORT", "PRECEDING", 
		"PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", "PRIVATE", "PRIVATE_KEY", 
		"PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", "PROVIDER", "PROVIDER_KEY_NAME", 
		"QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", "RANGE", "RANK", 
		"RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", "READ_ONLY_ROUTING_LIST", 
		"READ_WRITE", "READONLY", "READWRITE", "REBUILD", "RECEIVE", "RECOMPILE", 
		"RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REMOTE_SERVICE_NAME", 
		"REMOVE", "REORGANIZE", "REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", 
		"REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESERVE_DISK_SPACE", "RESOURCE", 
		"RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", "RETENTION", "ROBUST", 
		"ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", "ROWS", "SAMPLE", "SCHEMABINDING", 
		"SCOPED", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY", "SECURITY_LOG", "SEEDING_MODE", 
		"SELF", "SEMI_SENSITIVE", "SEND", "SENT", "SEQUENCE", "SERIALIZABLE", 
		"SESSION_TIMEOUT", "SETERROR", "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", 
		"SINGLE_USER", "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
		"STANDBY", "START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STATUSONLY", 
		"STDEV", "STDEVP", "STOPLIST", "STRING_AGG", "STUFF", "SUBJECT", "SUBSCRIPTION", 
		"SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", 
		"TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", "TIES", 
		"TIME", "TIMEOUT", "TIMER", "TINYINT", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
		"TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
		"TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", 
		"UOW", "USING", "VALID_XML", "VALIDATION", "VALUE", "VAR", "VARBINARY_KEYWORD", 
		"VARP", "VIEW_METADATA", "VIEWS", "WAIT", "WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", 
		"WORK", "WORKLOAD", "XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XSINIL", 
		"ZONE", "DOLLAR_ACTION", "ABORT_AFTER_WAIT", "ABSENT", "AES", "ALLOW_CONNECTIONS", 
		"ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_SINGLE_EVENT_LOSS", "ANONYMOUS", "APPEND", 
		"APPLICATION", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHENTICATION", 
		"AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", "BEFORE", 
		"BLOCK", "BLOCKERS", "BLOCKSIZE", "BLOCKING_HIERARCHY", "BUFFER", "BUFFERCOUNT", 
		"CACHE", "CALLED", "CERTIFICATE", "CHANGETABLE", "CHANGES", "CHECK_POLICY", 
		"CHECK_EXPIRATION", "CLASSIFIER_FUNCTION", "CLUSTER", "COMPRESSION", "CONFIGURATION", 
		"CONTAINMENT", "CONTEXT", "CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", 
		"CONVERSATION", "COPY_ONLY", "CYCLE", "DATA_COMPRESSION", "DATA_SOURCE", 
		"DATABASE_MIRRORING", "DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DIAGNOSTICS", 
		"DIFFERENTIAL", "DTC_SUPPORT", "ENABLED", "ENDPOINT", "ERROR", "EVENT", 
		"EVENTDATA", "EVENT_RETENTION_MODE", "EXECUTABLE_FILE", "EXPIREDATE", 
		"EXTENSION", "EXTERNAL_ACCESS", "FAILOVER", "FAILURECONDITIONLEVEL", "FAN_IN", 
		"FILE_SNAPSHOT", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", "GET", 
		"GOVERNOR", "HASHED", "HEALTHCHECKTIMEOUT", "IIF", "IO", "INCLUDE", "INCREMENT", 
		"INFINITE", "INIT", "INSTEAD", "ISNULL", "KERBEROS", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", 
		"LANGUAGE", "LIBRARY", "LIFETIME", "LINUX", "LISTENER_IP", "LISTENER_PORT", 
		"LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", "MAX_MEMORY", "MAXTRANSFER", 
		"MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_DURATION", "MAX_EVENT_SIZE", 
		"MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", 
		"MEMBER", "MEMORY_PARTITION_MODE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MINVALUE", "MIRROR", "MUST_CHANGE", "NOFORMAT", "NOINIT", "NONE", "NOREWIND", 
		"NOSKIP", "NOUNLOAD", "NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", 
		"NOTIFICATION", "NTLM", "OLD_PASSWORD", "ON_FAILURE", "PAGE", "PARAM_NODE", 
		"PARTIAL", "PASSWORD", "PERMISSION_SET", "PER_CPU", "PER_DB", "PER_NODE", 
		"PERSISTED", "PLATFORM", "POLICY", "PREDICATE", "PROCESS", "PROFILE", 
		"PYTHON", "R", "READ_WRITE_FILEGROUPS", "REGENERATE", "RELATED_CONVERSATION", 
		"RELATED_CONVERSATION_GROUP", "REQUIRED", "RESET", "RESTART", "RESUME", 
		"RETAINDAYS", "RETURNS", "REWIND", "ROLE", "RSA_512", "RSA_1024", "RSA_2048", 
		"RSA_3072", "RSA_4096", "SAFETY", "SAFE", "SCHEDULER", "SCHEME", "SERVER", 
		"SERVICE", "SERVICE_BROKER", "SERVICE_NAME", "SESSION", "SHRINKLOG", "SID", 
		"SKIP_KEYWORD", "SOFTNUMA", "SOURCE", "SPECIFICATION", "SPLIT", "SQLDUMPERFLAGS", 
		"SQLDUMPERPATH", "SQLDUMPERTIMEOUT", "STATE", "STATS", "START", "STARTED", 
		"STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", "SUPPORTED", "SWITCH", 
		"TAPE", "TARGET", "TCP", "TRACK_CAUSALITY", "TRANSFER", "UNCHECKED", "UNLOCK", 
		"UNSAFE", "URL", "USED", "VERBOSELOGGING", "VISIBILITY", "WAIT_AT_LOW_PRIORITY", 
		"WINDOWS", "WITHOUT", "WITNESS", "VARCHAR", "NVARCHAR", "SPACE", "COMMENT", 
		"LINE_COMMENT", "DOUBLE_QUOTE_ID", "SINGLE_QUOTE", "SQUARE_BRACKET_ID", 
		"LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", "REAL", "EQUAL", 
		"GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", 
		"DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", 
		"COMMA", "SEMI", "COLON", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", 
		"BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", "IPV4_ADDR", "IPV6_ADDR", "ANSI_DEFAULTS", 
		"ANSI_NULL_DFLT_OFF", "ANSI_NULL_DFLT_ON", "ARITHIGNORE", "FMTONLY", "FORCEPLAN", 
		"IMPLICIT_TRANSACTIONS", "NOEXEC", "PARSEONLY", "REMOTE_PROC_TRANSACTIONS", 
		"SHOWPLAN_ALL", "SHOWPLAN_TEXT", "SHOWPLAN_XML", "XACT_ABORT", "VERSION"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "TSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public TSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Tsql_fileContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(TSqlParser.EOF, 0); }
		public List<BatchContext> batch() {
			return getRuleContexts(BatchContext.class);
		}
		public BatchContext batch(int i) {
			return getRuleContext(BatchContext.class,i);
		}
		public Execute_body_batchContext execute_body_batch() {
			return getRuleContext(Execute_body_batchContext.class,0);
		}
		public List<Go_batch_statementContext> go_batch_statement() {
			return getRuleContexts(Go_batch_statementContext.class);
		}
		public Go_batch_statementContext go_batch_statement(int i) {
			return getRuleContext(Go_batch_statementContext.class,i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsql_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTsql_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTsql_file(this);
		}
	}

	public final Tsql_fileContext tsql_file() throws RecognitionException {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			setState(1080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BACKUP) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DBCC) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DROP) | (1L << END) | (1L << EXECUTE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FETCH - 66)) | (1L << (GOTO - 66)) | (1L << (GRANT - 66)) | (1L << (IF - 66)) | (1L << (INSERT - 66)) | (1L << (KILL - 66)) | (1L << (MERGE - 66)) | (1L << (OPEN - 66)) | (1L << (OPENJSON - 66)) | (1L << (PRECISION - 66)) | (1L << (PRINT - 66)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (RAISERROR - 131)) | (1L << (RECONFIGURE - 131)) | (1L << (RETURN - 131)) | (1L << (REVERT - 131)) | (1L << (ROLLBACK - 131)) | (1L << (SAVE - 131)) | (1L << (SELECT - 131)) | (1L << (SET - 131)) | (1L << (SETUSER - 131)) | (1L << (SHUTDOWN - 131)) | (1L << (TRUNCATE - 131)) | (1L << (UPDATE - 131)) | (1L << (USE - 131)) | (1L << (WAITFOR - 131)) | (1L << (WHILE - 131)) | (1L << (WITH - 131)) | (1L << (ABSOLUTE - 131)) | (1L << (AT_KEYWORD - 131)) | (1L << (ACCENT_SENSITIVITY - 131)) | (1L << (ACTION - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (ACTIVATION - 195)) | (1L << (ACTIVE - 195)) | (1L << (ADDRESS - 195)) | (1L << (AES_128 - 195)) | (1L << (AES_192 - 195)) | (1L << (AES_256 - 195)) | (1L << (AFFINITY - 195)) | (1L << (AFTER - 195)) | (1L << (AGGREGATE - 195)) | (1L << (ALGORITHM - 195)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 195)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 195)) | (1L << (ALLOWED - 195)) | (1L << (ANSI_NULL_DEFAULT - 195)) | (1L << (ANSI_NULLS - 195)) | (1L << (ANSI_PADDING - 195)) | (1L << (ANSI_WARNINGS - 195)) | (1L << (APPLICATION_LOG - 195)) | (1L << (APPLY - 195)) | (1L << (ARITHABORT - 195)) | (1L << (ASSEMBLY - 195)) | (1L << (AUDIT - 195)) | (1L << (AUDIT_GUID - 195)) | (1L << (AUTO - 195)) | (1L << (AUTO_CLEANUP - 195)) | (1L << (AUTO_CLOSE - 195)) | (1L << (AUTO_CREATE_STATISTICS - 195)) | (1L << (AUTO_SHRINK - 195)) | (1L << (AUTO_UPDATE_STATISTICS - 195)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 195)) | (1L << (AVAILABILITY - 195)) | (1L << (AVG - 195)) | (1L << (BACKUP_PRIORITY - 195)) | (1L << (BEGIN_DIALOG - 195)) | (1L << (BIGINT - 195)) | (1L << (BINARY_KEYWORD - 195)) | (1L << (BINARY_BASE64 - 195)) | (1L << (BINARY_CHECKSUM - 195)) | (1L << (BINDING - 195)) | (1L << (BLOB_STORAGE - 195)) | (1L << (BROKER - 195)) | (1L << (BROKER_INSTANCE - 195)) | (1L << (BULK_LOGGED - 195)) | (1L << (CALLER - 195)) | (1L << (CAP_CPU_PERCENT - 195)) | (1L << (CAST - 195)) | (1L << (TRY_CAST - 195)) | (1L << (CATALOG - 195)) | (1L << (CATCH - 195)) | (1L << (CHANGE_RETENTION - 195)) | (1L << (CHANGE_TRACKING - 195)) | (1L << (CHECKSUM - 195)) | (1L << (CHECKSUM_AGG - 195)) | (1L << (CLEANUP - 195)) | (1L << (COLLECTION - 195)) | (1L << (COLUMN_MASTER_KEY - 195)) | (1L << (COMMITTED - 195)) | (1L << (COMPATIBILITY_LEVEL - 195)) | (1L << (CONCAT - 195)) | (1L << (CONCAT_NULL_YIELDS_NULL - 195)) | (1L << (CONTENT - 195)) | (1L << (CONTROL - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (COOKIE - 259)) | (1L << (COUNT - 259)) | (1L << (COUNT_BIG - 259)) | (1L << (COUNTER - 259)) | (1L << (CPU - 259)) | (1L << (CREATE_NEW - 259)) | (1L << (CREATION_DISPOSITION - 259)) | (1L << (CREDENTIAL - 259)) | (1L << (CRYPTOGRAPHIC - 259)) | (1L << (CUME_DIST - 259)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 259)) | (1L << (CURSOR_DEFAULT - 259)) | (1L << (DATA - 259)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 259)) | (1L << (DATEADD - 259)) | (1L << (DATEDIFF - 259)) | (1L << (DATENAME - 259)) | (1L << (DATEPART - 259)) | (1L << (DAYS - 259)) | (1L << (DB_CHAINING - 259)) | (1L << (DB_FAILOVER - 259)) | (1L << (DECRYPTION - 259)) | (1L << (DEFAULT_DOUBLE_QUOTE - 259)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 259)) | (1L << (DEFAULT_LANGUAGE - 259)) | (1L << (DELAY - 259)) | (1L << (DELAYED_DURABILITY - 259)) | (1L << (DELETED - 259)) | (1L << (DENSE_RANK - 259)) | (1L << (DEPENDENTS - 259)) | (1L << (DES - 259)) | (1L << (DESCRIPTION - 259)) | (1L << (DESX - 259)) | (1L << (DHCP - 259)) | (1L << (DIALOG - 259)) | (1L << (DIRECTORY_NAME - 259)) | (1L << (DISABLE - 259)) | (1L << (DISABLE_BROKER - 259)) | (1L << (DISABLED - 259)) | (1L << (DISK_DRIVE - 259)) | (1L << (DOCUMENT - 259)) | (1L << (DYNAMIC - 259)) | (1L << (ELEMENTS - 259)) | (1L << (EMERGENCY - 259)) | (1L << (EMPTY - 259)) | (1L << (ENABLE - 259)) | (1L << (ENABLE_BROKER - 259)) | (1L << (ENCRYPTED_VALUE - 259)) | (1L << (ENCRYPTION - 259)) | (1L << (ENDPOINT_URL - 259)) | (1L << (ERROR_BROKER_CONVERSATIONS - 259)) | (1L << (EXCLUSIVE - 259)) | (1L << (EXECUTABLE - 259)) | (1L << (EXIST - 259)) | (1L << (EXPAND - 259)) | (1L << (EXPIRY_DATE - 259)) | (1L << (EXPLICIT - 259)) | (1L << (FAIL_OPERATION - 259)) | (1L << (FAILOVER_MODE - 259)) | (1L << (FAILURE - 259)) | (1L << (FAILURE_CONDITION_LEVEL - 259)) | (1L << (FAST - 259)) | (1L << (FAST_FORWARD - 259)) | (1L << (FILEGROUP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (FILEGROWTH - 323)) | (1L << (FILENAME - 323)) | (1L << (FILEPATH - 323)) | (1L << (FILESTREAM - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIRST_VALUE - 323)) | (1L << (FOLLOWING - 323)) | (1L << (FORCE - 323)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 323)) | (1L << (FORCED - 323)) | (1L << (FORMAT - 323)) | (1L << (FORWARD_ONLY - 323)) | (1L << (FULLSCAN - 323)) | (1L << (FULLTEXT - 323)) | (1L << (GB - 323)) | (1L << (GETDATE - 323)) | (1L << (GETUTCDATE - 323)) | (1L << (GLOBAL - 323)) | (1L << (GO_BATCH - 323)) | (1L << (GO - 323)) | (1L << (GROUP_MAX_REQUESTS - 323)) | (1L << (GROUPING - 323)) | (1L << (GROUPING_ID - 323)) | (1L << (HADR - 323)) | (1L << (HASH - 323)) | (1L << (HEALTH_CHECK_TIMEOUT - 323)) | (1L << (HIGH - 323)) | (1L << (HONOR_BROKER_PRIORITY - 323)) | (1L << (HOURS - 323)) | (1L << (IDENTITY_VALUE - 323)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 323)) | (1L << (IMMEDIATE - 323)) | (1L << (IMPERSONATE - 323)) | (1L << (IMPORTANCE - 323)) | (1L << (INCLUDE_NULL_VALUES - 323)) | (1L << (INCREMENTAL - 323)) | (1L << (INITIATOR - 323)) | (1L << (INPUT - 323)) | (1L << (INSENSITIVE - 323)) | (1L << (INSERTED - 323)) | (1L << (INT - 323)) | (1L << (IP - 323)) | (1L << (ISOLATION - 323)) | (1L << (JOB - 323)) | (1L << (JSON - 323)) | (1L << (KB - 323)) | (1L << (KEEP - 323)) | (1L << (KEEPFIXED - 323)) | (1L << (KEY_SOURCE - 323)) | (1L << (KEYS - 323)) | (1L << (KEYSET - 323)) | (1L << (LAG - 323)) | (1L << (LAST - 323)) | (1L << (LAST_VALUE - 323)) | (1L << (LEAD - 323)) | (1L << (LEVEL - 323)) | (1L << (LIST - 323)) | (1L << (LISTENER - 323)) | (1L << (LISTENER_URL - 323)) | (1L << (LOB_COMPACTION - 323)) | (1L << (LOCAL - 323)) | (1L << (LOCATION - 323)) | (1L << (LOCK - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LOCK_ESCALATION - 387)) | (1L << (LOGIN - 387)) | (1L << (LOOP - 387)) | (1L << (LOW - 387)) | (1L << (MANUAL - 387)) | (1L << (MARK - 387)) | (1L << (MATERIALIZED - 387)) | (1L << (MAX - 387)) | (1L << (MAX_CPU_PERCENT - 387)) | (1L << (MAX_DOP - 387)) | (1L << (MAX_FILES - 387)) | (1L << (MAX_IOPS_PER_VOLUME - 387)) | (1L << (MAX_MEMORY_PERCENT - 387)) | (1L << (MAX_PROCESSES - 387)) | (1L << (MAX_QUEUE_READERS - 387)) | (1L << (MAX_ROLLOVER_FILES - 387)) | (1L << (MAXDOP - 387)) | (1L << (MAXRECURSION - 387)) | (1L << (MAXSIZE - 387)) | (1L << (MB - 387)) | (1L << (MEDIUM - 387)) | (1L << (MEMORY_OPTIMIZED_DATA - 387)) | (1L << (MESSAGE - 387)) | (1L << (MIN - 387)) | (1L << (MIN_ACTIVE_ROWVERSION - 387)) | (1L << (MIN_CPU_PERCENT - 387)) | (1L << (MIN_IOPS_PER_VOLUME - 387)) | (1L << (MIN_MEMORY_PERCENT - 387)) | (1L << (MINUTES - 387)) | (1L << (MIRROR_ADDRESS - 387)) | (1L << (MIXED_PAGE_ALLOCATION - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MOVE - 387)) | (1L << (MULTI_USER - 387)) | (1L << (NAME - 387)) | (1L << (NESTED_TRIGGERS - 387)) | (1L << (NEW_ACCOUNT - 387)) | (1L << (NEW_BROKER - 387)) | (1L << (NEW_PASSWORD - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NO_TRUNCATE - 387)) | (1L << (NO_WAIT - 387)) | (1L << (NOCOUNT - 387)) | (1L << (NODES - 387)) | (1L << (NOEXPAND - 387)) | (1L << (NON_TRANSACTED_ACCESS - 387)) | (1L << (NORECOMPUTE - 387)) | (1L << (NORECOVERY - 387)) | (1L << (NOWAIT - 387)) | (1L << (NTILE - 387)) | (1L << (NUMANODE - 387)) | (1L << (NUMBER - 387)) | (1L << (NUMERIC_ROUNDABORT - 387)) | (1L << (OBJECT - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OLD_ACCOUNT - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN_EXISTING - 387)) | (1L << (OPTIMISTIC - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (OPTIMIZE - 451)) | (1L << (OUT - 451)) | (1L << (OUTPUT - 451)) | (1L << (OVERRIDE - 451)) | (1L << (OWNER - 451)) | (1L << (PAGE_VERIFY - 451)) | (1L << (PARAMETERIZATION - 451)) | (1L << (PARTITION - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PARTNER - 451)) | (1L << (PATH - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (POISON_MESSAGE_HANDLING - 451)) | (1L << (POOL - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDING - 451)) | (1L << (PRIMARY_ROLE - 451)) | (1L << (PRIOR - 451)) | (1L << (PRIORITY - 451)) | (1L << (PRIORITY_LEVEL - 451)) | (1L << (PRIVATE - 451)) | (1L << (PRIVATE_KEY - 451)) | (1L << (PRIVILEGES - 451)) | (1L << (PROCEDURE_NAME - 451)) | (1L << (PROPERTY - 451)) | (1L << (PROVIDER - 451)) | (1L << (PROVIDER_KEY_NAME - 451)) | (1L << (QUERY - 451)) | (1L << (QUEUE - 451)) | (1L << (QUEUE_DELAY - 451)) | (1L << (QUOTED_IDENTIFIER - 451)) | (1L << (RANGE - 451)) | (1L << (RANK - 451)) | (1L << (RC2 - 451)) | (1L << (RC4 - 451)) | (1L << (RC4_128 - 451)) | (1L << (READ_COMMITTED_SNAPSHOT - 451)) | (1L << (READ_ONLY - 451)) | (1L << (READ_ONLY_ROUTING_LIST - 451)) | (1L << (READ_WRITE - 451)) | (1L << (READONLY - 451)) | (1L << (REBUILD - 451)) | (1L << (RECEIVE - 451)) | (1L << (RECOMPILE - 451)) | (1L << (RECOVERY - 451)) | (1L << (RECURSIVE_TRIGGERS - 451)) | (1L << (RELATIVE - 451)) | (1L << (REMOTE - 451)) | (1L << (REMOTE_SERVICE_NAME - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPEATABLE - 451)) | (1L << (REPLICA - 451)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 451)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 451)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 451)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 451)) | (1L << (RESERVE_DISK_SPACE - 451)) | (1L << (RESOURCE - 451)) | (1L << (RESOURCE_MANAGER_LOCATION - 451)) | (1L << (RESTRICTED_USER - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (RETENTION - 515)) | (1L << (ROBUST - 515)) | (1L << (ROOT - 515)) | (1L << (ROUTE - 515)) | (1L << (ROW - 515)) | (1L << (ROW_NUMBER - 515)) | (1L << (ROWGUID - 515)) | (1L << (ROWS - 515)) | (1L << (SAMPLE - 515)) | (1L << (SCHEMABINDING - 515)) | (1L << (SCOPED - 515)) | (1L << (SCROLL - 515)) | (1L << (SCROLL_LOCKS - 515)) | (1L << (SEARCH - 515)) | (1L << (SECONDARY - 515)) | (1L << (SECONDARY_ONLY - 515)) | (1L << (SECONDARY_ROLE - 515)) | (1L << (SECONDS - 515)) | (1L << (SECRET - 515)) | (1L << (SECURITY - 515)) | (1L << (SECURITY_LOG - 515)) | (1L << (SEEDING_MODE - 515)) | (1L << (SELF - 515)) | (1L << (SEMI_SENSITIVE - 515)) | (1L << (SEND - 515)) | (1L << (SENT - 515)) | (1L << (SEQUENCE - 515)) | (1L << (SERIALIZABLE - 515)) | (1L << (SESSION_TIMEOUT - 515)) | (1L << (SETERROR - 515)) | (1L << (SHARE - 515)) | (1L << (SHOWPLAN - 515)) | (1L << (SIGNATURE - 515)) | (1L << (SIMPLE - 515)) | (1L << (SINGLE_USER - 515)) | (1L << (SIZE - 515)) | (1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 515)) | (1L << (STANDBY - 515)) | (1L << (START_DATE - 515)) | (1L << (STATIC - 515)) | (1L << (STATS_STREAM - 515)) | (1L << (STATUS - 515)) | (1L << (STATUSONLY - 515)) | (1L << (STDEV - 515)) | (1L << (STDEVP - 515)) | (1L << (STOPLIST - 515)) | (1L << (STRING_AGG - 515)) | (1L << (STUFF - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBSCRIPTION - 515)) | (1L << (SUM - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYMMETRIC - 515)) | (1L << (SYNCHRONOUS_COMMIT - 515)) | (1L << (SYNONYM - 515)) | (1L << (SYSTEM - 515)) | (1L << (TAKE - 515)) | (1L << (TARGET_RECOVERY_TIME - 515)) | (1L << (TB - 515)) | (1L << (TEXTIMAGE_ON - 515)) | (1L << (THROW - 515)) | (1L << (TIES - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (TIME - 579)) | (1L << (TIMEOUT - 579)) | (1L << (TIMER - 579)) | (1L << (TINYINT - 579)) | (1L << (TORN_PAGE_DETECTION - 579)) | (1L << (TRANSFORM_NOISE_WORDS - 579)) | (1L << (TRIPLE_DES - 579)) | (1L << (TRIPLE_DES_3KEY - 579)) | (1L << (TRUSTWORTHY - 579)) | (1L << (TRY - 579)) | (1L << (TSQL - 579)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 579)) | (1L << (TYPE - 579)) | (1L << (TYPE_WARNING - 579)) | (1L << (UNBOUNDED - 579)) | (1L << (UNCOMMITTED - 579)) | (1L << (UNKNOWN - 579)) | (1L << (UNLIMITED - 579)) | (1L << (UOW - 579)) | (1L << (USING - 579)) | (1L << (VALID_XML - 579)) | (1L << (VALIDATION - 579)) | (1L << (VALUE - 579)) | (1L << (VAR - 579)) | (1L << (VARBINARY_KEYWORD - 579)) | (1L << (VARP - 579)) | (1L << (VIEW_METADATA - 579)) | (1L << (VIEWS - 579)) | (1L << (WAIT - 579)) | (1L << (WELL_FORMED_XML - 579)) | (1L << (WITHOUT_ARRAY_WRAPPER - 579)) | (1L << (WORK - 579)) | (1L << (WORKLOAD - 579)) | (1L << (XML - 579)) | (1L << (XMLDATA - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLSCHEMA - 579)) | (1L << (XSINIL - 579)) | (1L << (ZONE - 579)) | (1L << (ABSENT - 579)) | (1L << (AES - 579)) | (1L << (ALLOW_CONNECTIONS - 579)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 579)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 579)) | (1L << (ANONYMOUS - 579)) | (1L << (APPEND - 579)) | (1L << (APPLICATION - 579)) | (1L << (ASYMMETRIC - 579)) | (1L << (ASYNCHRONOUS_COMMIT - 579)) | (1L << (AUTHENTICATION - 579)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 579)) | (1L << (AUTOMATIC - 579)) | (1L << (AVAILABILITY_MODE - 579)) | (1L << (BEFORE - 579)) | (1L << (BLOCK - 579)) | (1L << (BLOCKSIZE - 579)) | (1L << (BLOCKING_HIERARCHY - 579)) | (1L << (BUFFER - 579)) | (1L << (BUFFERCOUNT - 579)) | (1L << (CACHE - 579)) | (1L << (CALLED - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (CERTIFICATE - 643)) | (1L << (CHANGETABLE - 643)) | (1L << (CHANGES - 643)) | (1L << (CHECK_POLICY - 643)) | (1L << (CHECK_EXPIRATION - 643)) | (1L << (CLASSIFIER_FUNCTION - 643)) | (1L << (CLUSTER - 643)) | (1L << (COMPRESSION - 643)) | (1L << (CONFIGURATION - 643)) | (1L << (CONTAINMENT - 643)) | (1L << (CONTEXT - 643)) | (1L << (CONTINUE_AFTER_ERROR - 643)) | (1L << (CONTRACT - 643)) | (1L << (CONTRACT_NAME - 643)) | (1L << (CONVERSATION - 643)) | (1L << (COPY_ONLY - 643)) | (1L << (CYCLE - 643)) | (1L << (DATA_COMPRESSION - 643)) | (1L << (DATA_SOURCE - 643)) | (1L << (DATABASE_MIRRORING - 643)) | (1L << (DEFAULT_DATABASE - 643)) | (1L << (DEFAULT_SCHEMA - 643)) | (1L << (DIAGNOSTICS - 643)) | (1L << (DIFFERENTIAL - 643)) | (1L << (DTC_SUPPORT - 643)) | (1L << (ENABLED - 643)) | (1L << (ENDPOINT - 643)) | (1L << (ERROR - 643)) | (1L << (EVENT - 643)) | (1L << (EVENTDATA - 643)) | (1L << (EVENT_RETENTION_MODE - 643)) | (1L << (EXECUTABLE_FILE - 643)) | (1L << (EXPIREDATE - 643)) | (1L << (EXTENSION - 643)) | (1L << (EXTERNAL_ACCESS - 643)) | (1L << (FAILOVER - 643)) | (1L << (FAILURECONDITIONLEVEL - 643)) | (1L << (FAN_IN - 643)) | (1L << (FILE_SNAPSHOT - 643)) | (1L << (FORCESEEK - 643)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 643)) | (1L << (GET - 643)) | (1L << (GOVERNOR - 643)) | (1L << (HASHED - 643)) | (1L << (HEALTHCHECKTIMEOUT - 643)) | (1L << (IIF - 643)) | (1L << (IO - 643)) | (1L << (INCLUDE - 643)) | (1L << (INCREMENT - 643)) | (1L << (INFINITE - 643)) | (1L << (INIT - 643)) | (1L << (INSTEAD - 643)) | (1L << (ISNULL - 643)) | (1L << (KERBEROS - 643)) | (1L << (KEY_PATH - 643)) | (1L << (KEY_STORE_PROVIDER_NAME - 643)) | (1L << (LANGUAGE - 643)) | (1L << (LIBRARY - 643)) | (1L << (LIFETIME - 643)) | (1L << (LINUX - 643)) | (1L << (LISTENER_IP - 643)) | (1L << (LISTENER_PORT - 643)) | (1L << (LOCAL_SERVICE_NAME - 643)) | (1L << (LOG - 643)))) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & ((1L << (MATCHED - 707)) | (1L << (MASTER - 707)) | (1L << (MAX_MEMORY - 707)) | (1L << (MAXTRANSFER - 707)) | (1L << (MAXVALUE - 707)) | (1L << (MAX_DISPATCH_LATENCY - 707)) | (1L << (MAX_EVENT_SIZE - 707)) | (1L << (MAX_SIZE - 707)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 707)) | (1L << (MEDIADESCRIPTION - 707)) | (1L << (MEDIANAME - 707)) | (1L << (MEMBER - 707)) | (1L << (MEMORY_PARTITION_MODE - 707)) | (1L << (MESSAGE_FORWARDING - 707)) | (1L << (MESSAGE_FORWARD_SIZE - 707)) | (1L << (MINVALUE - 707)) | (1L << (MIRROR - 707)) | (1L << (MUST_CHANGE - 707)) | (1L << (NOFORMAT - 707)) | (1L << (NOINIT - 707)) | (1L << (NONE - 707)) | (1L << (NOREWIND - 707)) | (1L << (NOSKIP - 707)) | (1L << (NOUNLOAD - 707)) | (1L << (NO_CHECKSUM - 707)) | (1L << (NO_COMPRESSION - 707)) | (1L << (NO_EVENT_LOSS - 707)) | (1L << (NOTIFICATION - 707)) | (1L << (NTLM - 707)) | (1L << (OLD_PASSWORD - 707)) | (1L << (ON_FAILURE - 707)) | (1L << (PAGE - 707)) | (1L << (PARAM_NODE - 707)) | (1L << (PARTIAL - 707)) | (1L << (PASSWORD - 707)) | (1L << (PERMISSION_SET - 707)) | (1L << (PER_CPU - 707)) | (1L << (PER_DB - 707)) | (1L << (PER_NODE - 707)) | (1L << (PERSISTED - 707)) | (1L << (PLATFORM - 707)) | (1L << (POLICY - 707)) | (1L << (PREDICATE - 707)) | (1L << (PROCESS - 707)) | (1L << (PROFILE - 707)) | (1L << (PYTHON - 707)) | (1L << (R - 707)) | (1L << (READ_WRITE_FILEGROUPS - 707)) | (1L << (REGENERATE - 707)) | (1L << (RELATED_CONVERSATION - 707)) | (1L << (RELATED_CONVERSATION_GROUP - 707)) | (1L << (REQUIRED - 707)) | (1L << (RESET - 707)) | (1L << (RESTART - 707)) | (1L << (RESUME - 707)) | (1L << (RETAINDAYS - 707)) | (1L << (RETURNS - 707)) | (1L << (REWIND - 707)) | (1L << (ROLE - 707)) | (1L << (RSA_512 - 707)) | (1L << (RSA_1024 - 707)) | (1L << (RSA_2048 - 707)) | (1L << (RSA_3072 - 707)))) != 0) || ((((_la - 771)) & ~0x3f) == 0 && ((1L << (_la - 771)) & ((1L << (RSA_4096 - 771)) | (1L << (SAFETY - 771)) | (1L << (SAFE - 771)) | (1L << (SCHEDULER - 771)) | (1L << (SCHEME - 771)) | (1L << (SERVER - 771)) | (1L << (SERVICE - 771)) | (1L << (SERVICE_BROKER - 771)) | (1L << (SERVICE_NAME - 771)) | (1L << (SESSION - 771)) | (1L << (SID - 771)) | (1L << (SKIP_KEYWORD - 771)) | (1L << (SOFTNUMA - 771)) | (1L << (SOURCE - 771)) | (1L << (SPECIFICATION - 771)) | (1L << (SPLIT - 771)) | (1L << (SQLDUMPERFLAGS - 771)) | (1L << (SQLDUMPERPATH - 771)) | (1L << (SQLDUMPERTIMEOUT - 771)) | (1L << (STATE - 771)) | (1L << (STATS - 771)) | (1L << (START - 771)) | (1L << (STARTED - 771)) | (1L << (STARTUP_STATE - 771)) | (1L << (STOP - 771)) | (1L << (STOPPED - 771)) | (1L << (STOP_ON_ERROR - 771)) | (1L << (SUPPORTED - 771)) | (1L << (TAPE - 771)) | (1L << (TARGET - 771)) | (1L << (TCP - 771)) | (1L << (TRACK_CAUSALITY - 771)) | (1L << (TRANSFER - 771)) | (1L << (UNCHECKED - 771)) | (1L << (UNLOCK - 771)) | (1L << (UNSAFE - 771)) | (1L << (URL - 771)) | (1L << (USED - 771)) | (1L << (VERBOSELOGGING - 771)) | (1L << (VISIBILITY - 771)) | (1L << (WINDOWS - 771)) | (1L << (WITHOUT - 771)) | (1L << (WITNESS - 771)) | (1L << (VARCHAR - 771)) | (1L << (NVARCHAR - 771)) | (1L << (DOUBLE_QUOTE_ID - 771)) | (1L << (SQUARE_BRACKET_ID - 771)) | (1L << (ID - 771)))) != 0) || ((((_la - 845)) & ~0x3f) == 0 && ((1L << (_la - 845)) & ((1L << (DOT - 845)) | (1L << (LR_BRACKET - 845)) | (1L << (SEMI - 845)))) != 0)) {
					{
					{
					setState(1064);
					batch();
					}
					}
					setState(1069);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1070);
				match(EOF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1071);
				execute_body_batch();
				setState(1075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==GO_BATCH) {
					{
					{
					setState(1072);
					go_batch_statement();
					}
					}
					setState(1077);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1078);
				match(EOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BatchContext extends ParserRuleContext {
		public Go_batch_statementContext go_batch_statement() {
			return getRuleContext(Go_batch_statementContext.class,0);
		}
		public Execute_body_batchContext execute_body_batch() {
			return getRuleContext(Execute_body_batchContext.class,0);
		}
		public List<Go_statementContext> go_statement() {
			return getRuleContexts(Go_statementContext.class);
		}
		public Go_statementContext go_statement(int i) {
			return getRuleContext(Go_statementContext.class,i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Batch_level_statementContext batch_level_statement() {
			return getRuleContext(Batch_level_statementContext.class,0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBatch(this);
		}
	}

	public final BatchContext batch() throws RecognitionException {
		BatchContext _localctx = new BatchContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			setState(1108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1082);
				go_batch_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					setState(1083);
					execute_body_batch();
					}
					break;
				}
				setState(1092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					setState(1086);
					go_batch_statement();
					}
					break;
				case 2:
					{
					setState(1088); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1087);
							sql_clauses();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1090); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				setState(1097);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1094);
						go_statement();
						}
						} 
					}
					setState(1099);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1100);
				batch_level_statement();
				setState(1104);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1101);
						go_statement();
						}
						} 
					}
					setState(1106);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1107);
				go_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Batch_level_statementContext extends ParserRuleContext {
		public Create_or_alter_functionContext create_or_alter_function() {
			return getRuleContext(Create_or_alter_functionContext.class,0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return getRuleContext(Create_or_alter_procedureContext.class,0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return getRuleContext(Create_or_alter_triggerContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Batch_level_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch_level_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBatch_level_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBatch_level_statement(this);
		}
	}

	public final Batch_level_statementContext batch_level_statement() throws RecognitionException {
		Batch_level_statementContext _localctx = new Batch_level_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_batch_level_statement);
		try {
			setState(1114);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1110);
				create_or_alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1111);
				create_or_alter_procedure();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1112);
				create_or_alter_trigger();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1113);
				create_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clausesContext extends ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Cfl_statementContext cfl_statement() {
			return getRuleContext(Cfl_statementContext.class,0);
		}
		public Another_statementContext another_statement() {
			return getRuleContext(Another_statementContext.class,0);
		}
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Dbcc_specialContext dbcc_special() {
			return getRuleContext(Dbcc_specialContext.class,0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return getRuleContext(Dbcc_clauseContext.class,0);
		}
		public Backup_statementContext backup_statement() {
			return getRuleContext(Backup_statementContext.class,0);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_clauses(this);
		}
	}

	public final Sql_clausesContext sql_clauses() throws RecognitionException {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_clauses);
		try {
			setState(1145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1116);
				dml_clause();
				setState(1118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					setState(1117);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1120);
				cfl_statement();
				setState(1122);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					setState(1121);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1124);
				another_statement();
				setState(1126);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(1125);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1128);
				ddl_clause();
				setState(1130);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(1129);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1132);
				dbcc_special();
				setState(1134);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					setState(1133);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1136);
				dbcc_clause();
				setState(1138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(1137);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1140);
				backup_statement();
				setState(1142);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(1141);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1144);
				match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_clauseContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDml_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDml_clause(this);
		}
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dml_clause);
		try {
			setState(1152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1147);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1148);
				delete_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1149);
				insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1150);
				select_statement_standalone();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1151);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_clauseContext extends ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return getRuleContext(Alter_application_roleContext.class,0);
		}
		public Alter_assemblyContext alter_assembly() {
			return getRuleContext(Alter_assemblyContext.class,0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return getRuleContext(Alter_asymmetric_keyContext.class,0);
		}
		public Alter_authorizationContext alter_authorization() {
			return getRuleContext(Alter_authorizationContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return getRuleContext(Alter_authorization_for_azure_dwContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return getRuleContext(Alter_authorization_for_parallel_dwContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return getRuleContext(Alter_authorization_for_sql_databaseContext.class,0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return getRuleContext(Alter_availability_groupContext.class,0);
		}
		public Alter_certificateContext alter_certificate() {
			return getRuleContext(Alter_certificateContext.class,0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return getRuleContext(Alter_column_encryption_keyContext.class,0);
		}
		public Alter_credentialContext alter_credential() {
			return getRuleContext(Alter_credentialContext.class,0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return getRuleContext(Alter_cryptographic_providerContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Alter_db_roleContext alter_db_role() {
			return getRuleContext(Alter_db_roleContext.class,0);
		}
		public Alter_endpointContext alter_endpoint() {
			return getRuleContext(Alter_endpointContext.class,0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return getRuleContext(Create_or_alter_event_sessionContext.class,0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return getRuleContext(Alter_external_data_sourceContext.class,0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return getRuleContext(Alter_external_libraryContext.class,0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return getRuleContext(Alter_external_resource_poolContext.class,0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return getRuleContext(Alter_fulltext_catalogContext.class,0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return getRuleContext(Alter_fulltext_stoplistContext.class,0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return getRuleContext(Alter_login_azure_sqlContext.class,0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_login_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return getRuleContext(Alter_login_sql_serverContext.class,0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return getRuleContext(Alter_master_key_azure_sqlContext.class,0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return getRuleContext(Alter_master_key_sql_serverContext.class,0);
		}
		public Alter_message_typeContext alter_message_type() {
			return getRuleContext(Alter_message_typeContext.class,0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return getRuleContext(Alter_partition_functionContext.class,0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return getRuleContext(Alter_partition_schemeContext.class,0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return getRuleContext(Alter_remote_service_bindingContext.class,0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return getRuleContext(Alter_resource_governorContext.class,0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return getRuleContext(Alter_schema_sqlContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return getRuleContext(Alter_server_auditContext.class,0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return getRuleContext(Alter_server_audit_specificationContext.class,0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return getRuleContext(Alter_server_configurationContext.class,0);
		}
		public Alter_server_roleContext alter_server_role() {
			return getRuleContext(Alter_server_roleContext.class,0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return getRuleContext(Alter_server_role_pdwContext.class,0);
		}
		public Alter_serviceContext alter_service() {
			return getRuleContext(Alter_serviceContext.class,0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return getRuleContext(Alter_service_master_keyContext.class,0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return getRuleContext(Alter_symmetric_keyContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return getRuleContext(Alter_user_azure_sqlContext.class,0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return getRuleContext(Alter_workload_groupContext.class,0);
		}
		public Create_application_roleContext create_application_role() {
			return getRuleContext(Create_application_roleContext.class,0);
		}
		public Create_assemblyContext create_assembly() {
			return getRuleContext(Create_assemblyContext.class,0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return getRuleContext(Create_asymmetric_keyContext.class,0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return getRuleContext(Create_column_encryption_keyContext.class,0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return getRuleContext(Create_column_master_keyContext.class,0);
		}
		public Create_credentialContext create_credential() {
			return getRuleContext(Create_credentialContext.class,0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return getRuleContext(Create_cryptographic_providerContext.class,0);
		}
		public Create_databaseContext create_database() {
			return getRuleContext(Create_databaseContext.class,0);
		}
		public Create_db_roleContext create_db_role() {
			return getRuleContext(Create_db_roleContext.class,0);
		}
		public Create_event_notificationContext create_event_notification() {
			return getRuleContext(Create_event_notificationContext.class,0);
		}
		public Create_external_libraryContext create_external_library() {
			return getRuleContext(Create_external_libraryContext.class,0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return getRuleContext(Create_external_resource_poolContext.class,0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return getRuleContext(Create_fulltext_catalogContext.class,0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return getRuleContext(Create_fulltext_stoplistContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return getRuleContext(Create_login_azure_sqlContext.class,0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return getRuleContext(Create_login_pdwContext.class,0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return getRuleContext(Create_login_sql_serverContext.class,0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return getRuleContext(Create_master_key_azure_sqlContext.class,0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return getRuleContext(Create_master_key_sql_serverContext.class,0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return getRuleContext(Create_or_alter_broker_priorityContext.class,0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return getRuleContext(Create_remote_service_bindingContext.class,0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return getRuleContext(Create_resource_poolContext.class,0);
		}
		public Create_routeContext create_route() {
			return getRuleContext(Create_routeContext.class,0);
		}
		public Create_ruleContext create_rule() {
			return getRuleContext(Create_ruleContext.class,0);
		}
		public Create_schemaContext create_schema() {
			return getRuleContext(Create_schemaContext.class,0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Create_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return getRuleContext(Create_search_property_listContext.class,0);
		}
		public Create_security_policyContext create_security_policy() {
			return getRuleContext(Create_security_policyContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_server_auditContext create_server_audit() {
			return getRuleContext(Create_server_auditContext.class,0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return getRuleContext(Create_server_audit_specificationContext.class,0);
		}
		public Create_server_roleContext create_server_role() {
			return getRuleContext(Create_server_roleContext.class,0);
		}
		public Create_serviceContext create_service() {
			return getRuleContext(Create_serviceContext.class,0);
		}
		public Create_statisticsContext create_statistics() {
			return getRuleContext(Create_statisticsContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return getRuleContext(Create_user_azure_sql_dwContext.class,0);
		}
		public Create_workload_groupContext create_workload_group() {
			return getRuleContext(Create_workload_groupContext.class,0);
		}
		public Create_xml_indexContext create_xml_index() {
			return getRuleContext(Create_xml_indexContext.class,0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return getRuleContext(Create_xml_schema_collectionContext.class,0);
		}
		public Create_partition_functionContext create_partition_function() {
			return getRuleContext(Create_partition_functionContext.class,0);
		}
		public Create_partition_schemeContext create_partition_scheme() {
			return getRuleContext(Create_partition_schemeContext.class,0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return getRuleContext(Drop_aggregateContext.class,0);
		}
		public Drop_application_roleContext drop_application_role() {
			return getRuleContext(Drop_application_roleContext.class,0);
		}
		public Drop_assemblyContext drop_assembly() {
			return getRuleContext(Drop_assemblyContext.class,0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return getRuleContext(Drop_asymmetric_keyContext.class,0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return getRuleContext(Drop_availability_groupContext.class,0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return getRuleContext(Drop_broker_priorityContext.class,0);
		}
		public Drop_certificateContext drop_certificate() {
			return getRuleContext(Drop_certificateContext.class,0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return getRuleContext(Drop_column_encryption_keyContext.class,0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return getRuleContext(Drop_column_master_keyContext.class,0);
		}
		public Drop_contractContext drop_contract() {
			return getRuleContext(Drop_contractContext.class,0);
		}
		public Drop_credentialContext drop_credential() {
			return getRuleContext(Drop_credentialContext.class,0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return getRuleContext(Drop_cryptograhic_providerContext.class,0);
		}
		public Drop_databaseContext drop_database() {
			return getRuleContext(Drop_databaseContext.class,0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return getRuleContext(Drop_database_audit_specificationContext.class,0);
		}
		public Drop_database_encryption_keyContext drop_database_encryption_key() {
			return getRuleContext(Drop_database_encryption_keyContext.class,0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return getRuleContext(Drop_database_scoped_credentialContext.class,0);
		}
		public Drop_db_roleContext drop_db_role() {
			return getRuleContext(Drop_db_roleContext.class,0);
		}
		public Drop_defaultContext drop_default() {
			return getRuleContext(Drop_defaultContext.class,0);
		}
		public Drop_endpointContext drop_endpoint() {
			return getRuleContext(Drop_endpointContext.class,0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return getRuleContext(Drop_event_notificationsContext.class,0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return getRuleContext(Drop_event_sessionContext.class,0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return getRuleContext(Drop_external_data_sourceContext.class,0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return getRuleContext(Drop_external_file_formatContext.class,0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return getRuleContext(Drop_external_libraryContext.class,0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return getRuleContext(Drop_external_resource_poolContext.class,0);
		}
		public Drop_external_tableContext drop_external_table() {
			return getRuleContext(Drop_external_tableContext.class,0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return getRuleContext(Drop_fulltext_catalogContext.class,0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return getRuleContext(Drop_fulltext_indexContext.class,0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return getRuleContext(Drop_fulltext_stoplistContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Drop_loginContext drop_login() {
			return getRuleContext(Drop_loginContext.class,0);
		}
		public Drop_master_keyContext drop_master_key() {
			return getRuleContext(Drop_master_keyContext.class,0);
		}
		public Drop_message_typeContext drop_message_type() {
			return getRuleContext(Drop_message_typeContext.class,0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return getRuleContext(Drop_partition_functionContext.class,0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return getRuleContext(Drop_partition_schemeContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_queueContext drop_queue() {
			return getRuleContext(Drop_queueContext.class,0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return getRuleContext(Drop_remote_service_bindingContext.class,0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return getRuleContext(Drop_resource_poolContext.class,0);
		}
		public Drop_routeContext drop_route() {
			return getRuleContext(Drop_routeContext.class,0);
		}
		public Drop_ruleContext drop_rule() {
			return getRuleContext(Drop_ruleContext.class,0);
		}
		public Drop_schemaContext drop_schema() {
			return getRuleContext(Drop_schemaContext.class,0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return getRuleContext(Drop_search_property_listContext.class,0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return getRuleContext(Drop_security_policyContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return getRuleContext(Drop_server_auditContext.class,0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return getRuleContext(Drop_server_audit_specificationContext.class,0);
		}
		public Drop_server_roleContext drop_server_role() {
			return getRuleContext(Drop_server_roleContext.class,0);
		}
		public Drop_serviceContext drop_service() {
			return getRuleContext(Drop_serviceContext.class,0);
		}
		public Drop_signatureContext drop_signature() {
			return getRuleContext(Drop_signatureContext.class,0);
		}
		public Drop_statisticsContext drop_statistics() {
			return getRuleContext(Drop_statisticsContext.class,0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return getRuleContext(Drop_statistics_name_azure_dw_and_pdwContext.class,0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return getRuleContext(Drop_symmetric_keyContext.class,0);
		}
		public Drop_synonymContext drop_synonym() {
			return getRuleContext(Drop_synonymContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Drop_userContext drop_user() {
			return getRuleContext(Drop_userContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return getRuleContext(Drop_workload_groupContext.class,0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return getRuleContext(Drop_xml_schema_collectionContext.class,0);
		}
		public Disable_triggerContext disable_trigger() {
			return getRuleContext(Disable_triggerContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public Lock_tableContext lock_table() {
			return getRuleContext(Lock_tableContext.class,0);
		}
		public Truncate_tableContext truncate_table() {
			return getRuleContext(Truncate_tableContext.class,0);
		}
		public Update_statisticsContext update_statistics() {
			return getRuleContext(Update_statisticsContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDdl_clause(this);
		}
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_ddl_clause);
		try {
			setState(1312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1154);
				alter_application_role();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1155);
				alter_assembly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1156);
				alter_asymmetric_key();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1157);
				alter_authorization();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1158);
				alter_authorization_for_azure_dw();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1159);
				alter_authorization_for_parallel_dw();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1160);
				alter_authorization_for_sql_database();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1161);
				alter_availability_group();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1162);
				alter_certificate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1163);
				alter_column_encryption_key();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1164);
				alter_credential();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1165);
				alter_cryptographic_provider();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1166);
				alter_database();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1167);
				alter_db_role();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1168);
				alter_endpoint();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1169);
				create_or_alter_event_session();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1170);
				alter_external_data_source();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1171);
				alter_external_library();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1172);
				alter_external_resource_pool();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1173);
				alter_fulltext_catalog();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1174);
				alter_fulltext_stoplist();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1175);
				alter_login_azure_sql();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1176);
				alter_login_azure_sql_dw_and_pdw();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1177);
				alter_login_sql_server();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1178);
				alter_master_key_azure_sql();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1179);
				alter_master_key_sql_server();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1180);
				alter_message_type();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1181);
				alter_partition_function();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1182);
				alter_partition_scheme();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1183);
				alter_remote_service_binding();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1184);
				alter_resource_governor();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1185);
				alter_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1186);
				alter_schema_sql();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1187);
				alter_sequence();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1188);
				alter_server_audit();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1189);
				alter_server_audit_specification();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1190);
				alter_server_configuration();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1191);
				alter_server_role();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1192);
				alter_server_role_pdw();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1193);
				alter_service();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1194);
				alter_service_master_key();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1195);
				alter_symmetric_key();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1196);
				alter_table();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1197);
				alter_user();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1198);
				alter_user_azure_sql();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1199);
				alter_workload_group();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1200);
				create_application_role();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1201);
				create_assembly();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1202);
				create_asymmetric_key();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1203);
				create_column_encryption_key();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1204);
				create_column_master_key();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1205);
				create_credential();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1206);
				create_cryptographic_provider();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1207);
				create_database();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1208);
				create_db_role();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1209);
				create_event_notification();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1210);
				create_external_library();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1211);
				create_external_resource_pool();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1212);
				create_fulltext_catalog();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1213);
				create_fulltext_stoplist();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1214);
				create_index();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1215);
				create_login_azure_sql();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1216);
				create_login_pdw();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1217);
				create_login_sql_server();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1218);
				create_master_key_azure_sql();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1219);
				create_master_key_sql_server();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1220);
				create_or_alter_broker_priority();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1221);
				create_remote_service_binding();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1222);
				create_resource_pool();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1223);
				create_route();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1224);
				create_rule();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1225);
				create_schema();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1226);
				create_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1227);
				create_search_property_list();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1228);
				create_security_policy();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1229);
				create_sequence();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1230);
				create_server_audit();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1231);
				create_server_audit_specification();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1232);
				create_server_role();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1233);
				create_service();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1234);
				create_statistics();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1235);
				create_synonym();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1236);
				create_table();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1237);
				create_type();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1238);
				create_user();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1239);
				create_user_azure_sql_dw();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1240);
				create_workload_group();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1241);
				create_xml_index();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1242);
				create_xml_schema_collection();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1243);
				create_partition_function();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1244);
				create_partition_scheme();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1245);
				drop_aggregate();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1246);
				drop_application_role();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1247);
				drop_assembly();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1248);
				drop_asymmetric_key();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1249);
				drop_availability_group();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1250);
				drop_broker_priority();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1251);
				drop_certificate();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1252);
				drop_column_encryption_key();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1253);
				drop_column_master_key();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1254);
				drop_contract();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1255);
				drop_credential();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1256);
				drop_cryptograhic_provider();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1257);
				drop_database();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1258);
				drop_database_audit_specification();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1259);
				drop_database_encryption_key();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1260);
				drop_database_scoped_credential();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1261);
				drop_db_role();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1262);
				drop_default();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1263);
				drop_endpoint();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1264);
				drop_event_notifications();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1265);
				drop_event_session();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1266);
				drop_external_data_source();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1267);
				drop_external_file_format();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1268);
				drop_external_library();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1269);
				drop_external_resource_pool();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1270);
				drop_external_table();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1271);
				drop_fulltext_catalog();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1272);
				drop_fulltext_index();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1273);
				drop_fulltext_stoplist();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1274);
				drop_function();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1275);
				drop_index();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1276);
				drop_login();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1277);
				drop_master_key();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(1278);
				drop_message_type();
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(1279);
				drop_partition_function();
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(1280);
				drop_partition_scheme();
				}
				break;
			case 128:
				enterOuterAlt(_localctx, 128);
				{
				setState(1281);
				drop_procedure();
				}
				break;
			case 129:
				enterOuterAlt(_localctx, 129);
				{
				setState(1282);
				drop_queue();
				}
				break;
			case 130:
				enterOuterAlt(_localctx, 130);
				{
				setState(1283);
				drop_remote_service_binding();
				}
				break;
			case 131:
				enterOuterAlt(_localctx, 131);
				{
				setState(1284);
				drop_resource_pool();
				}
				break;
			case 132:
				enterOuterAlt(_localctx, 132);
				{
				setState(1285);
				drop_route();
				}
				break;
			case 133:
				enterOuterAlt(_localctx, 133);
				{
				setState(1286);
				drop_rule();
				}
				break;
			case 134:
				enterOuterAlt(_localctx, 134);
				{
				setState(1287);
				drop_schema();
				}
				break;
			case 135:
				enterOuterAlt(_localctx, 135);
				{
				setState(1288);
				drop_search_property_list();
				}
				break;
			case 136:
				enterOuterAlt(_localctx, 136);
				{
				setState(1289);
				drop_security_policy();
				}
				break;
			case 137:
				enterOuterAlt(_localctx, 137);
				{
				setState(1290);
				drop_sequence();
				}
				break;
			case 138:
				enterOuterAlt(_localctx, 138);
				{
				setState(1291);
				drop_server_audit();
				}
				break;
			case 139:
				enterOuterAlt(_localctx, 139);
				{
				setState(1292);
				drop_server_audit_specification();
				}
				break;
			case 140:
				enterOuterAlt(_localctx, 140);
				{
				setState(1293);
				drop_server_role();
				}
				break;
			case 141:
				enterOuterAlt(_localctx, 141);
				{
				setState(1294);
				drop_service();
				}
				break;
			case 142:
				enterOuterAlt(_localctx, 142);
				{
				setState(1295);
				drop_signature();
				}
				break;
			case 143:
				enterOuterAlt(_localctx, 143);
				{
				setState(1296);
				drop_statistics();
				}
				break;
			case 144:
				enterOuterAlt(_localctx, 144);
				{
				setState(1297);
				drop_statistics_name_azure_dw_and_pdw();
				}
				break;
			case 145:
				enterOuterAlt(_localctx, 145);
				{
				setState(1298);
				drop_symmetric_key();
				}
				break;
			case 146:
				enterOuterAlt(_localctx, 146);
				{
				setState(1299);
				drop_synonym();
				}
				break;
			case 147:
				enterOuterAlt(_localctx, 147);
				{
				setState(1300);
				drop_table();
				}
				break;
			case 148:
				enterOuterAlt(_localctx, 148);
				{
				setState(1301);
				drop_trigger();
				}
				break;
			case 149:
				enterOuterAlt(_localctx, 149);
				{
				setState(1302);
				drop_type();
				}
				break;
			case 150:
				enterOuterAlt(_localctx, 150);
				{
				setState(1303);
				drop_user();
				}
				break;
			case 151:
				enterOuterAlt(_localctx, 151);
				{
				setState(1304);
				drop_view();
				}
				break;
			case 152:
				enterOuterAlt(_localctx, 152);
				{
				setState(1305);
				drop_workload_group();
				}
				break;
			case 153:
				enterOuterAlt(_localctx, 153);
				{
				setState(1306);
				drop_xml_schema_collection();
				}
				break;
			case 154:
				enterOuterAlt(_localctx, 154);
				{
				setState(1307);
				disable_trigger();
				}
				break;
			case 155:
				enterOuterAlt(_localctx, 155);
				{
				setState(1308);
				enable_trigger();
				}
				break;
			case 156:
				enterOuterAlt(_localctx, 156);
				{
				setState(1309);
				lock_table();
				}
				break;
			case 157:
				enterOuterAlt(_localctx, 157);
				{
				setState(1310);
				truncate_table();
				}
				break;
			case 158:
				enterOuterAlt(_localctx, 158);
				{
				setState(1311);
				update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_statementContext extends ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return getRuleContext(Backup_databaseContext.class,0);
		}
		public Backup_logContext backup_log() {
			return getRuleContext(Backup_logContext.class,0);
		}
		public Backup_certificateContext backup_certificate() {
			return getRuleContext(Backup_certificateContext.class,0);
		}
		public Backup_master_keyContext backup_master_key() {
			return getRuleContext(Backup_master_keyContext.class,0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return getRuleContext(Backup_service_master_keyContext.class,0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_statement(this);
		}
	}

	public final Backup_statementContext backup_statement() throws RecognitionException {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_backup_statement);
		try {
			setState(1319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1314);
				backup_database();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1315);
				backup_log();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1316);
				backup_certificate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1317);
				backup_master_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1318);
				backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cfl_statementContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Break_statementContext break_statement() {
			return getRuleContext(Break_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Throw_statementContext throw_statement() {
			return getRuleContext(Throw_statementContext.class,0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return getRuleContext(Try_catch_statementContext.class,0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return getRuleContext(Waitfor_statementContext.class,0);
		}
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public Print_statementContext print_statement() {
			return getRuleContext(Print_statementContext.class,0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return getRuleContext(Raiseerror_statementContext.class,0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cfl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCfl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCfl_statement(this);
		}
	}

	public final Cfl_statementContext cfl_statement() throws RecognitionException {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_cfl_statement);
		try {
			setState(1333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1321);
				block_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1322);
				break_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1323);
				continue_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1324);
				goto_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1325);
				if_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1326);
				return_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1327);
				throw_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1328);
				try_catch_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1329);
				waitfor_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1330);
				while_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1331);
				print_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1332);
				raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBlock_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBlock_statement(this);
		}
	}

	public final Block_statementContext block_statement() throws RecognitionException {
		Block_statementContext _localctx = new Block_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_block_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1335);
			match(BEGIN);
			setState(1337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1336);
				match(SEMI);
				}
				break;
			}
			setState(1342);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1339);
					sql_clauses();
					}
					} 
				}
				setState(1344);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			}
			setState(1345);
			match(END);
			setState(1347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1346);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Break_statementContext extends ParserRuleContext {
		public TerminalNode BREAK() { return getToken(TSqlParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_break_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBreak_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBreak_statement(this);
		}
	}

	public final Break_statementContext break_statement() throws RecognitionException {
		Break_statementContext _localctx = new Break_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_break_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1349);
			match(BREAK);
			setState(1351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1350);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(TSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitContinue_statement(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1353);
			match(CONTINUE);
			setState(1355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1354);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(TSqlParser.GOTO, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGoto_statement(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_goto_statement);
		try {
			setState(1367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GOTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(1357);
				match(GOTO);
				setState(1358);
				id_();
				setState(1360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(1359);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1362);
				id_();
				setState(1363);
				match(COLON);
				setState(1365);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					setState(1364);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitReturn_statement(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_return_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1369);
			match(RETURN);
			setState(1371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1370);
				expression(0);
				}
				break;
			}
			setState(1374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(1373);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIf_statement(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_if_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1376);
			match(IF);
			setState(1377);
			search_condition(0);
			setState(1378);
			sql_clauses();
			setState(1381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(1379);
				match(ELSE);
				setState(1380);
				sql_clauses();
				}
				break;
			}
			setState(1384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(1383);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_statementContext extends ParserRuleContext {
		public TerminalNode THROW() { return getToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return getRuleContext(Throw_error_numberContext.class,0);
		}
		public Throw_messageContext throw_message() {
			return getRuleContext(Throw_messageContext.class,0);
		}
		public Throw_stateContext throw_state() {
			return getRuleContext(Throw_stateContext.class,0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_statement(this);
		}
	}

	public final Throw_statementContext throw_statement() throws RecognitionException {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_throw_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1386);
			match(THROW);
			setState(1393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==DECIMAL) {
				{
				setState(1387);
				throw_error_number();
				setState(1388);
				match(COMMA);
				setState(1389);
				throw_message();
				setState(1390);
				match(COMMA);
				setState(1391);
				throw_state();
				}
			}

			setState(1396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(1395);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_error_numberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_error_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_error_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_error_number(this);
		}
	}

	public final Throw_error_numberContext throw_error_number() throws RecognitionException {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1398);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_messageContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_message(this);
		}
	}

	public final Throw_messageContext throw_message() throws RecognitionException {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1400);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_stateContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_state(this);
		}
	}

	public final Throw_stateContext throw_state() throws RecognitionException {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Try_catch_statementContext extends ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public List<TerminalNode> BEGIN() { return getTokens(TSqlParser.BEGIN); }
		public TerminalNode BEGIN(int i) {
			return getToken(TSqlParser.BEGIN, i);
		}
		public List<TerminalNode> TRY() { return getTokens(TSqlParser.TRY); }
		public TerminalNode TRY(int i) {
			return getToken(TSqlParser.TRY, i);
		}
		public List<TerminalNode> END() { return getTokens(TSqlParser.END); }
		public TerminalNode END(int i) {
			return getToken(TSqlParser.END, i);
		}
		public List<TerminalNode> CATCH() { return getTokens(TSqlParser.CATCH); }
		public TerminalNode CATCH(int i) {
			return getToken(TSqlParser.CATCH, i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_try_catch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTry_catch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTry_catch_statement(this);
		}
	}

	public final Try_catch_statementContext try_catch_statement() throws RecognitionException {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_try_catch_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1404);
			match(BEGIN);
			setState(1405);
			match(TRY);
			setState(1407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				setState(1406);
				match(SEMI);
				}
				break;
			}
			setState(1410); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1409);
					((Try_catch_statementContext)_localctx).try_clauses = sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1412); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1414);
			match(END);
			setState(1415);
			match(TRY);
			setState(1417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(1416);
				match(SEMI);
				}
			}

			setState(1419);
			match(BEGIN);
			setState(1420);
			match(CATCH);
			setState(1422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				setState(1421);
				match(SEMI);
				}
				break;
			}
			setState(1427);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1424);
					((Try_catch_statementContext)_localctx).catch_clauses = sql_clauses();
					}
					} 
				}
				setState(1429);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			}
			setState(1430);
			match(END);
			setState(1431);
			match(CATCH);
			setState(1433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				setState(1432);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_statementContext extends ParserRuleContext {
		public TerminalNode WAITFOR() { return getToken(TSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return getRuleContext(Receive_statementContext.class,0);
		}
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DELAY() { return getToken(TSqlParser.DELAY, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWaitfor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWaitfor_statement(this);
		}
	}

	public final Waitfor_statementContext waitfor_statement() throws RecognitionException {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1435);
			match(WAITFOR);
			setState(1437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(1436);
				receive_statement();
				}
				break;
			}
			setState(1440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1439);
				match(COMMA);
				}
			}

			setState(1444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				setState(1442);
				_la = _input.LA(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1443);
				time();
				}
				break;
			}
			setState(1447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				setState(1446);
				expression(0);
				}
				break;
			}
			setState(1450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				setState(1449);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public TerminalNode WHILE() { return getToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode BREAK() { return getToken(TSqlParser.BREAK, 0); }
		public TerminalNode CONTINUE() { return getToken(TSqlParser.CONTINUE, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWhile_statement(this);
		}
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_while_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1452);
			match(WHILE);
			setState(1453);
			search_condition(0);
			setState(1463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				setState(1454);
				sql_clauses();
				}
				break;
			case 2:
				{
				setState(1455);
				match(BREAK);
				setState(1457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(1456);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(1459);
				match(CONTINUE);
				setState(1461);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1460);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Print_statementContext extends ParserRuleContext {
		public TerminalNode PRINT() { return getToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_print_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrint_statement(this);
		}
	}

	public final Print_statementContext print_statement() throws RecognitionException {
		Print_statementContext _localctx = new Print_statementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_print_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1465);
			match(PRINT);
			setState(1468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				setState(1466);
				expression(0);
				}
				break;
			case 2:
				{
				setState(1467);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			setState(1474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1470);
				match(COMMA);
				setState(1471);
				match(LOCAL_ID);
				}
				}
				setState(1476);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(1477);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raiseerror_statementContext extends ParserRuleContext {
		public Token msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public Token formatstring;
		public Token argument;
		public TerminalNode RAISERROR() { return getToken(TSqlParser.RAISERROR, 0); }
		public List<Constant_LOCAL_IDContext> constant_LOCAL_ID() {
			return getRuleContexts(Constant_LOCAL_IDContext.class);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return getRuleContext(Constant_LOCAL_IDContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode SETERROR() { return getToken(TSqlParser.SETERROR, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raiseerror_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRaiseerror_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRaiseerror_statement(this);
		}
	}

	public final Raiseerror_statementContext raiseerror_statement() throws RecognitionException {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			setState(1512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1480);
				match(RAISERROR);
				setState(1481);
				match(LR_BRACKET);
				setState(1482);
				((Raiseerror_statementContext)_localctx).msg = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 825)) & ~0x3f) == 0 && ((1L << (_la - 825)) & ((1L << (LOCAL_ID - 825)) | (1L << (DECIMAL - 825)) | (1L << (STRING - 825)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).msg = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1483);
				match(COMMA);
				setState(1484);
				((Raiseerror_statementContext)_localctx).severity = constant_LOCAL_ID();
				setState(1485);
				match(COMMA);
				setState(1486);
				((Raiseerror_statementContext)_localctx).state = constant_LOCAL_ID();
				setState(1491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1487);
					match(COMMA);
					setState(1488);
					constant_LOCAL_ID();
					}
					}
					setState(1493);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1494);
				match(RR_BRACKET);
				setState(1497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1495);
					match(WITH);
					setState(1496);
					_la = _input.LA(1);
					if ( !(_la==NOWAIT || _la==SETERROR || _la==LOG) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1500);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(1499);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1502);
				match(RAISERROR);
				setState(1503);
				match(DECIMAL);
				setState(1504);
				((Raiseerror_statementContext)_localctx).formatstring = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 822)) & ~0x3f) == 0 && ((1L << (_la - 822)) & ((1L << (DOUBLE_QUOTE_ID - 822)) | (1L << (LOCAL_ID - 822)) | (1L << (STRING - 822)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).formatstring = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1505);
					match(COMMA);
					setState(1506);
					((Raiseerror_statementContext)_localctx).argument = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 825)) & ~0x3f) == 0 && ((1L << (_la - 825)) & ((1L << (LOCAL_ID - 825)) | (1L << (DECIMAL - 825)) | (1L << (STRING - 825)))) != 0)) ) {
						((Raiseerror_statementContext)_localctx).argument = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(1511);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_statementContext extends ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEmpty_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEmpty_statement(this);
		}
	}

	public final Empty_statementContext empty_statement() throws RecognitionException {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_empty_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1514);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Another_statementContext extends ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Conversation_statementContext conversation_statement() {
			return getRuleContext(Conversation_statementContext.class,0);
		}
		public Create_contractContext create_contract() {
			return getRuleContext(Create_contractContext.class,0);
		}
		public Create_queueContext create_queue() {
			return getRuleContext(Create_queueContext.class,0);
		}
		public Alter_queueContext alter_queue() {
			return getRuleContext(Alter_queueContext.class,0);
		}
		public Kill_statementContext kill_statement() {
			return getRuleContext(Kill_statementContext.class,0);
		}
		public Message_statementContext message_statement() {
			return getRuleContext(Message_statementContext.class,0);
		}
		public Security_statementContext security_statement() {
			return getRuleContext(Security_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public Setuser_statementContext setuser_statement() {
			return getRuleContext(Setuser_statementContext.class,0);
		}
		public Reconfigure_statementContext reconfigure_statement() {
			return getRuleContext(Reconfigure_statementContext.class,0);
		}
		public Shutdown_statementContext shutdown_statement() {
			return getRuleContext(Shutdown_statementContext.class,0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_another_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAnother_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAnother_statement(this);
		}
	}

	public final Another_statementContext another_statement() throws RecognitionException {
		Another_statementContext _localctx = new Another_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_another_statement);
		try {
			setState(1532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1516);
				declare_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1517);
				execute_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1518);
				cursor_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1519);
				conversation_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1520);
				create_contract();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1521);
				create_queue();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1522);
				alter_queue();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1523);
				kill_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1524);
				message_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1525);
				security_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1526);
				set_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1527);
				transaction_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1528);
				use_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1529);
				setuser_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1530);
				reconfigure_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1531);
				shutdown_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_application_roleContext extends ParserRuleContext {
		public Id_Context appliction_role;
		public Id_Context new_application_role_name;
		public Token application_role_password;
		public Id_Context app_role_default_schema;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_application_role(this);
		}
	}

	public final Alter_application_roleContext alter_application_role() throws RecognitionException {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1534);
			match(ALTER);
			setState(1535);
			match(APPLICATION);
			setState(1536);
			match(ROLE);
			setState(1537);
			((Alter_application_roleContext)_localctx).appliction_role = id_();
			setState(1538);
			match(WITH);
			setState(1545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1539);
					match(COMMA);
					}
				}

				setState(1542);
				match(NAME);
				setState(1543);
				match(EQUAL);
				setState(1544);
				((Alter_application_roleContext)_localctx).new_application_role_name = id_();
				}
				break;
			}
			setState(1553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				setState(1548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1547);
					match(COMMA);
					}
				}

				setState(1550);
				match(PASSWORD);
				setState(1551);
				match(EQUAL);
				setState(1552);
				((Alter_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				setState(1556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1555);
					match(COMMA);
					}
				}

				setState(1558);
				match(DEFAULT_SCHEMA);
				setState(1559);
				match(EQUAL);
				setState(1560);
				((Alter_application_roleContext)_localctx).app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_application_roleContext extends ParserRuleContext {
		public Id_Context appliction_role;
		public Token application_role_password;
		public Id_Context app_role_default_schema;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_application_role(this);
		}
	}

	public final Create_application_roleContext create_application_role() throws RecognitionException {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_create_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1563);
			match(CREATE);
			setState(1564);
			match(APPLICATION);
			setState(1565);
			match(ROLE);
			setState(1566);
			((Create_application_roleContext)_localctx).appliction_role = id_();
			setState(1567);
			match(WITH);
			setState(1574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(1569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1568);
					match(COMMA);
					}
				}

				setState(1571);
				match(PASSWORD);
				setState(1572);
				match(EQUAL);
				setState(1573);
				((Create_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1576);
					match(COMMA);
					}
				}

				setState(1579);
				match(DEFAULT_SCHEMA);
				setState(1580);
				match(EQUAL);
				setState(1581);
				((Create_application_roleContext)_localctx).app_role_default_schema = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_aggregateContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context aggregate_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(TSqlParser.AGGREGATE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_aggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_aggregate(this);
		}
	}

	public final Drop_aggregateContext drop_aggregate() throws RecognitionException {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_drop_aggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1584);
			match(DROP);
			setState(1585);
			match(AGGREGATE);
			setState(1588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1586);
				match(IF);
				setState(1587);
				match(EXISTS);
				}
			}

			setState(1593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				setState(1590);
				((Drop_aggregateContext)_localctx).schema_name = id_();
				setState(1591);
				match(DOT);
				}
				break;
			}
			setState(1595);
			((Drop_aggregateContext)_localctx).aggregate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_application_roleContext extends ParserRuleContext {
		public Id_Context rolename;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_application_role(this);
		}
	}

	public final Drop_application_roleContext drop_application_role() throws RecognitionException {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_drop_application_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1597);
			match(DROP);
			setState(1598);
			match(APPLICATION);
			setState(1599);
			match(ROLE);
			setState(1600);
			((Drop_application_roleContext)_localctx).rolename = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assemblyContext extends ParserRuleContext {
		public Id_Context assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return getRuleContext(Alter_assembly_startContext.class,0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return getRuleContext(Alter_assembly_clauseContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly(this);
		}
	}

	public final Alter_assemblyContext alter_assembly() throws RecognitionException {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_assembly);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			alter_assembly_start();
			setState(1603);
			((Alter_assemblyContext)_localctx).assembly_name = id_();
			setState(1604);
			alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_start(this);
		}
	}

	public final Alter_assembly_startContext alter_assembly_start() throws RecognitionException {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_assembly_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1606);
			match(ALTER);
			setState(1607);
			match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return getRuleContext(Alter_assembly_from_clauseContext.class,0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return getRuleContext(Alter_assembly_with_clauseContext.class,0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return getRuleContext(Alter_assembly_drop_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return getRuleContext(Alter_assembly_add_clauseContext.class,0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_clause(this);
		}
	}

	public final Alter_assembly_clauseContext alter_assembly_clause() throws RecognitionException {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_assembly_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1609);
				alter_assembly_from_clause();
				}
			}

			setState(1613);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				setState(1612);
				alter_assembly_with_clause();
				}
				break;
			}
			setState(1616);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1615);
				alter_assembly_drop_clause();
				}
				break;
			}
			setState(1619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADD) {
				{
				setState(1618);
				alter_assembly_add_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return getRuleContext(Alter_assembly_from_clause_startContext.class,0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return getRuleContext(Client_assembly_specifierContext.class,0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return getRuleContext(Alter_assembly_file_bitsContext.class,0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_from_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_from_clause(this);
		}
	}

	public final Alter_assembly_from_clauseContext alter_assembly_from_clause() throws RecognitionException {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alter_assembly_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1621);
			alter_assembly_from_clause_start();
			setState(1624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
			case DISK_DRIVE:
			case STRING:
				{
				setState(1622);
				client_assembly_specifier();
				}
				break;
			case AS:
				{
				setState(1623);
				alter_assembly_file_bits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clause_startContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_from_clause_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_from_clause_start(this);
		}
	}

	public final Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() throws RecognitionException {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alter_assembly_from_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1626);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_clauseContext extends ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return getRuleContext(Alter_assembly_dropContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return getRuleContext(Alter_assembly_drop_multiple_filesContext.class,0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_drop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_drop_clause(this);
		}
	}

	public final Alter_assembly_drop_clauseContext alter_assembly_drop_clause() throws RecognitionException {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_assembly_drop_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1628);
			alter_assembly_drop();
			setState(1629);
			alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_multiple_filesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return getRuleContext(Multiple_local_filesContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_multiple_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_drop_multiple_files(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_drop_multiple_files(this);
		}
	}

	public final Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() throws RecognitionException {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_assembly_drop_multiple_files);
		try {
			setState(1633);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1631);
				match(ALL);
				}
				break;
			case DISK_DRIVE:
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1632);
				multiple_local_files();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_dropContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_drop(this);
		}
	}

	public final Alter_assembly_dropContext alter_assembly_drop() throws RecognitionException {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alter_assembly_drop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1635);
			match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_add_clauseContext extends ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return getRuleContext(Alter_asssembly_add_clause_startContext.class,0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return getRuleContext(Alter_assembly_client_file_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_add_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_add_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_add_clause(this);
		}
	}

	public final Alter_assembly_add_clauseContext alter_assembly_add_clause() throws RecognitionException {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alter_assembly_add_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1637);
			alter_asssembly_add_clause_start();
			setState(1638);
			alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asssembly_add_clause_startContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asssembly_add_clause_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_asssembly_add_clause_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_asssembly_add_clause_start(this);
		}
	}

	public final Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() throws RecognitionException {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_asssembly_add_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1640);
			match(ADD);
			setState(1641);
			match(FILE);
			setState(1642);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_client_file_clauseContext extends ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return getRuleContext(Alter_assembly_file_nameContext.class,0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_client_file_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_client_file_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_client_file_clause(this);
		}
	}

	public final Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() throws RecognitionException {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_assembly_client_file_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1644);
			alter_assembly_file_name();
			setState(1648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1645);
				alter_assembly_as();
				setState(1646);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_nameContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_file_name(this);
		}
	}

	public final Alter_assembly_file_nameContext alter_assembly_file_name() throws RecognitionException {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alter_assembly_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1650);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_bitsContext extends ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_bits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_file_bits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_file_bits(this);
		}
	}

	public final Alter_assembly_file_bitsContext alter_assembly_file_bits() throws RecognitionException {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_assembly_file_bits);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1652);
			alter_assembly_as();
			setState(1653);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_as(this);
		}
	}

	public final Alter_assembly_asContext alter_assembly_as() throws RecognitionException {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_alter_assembly_as);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1655);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_with_clauseContext extends ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return getRuleContext(Alter_assembly_withContext.class,0);
		}
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_with_clause(this);
		}
	}

	public final Alter_assembly_with_clauseContext alter_assembly_with_clause() throws RecognitionException {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_assembly_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1657);
			alter_assembly_with();
			setState(1658);
			assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_with(this);
		}
	}

	public final Alter_assembly_withContext alter_assembly_with() throws RecognitionException {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alter_assembly_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1660);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Client_assembly_specifierContext extends ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return getRuleContext(Network_file_shareContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_client_assembly_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClient_assembly_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClient_assembly_specifier(this);
		}
	}

	public final Client_assembly_specifierContext client_assembly_specifier() throws RecognitionException {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_client_assembly_specifier);
		try {
			setState(1665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1662);
				network_file_share();
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1663);
				local_file();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(1664);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assembly_optionContext extends ParserRuleContext {
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public TerminalNode VISIBILITY() { return getToken(TSqlParser.VISIBILITY, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode UNCHECKED() { return getToken(TSqlParser.UNCHECKED, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assembly_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAssembly_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAssembly_option(this);
		}
	}

	public final Assembly_optionContext assembly_option() throws RecognitionException {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 92;
		enterRecursionRule(_localctx, 92, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1676);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERMISSION_SET:
				{
				setState(1668);
				match(PERMISSION_SET);
				setState(1669);
				match(EQUAL);
				setState(1670);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case VISIBILITY:
				{
				setState(1671);
				match(VISIBILITY);
				setState(1672);
				match(EQUAL);
				setState(1673);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNCHECKED:
				{
				setState(1674);
				match(UNCHECKED);
				setState(1675);
				match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(1682);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					setState(1678);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1679);
					match(COMMA);
					}
					} 
				}
				setState(1684);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Network_file_shareContext extends ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return getRuleContext(Network_file_startContext.class,0);
		}
		public Network_computerContext network_computer() {
			return getRuleContext(Network_computerContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNetwork_file_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNetwork_file_share(this);
		}
	}

	public final Network_file_shareContext network_file_share() throws RecognitionException {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_network_file_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1685);
			network_file_start();
			setState(1686);
			network_computer();
			setState(1687);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_computerContext extends ParserRuleContext {
		public Id_Context computer_name;
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_computer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNetwork_computer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNetwork_computer(this);
		}
	}

	public final Network_computerContext network_computer() throws RecognitionException {
		Network_computerContext _localctx = new Network_computerContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_network_computer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1689);
			((Network_computerContext)_localctx).computer_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_file_startContext extends ParserRuleContext {
		public TerminalNode DOUBLE_BACK_SLASH() { return getToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNetwork_file_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNetwork_file_start(this);
		}
	}

	public final Network_file_startContext network_file_start() throws RecognitionException {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_network_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1691);
			match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_pathContext extends ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return getRuleContext(File_directory_path_separatorContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_path(this);
		}
	}

	public final File_pathContext file_path() throws RecognitionException {
		File_pathContext _localctx = new File_pathContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_file_path);
		try {
			setState(1697);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BACKSLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1693);
				file_directory_path_separator();
				setState(1694);
				file_path();
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1696);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_directory_path_separatorContext extends ParserRuleContext {
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_directory_path_separator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_directory_path_separator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_directory_path_separator(this);
		}
	}

	public final File_directory_path_separatorContext file_directory_path_separator() throws RecognitionException {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_file_directory_path_separator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1699);
			match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_fileContext extends ParserRuleContext {
		public Local_driveContext local_drive() {
			return getRuleContext(Local_driveContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterLocal_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitLocal_file(this);
		}
	}

	public final Local_fileContext local_file() throws RecognitionException {
		Local_fileContext _localctx = new Local_fileContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_local_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1701);
			local_drive();
			setState(1702);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_driveContext extends ParserRuleContext {
		public TerminalNode DISK_DRIVE() { return getToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_drive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterLocal_drive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitLocal_drive(this);
		}
	}

	public final Local_driveContext local_drive() throws RecognitionException {
		Local_driveContext _localctx = new Local_driveContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_local_drive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1704);
			match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_filesContext extends ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return getRuleContext(Multiple_local_file_startContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode SINGLE_QUOTE() { return getToken(TSqlParser.SINGLE_QUOTE, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMultiple_local_files(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMultiple_local_files(this);
		}
	}

	public final Multiple_local_filesContext multiple_local_files() throws RecognitionException {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_multiple_local_files);
		try {
			setState(1712);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1706);
				multiple_local_file_start();
				setState(1707);
				local_file();
				setState(1708);
				match(SINGLE_QUOTE);
				setState(1709);
				match(COMMA);
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1711);
				local_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_file_startContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTE() { return getToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_file_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMultiple_local_file_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMultiple_local_file_start(this);
		}
	}

	public final Multiple_local_file_startContext multiple_local_file_start() throws RecognitionException {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_multiple_local_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1714);
			match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_assemblyContext extends ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_assembly(this);
		}
	}

	public final Create_assemblyContext create_assembly() throws RecognitionException {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_assembly);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			match(CREATE);
			setState(1717);
			match(ASSEMBLY);
			setState(1718);
			((Create_assemblyContext)_localctx).assembly_name = id_();
			setState(1721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1719);
				match(AUTHORIZATION);
				setState(1720);
				((Create_assemblyContext)_localctx).owner_name = id_();
				}
			}

			setState(1723);
			match(FROM);
			setState(1728); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1724);
					match(COMMA);
					}
				}

				setState(1727);
				_la = _input.LA(1);
				if ( !(_la==STRING || _la==BINARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(1730); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 828)) & ~0x3f) == 0 && ((1L << (_la - 828)) & ((1L << (STRING - 828)) | (1L << (BINARY - 828)) | (1L << (COMMA - 828)))) != 0) );
			setState(1736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				setState(1732);
				match(WITH);
				setState(1733);
				match(PERMISSION_SET);
				setState(1734);
				match(EQUAL);
				setState(1735);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_assemblyContext extends ParserRuleContext {
		public Id_Context assembly_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode DEPENDENTS() { return getToken(TSqlParser.DEPENDENTS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_assembly(this);
		}
	}

	public final Drop_assemblyContext drop_assembly() throws RecognitionException {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_drop_assembly);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1738);
			match(DROP);
			setState(1739);
			match(ASSEMBLY);
			setState(1742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1740);
				match(IF);
				setState(1741);
				match(EXISTS);
				}
			}

			setState(1748); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1745);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1744);
						match(COMMA);
						}
					}

					setState(1747);
					((Drop_assemblyContext)_localctx).assembly_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1750); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1752);
				match(WITH);
				setState(1753);
				match(NO);
				setState(1754);
				match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_keyContext extends ParserRuleContext {
		public Id_Context Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return getRuleContext(Alter_asymmetric_key_startContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return getRuleContext(Asymmetric_key_optionContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_asymmetric_key(this);
		}
	}

	public final Alter_asymmetric_keyContext alter_asymmetric_key() throws RecognitionException {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1757);
			alter_asymmetric_key_start();
			setState(1758);
			((Alter_asymmetric_keyContext)_localctx).Asym_Key_Name = id_();
			setState(1763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(1759);
				asymmetric_key_option();
				}
				break;
			case REMOVE:
				{
				setState(1760);
				match(REMOVE);
				setState(1761);
				match(PRIVATE);
				setState(1762);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_key_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_asymmetric_key_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_asymmetric_key_start(this);
		}
	}

	public final Alter_asymmetric_key_startContext alter_asymmetric_key_start() throws RecognitionException {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alter_asymmetric_key_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1765);
			match(ALTER);
			setState(1766);
			match(ASYMMETRIC);
			setState(1767);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_optionContext extends ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return getRuleContext(Asymmetric_key_option_startContext.class,0);
		}
		public List<Asymmetric_key_password_change_optionContext> asymmetric_key_password_change_option() {
			return getRuleContexts(Asymmetric_key_password_change_optionContext.class);
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return getRuleContext(Asymmetric_key_password_change_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsymmetric_key_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsymmetric_key_option(this);
		}
	}

	public final Asymmetric_key_optionContext asymmetric_key_option() throws RecognitionException {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_asymmetric_key_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1769);
			asymmetric_key_option_start();
			setState(1770);
			asymmetric_key_password_change_option();
			setState(1773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1771);
				match(COMMA);
				setState(1772);
				asymmetric_key_password_change_option();
				}
			}

			setState(1775);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_option_startContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsymmetric_key_option_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsymmetric_key_option_start(this);
		}
	}

	public final Asymmetric_key_option_startContext asymmetric_key_option_start() throws RecognitionException {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_asymmetric_key_option_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1777);
			match(WITH);
			setState(1778);
			match(PRIVATE);
			setState(1779);
			match(KEY);
			setState(1780);
			match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_password_change_optionContext extends ParserRuleContext {
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_password_change_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsymmetric_key_password_change_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsymmetric_key_password_change_option(this);
		}
	}

	public final Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() throws RecognitionException {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_asymmetric_key_password_change_option);
		try {
			setState(1792);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1782);
				match(DECRYPTION);
				setState(1783);
				match(BY);
				setState(1784);
				match(PASSWORD);
				setState(1785);
				match(EQUAL);
				setState(1786);
				match(STRING);
				}
				break;
			case ENCRYPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1787);
				match(ENCRYPTION);
				setState(1788);
				match(BY);
				setState(1789);
				match(PASSWORD);
				setState(1790);
				match(EQUAL);
				setState(1791);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_asymmetric_keyContext extends ParserRuleContext {
		public Id_Context Asym_Key_Nam;
		public Id_Context database_principal_name;
		public Id_Context Assembly_Name;
		public Id_Context Provider_Name;
		public Token provider_key_name;
		public Token asymmetric_key_password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EXECUTABLE_FILE() { return getToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode RSA_4096() { return getToken(TSqlParser.RSA_4096, 0); }
		public TerminalNode RSA_3072() { return getToken(TSqlParser.RSA_3072, 0); }
		public TerminalNode RSA_2048() { return getToken(TSqlParser.RSA_2048, 0); }
		public TerminalNode RSA_1024() { return getToken(TSqlParser.RSA_1024, 0); }
		public TerminalNode RSA_512() { return getToken(TSqlParser.RSA_512, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_asymmetric_key(this);
		}
	}

	public final Create_asymmetric_keyContext create_asymmetric_key() throws RecognitionException {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_asymmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1794);
			match(CREATE);
			setState(1795);
			match(ASYMMETRIC);
			setState(1796);
			match(KEY);
			setState(1797);
			((Create_asymmetric_keyContext)_localctx).Asym_Key_Nam = id_();
			setState(1800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1798);
				match(AUTHORIZATION);
				setState(1799);
				((Create_asymmetric_keyContext)_localctx).database_principal_name = id_();
				}
			}

			setState(1815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1802);
				match(FROM);
				setState(1813);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILE:
					{
					setState(1803);
					match(FILE);
					setState(1804);
					match(EQUAL);
					setState(1805);
					match(STRING);
					}
					break;
				case EXECUTABLE_FILE:
					{
					setState(1806);
					match(EXECUTABLE_FILE);
					setState(1807);
					match(EQUAL);
					setState(1808);
					match(STRING);
					}
					break;
				case ASSEMBLY:
					{
					setState(1809);
					match(ASSEMBLY);
					setState(1810);
					((Create_asymmetric_keyContext)_localctx).Assembly_Name = id_();
					}
					break;
				case PROVIDER:
					{
					setState(1811);
					match(PROVIDER);
					setState(1812);
					((Create_asymmetric_keyContext)_localctx).Provider_Name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1817);
				match(WITH);
				setState(1827);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(1818);
					match(ALGORITHM);
					setState(1819);
					match(EQUAL);
					setState(1820);
					_la = _input.LA(1);
					if ( !(((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(1821);
					match(PROVIDER_KEY_NAME);
					setState(1822);
					match(EQUAL);
					setState(1823);
					((Create_asymmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(1824);
					match(CREATION_DISPOSITION);
					setState(1825);
					match(EQUAL);
					setState(1826);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1836);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(1831);
				match(ENCRYPTION);
				setState(1832);
				match(BY);
				setState(1833);
				match(PASSWORD);
				setState(1834);
				match(EQUAL);
				setState(1835);
				((Create_asymmetric_keyContext)_localctx).asymmetric_key_password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_asymmetric_keyContext extends ParserRuleContext {
		public Id_Context key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_asymmetric_key(this);
		}
	}

	public final Drop_asymmetric_keyContext drop_asymmetric_key() throws RecognitionException {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_drop_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1838);
			match(DROP);
			setState(1839);
			match(ASYMMETRIC);
			setState(1840);
			match(KEY);
			setState(1841);
			((Drop_asymmetric_keyContext)_localctx).key_name = id_();
			setState(1845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(1842);
				match(REMOVE);
				setState(1843);
				match(PROVIDER);
				setState(1844);
				match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorizationContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization(this);
		}
	}

	public final Alter_authorizationContext alter_authorization() throws RecognitionException {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alter_authorization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1847);
			alter_authorization_start();
			setState(1851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				setState(1848);
				class_type();
				setState(1849);
				colon_colon();
				}
				break;
			}
			setState(1853);
			((Alter_authorizationContext)_localctx).entity = entity_name();
			setState(1854);
			entity_to();
			setState(1855);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Authorization_granteeContext extends ParserRuleContext {
		public Id_Context principal_name;
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAuthorization_grantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAuthorization_grantee(this);
		}
	}

	public final Authorization_granteeContext authorization_grantee() throws RecognitionException {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_authorization_grantee);
		try {
			setState(1860);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1857);
				((Authorization_granteeContext)_localctx).principal_name = id_();
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1858);
				match(SCHEMA);
				setState(1859);
				match(OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_toContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_to; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_to(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_to(this);
		}
	}

	public final Entity_toContext entity_to() throws RecognitionException {
		Entity_toContext _localctx = new Entity_toContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_entity_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862);
			match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Colon_colonContext extends ParserRuleContext {
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Colon_colonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colon_colon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColon_colon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColon_colon(this);
		}
	}

	public final Colon_colonContext colon_colon() throws RecognitionException {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_colon_colon);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1864);
			match(COLON);
			setState(1865);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_start(this);
		}
	}

	public final Alter_authorization_startContext alter_authorization_start() throws RecognitionException {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alter_authorization_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1867);
			match(ALTER);
			setState(1868);
			match(AUTHORIZATION);
			setState(1869);
			match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_sql_databaseContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return getRuleContext(Class_type_for_sql_databaseContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_sql_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_for_sql_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_for_sql_database(this);
		}
	}

	public final Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() throws RecognitionException {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alter_authorization_for_sql_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1871);
			alter_authorization_start();
			setState(1875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1872);
				class_type_for_sql_database();
				setState(1873);
				colon_colon();
				}
				break;
			}
			setState(1877);
			((Alter_authorization_for_sql_databaseContext)_localctx).entity = entity_name();
			setState(1878);
			entity_to();
			setState(1879);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_azure_dwContext extends ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return getRuleContext(Entity_name_for_azure_dwContext.class,0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return getRuleContext(Class_type_for_azure_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_for_azure_dw(this);
		}
	}

	public final Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() throws RecognitionException {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alter_authorization_for_azure_dw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1881);
			alter_authorization_start();
			setState(1885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				setState(1882);
				class_type_for_azure_dw();
				setState(1883);
				colon_colon();
				}
				break;
			}
			setState(1887);
			((Alter_authorization_for_azure_dwContext)_localctx).entity = entity_name_for_azure_dw();
			setState(1888);
			entity_to();
			setState(1889);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_parallel_dwContext extends ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return getRuleContext(Entity_name_for_parallel_dwContext.class,0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return getRuleContext(Class_type_for_parallel_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_for_parallel_dw(this);
		}
	}

	public final Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() throws RecognitionException {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alter_authorization_for_parallel_dw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1891);
			alter_authorization_start();
			setState(1895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1892);
				class_type_for_parallel_dw();
				setState(1893);
				colon_colon();
				}
				break;
			}
			setState(1897);
			((Alter_authorization_for_parallel_dwContext)_localctx).entity = entity_name_for_parallel_dw();
			setState(1898);
			entity_to();
			setState(1899);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_typeContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type(this);
		}
	}

	public final Class_typeContext class_type() throws RecognitionException {
		Class_typeContext _localctx = new Class_typeContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_class_type);
		try {
			setState(1935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1901);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1902);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1903);
				match(ASYMMETRIC);
				setState(1904);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1905);
				match(AVAILABILITY);
				setState(1906);
				match(GROUP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1907);
				match(CERTIFICATE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1908);
				match(CONTRACT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1909);
				match(TYPE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1910);
				match(DATABASE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1911);
				match(ENDPOINT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1912);
				match(FULLTEXT);
				setState(1913);
				match(CATALOG);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1914);
				match(FULLTEXT);
				setState(1915);
				match(STOPLIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1916);
				match(MESSAGE);
				setState(1917);
				match(TYPE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1918);
				match(REMOTE);
				setState(1919);
				match(SERVICE);
				setState(1920);
				match(BINDING);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1921);
				match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1922);
				match(ROUTE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1923);
				match(SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1924);
				match(SEARCH);
				setState(1925);
				match(PROPERTY);
				setState(1926);
				match(LIST);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1927);
				match(SERVER);
				setState(1928);
				match(ROLE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1929);
				match(SERVICE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1930);
				match(SYMMETRIC);
				setState(1931);
				match(KEY);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1932);
				match(XML);
				setState(1933);
				match(SCHEMA);
				setState(1934);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_sql_databaseContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_sql_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type_for_sql_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type_for_sql_database(this);
		}
	}

	public final Class_type_for_sql_databaseContext class_type_for_sql_database() throws RecognitionException {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_class_type_for_sql_database);
		try {
			setState(1958);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1937);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1938);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1939);
				match(ASYMMETRIC);
				setState(1940);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1941);
				match(CERTIFICATE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1942);
				match(TYPE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1943);
				match(DATABASE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1944);
				match(FULLTEXT);
				setState(1945);
				match(CATALOG);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1946);
				match(FULLTEXT);
				setState(1947);
				match(STOPLIST);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1948);
				match(ROLE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1949);
				match(SCHEMA);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1950);
				match(SEARCH);
				setState(1951);
				match(PROPERTY);
				setState(1952);
				match(LIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1953);
				match(SYMMETRIC);
				setState(1954);
				match(KEY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1955);
				match(XML);
				setState(1956);
				match(SCHEMA);
				setState(1957);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_azure_dwContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type_for_azure_dw(this);
		}
	}

	public final Class_type_for_azure_dwContext class_type_for_azure_dw() throws RecognitionException {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_class_type_for_azure_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1960);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_parallel_dwContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type_for_parallel_dw(this);
		}
	}

	public final Class_type_for_parallel_dwContext class_type_for_parallel_dw() throws RecognitionException {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1962);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_availability_groupContext extends ParserRuleContext {
		public Id_Context group_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_availability_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_availability_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_availability_group(this);
		}
	}

	public final Drop_availability_groupContext drop_availability_group() throws RecognitionException {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_drop_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1964);
			match(DROP);
			setState(1965);
			match(AVAILABILITY);
			setState(1966);
			match(GROUP);
			setState(1967);
			((Drop_availability_groupContext)_localctx).group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_groupContext extends ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return getRuleContext(Alter_availability_group_startContext.class,0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return getRuleContext(Alter_availability_group_optionsContext.class,0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_availability_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_availability_group(this);
		}
	}

	public final Alter_availability_groupContext alter_availability_group() throws RecognitionException {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_alter_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1969);
			alter_availability_group_start();
			setState(1970);
			alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_startContext extends ParserRuleContext {
		public Id_Context group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_availability_group_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_availability_group_start(this);
		}
	}

	public final Alter_availability_group_startContext alter_availability_group_start() throws RecognitionException {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_alter_availability_group_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1972);
			match(ALTER);
			setState(1973);
			match(AVAILABILITY);
			setState(1974);
			match(GROUP);
			setState(1975);
			((Alter_availability_group_startContext)_localctx).group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_optionsContext extends ParserRuleContext {
		public Token milliseconds;
		public Id_Context database_name;
		public Token server_instance;
		public Token session_timeout;
		public Token ag_name;
		public Token ag_name_modified;
		public Token listener_name;
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTOMATED_BACKUP_PREFERENCE() { return getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(TSqlParser.DB_FAILOVER, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(TSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY() { return getToken(TSqlParser.SECONDARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode REPLICA() { return getToken(TSqlParser.REPLICA, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public TerminalNode ENDPOINT_URL() { return getToken(TSqlParser.ENDPOINT_URL, 0); }
		public List<TerminalNode> AVAILABILITY_MODE() { return getTokens(TSqlParser.AVAILABILITY_MODE); }
		public TerminalNode AVAILABILITY_MODE(int i) {
			return getToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public List<TerminalNode> FAILOVER_MODE() { return getTokens(TSqlParser.FAILOVER_MODE); }
		public TerminalNode FAILOVER_MODE(int i) {
			return getToken(TSqlParser.FAILOVER_MODE, i);
		}
		public List<TerminalNode> SEEDING_MODE() { return getTokens(TSqlParser.SEEDING_MODE); }
		public TerminalNode SEEDING_MODE(int i) {
			return getToken(TSqlParser.SEEDING_MODE, i);
		}
		public TerminalNode BACKUP_PRIORITY() { return getToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(TSqlParser.PRIMARY_ROLE, 0); }
		public List<TerminalNode> ALLOW_CONNECTIONS() { return getTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public TerminalNode ALLOW_CONNECTIONS(int i) {
			return getToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public TerminalNode SECONDARY_ROLE() { return getToken(TSqlParser.SECONDARY_ROLE, 0); }
		public List<TerminalNode> SYNCHRONOUS_COMMIT() { return getTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public TerminalNode SYNCHRONOUS_COMMIT(int i) {
			return getToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> ASYNCHRONOUS_COMMIT() { return getTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public TerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return getToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> AUTOMATIC() { return getTokens(TSqlParser.AUTOMATIC); }
		public TerminalNode AUTOMATIC(int i) {
			return getToken(TSqlParser.AUTOMATIC, i);
		}
		public List<TerminalNode> MANUAL() { return getTokens(TSqlParser.MANUAL); }
		public TerminalNode MANUAL(int i) {
			return getToken(TSqlParser.MANUAL, i);
		}
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<TerminalNode> LISTENER_URL() { return getTokens(TSqlParser.LISTENER_URL); }
		public TerminalNode LISTENER_URL(int i) {
			return getToken(TSqlParser.LISTENER_URL, i);
		}
		public TerminalNode GRANT() { return getToken(TSqlParser.GRANT, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public TerminalNode DENY() { return getToken(TSqlParser.DENY, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode LISTENER() { return getToken(TSqlParser.LISTENER, 0); }
		public TerminalNode DHCP() { return getToken(TSqlParser.DHCP, 0); }
		public TerminalNode IP() { return getToken(TSqlParser.IP, 0); }
		public List<Ip_v4_failoverContext> ip_v4_failover() {
			return getRuleContexts(Ip_v4_failoverContext.class);
		}
		public Ip_v4_failoverContext ip_v4_failover(int i) {
			return getRuleContext(Ip_v4_failoverContext.class,i);
		}
		public TerminalNode PORT() { return getToken(TSqlParser.PORT, 0); }
		public List<Ip_v6_failoverContext> ip_v6_failover() {
			return getRuleContexts(Ip_v6_failoverContext.class);
		}
		public Ip_v6_failoverContext ip_v6_failover(int i) {
			return getRuleContext(Ip_v6_failoverContext.class,i);
		}
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode DTC_SUPPORT() { return getToken(TSqlParser.DTC_SUPPORT, 0); }
		public TerminalNode PER_DB() { return getToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_availability_group_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_availability_group_options(this);
		}
	}

	public final Alter_availability_group_optionsContext alter_availability_group_options() throws RecognitionException {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_alter_availability_group_options);
		int _la;
		try {
			setState(2332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1977);
				match(SET);
				setState(1978);
				match(LR_BRACKET);
				{
				setState(1994);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTOMATED_BACKUP_PREFERENCE:
					{
					setState(1979);
					match(AUTOMATED_BACKUP_PREFERENCE);
					setState(1980);
					match(EQUAL);
					setState(1981);
					_la = _input.LA(1);
					if ( !(_la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY || _la==NONE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURE_CONDITION_LEVEL:
					{
					setState(1982);
					match(FAILURE_CONDITION_LEVEL);
					setState(1983);
					match(EQUAL);
					setState(1984);
					match(DECIMAL);
					}
					break;
				case HEALTH_CHECK_TIMEOUT:
					{
					setState(1985);
					match(HEALTH_CHECK_TIMEOUT);
					setState(1986);
					match(EQUAL);
					setState(1987);
					((Alter_availability_group_optionsContext)_localctx).milliseconds = match(DECIMAL);
					}
					break;
				case DB_FAILOVER:
					{
					setState(1988);
					match(DB_FAILOVER);
					setState(1989);
					match(EQUAL);
					setState(1990);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					setState(1991);
					match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					setState(1992);
					match(EQUAL);
					setState(1993);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1996);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1997);
				match(ADD);
				setState(1998);
				match(DATABASE);
				setState(1999);
				((Alter_availability_group_optionsContext)_localctx).database_name = id_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2000);
				match(REMOVE);
				setState(2001);
				match(DATABASE);
				setState(2002);
				((Alter_availability_group_optionsContext)_localctx).database_name = id_();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2003);
				match(ADD);
				setState(2004);
				match(REPLICA);
				setState(2005);
				match(ON);
				setState(2006);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				{
				setState(2007);
				match(WITH);
				setState(2008);
				match(LR_BRACKET);
				{
				setState(2012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDPOINT_URL) {
					{
					setState(2009);
					match(ENDPOINT_URL);
					setState(2010);
					match(EQUAL);
					setState(2011);
					match(STRING);
					}
				}

				setState(2020);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(2015);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2014);
						match(COMMA);
						}
					}

					setState(2017);
					match(AVAILABILITY_MODE);
					setState(2018);
					match(EQUAL);
					setState(2019);
					_la = _input.LA(1);
					if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(2023);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2022);
						match(COMMA);
						}
					}

					setState(2025);
					match(FAILOVER_MODE);
					setState(2026);
					match(EQUAL);
					setState(2027);
					_la = _input.LA(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					setState(2031);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2030);
						match(COMMA);
						}
					}

					setState(2033);
					match(SEEDING_MODE);
					setState(2034);
					match(EQUAL);
					setState(2035);
					_la = _input.LA(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					setState(2039);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2038);
						match(COMMA);
						}
					}

					setState(2041);
					match(BACKUP_PRIORITY);
					setState(2042);
					match(EQUAL);
					setState(2043);
					match(DECIMAL);
					}
					break;
				}
				setState(2055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(2047);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2046);
						match(COMMA);
						}
					}

					setState(2049);
					match(PRIMARY_ROLE);
					setState(2050);
					match(LR_BRACKET);
					setState(2051);
					match(ALLOW_CONNECTIONS);
					setState(2052);
					match(EQUAL);
					setState(2053);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2054);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECONDARY_ROLE || _la==COMMA) {
					{
					setState(2058);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2057);
						match(COMMA);
						}
					}

					setState(2060);
					match(SECONDARY_ROLE);
					setState(2061);
					match(LR_BRACKET);
					setState(2062);
					match(ALLOW_CONNECTIONS);
					setState(2063);
					match(EQUAL);
					{
					setState(2064);
					match(READ_ONLY);
					}
					setState(2065);
					match(RR_BRACKET);
					}
				}

				}
				}
				setState(2068);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2069);
				match(SECONDARY_ROLE);
				setState(2070);
				match(LR_BRACKET);
				setState(2079);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(2071);
					match(ALLOW_CONNECTIONS);
					setState(2072);
					match(EQUAL);
					setState(2073);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(2074);
					match(READ_ONLY_ROUTING_LIST);
					setState(2075);
					match(EQUAL);
					{
					setState(2076);
					match(LR_BRACKET);
					{
					{
					setState(2077);
					match(STRING);
					}
					}
					setState(2078);
					match(RR_BRACKET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2081);
				match(PRIMARY_ROLE);
				setState(2082);
				match(LR_BRACKET);
				setState(2105);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(2083);
					match(ALLOW_CONNECTIONS);
					setState(2084);
					match(EQUAL);
					setState(2085);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(2086);
					match(READ_ONLY_ROUTING_LIST);
					setState(2087);
					match(EQUAL);
					{
					setState(2088);
					match(LR_BRACKET);
					setState(2099);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case RR_BRACKET:
					case COMMA:
						{
						setState(2095);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==STRING || _la==COMMA) {
							{
							{
							setState(2090);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2089);
								match(COMMA);
								}
							}

							setState(2092);
							match(STRING);
							}
							}
							setState(2097);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case NONE:
						{
						setState(2098);
						match(NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2101);
					match(RR_BRACKET);
					}
					}
					break;
				case SESSION_TIMEOUT:
					{
					setState(2102);
					match(SESSION_TIMEOUT);
					setState(2103);
					match(EQUAL);
					setState(2104);
					((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2107);
				match(MODIFY);
				setState(2108);
				match(REPLICA);
				setState(2109);
				match(ON);
				setState(2110);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				setState(2168);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(2111);
					match(WITH);
					setState(2112);
					match(LR_BRACKET);
					setState(2128);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ENDPOINT_URL:
						{
						setState(2113);
						match(ENDPOINT_URL);
						setState(2114);
						match(EQUAL);
						setState(2115);
						match(STRING);
						}
						break;
					case AVAILABILITY_MODE:
						{
						setState(2116);
						match(AVAILABILITY_MODE);
						setState(2117);
						match(EQUAL);
						setState(2118);
						_la = _input.LA(1);
						if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case FAILOVER_MODE:
						{
						setState(2119);
						match(FAILOVER_MODE);
						setState(2120);
						match(EQUAL);
						setState(2121);
						_la = _input.LA(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case SEEDING_MODE:
						{
						setState(2122);
						match(SEEDING_MODE);
						setState(2123);
						match(EQUAL);
						setState(2124);
						_la = _input.LA(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case BACKUP_PRIORITY:
						{
						setState(2125);
						match(BACKUP_PRIORITY);
						setState(2126);
						match(EQUAL);
						setState(2127);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SECONDARY_ROLE:
					{
					setState(2130);
					match(SECONDARY_ROLE);
					setState(2131);
					match(LR_BRACKET);
					setState(2140);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(2132);
						match(ALLOW_CONNECTIONS);
						setState(2133);
						match(EQUAL);
						setState(2134);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(2135);
						match(READ_ONLY_ROUTING_LIST);
						setState(2136);
						match(EQUAL);
						{
						setState(2137);
						match(LR_BRACKET);
						{
						{
						setState(2138);
						match(STRING);
						}
						}
						setState(2139);
						match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PRIMARY_ROLE:
					{
					setState(2142);
					match(PRIMARY_ROLE);
					setState(2143);
					match(LR_BRACKET);
					setState(2166);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(2144);
						match(ALLOW_CONNECTIONS);
						setState(2145);
						match(EQUAL);
						setState(2146);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(2147);
						match(READ_ONLY_ROUTING_LIST);
						setState(2148);
						match(EQUAL);
						{
						setState(2149);
						match(LR_BRACKET);
						setState(2160);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
						case RR_BRACKET:
						case COMMA:
							{
							setState(2156);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==STRING || _la==COMMA) {
								{
								{
								setState(2151);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(2150);
									match(COMMA);
									}
								}

								setState(2153);
								match(STRING);
								}
								}
								setState(2158);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							break;
						case NONE:
							{
							setState(2159);
							match(NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2162);
						match(RR_BRACKET);
						}
						}
						break;
					case SESSION_TIMEOUT:
						{
						setState(2163);
						match(SESSION_TIMEOUT);
						setState(2164);
						match(EQUAL);
						setState(2165);
						((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2170);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2171);
				match(REMOVE);
				setState(2172);
				match(REPLICA);
				setState(2173);
				match(ON);
				setState(2174);
				match(STRING);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2175);
				match(JOIN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2176);
				match(JOIN);
				setState(2177);
				match(AVAILABILITY);
				setState(2178);
				match(GROUP);
				setState(2179);
				match(ON);
				setState(2202); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2181);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2180);
						match(COMMA);
						}
					}

					setState(2183);
					((Alter_availability_group_optionsContext)_localctx).ag_name = match(STRING);
					setState(2184);
					match(WITH);
					setState(2185);
					match(LR_BRACKET);
					{
					setState(2186);
					match(LISTENER_URL);
					setState(2187);
					match(EQUAL);
					setState(2188);
					match(STRING);
					setState(2189);
					match(COMMA);
					setState(2190);
					match(AVAILABILITY_MODE);
					setState(2191);
					match(EQUAL);
					setState(2192);
					_la = _input.LA(1);
					if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2193);
					match(COMMA);
					setState(2194);
					match(FAILOVER_MODE);
					setState(2195);
					match(EQUAL);
					setState(2196);
					match(MANUAL);
					setState(2197);
					match(COMMA);
					setState(2198);
					match(SEEDING_MODE);
					setState(2199);
					match(EQUAL);
					setState(2200);
					_la = _input.LA(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2201);
					match(RR_BRACKET);
					}
					}
					}
					setState(2204); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2206);
				match(MODIFY);
				setState(2207);
				match(AVAILABILITY);
				setState(2208);
				match(GROUP);
				setState(2209);
				match(ON);
				setState(2244); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2211);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2210);
						match(COMMA);
						}
					}

					setState(2213);
					((Alter_availability_group_optionsContext)_localctx).ag_name_modified = match(STRING);
					setState(2214);
					match(WITH);
					setState(2215);
					match(LR_BRACKET);
					{
					setState(2216);
					match(LISTENER_URL);
					setState(2217);
					match(EQUAL);
					setState(2218);
					match(STRING);
					setState(2225);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
					case 1:
						{
						setState(2220);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2219);
							match(COMMA);
							}
						}

						setState(2222);
						match(AVAILABILITY_MODE);
						setState(2223);
						match(EQUAL);
						setState(2224);
						_la = _input.LA(1);
						if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(2233);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
					case 1:
						{
						setState(2228);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2227);
							match(COMMA);
							}
						}

						setState(2230);
						match(FAILOVER_MODE);
						setState(2231);
						match(EQUAL);
						setState(2232);
						match(MANUAL);
						}
						break;
					}
					setState(2241);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SEEDING_MODE || _la==COMMA) {
						{
						setState(2236);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2235);
							match(COMMA);
							}
						}

						setState(2238);
						match(SEEDING_MODE);
						setState(2239);
						match(EQUAL);
						setState(2240);
						_la = _input.LA(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2243);
					match(RR_BRACKET);
					}
					}
					}
					setState(2246); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2248);
				match(GRANT);
				setState(2249);
				match(CREATE);
				setState(2250);
				match(ANY);
				setState(2251);
				match(DATABASE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2252);
				match(DENY);
				setState(2253);
				match(CREATE);
				setState(2254);
				match(ANY);
				setState(2255);
				match(DATABASE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2256);
				match(FAILOVER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2257);
				match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2258);
				match(ADD);
				setState(2259);
				match(LISTENER);
				setState(2260);
				((Alter_availability_group_optionsContext)_localctx).listener_name = match(STRING);
				setState(2261);
				match(LR_BRACKET);
				setState(2297);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					setState(2262);
					match(WITH);
					setState(2263);
					match(DHCP);
					{
					setState(2264);
					match(ON);
					setState(2265);
					match(LR_BRACKET);
					setState(2266);
					ip_v4_failover();
					setState(2267);
					ip_v4_failover();
					setState(2268);
					match(RR_BRACKET);
					}
					}
					break;
				case 2:
					{
					setState(2270);
					match(WITH);
					setState(2271);
					match(IP);
					setState(2272);
					match(LR_BRACKET);
					{
					setState(2286); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2274);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2273);
							match(COMMA);
							}
						}

						setState(2276);
						match(LR_BRACKET);
						setState(2282);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
						case 1:
							{
							setState(2277);
							ip_v4_failover();
							setState(2278);
							match(COMMA);
							setState(2279);
							ip_v4_failover();
							}
							break;
						case 2:
							{
							setState(2281);
							ip_v6_failover();
							}
							break;
						}
						setState(2284);
						match(RR_BRACKET);
						}
						}
						setState(2288); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==LR_BRACKET || _la==COMMA );
					setState(2290);
					match(RR_BRACKET);
					setState(2295);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2291);
						match(COMMA);
						setState(2292);
						match(PORT);
						setState(2293);
						match(EQUAL);
						setState(2294);
						match(DECIMAL);
						}
					}

					}
					}
					break;
				}
				setState(2299);
				match(RR_BRACKET);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2301);
				match(MODIFY);
				setState(2302);
				match(LISTENER);
				setState(2317);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
					{
					setState(2303);
					match(ADD);
					setState(2304);
					match(IP);
					setState(2305);
					match(LR_BRACKET);
					setState(2310);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
					case 1:
						{
						setState(2306);
						ip_v4_failover();
						setState(2307);
						ip_v4_failover();
						}
						break;
					case 2:
						{
						setState(2309);
						ip_v6_failover();
						}
						break;
					}
					setState(2312);
					match(RR_BRACKET);
					}
					break;
				case PORT:
					{
					setState(2314);
					match(PORT);
					setState(2315);
					match(EQUAL);
					setState(2316);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2319);
				match(RESTART);
				setState(2320);
				match(LISTENER);
				setState(2321);
				match(STRING);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2322);
				match(REMOVE);
				setState(2323);
				match(LISTENER);
				setState(2324);
				match(STRING);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2325);
				match(OFFLINE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2326);
				match(WITH);
				setState(2327);
				match(LR_BRACKET);
				setState(2328);
				match(DTC_SUPPORT);
				setState(2329);
				match(EQUAL);
				setState(2330);
				match(PER_DB);
				setState(2331);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_v4_failoverContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Ip_v4_failoverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_v4_failover; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIp_v4_failover(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIp_v4_failover(this);
		}
	}

	public final Ip_v4_failoverContext ip_v4_failover() throws RecognitionException {
		Ip_v4_failoverContext _localctx = new Ip_v4_failoverContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_ip_v4_failover);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2334);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_v6_failoverContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Ip_v6_failoverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_v6_failover; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIp_v6_failover(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIp_v6_failover(this);
		}
	}

	public final Ip_v6_failoverContext ip_v6_failover() throws RecognitionException {
		Ip_v6_failoverContext _localctx = new Ip_v6_failoverContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_ip_v6_failover);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2336);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_broker_priorityContext extends ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public Token RemoteServiceName;
		public Token PriorityValue;
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode CONTRACT_NAME() { return getToken(TSqlParser.CONTRACT_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode LOCAL_SERVICE_NAME() { return getToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public List<TerminalNode> ANY() { return getTokens(TSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSqlParser.ANY, i);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_broker_priority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_broker_priority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_broker_priority(this);
		}
	}

	public final Create_or_alter_broker_priorityContext create_or_alter_broker_priority() throws RecognitionException {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2338);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2339);
			match(BROKER);
			setState(2340);
			match(PRIORITY);
			setState(2341);
			((Create_or_alter_broker_priorityContext)_localctx).ConversationPriorityName = id_();
			setState(2342);
			match(FOR);
			setState(2343);
			match(CONVERSATION);
			setState(2344);
			match(SET);
			setState(2345);
			match(LR_BRACKET);
			setState(2355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTRACT_NAME) {
				{
				setState(2346);
				match(CONTRACT_NAME);
				setState(2347);
				match(EQUAL);
				setState(2350);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					{
					setState(2348);
					id_();
					}
					}
					break;
				case ANY:
					{
					setState(2349);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2352);
					match(COMMA);
					}
				}

				}
			}

			setState(2369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_SERVICE_NAME) {
				{
				setState(2357);
				match(LOCAL_SERVICE_NAME);
				setState(2358);
				match(EQUAL);
				setState(2364);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DOUBLE_FORWARD_SLASH:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(2360);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOUBLE_FORWARD_SLASH) {
						{
						setState(2359);
						match(DOUBLE_FORWARD_SLASH);
						}
					}

					setState(2362);
					id_();
					}
					break;
				case ANY:
					{
					setState(2363);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2366);
					match(COMMA);
					}
				}

				}
			}

			setState(2380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REMOTE_SERVICE_NAME) {
				{
				setState(2371);
				match(REMOTE_SERVICE_NAME);
				setState(2372);
				match(EQUAL);
				setState(2375);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(2373);
					((Create_or_alter_broker_priorityContext)_localctx).RemoteServiceName = match(STRING);
					}
					break;
				case ANY:
					{
					setState(2374);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2377);
					match(COMMA);
					}
				}

				}
			}

			setState(2388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIORITY_LEVEL) {
				{
				setState(2382);
				match(PRIORITY_LEVEL);
				setState(2383);
				match(EQUAL);
				setState(2386);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(2384);
					((Create_or_alter_broker_priorityContext)_localctx).PriorityValue = match(DECIMAL);
					}
					break;
				case DEFAULT:
					{
					setState(2385);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2390);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_broker_priorityContext extends ParserRuleContext {
		public Id_Context ConversationPriorityName;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_broker_priority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_broker_priority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_broker_priority(this);
		}
	}

	public final Drop_broker_priorityContext drop_broker_priority() throws RecognitionException {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_drop_broker_priority);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2392);
			match(DROP);
			setState(2393);
			match(BROKER);
			setState(2394);
			match(PRIORITY);
			setState(2395);
			((Drop_broker_priorityContext)_localctx).ConversationPriorityName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_certificateContext extends ParserRuleContext {
		public Id_Context certificate_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(TSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(TSqlParser.BEGIN_DIALOG, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(TSqlParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(TSqlParser.DECRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_certificate(this);
		}
	}

	public final Alter_certificateContext alter_certificate() throws RecognitionException {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_alter_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			match(ALTER);
			setState(2398);
			match(CERTIFICATE);
			setState(2399);
			((Alter_certificateContext)_localctx).certificate_name = id_();
			setState(2439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(2400);
				match(REMOVE);
				setState(2401);
				match(PRIVATE_KEY);
				}
				break;
			case 2:
				{
				setState(2402);
				match(WITH);
				setState(2403);
				match(PRIVATE);
				setState(2404);
				match(KEY);
				setState(2405);
				match(LR_BRACKET);
				setState(2428); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2428);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(2406);
						match(FILE);
						setState(2407);
						match(EQUAL);
						setState(2408);
						match(STRING);
						setState(2410);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2409);
							match(COMMA);
							}
						}

						}
						break;
					case DECRYPTION:
						{
						setState(2412);
						match(DECRYPTION);
						setState(2413);
						match(BY);
						setState(2414);
						match(PASSWORD);
						setState(2415);
						match(EQUAL);
						setState(2416);
						match(STRING);
						setState(2418);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2417);
							match(COMMA);
							}
						}

						}
						break;
					case ENCRYPTION:
						{
						setState(2420);
						match(ENCRYPTION);
						setState(2421);
						match(BY);
						setState(2422);
						match(PASSWORD);
						setState(2423);
						match(EQUAL);
						setState(2424);
						match(STRING);
						setState(2426);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2425);
							match(COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2430); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION );
				setState(2432);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(2433);
				match(WITH);
				setState(2434);
				match(ACTIVE);
				setState(2435);
				match(FOR);
				setState(2436);
				match(BEGIN_DIALOG);
				setState(2437);
				match(EQUAL);
				setState(2438);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_encryption_keyContext extends ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public Token algorithm_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_column_encryption_key(this);
		}
	}

	public final Alter_column_encryption_keyContext alter_column_encryption_key() throws RecognitionException {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_alter_column_encryption_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2441);
			match(ALTER);
			setState(2442);
			match(COLUMN);
			setState(2443);
			match(ENCRYPTION);
			setState(2444);
			match(KEY);
			setState(2445);
			((Alter_column_encryption_keyContext)_localctx).column_encryption_key = id_();
			setState(2446);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2447);
			match(VALUE);
			setState(2448);
			match(LR_BRACKET);
			setState(2449);
			match(COLUMN_MASTER_KEY);
			setState(2450);
			match(EQUAL);
			setState(2451);
			((Alter_column_encryption_keyContext)_localctx).column_master_key_name = id_();
			setState(2460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2452);
				match(COMMA);
				setState(2453);
				match(ALGORITHM);
				setState(2454);
				match(EQUAL);
				setState(2455);
				((Alter_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
				setState(2456);
				match(COMMA);
				setState(2457);
				match(ENCRYPTED_VALUE);
				setState(2458);
				match(EQUAL);
				setState(2459);
				match(BINARY);
				}
			}

			setState(2462);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_encryption_keyContext extends ParserRuleContext {
		public Id_Context column_encryption_key;
		public Id_Context column_master_key_name;
		public Token algorithm_name;
		public Token encrypted_value;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> COLUMN_MASTER_KEY() { return getTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public TerminalNode COLUMN_MASTER_KEY(int i) {
			return getToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> ENCRYPTED_VALUE() { return getTokens(TSqlParser.ENCRYPTED_VALUE); }
		public TerminalNode ENCRYPTED_VALUE(int i) {
			return getToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_column_encryption_key(this);
		}
	}

	public final Create_column_encryption_keyContext create_column_encryption_key() throws RecognitionException {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_create_column_encryption_key);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2464);
			match(CREATE);
			setState(2465);
			match(COLUMN);
			setState(2466);
			match(ENCRYPTION);
			setState(2467);
			match(KEY);
			setState(2468);
			((Create_column_encryption_keyContext)_localctx).column_encryption_key = id_();
			setState(2469);
			match(WITH);
			setState(2470);
			match(VALUES);
			setState(2490); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2471);
					match(LR_BRACKET);
					setState(2473);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2472);
						match(COMMA);
						}
					}

					setState(2475);
					match(COLUMN_MASTER_KEY);
					setState(2476);
					match(EQUAL);
					setState(2477);
					((Create_column_encryption_keyContext)_localctx).column_master_key_name = id_();
					setState(2478);
					match(COMMA);
					setState(2479);
					match(ALGORITHM);
					setState(2480);
					match(EQUAL);
					setState(2481);
					((Create_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
					setState(2482);
					match(COMMA);
					setState(2483);
					match(ENCRYPTED_VALUE);
					setState(2484);
					match(EQUAL);
					setState(2485);
					((Create_column_encryption_keyContext)_localctx).encrypted_value = match(BINARY);
					setState(2486);
					match(RR_BRACKET);
					setState(2488);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2487);
						match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2492); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_certificateContext extends ParserRuleContext {
		public Id_Context certificate_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_certificate(this);
		}
	}

	public final Drop_certificateContext drop_certificate() throws RecognitionException {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_drop_certificate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2494);
			match(DROP);
			setState(2495);
			match(CERTIFICATE);
			setState(2496);
			((Drop_certificateContext)_localctx).certificate_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_encryption_keyContext extends ParserRuleContext {
		public Id_Context key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_column_encryption_key(this);
		}
	}

	public final Drop_column_encryption_keyContext drop_column_encryption_key() throws RecognitionException {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_drop_column_encryption_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2498);
			match(DROP);
			setState(2499);
			match(COLUMN);
			setState(2500);
			match(ENCRYPTION);
			setState(2501);
			match(KEY);
			setState(2502);
			((Drop_column_encryption_keyContext)_localctx).key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_master_keyContext extends ParserRuleContext {
		public Id_Context key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_column_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_column_master_key(this);
		}
	}

	public final Drop_column_master_keyContext drop_column_master_key() throws RecognitionException {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_drop_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2504);
			match(DROP);
			setState(2505);
			match(COLUMN);
			setState(2506);
			match(MASTER);
			setState(2507);
			match(KEY);
			setState(2508);
			((Drop_column_master_keyContext)_localctx).key_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_contractContext extends ParserRuleContext {
		public Id_Context dropped_contract_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_contract(this);
		}
	}

	public final Drop_contractContext drop_contract() throws RecognitionException {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_drop_contract);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2510);
			match(DROP);
			setState(2511);
			match(CONTRACT);
			setState(2512);
			((Drop_contractContext)_localctx).dropped_contract_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_credentialContext extends ParserRuleContext {
		public Id_Context credential_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_credential(this);
		}
	}

	public final Drop_credentialContext drop_credential() throws RecognitionException {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_drop_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2514);
			match(DROP);
			setState(2515);
			match(CREDENTIAL);
			setState(2516);
			((Drop_credentialContext)_localctx).credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_cryptograhic_providerContext extends ParserRuleContext {
		public Id_Context provider_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_cryptograhic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_cryptograhic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_cryptograhic_provider(this);
		}
	}

	public final Drop_cryptograhic_providerContext drop_cryptograhic_provider() throws RecognitionException {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_drop_cryptograhic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2518);
			match(DROP);
			setState(2519);
			match(CRYPTOGRAPHIC);
			setState(2520);
			match(PROVIDER);
			setState(2521);
			((Drop_cryptograhic_providerContext)_localctx).provider_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_databaseContext extends ParserRuleContext {
		public Id_Context database_name_or_database_snapshot_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database(this);
		}
	}

	public final Drop_databaseContext drop_database() throws RecognitionException {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_drop_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2523);
			match(DROP);
			setState(2524);
			match(DATABASE);
			setState(2527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2525);
				match(IF);
				setState(2526);
				match(EXISTS);
				}
			}

			setState(2533); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2530);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2529);
						match(COMMA);
						}
					}

					setState(2532);
					((Drop_databaseContext)_localctx).database_name_or_database_snapshot_name = id_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2535); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_audit_specificationContext extends ParserRuleContext {
		public Id_Context audit_specification_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database_audit_specification(this);
		}
	}

	public final Drop_database_audit_specificationContext drop_database_audit_specification() throws RecognitionException {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_drop_database_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2537);
			match(DROP);
			setState(2538);
			match(DATABASE);
			setState(2539);
			match(AUDIT);
			setState(2540);
			match(SPECIFICATION);
			setState(2541);
			((Drop_database_audit_specificationContext)_localctx).audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_encryption_keyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Drop_database_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database_encryption_key(this);
		}
	}

	public final Drop_database_encryption_keyContext drop_database_encryption_key() throws RecognitionException {
		Drop_database_encryption_keyContext _localctx = new Drop_database_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_drop_database_encryption_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2543);
			match(DROP);
			setState(2544);
			match(DATABASE);
			setState(2545);
			match(ENCRYPTION);
			setState(2546);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_scoped_credentialContext extends ParserRuleContext {
		public Id_Context credential_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SCOPED() { return getToken(TSqlParser.SCOPED, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_scoped_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database_scoped_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database_scoped_credential(this);
		}
	}

	public final Drop_database_scoped_credentialContext drop_database_scoped_credential() throws RecognitionException {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_drop_database_scoped_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2548);
			match(DROP);
			setState(2549);
			match(DATABASE);
			setState(2550);
			match(SCOPED);
			setState(2551);
			match(CREDENTIAL);
			setState(2552);
			((Drop_database_scoped_credentialContext)_localctx).credential_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_defaultContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context default_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_default(this);
		}
	}

	public final Drop_defaultContext drop_default() throws RecognitionException {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_drop_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2554);
			match(DROP);
			setState(2555);
			match(DEFAULT);
			setState(2558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2556);
				match(IF);
				setState(2557);
				match(EXISTS);
				}
			}

			{
			setState(2561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2560);
				match(COMMA);
				}
			}

			setState(2566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2563);
				((Drop_defaultContext)_localctx).schema_name = id_();
				setState(2564);
				match(DOT);
				}
				break;
			}
			setState(2568);
			((Drop_defaultContext)_localctx).default_name = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_endpointContext extends ParserRuleContext {
		public Id_Context endPointName;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_endpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_endpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_endpoint(this);
		}
	}

	public final Drop_endpointContext drop_endpoint() throws RecognitionException {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_drop_endpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2570);
			match(DROP);
			setState(2571);
			match(ENDPOINT);
			setState(2572);
			((Drop_endpointContext)_localctx).endPointName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_data_sourceContext extends ParserRuleContext {
		public Id_Context external_data_source_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_data_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_data_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_data_source(this);
		}
	}

	public final Drop_external_data_sourceContext drop_external_data_source() throws RecognitionException {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_drop_external_data_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2574);
			match(DROP);
			setState(2575);
			match(EXTERNAL);
			setState(2576);
			match(DATA);
			setState(2577);
			match(SOURCE);
			setState(2578);
			((Drop_external_data_sourceContext)_localctx).external_data_source_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_file_formatContext extends ParserRuleContext {
		public Id_Context external_file_format_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(TSqlParser.FORMAT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_file_format(this);
		}
	}

	public final Drop_external_file_formatContext drop_external_file_format() throws RecognitionException {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_drop_external_file_format);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2580);
			match(DROP);
			setState(2581);
			match(EXTERNAL);
			setState(2582);
			match(FILE);
			setState(2583);
			match(FORMAT);
			setState(2584);
			((Drop_external_file_formatContext)_localctx).external_file_format_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_libraryContext extends ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_library(this);
		}
	}

	public final Drop_external_libraryContext drop_external_library() throws RecognitionException {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_drop_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2586);
			match(DROP);
			setState(2587);
			match(EXTERNAL);
			setState(2588);
			match(LIBRARY);
			setState(2589);
			((Drop_external_libraryContext)_localctx).library_name = id_();
			setState(2592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2590);
				match(AUTHORIZATION);
				setState(2591);
				((Drop_external_libraryContext)_localctx).owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_resource_poolContext extends ParserRuleContext {
		public Id_Context pool_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_resource_pool(this);
		}
	}

	public final Drop_external_resource_poolContext drop_external_resource_pool() throws RecognitionException {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_drop_external_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2594);
			match(DROP);
			setState(2595);
			match(EXTERNAL);
			setState(2596);
			match(RESOURCE);
			setState(2597);
			match(POOL);
			setState(2598);
			((Drop_external_resource_poolContext)_localctx).pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_tableContext extends ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context table;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_table(this);
		}
	}

	public final Drop_external_tableContext drop_external_table() throws RecognitionException {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_drop_external_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600);
			match(DROP);
			setState(2601);
			match(EXTERNAL);
			setState(2602);
			match(TABLE);
			setState(2606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(2603);
				((Drop_external_tableContext)_localctx).database_name = id_();
				setState(2604);
				match(DOT);
				}
				break;
			}
			setState(2611);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2608);
				((Drop_external_tableContext)_localctx).schema_name = id_();
				setState(2609);
				match(DOT);
				}
				break;
			}
			setState(2613);
			((Drop_external_tableContext)_localctx).table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_notificationsContext extends ParserRuleContext {
		public Id_Context notification_name;
		public Id_Context queue_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_notifications; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_event_notifications(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_event_notifications(this);
		}
	}

	public final Drop_event_notificationsContext drop_event_notifications() throws RecognitionException {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_drop_event_notifications);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2615);
			match(DROP);
			setState(2616);
			match(EVENT);
			setState(2617);
			match(NOTIFICATION);
			setState(2622); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2618);
					match(COMMA);
					}
				}

				setState(2621);
				((Drop_event_notificationsContext)_localctx).notification_name = id_();
				}
				}
				setState(2624); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==COMMA );
			setState(2626);
			match(ON);
			setState(2631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2627);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2628);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2629);
				match(QUEUE);
				setState(2630);
				((Drop_event_notificationsContext)_localctx).queue_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_sessionContext extends ParserRuleContext {
		public Id_Context event_session_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_event_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_event_session(this);
		}
	}

	public final Drop_event_sessionContext drop_event_session() throws RecognitionException {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_event_session);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			match(DROP);
			setState(2634);
			match(EVENT);
			setState(2635);
			match(SESSION);
			setState(2636);
			((Drop_event_sessionContext)_localctx).event_session_name = id_();
			setState(2637);
			match(ON);
			setState(2638);
			match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_catalogContext extends ParserRuleContext {
		public Id_Context catalog_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_fulltext_catalog(this);
		}
	}

	public final Drop_fulltext_catalogContext drop_fulltext_catalog() throws RecognitionException {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_drop_fulltext_catalog);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2640);
			match(DROP);
			setState(2641);
			match(FULLTEXT);
			setState(2642);
			match(CATALOG);
			setState(2643);
			((Drop_fulltext_catalogContext)_localctx).catalog_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_indexContext extends ParserRuleContext {
		public Id_Context schema;
		public Id_Context table;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_fulltext_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_fulltext_index(this);
		}
	}

	public final Drop_fulltext_indexContext drop_fulltext_index() throws RecognitionException {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_drop_fulltext_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2645);
			match(DROP);
			setState(2646);
			match(FULLTEXT);
			setState(2647);
			match(INDEX);
			setState(2648);
			match(ON);
			setState(2652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2649);
				((Drop_fulltext_indexContext)_localctx).schema = id_();
				setState(2650);
				match(DOT);
				}
				break;
			}
			setState(2654);
			((Drop_fulltext_indexContext)_localctx).table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_stoplistContext extends ParserRuleContext {
		public Id_Context stoplist_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_fulltext_stoplist(this);
		}
	}

	public final Drop_fulltext_stoplistContext drop_fulltext_stoplist() throws RecognitionException {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_drop_fulltext_stoplist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			match(DROP);
			setState(2657);
			match(FULLTEXT);
			setState(2658);
			match(STOPLIST);
			setState(2659);
			((Drop_fulltext_stoplistContext)_localctx).stoplist_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_loginContext extends ParserRuleContext {
		public Id_Context login_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_login; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_login(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_login(this);
		}
	}

	public final Drop_loginContext drop_login() throws RecognitionException {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_drop_login);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			match(DROP);
			setState(2662);
			match(LOGIN);
			setState(2663);
			((Drop_loginContext)_localctx).login_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_master_keyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_master_key(this);
		}
	}

	public final Drop_master_keyContext drop_master_key() throws RecognitionException {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_drop_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2665);
			match(DROP);
			setState(2666);
			match(MASTER);
			setState(2667);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_message_typeContext extends ParserRuleContext {
		public Id_Context message_type_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_message_type(this);
		}
	}

	public final Drop_message_typeContext drop_message_type() throws RecognitionException {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_drop_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2669);
			match(DROP);
			setState(2670);
			match(MESSAGE);
			setState(2671);
			match(TYPE);
			setState(2672);
			((Drop_message_typeContext)_localctx).message_type_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_functionContext extends ParserRuleContext {
		public Id_Context partition_function_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_partition_function(this);
		}
	}

	public final Drop_partition_functionContext drop_partition_function() throws RecognitionException {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_drop_partition_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2674);
			match(DROP);
			setState(2675);
			match(PARTITION);
			setState(2676);
			match(FUNCTION);
			setState(2677);
			((Drop_partition_functionContext)_localctx).partition_function_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_schemeContext extends ParserRuleContext {
		public Id_Context partition_scheme_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_partition_scheme(this);
		}
	}

	public final Drop_partition_schemeContext drop_partition_scheme() throws RecognitionException {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_drop_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			match(DROP);
			setState(2680);
			match(PARTITION);
			setState(2681);
			match(SCHEME);
			setState(2682);
			((Drop_partition_schemeContext)_localctx).partition_scheme_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_queueContext extends ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_queue(this);
		}
	}

	public final Drop_queueContext drop_queue() throws RecognitionException {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_drop_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2684);
			match(DROP);
			setState(2685);
			match(QUEUE);
			setState(2689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(2686);
				((Drop_queueContext)_localctx).database_name = id_();
				setState(2687);
				match(DOT);
				}
				break;
			}
			setState(2694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2691);
				((Drop_queueContext)_localctx).schema_name = id_();
				setState(2692);
				match(DOT);
				}
				break;
			}
			setState(2696);
			((Drop_queueContext)_localctx).queue_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_remote_service_bindingContext extends ParserRuleContext {
		public Id_Context binding_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_remote_service_binding(this);
		}
	}

	public final Drop_remote_service_bindingContext drop_remote_service_binding() throws RecognitionException {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_drop_remote_service_binding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2698);
			match(DROP);
			setState(2699);
			match(REMOTE);
			setState(2700);
			match(SERVICE);
			setState(2701);
			match(BINDING);
			setState(2702);
			((Drop_remote_service_bindingContext)_localctx).binding_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_resource_poolContext extends ParserRuleContext {
		public Id_Context pool_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_resource_pool(this);
		}
	}

	public final Drop_resource_poolContext drop_resource_pool() throws RecognitionException {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_drop_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2704);
			match(DROP);
			setState(2705);
			match(RESOURCE);
			setState(2706);
			match(POOL);
			setState(2707);
			((Drop_resource_poolContext)_localctx).pool_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_db_roleContext extends ParserRuleContext {
		public Id_Context role_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_db_role(this);
		}
	}

	public final Drop_db_roleContext drop_db_role() throws RecognitionException {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_drop_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2709);
			match(DROP);
			setState(2710);
			match(ROLE);
			setState(2713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2711);
				match(IF);
				setState(2712);
				match(EXISTS);
				}
			}

			setState(2715);
			((Drop_db_roleContext)_localctx).role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_routeContext extends ParserRuleContext {
		public Id_Context route_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_route(this);
		}
	}

	public final Drop_routeContext drop_route() throws RecognitionException {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_drop_route);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2717);
			match(DROP);
			setState(2718);
			match(ROUTE);
			setState(2719);
			((Drop_routeContext)_localctx).route_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ruleContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(TSqlParser.RULE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_rule(this);
		}
	}

	public final Drop_ruleContext drop_rule() throws RecognitionException {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_drop_rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2721);
			match(DROP);
			setState(2722);
			match(RULE);
			setState(2725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(2723);
				match(IF);
				setState(2724);
				match(EXISTS);
				}
				break;
			}
			setState(2736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2727);
					match(COMMA);
					}
				}

				setState(2733);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					setState(2730);
					((Drop_ruleContext)_localctx).schema_name = id_();
					setState(2731);
					match(DOT);
					}
					break;
				}
				setState(2735);
				((Drop_ruleContext)_localctx).rule_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schemaContext extends ParserRuleContext {
		public Id_Context schema_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_schema(this);
		}
	}

	public final Drop_schemaContext drop_schema() throws RecognitionException {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_drop_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2738);
			match(DROP);
			setState(2739);
			match(SCHEMA);
			setState(2742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2740);
				match(IF);
				setState(2741);
				match(EXISTS);
				}
			}

			setState(2744);
			((Drop_schemaContext)_localctx).schema_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_search_property_listContext extends ParserRuleContext {
		public Id_Context property_list_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_search_property_list(this);
		}
	}

	public final Drop_search_property_listContext drop_search_property_list() throws RecognitionException {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_drop_search_property_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2746);
			match(DROP);
			setState(2747);
			match(SEARCH);
			setState(2748);
			match(PROPERTY);
			setState(2749);
			match(LIST);
			setState(2750);
			((Drop_search_property_listContext)_localctx).property_list_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_security_policyContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_security_policy(this);
		}
	}

	public final Drop_security_policyContext drop_security_policy() throws RecognitionException {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_drop_security_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2752);
			match(DROP);
			setState(2753);
			match(SECURITY);
			setState(2754);
			match(POLICY);
			setState(2757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2755);
				match(IF);
				setState(2756);
				match(EXISTS);
				}
			}

			setState(2762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2759);
				((Drop_security_policyContext)_localctx).schema_name = id_();
				setState(2760);
				match(DOT);
				}
				break;
			}
			setState(2764);
			((Drop_security_policyContext)_localctx).security_policy_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_sequence(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_drop_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2766);
			match(DROP);
			setState(2767);
			match(SEQUENCE);
			setState(2770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2768);
				match(IF);
				setState(2769);
				match(EXISTS);
				}
				break;
			}
			setState(2786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				setState(2773);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2772);
					match(COMMA);
					}
				}

				setState(2778);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
				case 1:
					{
					setState(2775);
					((Drop_sequenceContext)_localctx).database_name = id_();
					setState(2776);
					match(DOT);
					}
					break;
				}
				setState(2783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					setState(2780);
					((Drop_sequenceContext)_localctx).schema_name = id_();
					setState(2781);
					match(DOT);
					}
					break;
				}
				setState(2785);
				((Drop_sequenceContext)_localctx).sequence_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_auditContext extends ParserRuleContext {
		public Id_Context audit_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_server_audit(this);
		}
	}

	public final Drop_server_auditContext drop_server_audit() throws RecognitionException {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_drop_server_audit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2788);
			match(DROP);
			setState(2789);
			match(SERVER);
			setState(2790);
			match(AUDIT);
			setState(2791);
			((Drop_server_auditContext)_localctx).audit_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_audit_specificationContext extends ParserRuleContext {
		public Id_Context audit_specification_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_server_audit_specification(this);
		}
	}

	public final Drop_server_audit_specificationContext drop_server_audit_specification() throws RecognitionException {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_drop_server_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2793);
			match(DROP);
			setState(2794);
			match(SERVER);
			setState(2795);
			match(AUDIT);
			setState(2796);
			match(SPECIFICATION);
			setState(2797);
			((Drop_server_audit_specificationContext)_localctx).audit_specification_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_roleContext extends ParserRuleContext {
		public Id_Context role_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_server_role(this);
		}
	}

	public final Drop_server_roleContext drop_server_role() throws RecognitionException {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_drop_server_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2799);
			match(DROP);
			setState(2800);
			match(SERVER);
			setState(2801);
			match(ROLE);
			setState(2802);
			((Drop_server_roleContext)_localctx).role_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_serviceContext extends ParserRuleContext {
		public Id_Context dropped_service_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_service(this);
		}
	}

	public final Drop_serviceContext drop_service() throws RecognitionException {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_drop_service);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804);
			match(DROP);
			setState(2805);
			match(SERVICE);
			setState(2806);
			((Drop_serviceContext)_localctx).dropped_service_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_signatureContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context module_name;
		public Id_Context cert_name;
		public Id_Context Asym_key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSqlParser.SIGNATURE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode COUNTER() { return getToken(TSqlParser.COUNTER, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_signature(this);
		}
	}

	public final Drop_signatureContext drop_signature() throws RecognitionException {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_drop_signature);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2808);
			match(DROP);
			setState(2810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNTER) {
				{
				setState(2809);
				match(COUNTER);
				}
			}

			setState(2812);
			match(SIGNATURE);
			setState(2813);
			match(FROM);
			setState(2817);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2814);
				((Drop_signatureContext)_localctx).schema_name = id_();
				setState(2815);
				match(DOT);
				}
				break;
			}
			setState(2819);
			((Drop_signatureContext)_localctx).module_name = id_();
			setState(2820);
			match(BY);
			setState(2832); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2832);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
					case 1:
						{
						setState(2822);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2821);
							match(COMMA);
							}
						}

						setState(2824);
						match(CERTIFICATE);
						setState(2825);
						((Drop_signatureContext)_localctx).cert_name = id_();
						}
						break;
					case 2:
						{
						setState(2827);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2826);
							match(COMMA);
							}
						}

						setState(2829);
						match(ASYMMETRIC);
						setState(2830);
						match(KEY);
						setState(2831);
						((Drop_signatureContext)_localctx).Asym_key_name = id_();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2834); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statistics_name_azure_dw_and_pdwContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context object_name;
		public Id_Context statistics_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics_name_azure_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_statistics_name_azure_dw_and_pdw(this);
		}
	}

	public final Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() throws RecognitionException {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2836);
			match(DROP);
			setState(2837);
			match(STATISTICS);
			setState(2841);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(2838);
				((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).schema_name = id_();
				setState(2839);
				match(DOT);
				}
				break;
			}
			setState(2843);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).object_name = id_();
			setState(2844);
			match(DOT);
			setState(2845);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).statistics_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_symmetric_keyContext extends ParserRuleContext {
		public Id_Context symmetric_key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_symmetric_key(this);
		}
	}

	public final Drop_symmetric_keyContext drop_symmetric_key() throws RecognitionException {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_drop_symmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			match(DROP);
			setState(2848);
			match(SYMMETRIC);
			setState(2849);
			match(KEY);
			setState(2850);
			((Drop_symmetric_keyContext)_localctx).symmetric_key_name = id_();
			setState(2854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				setState(2851);
				match(REMOVE);
				setState(2852);
				match(PROVIDER);
				setState(2853);
				match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_synonymContext extends ParserRuleContext {
		public Id_Context schema;
		public Id_Context synonym_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_synonym(this);
		}
	}

	public final Drop_synonymContext drop_synonym() throws RecognitionException {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_drop_synonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2856);
			match(DROP);
			setState(2857);
			match(SYNONYM);
			setState(2860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2858);
				match(IF);
				setState(2859);
				match(EXISTS);
				}
			}

			setState(2865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(2862);
				((Drop_synonymContext)_localctx).schema = id_();
				setState(2863);
				match(DOT);
				}
				break;
			}
			setState(2867);
			((Drop_synonymContext)_localctx).synonym_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_userContext extends ParserRuleContext {
		public Id_Context user_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_user(this);
		}
	}

	public final Drop_userContext drop_user() throws RecognitionException {
		Drop_userContext _localctx = new Drop_userContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_drop_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2869);
			match(DROP);
			setState(2870);
			match(USER);
			setState(2873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2871);
				match(IF);
				setState(2872);
				match(EXISTS);
				}
			}

			setState(2875);
			((Drop_userContext)_localctx).user_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_workload_groupContext extends ParserRuleContext {
		public Id_Context group_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_workload_group(this);
		}
	}

	public final Drop_workload_groupContext drop_workload_group() throws RecognitionException {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_drop_workload_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			match(DROP);
			setState(2878);
			match(WORKLOAD);
			setState(2879);
			match(GROUP);
			setState(2880);
			((Drop_workload_groupContext)_localctx).group_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_xml_schema_collectionContext extends ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_xml_schema_collection(this);
		}
	}

	public final Drop_xml_schema_collectionContext drop_xml_schema_collection() throws RecognitionException {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_drop_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2882);
			match(DROP);
			setState(2883);
			match(XML);
			setState(2884);
			match(SCHEMA);
			setState(2885);
			match(COLLECTION);
			setState(2889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2886);
				((Drop_xml_schema_collectionContext)_localctx).relational_schema = id_();
				setState(2887);
				match(DOT);
				}
				break;
			}
			setState(2891);
			((Drop_xml_schema_collectionContext)_localctx).sql_identifier = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disable_triggerContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDisable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDisable_trigger(this);
		}
	}

	public final Disable_triggerContext disable_trigger() throws RecognitionException {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_disable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2893);
			match(DISABLE);
			setState(2894);
			match(TRIGGER);
			setState(2909);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				setState(2904); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2896);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2895);
						match(COMMA);
						}
					}

					setState(2901);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
					case 1:
						{
						setState(2898);
						((Disable_triggerContext)_localctx).schema_name = id_();
						setState(2899);
						match(DOT);
						}
						break;
					}
					setState(2903);
					((Disable_triggerContext)_localctx).trigger_name = id_();
					}
					}
					setState(2906); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==COMMA );
				}
				break;
			case ALL:
				{
				setState(2908);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2911);
			match(ON);
			setState(2921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2915);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					setState(2912);
					((Disable_triggerContext)_localctx).schema_id = id_();
					setState(2913);
					match(DOT);
					}
					break;
				}
				setState(2917);
				((Disable_triggerContext)_localctx).object_name = id_();
				}
				break;
			case DATABASE:
				{
				setState(2918);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2919);
				match(ALL);
				setState(2920);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_triggerContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context trigger_name;
		public Id_Context schema_id;
		public Id_Context object_name;
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEnable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEnable_trigger(this);
		}
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_enable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2923);
			match(ENABLE);
			setState(2924);
			match(TRIGGER);
			setState(2939);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				setState(2934); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2926);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2925);
						match(COMMA);
						}
					}

					setState(2931);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
					case 1:
						{
						setState(2928);
						((Enable_triggerContext)_localctx).schema_name = id_();
						setState(2929);
						match(DOT);
						}
						break;
					}
					setState(2933);
					((Enable_triggerContext)_localctx).trigger_name = id_();
					}
					}
					setState(2936); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==COMMA );
				}
				break;
			case ALL:
				{
				setState(2938);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2941);
			match(ON);
			setState(2951);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					setState(2942);
					((Enable_triggerContext)_localctx).schema_id = id_();
					setState(2943);
					match(DOT);
					}
					break;
				}
				setState(2947);
				((Enable_triggerContext)_localctx).object_name = id_();
				}
				break;
			case DATABASE:
				{
				setState(2948);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2949);
				match(ALL);
				setState(2950);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_tableContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode LOCK() { return getToken(TSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public TerminalNode MODE() { return getToken(TSqlParser.MODE, 0); }
		public TerminalNode SHARE() { return getToken(TSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(TSqlParser.EXCLUSIVE, 0); }
		public TerminalNode WAIT() { return getToken(TSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterLock_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitLock_table(this);
		}
	}

	public final Lock_tableContext lock_table() throws RecognitionException {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_lock_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2953);
			match(LOCK);
			setState(2954);
			match(TABLE);
			setState(2955);
			table_name();
			setState(2956);
			match(IN);
			setState(2957);
			_la = _input.LA(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2958);
			match(MODE);
			setState(2962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2959);
				match(WAIT);
				setState(2960);
				((Lock_tableContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(2961);
				match(NOWAIT);
				}
				break;
			}
			setState(2965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				setState(2964);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_tableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(TSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode PARTITIONS() { return getToken(TSqlParser.PARTITIONS, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTruncate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTruncate_table(this);
		}
	}

	public final Truncate_tableContext truncate_table() throws RecognitionException {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_truncate_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2967);
			match(TRUNCATE);
			setState(2968);
			match(TABLE);
			setState(2969);
			table_name();
			setState(2989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2970);
				match(WITH);
				setState(2971);
				match(LR_BRACKET);
				setState(2972);
				match(PARTITIONS);
				setState(2973);
				match(LR_BRACKET);
				setState(2983); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2975);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2974);
						match(COMMA);
						}
					}

					setState(2981);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
					case 1:
						{
						setState(2977);
						match(DECIMAL);
						}
						break;
					case 2:
						{
						setState(2978);
						match(DECIMAL);
						setState(2979);
						match(TO);
						setState(2980);
						match(DECIMAL);
						}
						break;
					}
					}
					}
					setState(2985); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DECIMAL || _la==COMMA );
				setState(2987);
				match(RR_BRACKET);
				setState(2988);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_master_keyContext extends ParserRuleContext {
		public Id_Context key_name;
		public Token key_store_provider_name;
		public Token key_path;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode KEY_STORE_PROVIDER_NAME() { return getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode KEY_PATH() { return getToken(TSqlParser.KEY_PATH, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_column_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_column_master_key(this);
		}
	}

	public final Create_column_master_keyContext create_column_master_key() throws RecognitionException {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_create_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2991);
			match(CREATE);
			setState(2992);
			match(COLUMN);
			setState(2993);
			match(MASTER);
			setState(2994);
			match(KEY);
			setState(2995);
			((Create_column_master_keyContext)_localctx).key_name = id_();
			setState(2996);
			match(WITH);
			setState(2997);
			match(LR_BRACKET);
			setState(2998);
			match(KEY_STORE_PROVIDER_NAME);
			setState(2999);
			match(EQUAL);
			setState(3000);
			((Create_column_master_keyContext)_localctx).key_store_provider_name = match(STRING);
			setState(3001);
			match(COMMA);
			setState(3002);
			match(KEY_PATH);
			setState(3003);
			match(EQUAL);
			setState(3004);
			((Create_column_master_keyContext)_localctx).key_path = match(STRING);
			setState(3005);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_credentialContext extends ParserRuleContext {
		public Id_Context credential_name;
		public Token identity_name;
		public Token secret;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_credential(this);
		}
	}

	public final Alter_credentialContext alter_credential() throws RecognitionException {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_alter_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3007);
			match(ALTER);
			setState(3008);
			match(CREDENTIAL);
			setState(3009);
			((Alter_credentialContext)_localctx).credential_name = id_();
			setState(3010);
			match(WITH);
			setState(3011);
			match(IDENTITY);
			setState(3012);
			match(EQUAL);
			setState(3013);
			((Alter_credentialContext)_localctx).identity_name = match(STRING);
			setState(3018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3014);
				match(COMMA);
				setState(3015);
				match(SECRET);
				setState(3016);
				match(EQUAL);
				setState(3017);
				((Alter_credentialContext)_localctx).secret = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_credentialContext extends ParserRuleContext {
		public Id_Context credential_name;
		public Token identity_name;
		public Token secret;
		public Id_Context cryptographic_provider_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_credential(this);
		}
	}

	public final Create_credentialContext create_credential() throws RecognitionException {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_create_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3020);
			match(CREATE);
			setState(3021);
			match(CREDENTIAL);
			setState(3022);
			((Create_credentialContext)_localctx).credential_name = id_();
			setState(3023);
			match(WITH);
			setState(3024);
			match(IDENTITY);
			setState(3025);
			match(EQUAL);
			setState(3026);
			((Create_credentialContext)_localctx).identity_name = match(STRING);
			setState(3031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3027);
				match(COMMA);
				setState(3028);
				match(SECRET);
				setState(3029);
				match(EQUAL);
				setState(3030);
				((Create_credentialContext)_localctx).secret = match(STRING);
				}
			}

			setState(3037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3033);
				match(FOR);
				setState(3034);
				match(CRYPTOGRAPHIC);
				setState(3035);
				match(PROVIDER);
				setState(3036);
				((Create_credentialContext)_localctx).cryptographic_provider_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_cryptographic_providerContext extends ParserRuleContext {
		public Id_Context provider_name;
		public Token crypto_provider_ddl_file;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_cryptographic_provider(this);
		}
	}

	public final Alter_cryptographic_providerContext alter_cryptographic_provider() throws RecognitionException {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_alter_cryptographic_provider);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3039);
			match(ALTER);
			setState(3040);
			match(CRYPTOGRAPHIC);
			setState(3041);
			match(PROVIDER);
			setState(3042);
			((Alter_cryptographic_providerContext)_localctx).provider_name = id_();
			setState(3047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3043);
				match(FROM);
				setState(3044);
				match(FILE);
				setState(3045);
				match(EQUAL);
				setState(3046);
				((Alter_cryptographic_providerContext)_localctx).crypto_provider_ddl_file = match(STRING);
				}
			}

			setState(3050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(3049);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_cryptographic_providerContext extends ParserRuleContext {
		public Id_Context provider_name;
		public Token path_of_DLL;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_cryptographic_provider(this);
		}
	}

	public final Create_cryptographic_providerContext create_cryptographic_provider() throws RecognitionException {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_create_cryptographic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3052);
			match(CREATE);
			setState(3053);
			match(CRYPTOGRAPHIC);
			setState(3054);
			match(PROVIDER);
			setState(3055);
			((Create_cryptographic_providerContext)_localctx).provider_name = id_();
			setState(3056);
			match(FROM);
			setState(3057);
			match(FILE);
			setState(3058);
			match(EQUAL);
			setState(3059);
			((Create_cryptographic_providerContext)_localctx).path_of_DLL = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_notificationContext extends ParserRuleContext {
		public Id_Context event_notification_name;
		public Id_Context queue_name;
		public Id_Context event_type_or_group;
		public Token broker_service;
		public Token broker_service_specifier_or_current_database;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FAN_IN() { return getToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_notification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_event_notification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_event_notification(this);
		}
	}

	public final Create_event_notificationContext create_event_notification() throws RecognitionException {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_create_event_notification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3061);
			match(CREATE);
			setState(3062);
			match(EVENT);
			setState(3063);
			match(NOTIFICATION);
			setState(3064);
			((Create_event_notificationContext)_localctx).event_notification_name = id_();
			setState(3065);
			match(ON);
			setState(3070);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(3066);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(3067);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(3068);
				match(QUEUE);
				setState(3069);
				((Create_event_notificationContext)_localctx).queue_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3072);
				match(WITH);
				setState(3073);
				match(FAN_IN);
				}
			}

			setState(3076);
			match(FOR);
			setState(3081); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3077);
					match(COMMA);
					}
				}

				setState(3080);
				((Create_event_notificationContext)_localctx).event_type_or_group = id_();
				}
				}
				setState(3083); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==COMMA );
			setState(3085);
			match(TO);
			setState(3086);
			match(SERVICE);
			setState(3087);
			((Create_event_notificationContext)_localctx).broker_service = match(STRING);
			setState(3088);
			match(COMMA);
			setState(3089);
			((Create_event_notificationContext)_localctx).broker_service_specifier_or_current_database = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_event_sessionContext extends ParserRuleContext {
		public Id_Context event_session_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context event_name;
		public Id_Context event_customizable_attributue;
		public Id_Context action_name;
		public Id_Context target_name;
		public Id_Context target_parameter_name;
		public Token max_memory;
		public Token max_dispatch_latency_seconds;
		public Token max_event_size;
		public List<TerminalNode> EVENT() { return getTokens(TSqlParser.EVENT); }
		public TerminalNode EVENT(int i) {
			return getToken(TSqlParser.EVENT, i);
		}
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(TSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(TSqlParser.TARGET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode STOP() { return getToken(TSqlParser.STOP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> SET() { return getTokens(TSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(TSqlParser.SET, i);
		}
		public TerminalNode MAX_MEMORY() { return getToken(TSqlParser.MAX_MEMORY, 0); }
		public TerminalNode EVENT_RETENTION_MODE() { return getToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public TerminalNode MAX_DISPATCH_LATENCY() { return getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public TerminalNode MAX_EVENT_SIZE() { return getToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public TerminalNode MEMORY_PARTITION_MODE() { return getToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public TerminalNode TRACK_CAUSALITY() { return getToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public TerminalNode STARTUP_STATE() { return getToken(TSqlParser.STARTUP_STATE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> KB() { return getTokens(TSqlParser.KB); }
		public TerminalNode KB(int i) {
			return getToken(TSqlParser.KB, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public TerminalNode ALLOW_SINGLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public TerminalNode NO_EVENT_LOSS() { return getToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PER_NODE() { return getToken(TSqlParser.PER_NODE, 0); }
		public TerminalNode PER_CPU() { return getToken(TSqlParser.PER_CPU, 0); }
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode INFINITE() { return getToken(TSqlParser.INFINITE, 0); }
		public List<TerminalNode> ACTION() { return getTokens(TSqlParser.ACTION); }
		public TerminalNode ACTION(int i) {
			return getToken(TSqlParser.ACTION, i);
		}
		public List<TerminalNode> WHERE() { return getTokens(TSqlParser.WHERE); }
		public TerminalNode WHERE(int i) {
			return getToken(TSqlParser.WHERE, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_event_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_event_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_event_session(this);
		}
	}

	public final Create_or_alter_event_sessionContext create_or_alter_event_session() throws RecognitionException {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3091);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3092);
			match(EVENT);
			setState(3093);
			match(SESSION);
			setState(3094);
			((Create_or_alter_event_sessionContext)_localctx).event_session_name = id_();
			setState(3095);
			match(ON);
			setState(3096);
			match(SERVER);
			setState(3164);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3098);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3097);
						match(COMMA);
						}
					}

					setState(3100);
					match(ADD);
					setState(3101);
					match(EVENT);
					{
					setState(3105);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
					case 1:
						{
						setState(3102);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id_();
						setState(3103);
						match(DOT);
						}
						break;
					}
					setState(3107);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id_();
					setState(3108);
					match(DOT);
					setState(3109);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id_();
					}
					setState(3159);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3111);
							match(LR_BRACKET);
							setState(3125);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==SET) {
								{
								setState(3112);
								match(SET);
								setState(3122);
								_errHandler.sync(this);
								_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
								while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
									if ( _alt==1 ) {
										{
										{
										setState(3114);
										_errHandler.sync(this);
										_la = _input.LA(1);
										if (_la==COMMA) {
											{
											setState(3113);
											match(COMMA);
											}
										}

										setState(3116);
										((Create_or_alter_event_sessionContext)_localctx).event_customizable_attributue = id_();
										setState(3117);
										match(EQUAL);
										setState(3118);
										_la = _input.LA(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										_errHandler.recoverInline(this);
										}
										else {
											if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
											_errHandler.reportMatch(this);
											consume();
										}
										}
										} 
									}
									setState(3124);
									_errHandler.sync(this);
									_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
								}
								}
							}

							setState(3147); 
							_errHandler.sync(this);
							_la = _input.LA(1);
							do {
								{
								{
								setState(3127);
								match(ACTION);
								setState(3128);
								match(LR_BRACKET);
								setState(3141); 
								_errHandler.sync(this);
								_la = _input.LA(1);
								do {
									{
									{
									setState(3130);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(3129);
										match(COMMA);
										}
									}

									setState(3135);
									_errHandler.sync(this);
									switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
									case 1:
										{
										setState(3132);
										((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id_();
										setState(3133);
										match(DOT);
										}
										break;
									}
									setState(3137);
									((Create_or_alter_event_sessionContext)_localctx).event_package_name = id_();
									setState(3138);
									match(DOT);
									setState(3139);
									((Create_or_alter_event_sessionContext)_localctx).action_name = id_();
									}
									}
									setState(3143); 
									_errHandler.sync(this);
									_la = _input.LA(1);
								} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==COMMA );
								setState(3145);
								match(RR_BRACKET);
								}
								}
								setState(3149); 
								_errHandler.sync(this);
								_la = _input.LA(1);
							} while ( _la==ACTION );
							setState(3153);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==WHERE) {
								{
								setState(3151);
								match(WHERE);
								setState(3152);
								event_session_predicate_expression();
								}
							}

							setState(3155);
							match(RR_BRACKET);
							}
							} 
						}
						setState(3161);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
					}
					}
					} 
				}
				setState(3166);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
			}
			setState(3183);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3168);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3167);
						match(COMMA);
						}
					}

					setState(3170);
					match(DROP);
					setState(3171);
					match(EVENT);
					setState(3175);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
					case 1:
						{
						setState(3172);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id_();
						setState(3173);
						match(DOT);
						}
						break;
					}
					setState(3177);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id_();
					setState(3178);
					match(DOT);
					setState(3179);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id_();
					}
					} 
				}
				setState(3185);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			}
			setState(3227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				{
				setState(3186);
				match(ADD);
				setState(3187);
				match(TARGET);
				setState(3191);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					setState(3188);
					((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id_();
					setState(3189);
					match(DOT);
					}
					break;
				}
				setState(3193);
				((Create_or_alter_event_sessionContext)_localctx).event_package_name = id_();
				setState(3194);
				match(DOT);
				setState(3195);
				((Create_or_alter_event_sessionContext)_localctx).target_name = id_();
				}
				setState(3222);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,262,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3197);
						match(LR_BRACKET);
						setState(3198);
						match(SET);
						setState(3214); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3200);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3199);
								match(COMMA);
								}
							}

							setState(3202);
							((Create_or_alter_event_sessionContext)_localctx).target_parameter_name = id_();
							setState(3203);
							match(EQUAL);
							setState(3212);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
							case LR_BRACKET:
								{
								setState(3205);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==LR_BRACKET) {
									{
									setState(3204);
									match(LR_BRACKET);
									}
								}

								setState(3207);
								match(DECIMAL);
								setState(3209);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
								case 1:
									{
									setState(3208);
									match(RR_BRACKET);
									}
									break;
								}
								}
								break;
							case STRING:
								{
								setState(3211);
								match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							setState(3216); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==COMMA );
						setState(3218);
						match(RR_BRACKET);
						}
						} 
					}
					setState(3224);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,262,_ctx);
				}
				}
				}
				setState(3229);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3243);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,265,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3230);
					match(DROP);
					setState(3231);
					match(TARGET);
					setState(3235);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
					case 1:
						{
						setState(3232);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id_();
						setState(3233);
						match(DOT);
						}
						break;
					}
					setState(3237);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id_();
					setState(3238);
					match(DOT);
					setState(3239);
					((Create_or_alter_event_sessionContext)_localctx).target_name = id_();
					}
					} 
				}
				setState(3245);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,265,_ctx);
			}
			setState(3311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(3246);
				match(WITH);
				setState(3247);
				match(LR_BRACKET);
				setState(3255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					setState(3249);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3248);
						match(COMMA);
						}
					}

					setState(3251);
					match(MAX_MEMORY);
					setState(3252);
					match(EQUAL);
					setState(3253);
					((Create_or_alter_event_sessionContext)_localctx).max_memory = match(DECIMAL);
					setState(3254);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3263);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					setState(3258);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3257);
						match(COMMA);
						}
					}

					setState(3260);
					match(EVENT_RETENTION_MODE);
					setState(3261);
					match(EQUAL);
					setState(3262);
					_la = _input.LA(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(3266);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3265);
						match(COMMA);
						}
					}

					setState(3268);
					match(MAX_DISPATCH_LATENCY);
					setState(3269);
					match(EQUAL);
					setState(3273);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(3270);
						((Create_or_alter_event_sessionContext)_localctx).max_dispatch_latency_seconds = match(DECIMAL);
						setState(3271);
						match(SECONDS);
						}
						break;
					case INFINITE:
						{
						setState(3272);
						match(INFINITE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(3284);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(3278);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3277);
						match(COMMA);
						}
					}

					setState(3280);
					match(MAX_EVENT_SIZE);
					setState(3281);
					match(EQUAL);
					setState(3282);
					((Create_or_alter_event_sessionContext)_localctx).max_event_size = match(DECIMAL);
					setState(3283);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3292);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(3287);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3286);
						match(COMMA);
						}
					}

					setState(3289);
					match(MEMORY_PARTITION_MODE);
					setState(3290);
					match(EQUAL);
					setState(3291);
					_la = _input.LA(1);
					if ( !(((((_la - 728)) & ~0x3f) == 0 && ((1L << (_la - 728)) & ((1L << (NONE - 728)) | (1L << (PER_CPU - 728)) | (1L << (PER_NODE - 728)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(3295);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3294);
						match(COMMA);
						}
					}

					setState(3297);
					match(TRACK_CAUSALITY);
					setState(3298);
					match(EQUAL);
					setState(3299);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTUP_STATE || _la==COMMA) {
					{
					setState(3303);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3302);
						match(COMMA);
						}
					}

					setState(3305);
					match(STARTUP_STATE);
					setState(3306);
					match(EQUAL);
					setState(3307);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3310);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				setState(3313);
				match(STATE);
				setState(3314);
				match(EQUAL);
				setState(3315);
				_la = _input.LA(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_expressionContext extends ParserRuleContext {
		public List<Event_session_predicate_factorContext> event_session_predicate_factor() {
			return getRuleContexts(Event_session_predicate_factorContext.class);
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return getRuleContext(Event_session_predicate_factorContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(TSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEvent_session_predicate_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEvent_session_predicate_expression(this);
		}
	}

	public final Event_session_predicate_expressionContext event_session_predicate_expression() throws RecognitionException {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_event_session_predicate_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3334); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3318);
					match(COMMA);
					}
				}

				setState(3322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND || _la==OR) {
					{
					setState(3321);
					_la = _input.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3324);
					match(NOT);
					}
				}

				setState(3332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					setState(3327);
					event_session_predicate_factor();
					}
					break;
				case 2:
					{
					setState(3328);
					match(LR_BRACKET);
					setState(3329);
					event_session_predicate_expression();
					setState(3330);
					match(RR_BRACKET);
					}
					break;
				}
				}
				}
				setState(3336); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AND || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (NOT - 104)) | (1L << (OPENJSON - 104)) | (1L << (OR - 104)) | (1L << (PRECISION - 104)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==LR_BRACKET || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_factorContext extends ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return getRuleContext(Event_session_predicate_leafContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return getRuleContext(Event_session_predicate_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEvent_session_predicate_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEvent_session_predicate_factor(this);
		}
	}

	public final Event_session_predicate_factorContext event_session_predicate_factor() throws RecognitionException {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_event_session_predicate_factor);
		try {
			setState(3343);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3338);
				event_session_predicate_leaf();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3339);
				match(LR_BRACKET);
				setState(3340);
				event_session_predicate_expression();
				setState(3341);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_leafContext extends ParserRuleContext {
		public Id_Context event_field_name;
		public Id_Context event_module_guid;
		public Id_Context event_package_name;
		public Id_Context predicate_source_name;
		public Id_Context predicate_compare_name;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_leaf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEvent_session_predicate_leaf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEvent_session_predicate_leaf(this);
		}
	}

	public final Event_session_predicate_leafContext event_session_predicate_leaf() throws RecognitionException {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_event_session_predicate_leaf);
		int _la;
		try {
			setState(3401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3373);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(3345);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id_();
					}
					break;
				case 2:
					{
					setState(3356);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
					case 1:
						{
						setState(3346);
						((Event_session_predicate_leafContext)_localctx).event_field_name = id_();
						}
						break;
					case 2:
						{
						{
						setState(3350);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
						case 1:
							{
							setState(3347);
							((Event_session_predicate_leafContext)_localctx).event_module_guid = id_();
							setState(3348);
							match(DOT);
							}
							break;
						}
						setState(3352);
						((Event_session_predicate_leafContext)_localctx).event_package_name = id_();
						setState(3353);
						match(DOT);
						setState(3354);
						((Event_session_predicate_leafContext)_localctx).predicate_source_name = id_();
						}
						}
						break;
					}
					setState(3369);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
					case 1:
						{
						setState(3358);
						match(EQUAL);
						}
						break;
					case 2:
						{
						{
						setState(3359);
						match(LESS);
						setState(3360);
						match(GREATER);
						}
						}
						break;
					case 3:
						{
						{
						setState(3361);
						match(EXCLAMATION);
						setState(3362);
						match(EQUAL);
						}
						}
						break;
					case 4:
						{
						setState(3363);
						match(GREATER);
						}
						break;
					case 5:
						{
						{
						setState(3364);
						match(GREATER);
						setState(3365);
						match(EQUAL);
						}
						}
						break;
					case 6:
						{
						setState(3366);
						match(LESS);
						}
						break;
					case 7:
						{
						setState(3367);
						match(LESS);
						setState(3368);
						match(EQUAL);
						}
						break;
					}
					setState(3371);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3378);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(3375);
					((Event_session_predicate_leafContext)_localctx).event_module_guid = id_();
					setState(3376);
					match(DOT);
					}
					break;
				}
				setState(3380);
				((Event_session_predicate_leafContext)_localctx).event_package_name = id_();
				setState(3381);
				match(DOT);
				setState(3382);
				((Event_session_predicate_leafContext)_localctx).predicate_compare_name = id_();
				setState(3383);
				match(LR_BRACKET);
				setState(3397);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(3384);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id_();
					}
					break;
				case 2:
					{
					{
					setState(3388);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
					case 1:
						{
						setState(3385);
						((Event_session_predicate_leafContext)_localctx).event_module_guid = id_();
						setState(3386);
						match(DOT);
						}
						break;
					}
					setState(3390);
					((Event_session_predicate_leafContext)_localctx).event_package_name = id_();
					setState(3391);
					match(DOT);
					setState(3392);
					((Event_session_predicate_leafContext)_localctx).predicate_source_name = id_();
					}
					setState(3394);
					match(COMMA);
					setState(3395);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3399);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_data_sourceContext extends ParserRuleContext {
		public Id_Context data_source_name;
		public Token location;
		public Token resource_manager_location;
		public Id_Context credential_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> LOCATION() { return getTokens(TSqlParser.LOCATION); }
		public TerminalNode LOCATION(int i) {
			return getToken(TSqlParser.LOCATION, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RESOURCE_MANAGER_LOCATION() { return getTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public TerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(TSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_data_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_external_data_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_external_data_source(this);
		}
	}

	public final Alter_external_data_sourceContext alter_external_data_source() throws RecognitionException {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_alter_external_data_source);
		int _la;
		try {
			int _alt;
			setState(3450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3403);
				match(ALTER);
				setState(3404);
				match(EXTERNAL);
				setState(3405);
				match(DATA);
				setState(3406);
				match(SOURCE);
				setState(3407);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id_();
				setState(3408);
				match(SET);
				setState(3424); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3424);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LOCATION:
							{
							setState(3409);
							match(LOCATION);
							setState(3410);
							match(EQUAL);
							setState(3411);
							((Alter_external_data_sourceContext)_localctx).location = match(STRING);
							setState(3413);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3412);
								match(COMMA);
								}
							}

							}
							break;
						case RESOURCE_MANAGER_LOCATION:
							{
							setState(3415);
							match(RESOURCE_MANAGER_LOCATION);
							setState(3416);
							match(EQUAL);
							setState(3417);
							((Alter_external_data_sourceContext)_localctx).resource_manager_location = match(STRING);
							setState(3419);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3418);
								match(COMMA);
								}
							}

							}
							break;
						case CREDENTIAL:
							{
							setState(3421);
							match(CREDENTIAL);
							setState(3422);
							match(EQUAL);
							setState(3423);
							((Alter_external_data_sourceContext)_localctx).credential_name = id_();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3426); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,300,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3428);
				match(ALTER);
				setState(3429);
				match(EXTERNAL);
				setState(3430);
				match(DATA);
				setState(3431);
				match(SOURCE);
				setState(3432);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id_();
				setState(3433);
				match(WITH);
				setState(3434);
				match(LR_BRACKET);
				setState(3435);
				match(TYPE);
				setState(3436);
				match(EQUAL);
				setState(3437);
				match(BLOB_STORAGE);
				setState(3438);
				match(COMMA);
				setState(3439);
				match(LOCATION);
				setState(3440);
				match(EQUAL);
				setState(3441);
				((Alter_external_data_sourceContext)_localctx).location = match(STRING);
				setState(3446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3442);
					match(COMMA);
					setState(3443);
					match(CREDENTIAL);
					setState(3444);
					match(EQUAL);
					setState(3445);
					((Alter_external_data_sourceContext)_localctx).credential_name = id_();
					}
				}

				setState(3448);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_libraryContext extends ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public Token client_library;
		public Id_Context external_data_source_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(TSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(TSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_external_library(this);
		}
	}

	public final Alter_external_libraryContext alter_external_library() throws RecognitionException {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_alter_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3452);
			match(ALTER);
			setState(3453);
			match(EXTERNAL);
			setState(3454);
			match(LIBRARY);
			setState(3455);
			((Alter_external_libraryContext)_localctx).library_name = id_();
			setState(3458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3456);
				match(AUTHORIZATION);
				setState(3457);
				((Alter_external_libraryContext)_localctx).owner_name = id_();
				}
			}

			setState(3460);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			{
			setState(3461);
			match(LR_BRACKET);
			setState(3462);
			match(CONTENT);
			setState(3463);
			match(EQUAL);
			setState(3467);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3464);
				((Alter_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3465);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3466);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			setState(3469);
			match(COMMA);
			setState(3470);
			match(PLATFORM);
			setState(3471);
			match(EQUAL);
			setState(3473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINUX || _la==WINDOWS) {
				{
				setState(3472);
				_la = _input.LA(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3475);
			match(RR_BRACKET);
			}
			setState(3477);
			match(WITH);
			setState(3487); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3487);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LANGUAGE:
				case COMMA:
					{
					setState(3479);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3478);
						match(COMMA);
						}
					}

					setState(3481);
					match(LANGUAGE);
					setState(3482);
					match(EQUAL);
					setState(3483);
					_la = _input.LA(1);
					if ( !(_la==PYTHON || _la==R) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case DATA_SOURCE:
					{
					setState(3484);
					match(DATA_SOURCE);
					setState(3485);
					match(EQUAL);
					setState(3486);
					((Alter_external_libraryContext)_localctx).external_data_source_name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3489); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
			setState(3491);
			match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_libraryContext extends ParserRuleContext {
		public Id_Context library_name;
		public Id_Context owner_name;
		public Token client_library;
		public Id_Context external_data_source_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(TSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(TSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_external_library(this);
		}
	}

	public final Create_external_libraryContext create_external_library() throws RecognitionException {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_create_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3493);
			match(CREATE);
			setState(3494);
			match(EXTERNAL);
			setState(3495);
			match(LIBRARY);
			setState(3496);
			((Create_external_libraryContext)_localctx).library_name = id_();
			setState(3499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3497);
				match(AUTHORIZATION);
				setState(3498);
				((Create_external_libraryContext)_localctx).owner_name = id_();
				}
			}

			setState(3501);
			match(FROM);
			{
			setState(3503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3502);
				match(COMMA);
				}
			}

			setState(3506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(3505);
				match(LR_BRACKET);
				}
			}

			setState(3510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT) {
				{
				setState(3508);
				match(CONTENT);
				setState(3509);
				match(EQUAL);
				}
			}

			setState(3515);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3512);
				((Create_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3513);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3514);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3517);
				match(COMMA);
				setState(3518);
				match(PLATFORM);
				setState(3519);
				match(EQUAL);
				setState(3521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINUX || _la==WINDOWS) {
					{
					setState(3520);
					_la = _input.LA(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3523);
				match(RR_BRACKET);
				}
			}

			}
			setState(3541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				setState(3526);
				match(WITH);
				setState(3536); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3536);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LANGUAGE:
					case COMMA:
						{
						setState(3528);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3527);
							match(COMMA);
							}
						}

						setState(3530);
						match(LANGUAGE);
						setState(3531);
						match(EQUAL);
						setState(3532);
						_la = _input.LA(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case DATA_SOURCE:
						{
						setState(3533);
						match(DATA_SOURCE);
						setState(3534);
						match(EQUAL);
						setState(3535);
						((Create_external_libraryContext)_localctx).external_data_source_name = id_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3538); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
				setState(3540);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_resource_poolContext extends ParserRuleContext {
		public Id_Context pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_external_resource_pool(this);
		}
	}

	public final Alter_external_resource_poolContext alter_external_resource_pool() throws RecognitionException {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_alter_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3543);
			match(ALTER);
			setState(3544);
			match(EXTERNAL);
			setState(3545);
			match(RESOURCE);
			setState(3546);
			match(POOL);
			setState(3549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				setState(3547);
				((Alter_external_resource_poolContext)_localctx).pool_name = id_();
				}
				break;
			case 2:
				{
				setState(3548);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			setState(3551);
			match(WITH);
			setState(3552);
			match(LR_BRACKET);
			setState(3553);
			match(MAX_CPU_PERCENT);
			setState(3554);
			match(EQUAL);
			setState(3555);
			((Alter_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3593);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3556);
					match(COMMA);
					}
				}

				setState(3559);
				match(AFFINITY);
				setState(3560);
				match(CPU);
				setState(3561);
				match(EQUAL);
				setState(3575);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3562);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3571); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3571);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
							case 1:
								{
								setState(3564);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3563);
									match(COMMA);
									}
								}

								setState(3566);
								match(DECIMAL);
								setState(3567);
								match(TO);
								setState(3568);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3569);
								match(COMMA);
								setState(3570);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3573); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,324,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3577);
				match(NUMANODE);
				setState(3578);
				match(EQUAL);
				setState(3589); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3589);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
						case 1:
							{
							setState(3580);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3579);
								match(COMMA);
								}
							}

							setState(3582);
							match(DECIMAL);
							setState(3583);
							match(TO);
							setState(3584);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3586);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3585);
								match(COMMA);
								}
							}

							setState(3588);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3591); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				setState(3596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3595);
					match(COMMA);
					}
				}

				setState(3598);
				match(MAX_MEMORY_PERCENT);
				setState(3599);
				match(EQUAL);
				setState(3600);
				((Alter_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3603);
					match(COMMA);
					}
				}

				setState(3606);
				match(MAX_PROCESSES);
				setState(3607);
				match(EQUAL);
				setState(3608);
				((Alter_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3611);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_resource_poolContext extends ParserRuleContext {
		public Id_Context pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_external_resource_pool(this);
		}
	}

	public final Create_external_resource_poolContext create_external_resource_pool() throws RecognitionException {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_create_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3613);
			match(CREATE);
			setState(3614);
			match(EXTERNAL);
			setState(3615);
			match(RESOURCE);
			setState(3616);
			match(POOL);
			setState(3617);
			((Create_external_resource_poolContext)_localctx).pool_name = id_();
			setState(3618);
			match(WITH);
			setState(3619);
			match(LR_BRACKET);
			setState(3620);
			match(MAX_CPU_PERCENT);
			setState(3621);
			match(EQUAL);
			setState(3622);
			((Create_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3660);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3623);
					match(COMMA);
					}
				}

				setState(3626);
				match(AFFINITY);
				setState(3627);
				match(CPU);
				setState(3628);
				match(EQUAL);
				setState(3642);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3629);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3638); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3638);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
							case 1:
								{
								setState(3631);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3630);
									match(COMMA);
									}
								}

								setState(3633);
								match(DECIMAL);
								setState(3634);
								match(TO);
								setState(3635);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3636);
								match(COMMA);
								setState(3637);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3640); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3644);
				match(NUMANODE);
				setState(3645);
				match(EQUAL);
				setState(3656); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3656);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
						case 1:
							{
							setState(3647);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3646);
								match(COMMA);
								}
							}

							setState(3649);
							match(DECIMAL);
							setState(3650);
							match(TO);
							setState(3651);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3653);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3652);
								match(COMMA);
								}
							}

							setState(3655);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3658); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3662);
					match(COMMA);
					}
				}

				setState(3665);
				match(MAX_MEMORY_PERCENT);
				setState(3666);
				match(EQUAL);
				setState(3667);
				((Create_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3670);
					match(COMMA);
					}
				}

				setState(3673);
				match(MAX_PROCESSES);
				setState(3674);
				match(EQUAL);
				setState(3675);
				((Create_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3678);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_catalogContext extends ParserRuleContext {
		public Id_Context catalog_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_fulltext_catalog(this);
		}
	}

	public final Alter_fulltext_catalogContext alter_fulltext_catalog() throws RecognitionException {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_alter_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3680);
			match(ALTER);
			setState(3681);
			match(FULLTEXT);
			setState(3682);
			match(CATALOG);
			setState(3683);
			((Alter_fulltext_catalogContext)_localctx).catalog_name = id_();
			setState(3694);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				{
				setState(3684);
				match(REBUILD);
				setState(3689);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(3685);
					match(WITH);
					setState(3686);
					match(ACCENT_SENSITIVITY);
					setState(3687);
					match(EQUAL);
					setState(3688);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				{
				setState(3691);
				match(REORGANIZE);
				}
				break;
			case AS:
				{
				setState(3692);
				match(AS);
				setState(3693);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_catalogContext extends ParserRuleContext {
		public Id_Context catalog_name;
		public Id_Context filegroup;
		public Token rootpath;
		public Id_Context owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_fulltext_catalog(this);
		}
	}

	public final Create_fulltext_catalogContext create_fulltext_catalog() throws RecognitionException {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_create_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3696);
			match(CREATE);
			setState(3697);
			match(FULLTEXT);
			setState(3698);
			match(CATALOG);
			setState(3699);
			((Create_fulltext_catalogContext)_localctx).catalog_name = id_();
			setState(3703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3700);
				match(ON);
				setState(3701);
				match(FILEGROUP);
				setState(3702);
				((Create_fulltext_catalogContext)_localctx).filegroup = id_();
				}
			}

			setState(3708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3705);
				match(IN);
				setState(3706);
				match(PATH);
				setState(3707);
				((Create_fulltext_catalogContext)_localctx).rootpath = match(STRING);
				}
			}

			setState(3714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				setState(3710);
				match(WITH);
				setState(3711);
				match(ACCENT_SENSITIVITY);
				setState(3712);
				match(EQUAL);
				setState(3713);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3716);
				match(AS);
				setState(3717);
				match(DEFAULT);
				}
			}

			setState(3722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3720);
				match(AUTHORIZATION);
				setState(3721);
				((Create_fulltext_catalogContext)_localctx).owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_stoplistContext extends ParserRuleContext {
		public Id_Context stoplist_name;
		public Token stopword;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_fulltext_stoplist(this);
		}
	}

	public final Alter_fulltext_stoplistContext alter_fulltext_stoplist() throws RecognitionException {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3724);
			match(ALTER);
			setState(3725);
			match(FULLTEXT);
			setState(3726);
			match(STOPLIST);
			setState(3727);
			((Alter_fulltext_stoplistContext)_localctx).stoplist_name = id_();
			setState(3741);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(3728);
				match(ADD);
				setState(3729);
				((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
				setState(3730);
				match(LANGUAGE);
				setState(3731);
				_la = _input.LA(1);
				if ( !(((((_la - 826)) & ~0x3f) == 0 && ((1L << (_la - 826)) & ((1L << (DECIMAL - 826)) | (1L << (STRING - 826)) | (1L << (BINARY - 826)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DROP:
				{
				setState(3732);
				match(DROP);
				setState(3739);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					setState(3733);
					((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
					setState(3734);
					match(LANGUAGE);
					setState(3735);
					_la = _input.LA(1);
					if ( !(((((_la - 826)) & ~0x3f) == 0 && ((1L << (_la - 826)) & ((1L << (DECIMAL - 826)) | (1L << (STRING - 826)) | (1L << (BINARY - 826)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 2:
					{
					setState(3736);
					match(ALL);
					setState(3737);
					_la = _input.LA(1);
					if ( !(((((_la - 826)) & ~0x3f) == 0 && ((1L << (_la - 826)) & ((1L << (DECIMAL - 826)) | (1L << (STRING - 826)) | (1L << (BINARY - 826)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 3:
					{
					setState(3738);
					match(ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_stoplistContext extends ParserRuleContext {
		public Id_Context stoplist_name;
		public Id_Context database_name;
		public Id_Context source_stoplist_name;
		public Id_Context owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public List<TerminalNode> STOPLIST() { return getTokens(TSqlParser.STOPLIST); }
		public TerminalNode STOPLIST(int i) {
			return getToken(TSqlParser.STOPLIST, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(TSqlParser.SYSTEM, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_fulltext_stoplist(this);
		}
	}

	public final Create_fulltext_stoplistContext create_fulltext_stoplist() throws RecognitionException {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_create_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3743);
			match(CREATE);
			setState(3744);
			match(FULLTEXT);
			setState(3745);
			match(STOPLIST);
			setState(3746);
			((Create_fulltext_stoplistContext)_localctx).stoplist_name = id_();
			setState(3758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3747);
				match(FROM);
				setState(3756);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(3751);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
					case 1:
						{
						setState(3748);
						((Create_fulltext_stoplistContext)_localctx).database_name = id_();
						setState(3749);
						match(DOT);
						}
						break;
					}
					setState(3753);
					((Create_fulltext_stoplistContext)_localctx).source_stoplist_name = id_();
					}
					break;
				case 2:
					{
					setState(3754);
					match(SYSTEM);
					setState(3755);
					match(STOPLIST);
					}
					break;
				}
				}
			}

			setState(3762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3760);
				match(AUTHORIZATION);
				setState(3761);
				((Create_fulltext_stoplistContext)_localctx).owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_sql_serverContext extends ParserRuleContext {
		public Id_Context login_name;
		public Token password;
		public Token password_hash;
		public Token old_password;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_login_sql_server(this);
		}
	}

	public final Alter_login_sql_serverContext alter_login_sql_server() throws RecognitionException {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_alter_login_sql_server);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3764);
			match(ALTER);
			setState(3765);
			match(LOGIN);
			setState(3766);
			((Alter_login_sql_serverContext)_localctx).login_name = id_();
			setState(3834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				setState(3768);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(3767);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3770);
				match(WITH);
				setState(3784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					{
					setState(3771);
					match(PASSWORD);
					setState(3772);
					match(EQUAL);
					setState(3776);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3773);
						((Alter_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3774);
						((Alter_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3775);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3781);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,364,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3778);
							_la = _input.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							} 
						}
						setState(3783);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,364,_ctx);
					}
					}
					break;
				}
				setState(3795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3786);
					match(OLD_PASSWORD);
					setState(3787);
					match(EQUAL);
					setState(3788);
					((Alter_login_sql_serverContext)_localctx).old_password = match(STRING);
					setState(3792);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3789);
							_la = _input.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							} 
						}
						setState(3794);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
					}
					}
					break;
				}
				setState(3800);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3797);
					match(DEFAULT_DATABASE);
					setState(3798);
					match(EQUAL);
					setState(3799);
					((Alter_login_sql_serverContext)_localctx).default_database = id_();
					}
					break;
				}
				setState(3805);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3802);
					match(DEFAULT_LANGUAGE);
					setState(3803);
					match(EQUAL);
					setState(3804);
					((Alter_login_sql_serverContext)_localctx).default_laguage = id_();
					}
					break;
				}
				setState(3810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3807);
					match(NAME);
					setState(3808);
					match(EQUAL);
					setState(3809);
					((Alter_login_sql_serverContext)_localctx).login_name = id_();
					}
					break;
				}
				setState(3815);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(3812);
					match(CHECK_POLICY);
					setState(3813);
					match(EQUAL);
					setState(3814);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3817);
					match(CHECK_EXPIRATION);
					setState(3818);
					match(EQUAL);
					setState(3819);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(3822);
					match(CREDENTIAL);
					setState(3823);
					match(EQUAL);
					setState(3824);
					((Alter_login_sql_serverContext)_localctx).credential_name = id_();
					}
					break;
				}
				setState(3829);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3827);
					match(NO);
					setState(3828);
					match(CREDENTIAL);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(3831);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3832);
				match(CREDENTIAL);
				setState(3833);
				((Alter_login_sql_serverContext)_localctx).credential_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_sql_serverContext extends ParserRuleContext {
		public Id_Context login_name;
		public Token password;
		public Token password_hash;
		public Token sid;
		public Id_Context default_database;
		public Id_Context default_laguage;
		public Id_Context credential_name;
		public Token default_language;
		public Id_Context certname;
		public Id_Context asym_key_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_login_sql_server(this);
		}
	}

	public final Create_login_sql_serverContext create_login_sql_server() throws RecognitionException {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_create_login_sql_server);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3836);
			match(CREATE);
			setState(3837);
			match(LOGIN);
			setState(3838);
			((Create_login_sql_serverContext)_localctx).login_name = id_();
			setState(3929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3839);
				match(WITH);
				setState(3853);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					{
					setState(3840);
					match(PASSWORD);
					setState(3841);
					match(EQUAL);
					setState(3845);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3842);
						((Create_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3843);
						((Create_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3844);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3850);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,377,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3847);
							_la = _input.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							} 
						}
						setState(3852);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,377,_ctx);
					}
					}
					break;
				}
				setState(3861);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(3856);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3855);
						match(COMMA);
						}
					}

					setState(3858);
					match(SID);
					setState(3859);
					match(EQUAL);
					setState(3860);
					((Create_login_sql_serverContext)_localctx).sid = match(BINARY);
					}
					break;
				}
				setState(3869);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
				case 1:
					{
					setState(3864);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3863);
						match(COMMA);
						}
					}

					setState(3866);
					match(DEFAULT_DATABASE);
					setState(3867);
					match(EQUAL);
					setState(3868);
					((Create_login_sql_serverContext)_localctx).default_database = id_();
					}
					break;
				}
				setState(3877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(3872);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3871);
						match(COMMA);
						}
					}

					setState(3874);
					match(DEFAULT_LANGUAGE);
					setState(3875);
					match(EQUAL);
					setState(3876);
					((Create_login_sql_serverContext)_localctx).default_laguage = id_();
					}
					break;
				}
				setState(3885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(3880);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3879);
						match(COMMA);
						}
					}

					setState(3882);
					match(CHECK_EXPIRATION);
					setState(3883);
					match(EQUAL);
					setState(3884);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3893);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					setState(3888);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3887);
						match(COMMA);
						}
					}

					setState(3890);
					match(CHECK_POLICY);
					setState(3891);
					match(EQUAL);
					setState(3892);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					setState(3896);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3895);
						match(COMMA);
						}
					}

					setState(3898);
					match(CREDENTIAL);
					setState(3899);
					match(EQUAL);
					setState(3900);
					((Create_login_sql_serverContext)_localctx).credential_name = id_();
					}
					break;
				}
				}
				break;
			case FROM:
				{
				{
				setState(3903);
				match(FROM);
				setState(3927);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(3904);
					match(WINDOWS);
					{
					setState(3905);
					match(WITH);
					setState(3912);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
					case 1:
						{
						setState(3907);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3906);
							match(COMMA);
							}
						}

						setState(3909);
						match(DEFAULT_DATABASE);
						setState(3910);
						match(EQUAL);
						setState(3911);
						((Create_login_sql_serverContext)_localctx).default_database = id_();
						}
						break;
					}
					setState(3920);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
					case 1:
						{
						setState(3915);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3914);
							match(COMMA);
							}
						}

						setState(3917);
						match(DEFAULT_LANGUAGE);
						setState(3918);
						match(EQUAL);
						setState(3919);
						((Create_login_sql_serverContext)_localctx).default_language = match(STRING);
						}
						break;
					}
					}
					}
					break;
				case CERTIFICATE:
					{
					setState(3922);
					match(CERTIFICATE);
					setState(3923);
					((Create_login_sql_serverContext)_localctx).certname = id_();
					}
					break;
				case ASYMMETRIC:
					{
					setState(3924);
					match(ASYMMETRIC);
					setState(3925);
					match(KEY);
					setState(3926);
					((Create_login_sql_serverContext)_localctx).asym_key_name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sqlContext extends ParserRuleContext {
		public Id_Context login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_login_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_login_azure_sql(this);
		}
	}

	public final Alter_login_azure_sqlContext alter_login_azure_sql() throws RecognitionException {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_alter_login_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3931);
			match(ALTER);
			setState(3932);
			match(LOGIN);
			setState(3933);
			((Alter_login_azure_sqlContext)_localctx).login_name = id_();
			setState(3951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3935);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(3934);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3937);
				match(WITH);
				setState(3949);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3938);
					match(PASSWORD);
					setState(3939);
					match(EQUAL);
					setState(3940);
					((Alter_login_azure_sqlContext)_localctx).password = match(STRING);
					setState(3944);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
					case 1:
						{
						setState(3941);
						match(OLD_PASSWORD);
						setState(3942);
						match(EQUAL);
						setState(3943);
						((Alter_login_azure_sqlContext)_localctx).old_password = match(STRING);
						}
						break;
					}
					}
					break;
				case NAME:
					{
					setState(3946);
					match(NAME);
					setState(3947);
					match(EQUAL);
					setState(3948);
					((Alter_login_azure_sqlContext)_localctx).login_name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_azure_sqlContext extends ParserRuleContext {
		public Id_Context login_name;
		public Token sid;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_login_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_login_azure_sql(this);
		}
	}

	public final Create_login_azure_sqlContext create_login_azure_sql() throws RecognitionException {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_create_login_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3953);
			match(CREATE);
			setState(3954);
			match(LOGIN);
			setState(3955);
			((Create_login_azure_sqlContext)_localctx).login_name = id_();
			setState(3956);
			match(WITH);
			setState(3957);
			match(PASSWORD);
			setState(3958);
			match(EQUAL);
			setState(3959);
			match(STRING);
			setState(3963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				setState(3960);
				match(SID);
				setState(3961);
				match(EQUAL);
				setState(3962);
				((Create_login_azure_sqlContext)_localctx).sid = match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public Id_Context login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_login_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_login_azure_sql_dw_and_pdw(this);
		}
	}

	public final Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3965);
			match(ALTER);
			setState(3966);
			match(LOGIN);
			setState(3967);
			((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id_();
			setState(3991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					setState(3968);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3971);
				match(WITH);
				setState(3989);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3972);
					match(PASSWORD);
					setState(3973);
					match(EQUAL);
					setState(3974);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).password = match(STRING);
					setState(3984);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
					case 1:
						{
						setState(3975);
						match(OLD_PASSWORD);
						setState(3976);
						match(EQUAL);
						setState(3977);
						((Alter_login_azure_sql_dw_and_pdwContext)_localctx).old_password = match(STRING);
						setState(3981);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(3978);
								_la = _input.LA(1);
								if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								} 
							}
							setState(3983);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
						}
						}
						break;
					}
					}
					break;
				case NAME:
					{
					setState(3986);
					match(NAME);
					setState(3987);
					match(EQUAL);
					setState(3988);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_pdwContext extends ParserRuleContext {
		public Id_Context loginName;
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(TSqlParser.MUST_CHANGE, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_login_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_login_pdw(this);
		}
	}

	public final Create_login_pdwContext create_login_pdw() throws RecognitionException {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_create_login_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3993);
			match(CREATE);
			setState(3994);
			match(LOGIN);
			setState(3995);
			((Create_login_pdwContext)_localctx).loginName = id_();
			setState(4012);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3996);
				match(WITH);
				{
				setState(3997);
				match(PASSWORD);
				setState(3998);
				match(EQUAL);
				setState(3999);
				((Create_login_pdwContext)_localctx).password = match(STRING);
				setState(4001);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(4000);
					match(MUST_CHANGE);
					}
					break;
				}
				setState(4008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(4003);
					match(CHECK_POLICY);
					setState(4004);
					match(EQUAL);
					setState(4006);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OFF || _la==ON) {
						{
						setState(4005);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				}
				}
				}
				break;
			case FROM:
				{
				setState(4010);
				match(FROM);
				setState(4011);
				match(WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(TSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(TSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_master_key_sql_server(this);
		}
	}

	public final Alter_master_key_sql_serverContext alter_master_key_sql_server() throws RecognitionException {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_alter_master_key_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4014);
			match(ALTER);
			setState(4015);
			match(MASTER);
			setState(4016);
			match(KEY);
			setState(4038);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				setState(4018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(4017);
					match(FORCE);
					}
				}

				setState(4020);
				match(REGENERATE);
				setState(4021);
				match(WITH);
				setState(4022);
				match(ENCRYPTION);
				setState(4023);
				match(BY);
				setState(4024);
				match(PASSWORD);
				setState(4025);
				match(EQUAL);
				setState(4026);
				((Alter_master_key_sql_serverContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
			case DROP:
				{
				setState(4027);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4028);
				match(ENCRYPTION);
				setState(4029);
				match(BY);
				setState(4036);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(4030);
					match(SERVICE);
					setState(4031);
					match(MASTER);
					setState(4032);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(4033);
					match(PASSWORD);
					setState(4034);
					match(EQUAL);
					setState(4035);
					((Alter_master_key_sql_serverContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_master_key_sql_server(this);
		}
	}

	public final Create_master_key_sql_serverContext create_master_key_sql_server() throws RecognitionException {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_create_master_key_sql_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4040);
			match(CREATE);
			setState(4041);
			match(MASTER);
			setState(4042);
			match(KEY);
			setState(4043);
			match(ENCRYPTION);
			setState(4044);
			match(BY);
			setState(4045);
			match(PASSWORD);
			setState(4046);
			match(EQUAL);
			setState(4047);
			((Create_master_key_sql_serverContext)_localctx).password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(TSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(TSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_master_key_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_master_key_azure_sql(this);
		}
	}

	public final Alter_master_key_azure_sqlContext alter_master_key_azure_sql() throws RecognitionException {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_alter_master_key_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4049);
			match(ALTER);
			setState(4050);
			match(MASTER);
			setState(4051);
			match(KEY);
			setState(4079);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				setState(4053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(4052);
					match(FORCE);
					}
				}

				setState(4055);
				match(REGENERATE);
				setState(4056);
				match(WITH);
				setState(4057);
				match(ENCRYPTION);
				setState(4058);
				match(BY);
				setState(4059);
				match(PASSWORD);
				setState(4060);
				match(EQUAL);
				setState(4061);
				((Alter_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
				{
				setState(4062);
				match(ADD);
				setState(4063);
				match(ENCRYPTION);
				setState(4064);
				match(BY);
				setState(4071);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(4065);
					match(SERVICE);
					setState(4066);
					match(MASTER);
					setState(4067);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(4068);
					match(PASSWORD);
					setState(4069);
					match(EQUAL);
					setState(4070);
					((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP:
				{
				setState(4073);
				match(DROP);
				setState(4074);
				match(ENCRYPTION);
				setState(4075);
				match(BY);
				setState(4076);
				match(PASSWORD);
				setState(4077);
				match(EQUAL);
				setState(4078);
				((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_master_key_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_master_key_azure_sql(this);
		}
	}

	public final Create_master_key_azure_sqlContext create_master_key_azure_sql() throws RecognitionException {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_create_master_key_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4081);
			match(CREATE);
			setState(4082);
			match(MASTER);
			setState(4083);
			match(KEY);
			setState(4089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(4084);
				match(ENCRYPTION);
				setState(4085);
				match(BY);
				setState(4086);
				match(PASSWORD);
				setState(4087);
				match(EQUAL);
				setState(4088);
				((Create_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_message_typeContext extends ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context schema_collection_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_message_type(this);
		}
	}

	public final Alter_message_typeContext alter_message_type() throws RecognitionException {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alter_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4091);
			match(ALTER);
			setState(4092);
			match(MESSAGE);
			setState(4093);
			match(TYPE);
			setState(4094);
			((Alter_message_typeContext)_localctx).message_type_name = id_();
			setState(4095);
			match(VALIDATION);
			setState(4096);
			match(EQUAL);
			setState(4105);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(4097);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(4098);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(4099);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(4100);
				match(VALID_XML);
				setState(4101);
				match(WITH);
				setState(4102);
				match(SCHEMA);
				setState(4103);
				match(COLLECTION);
				setState(4104);
				((Alter_message_typeContext)_localctx).schema_collection_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_functionContext extends ParserRuleContext {
		public Id_Context partition_function_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SPLIT() { return getToken(TSqlParser.SPLIT, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_partition_function(this);
		}
	}

	public final Alter_partition_functionContext alter_partition_function() throws RecognitionException {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_alter_partition_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4107);
			match(ALTER);
			setState(4108);
			match(PARTITION);
			setState(4109);
			match(FUNCTION);
			setState(4110);
			((Alter_partition_functionContext)_localctx).partition_function_name = id_();
			setState(4111);
			match(LR_BRACKET);
			setState(4112);
			match(RR_BRACKET);
			setState(4113);
			_la = _input.LA(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4114);
			match(RANGE);
			setState(4115);
			match(LR_BRACKET);
			setState(4116);
			match(DECIMAL);
			setState(4117);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_schemeContext extends ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context file_group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode USED() { return getToken(TSqlParser.USED, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_partition_scheme(this);
		}
	}

	public final Alter_partition_schemeContext alter_partition_scheme() throws RecognitionException {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_alter_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4119);
			match(ALTER);
			setState(4120);
			match(PARTITION);
			setState(4121);
			match(SCHEME);
			setState(4122);
			((Alter_partition_schemeContext)_localctx).partition_scheme_name = id_();
			setState(4123);
			match(NEXT);
			setState(4124);
			match(USED);
			setState(4126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(4125);
				((Alter_partition_schemeContext)_localctx).file_group_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_remote_service_bindingContext extends ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context user_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_remote_service_binding(this);
		}
	}

	public final Alter_remote_service_bindingContext alter_remote_service_binding() throws RecognitionException {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4128);
			match(ALTER);
			setState(4129);
			match(REMOTE);
			setState(4130);
			match(SERVICE);
			setState(4131);
			match(BINDING);
			setState(4132);
			((Alter_remote_service_bindingContext)_localctx).binding_name = id_();
			setState(4133);
			match(WITH);
			setState(4137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER) {
				{
				setState(4134);
				match(USER);
				setState(4135);
				match(EQUAL);
				setState(4136);
				((Alter_remote_service_bindingContext)_localctx).user_name = id_();
				}
			}

			setState(4143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4139);
				match(COMMA);
				setState(4140);
				match(ANONYMOUS);
				setState(4141);
				match(EQUAL);
				setState(4142);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_remote_service_bindingContext extends ParserRuleContext {
		public Id_Context binding_name;
		public Id_Context owner_name;
		public Token remote_service_name;
		public Id_Context user_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSqlParser.SERVICE, i);
		}
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_remote_service_binding(this);
		}
	}

	public final Create_remote_service_bindingContext create_remote_service_binding() throws RecognitionException {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_create_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4145);
			match(CREATE);
			setState(4146);
			match(REMOTE);
			setState(4147);
			match(SERVICE);
			setState(4148);
			match(BINDING);
			setState(4149);
			((Create_remote_service_bindingContext)_localctx).binding_name = id_();
			setState(4152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4150);
				match(AUTHORIZATION);
				setState(4151);
				((Create_remote_service_bindingContext)_localctx).owner_name = id_();
				}
			}

			setState(4154);
			match(TO);
			setState(4155);
			match(SERVICE);
			setState(4156);
			((Create_remote_service_bindingContext)_localctx).remote_service_name = match(STRING);
			setState(4157);
			match(WITH);
			setState(4161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER) {
				{
				setState(4158);
				match(USER);
				setState(4159);
				match(EQUAL);
				setState(4160);
				((Create_remote_service_bindingContext)_localctx).user_name = id_();
				}
			}

			setState(4167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4163);
				match(COMMA);
				setState(4164);
				match(ANONYMOUS);
				setState(4165);
				match(EQUAL);
				setState(4166);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_resource_poolContext extends ParserRuleContext {
		public Id_Context pool_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode MIN_CPU_PERCENT() { return getToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode SCHEDULER() { return getToken(TSqlParser.SCHEDULER, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_resource_pool(this);
		}
	}

	public final Create_resource_poolContext create_resource_pool() throws RecognitionException {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_create_resource_pool);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4169);
			match(CREATE);
			setState(4170);
			match(RESOURCE);
			setState(4171);
			match(POOL);
			setState(4172);
			((Create_resource_poolContext)_localctx).pool_name = id_();
			setState(4275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(4173);
				match(WITH);
				setState(4174);
				match(LR_BRACKET);
				setState(4181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(4176);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4175);
						match(COMMA);
						}
					}

					setState(4178);
					match(MIN_CPU_PERCENT);
					setState(4179);
					match(EQUAL);
					setState(4180);
					match(DECIMAL);
					}
					break;
				}
				setState(4189);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(4184);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4183);
						match(COMMA);
						}
					}

					setState(4186);
					match(MAX_CPU_PERCENT);
					setState(4187);
					match(EQUAL);
					setState(4188);
					match(DECIMAL);
					}
					break;
				}
				setState(4197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
				case 1:
					{
					setState(4192);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4191);
						match(COMMA);
						}
					}

					setState(4194);
					match(CAP_CPU_PERCENT);
					setState(4195);
					match(EQUAL);
					setState(4196);
					match(DECIMAL);
					}
					break;
				}
				setState(4240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(4200);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4199);
						match(COMMA);
						}
					}

					setState(4202);
					match(AFFINITY);
					setState(4203);
					match(SCHEDULER);
					setState(4204);
					match(EQUAL);
					setState(4238);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4205);
						match(AUTO);
						}
						break;
					case LR_BRACKET:
						{
						setState(4206);
						match(LR_BRACKET);
						setState(4216); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(4208);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4207);
								match(COMMA);
								}
							}

							setState(4214);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
							case 1:
								{
								setState(4210);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4211);
								match(DECIMAL);
								setState(4212);
								match(TO);
								setState(4213);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(4218); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(4220);
						match(RR_BRACKET);
						}
						break;
					case NUMANODE:
						{
						setState(4221);
						match(NUMANODE);
						setState(4222);
						match(EQUAL);
						setState(4223);
						match(LR_BRACKET);
						setState(4233); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(4225);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4224);
								match(COMMA);
								}
							}

							setState(4231);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
							case 1:
								{
								setState(4227);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4228);
								match(DECIMAL);
								setState(4229);
								match(TO);
								setState(4230);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(4235); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(4237);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(4248);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(4243);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4242);
						match(COMMA);
						}
					}

					setState(4245);
					match(MIN_MEMORY_PERCENT);
					setState(4246);
					match(EQUAL);
					setState(4247);
					match(DECIMAL);
					}
					break;
				}
				setState(4256);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					setState(4251);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4250);
						match(COMMA);
						}
					}

					setState(4253);
					match(MAX_MEMORY_PERCENT);
					setState(4254);
					match(EQUAL);
					setState(4255);
					match(DECIMAL);
					}
					break;
				}
				setState(4264);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(4259);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4258);
						match(COMMA);
						}
					}

					setState(4261);
					match(MIN_IOPS_PER_VOLUME);
					setState(4262);
					match(EQUAL);
					setState(4263);
					match(DECIMAL);
					}
					break;
				}
				setState(4272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAX_IOPS_PER_VOLUME || _la==COMMA) {
					{
					setState(4267);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4266);
						match(COMMA);
						}
					}

					setState(4269);
					match(MAX_IOPS_PER_VOLUME);
					setState(4270);
					match(EQUAL);
					setState(4271);
					match(DECIMAL);
					}
				}

				setState(4274);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_governorContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context function_name;
		public Token max_outstanding_io_per_volume;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode GOVERNOR() { return getToken(TSqlParser.GOVERNOR, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CLASSIFIER_FUNCTION() { return getToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode RESET() { return getToken(TSqlParser.RESET, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public TerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode RECONFIGURE() { return getToken(TSqlParser.RECONFIGURE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_governor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_resource_governor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_resource_governor(this);
		}
	}

	public final Alter_resource_governorContext alter_resource_governor() throws RecognitionException {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_alter_resource_governor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4277);
			match(ALTER);
			setState(4278);
			match(RESOURCE);
			setState(4279);
			match(GOVERNOR);
			setState(4301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				setState(4280);
				_la = _input.LA(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				setState(4281);
				match(WITH);
				setState(4282);
				match(LR_BRACKET);
				setState(4283);
				match(CLASSIFIER_FUNCTION);
				setState(4284);
				match(EQUAL);
				setState(4290);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(4285);
					((Alter_resource_governorContext)_localctx).schema_name = id_();
					setState(4286);
					match(DOT);
					setState(4287);
					((Alter_resource_governorContext)_localctx).function_name = id_();
					}
					break;
				case NULL_:
					{
					setState(4289);
					match(NULL_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4292);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(4293);
				match(RESET);
				setState(4294);
				match(STATISTICS);
				}
				break;
			case 4:
				{
				setState(4295);
				match(WITH);
				setState(4296);
				match(LR_BRACKET);
				setState(4297);
				match(MAX_OUTSTANDING_IO_PER_VOLUME);
				setState(4298);
				match(EQUAL);
				setState(4299);
				((Alter_resource_governorContext)_localctx).max_outstanding_io_per_volume = match(DECIMAL);
				setState(4300);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_db_roleContext extends ParserRuleContext {
		public Id_Context role_name;
		public Id_Context database_principal;
		public Id_Context new_role_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_db_role(this);
		}
	}

	public final Alter_db_roleContext alter_db_role() throws RecognitionException {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_alter_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4303);
			match(ALTER);
			setState(4304);
			match(ROLE);
			setState(4305);
			((Alter_db_roleContext)_localctx).role_name = id_();
			setState(4313);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(4306);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4307);
				match(MEMBER);
				setState(4308);
				((Alter_db_roleContext)_localctx).database_principal = id_();
				}
				break;
			case WITH:
				{
				setState(4309);
				match(WITH);
				setState(4310);
				match(NAME);
				setState(4311);
				match(EQUAL);
				setState(4312);
				((Alter_db_roleContext)_localctx).new_role_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_db_roleContext extends ParserRuleContext {
		public Id_Context role_name;
		public Id_Context owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_db_role(this);
		}
	}

	public final Create_db_roleContext create_db_role() throws RecognitionException {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_create_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4315);
			match(CREATE);
			setState(4316);
			match(ROLE);
			setState(4317);
			((Create_db_roleContext)_localctx).role_name = id_();
			setState(4320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4318);
				match(AUTHORIZATION);
				setState(4319);
				((Create_db_roleContext)_localctx).owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routeContext extends ParserRuleContext {
		public Id_Context route_name;
		public Id_Context owner_name;
		public Token route_service_name;
		public Token broker_instance_identifier;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ADDRESS() { return getToken(TSqlParser.ADDRESS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(TSqlParser.SERVICE_NAME, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(TSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_route(this);
		}
	}

	public final Create_routeContext create_route() throws RecognitionException {
		Create_routeContext _localctx = new Create_routeContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_create_route);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4322);
			match(CREATE);
			setState(4323);
			match(ROUTE);
			setState(4324);
			((Create_routeContext)_localctx).route_name = id_();
			setState(4327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4325);
				match(AUTHORIZATION);
				setState(4326);
				((Create_routeContext)_localctx).owner_name = id_();
				}
			}

			setState(4329);
			match(WITH);
			setState(4336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(4331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4330);
					match(COMMA);
					}
				}

				setState(4333);
				match(SERVICE_NAME);
				setState(4334);
				match(EQUAL);
				setState(4335);
				((Create_routeContext)_localctx).route_service_name = match(STRING);
				}
				break;
			}
			setState(4344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(4339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4338);
					match(COMMA);
					}
				}

				setState(4341);
				match(BROKER_INSTANCE);
				setState(4342);
				match(EQUAL);
				setState(4343);
				((Create_routeContext)_localctx).broker_instance_identifier = match(STRING);
				}
				break;
			}
			setState(4352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(4347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4346);
					match(COMMA);
					}
				}

				setState(4349);
				match(LIFETIME);
				setState(4350);
				match(EQUAL);
				setState(4351);
				match(DECIMAL);
				}
				break;
			}
			setState(4355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4354);
				match(COMMA);
				}
			}

			setState(4357);
			match(ADDRESS);
			setState(4358);
			match(EQUAL);
			setState(4359);
			match(STRING);
			setState(4364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4360);
				match(COMMA);
				setState(4361);
				match(MIRROR_ADDRESS);
				setState(4362);
				match(EQUAL);
				setState(4363);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_ruleContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context rule_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(TSqlParser.RULE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_rule(this);
		}
	}

	public final Create_ruleContext create_rule() throws RecognitionException {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_create_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4366);
			match(CREATE);
			setState(4367);
			match(RULE);
			setState(4371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(4368);
				((Create_ruleContext)_localctx).schema_name = id_();
				setState(4369);
				match(DOT);
				}
				break;
			}
			setState(4373);
			((Create_ruleContext)_localctx).rule_name = id_();
			setState(4374);
			match(AS);
			setState(4375);
			search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_sqlContext extends ParserRuleContext {
		public Id_Context schema_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(TSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(TSqlParser.SCHEMA, i);
		}
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_schema_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_schema_sql(this);
		}
	}

	public final Alter_schema_sqlContext alter_schema_sql() throws RecognitionException {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_alter_schema_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4377);
			match(ALTER);
			setState(4378);
			match(SCHEMA);
			setState(4379);
			((Alter_schema_sqlContext)_localctx).schema_name = id_();
			setState(4380);
			match(TRANSFER);
			setState(4390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				{
				setState(4386);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OBJECT:
					{
					setState(4381);
					match(OBJECT);
					}
					break;
				case TYPE:
					{
					setState(4382);
					match(TYPE);
					}
					break;
				case XML:
					{
					setState(4383);
					match(XML);
					setState(4384);
					match(SCHEMA);
					setState(4385);
					match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4388);
				match(COLON);
				setState(4389);
				match(COLON);
				}
				break;
			}
			setState(4392);
			id_();
			setState(4395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(4393);
				match(DOT);
				setState(4394);
				id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schemaContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public Id_Context object_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(TSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(TSqlParser.SCHEMA, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<Create_tableContext> create_table() {
			return getRuleContexts(Create_tableContext.class);
		}
		public Create_tableContext create_table(int i) {
			return getRuleContext(Create_tableContext.class,i);
		}
		public List<Create_viewContext> create_view() {
			return getRuleContexts(Create_viewContext.class);
		}
		public Create_viewContext create_view(int i) {
			return getRuleContext(Create_viewContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<TerminalNode> REVOKE() { return getTokens(TSqlParser.REVOKE); }
		public TerminalNode REVOKE(int i) {
			return getToken(TSqlParser.REVOKE, i);
		}
		public List<TerminalNode> FROM() { return getTokens(TSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSqlParser.FROM, i);
		}
		public List<TerminalNode> GRANT() { return getTokens(TSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(TSqlParser.GRANT, i);
		}
		public List<TerminalNode> DENY() { return getTokens(TSqlParser.DENY); }
		public TerminalNode DENY(int i) {
			return getToken(TSqlParser.DENY, i);
		}
		public List<TerminalNode> SELECT() { return getTokens(TSqlParser.SELECT); }
		public TerminalNode SELECT(int i) {
			return getToken(TSqlParser.SELECT, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(TSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(TSqlParser.INSERT, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(TSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(TSqlParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(TSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(TSqlParser.UPDATE, i);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_schema(this);
		}
	}

	public final Create_schemaContext create_schema() throws RecognitionException {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_create_schema);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4397);
			match(CREATE);
			setState(4398);
			match(SCHEMA);
			setState(4406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(4399);
				((Create_schemaContext)_localctx).schema_name = id_();
				}
				break;
			case 2:
				{
				setState(4400);
				match(AUTHORIZATION);
				setState(4401);
				((Create_schemaContext)_localctx).owner_name = id_();
				}
				break;
			case 3:
				{
				setState(4402);
				((Create_schemaContext)_localctx).schema_name = id_();
				setState(4403);
				match(AUTHORIZATION);
				setState(4404);
				((Create_schemaContext)_localctx).owner_name = id_();
				}
				break;
			}
			setState(4436);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4434);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
					case 1:
						{
						setState(4408);
						create_table();
						}
						break;
					case 2:
						{
						setState(4409);
						create_view();
						}
						break;
					case 3:
						{
						setState(4410);
						_la = _input.LA(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4411);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4412);
						match(ON);
						setState(4416);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4413);
							match(SCHEMA);
							setState(4414);
							match(COLON);
							setState(4415);
							match(COLON);
							}
						}

						setState(4418);
						((Create_schemaContext)_localctx).object_name = id_();
						setState(4419);
						match(TO);
						setState(4420);
						((Create_schemaContext)_localctx).owner_name = id_();
						}
						break;
					case 4:
						{
						setState(4422);
						match(REVOKE);
						setState(4423);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4424);
						match(ON);
						setState(4428);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4425);
							match(SCHEMA);
							setState(4426);
							match(COLON);
							setState(4427);
							match(COLON);
							}
						}

						setState(4430);
						((Create_schemaContext)_localctx).object_name = id_();
						setState(4431);
						match(FROM);
						setState(4432);
						((Create_schemaContext)_localctx).owner_name = id_();
						}
						break;
					}
					} 
				}
				setState(4438);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_schema_azure_sql_dw_and_pdw(this);
		}
	}

	public final Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_create_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4439);
			match(CREATE);
			setState(4440);
			match(SCHEMA);
			setState(4441);
			((Create_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id_();
			setState(4444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4442);
				match(AUTHORIZATION);
				setState(4443);
				((Create_schema_azure_sql_dw_and_pdwContext)_localctx).owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public Id_Context schema_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_schema_azure_sql_dw_and_pdw(this);
		}
	}

	public final Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_alter_schema_azure_sql_dw_and_pdw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4446);
			match(ALTER);
			setState(4447);
			match(SCHEMA);
			setState(4448);
			((Alter_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id_();
			setState(4449);
			match(TRANSFER);
			setState(4453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(4450);
				match(OBJECT);
				setState(4451);
				match(COLON);
				setState(4452);
				match(COLON);
				}
				break;
			}
			setState(4455);
			id_();
			setState(4458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				{
				setState(4456);
				match(DOT);
				setState(4457);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_search_property_listContext extends ParserRuleContext {
		public Id_Context new_list_name;
		public Id_Context database_name;
		public Id_Context source_list_name;
		public Id_Context owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_search_property_list(this);
		}
	}

	public final Create_search_property_listContext create_search_property_list() throws RecognitionException {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_create_search_property_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4460);
			match(CREATE);
			setState(4461);
			match(SEARCH);
			setState(4462);
			match(PROPERTY);
			setState(4463);
			match(LIST);
			setState(4464);
			((Create_search_property_listContext)_localctx).new_list_name = id_();
			setState(4472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4465);
				match(FROM);
				setState(4469);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(4466);
					((Create_search_property_listContext)_localctx).database_name = id_();
					setState(4467);
					match(DOT);
					}
					break;
				}
				setState(4471);
				((Create_search_property_listContext)_localctx).source_list_name = id_();
				}
			}

			setState(4476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4474);
				match(AUTHORIZATION);
				setState(4475);
				((Create_search_property_listContext)_localctx).owner_name = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_security_policyContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context security_policy_name;
		public Id_Context tvf_schema_name;
		public Id_Context security_predicate_function_name;
		public Id_Context column_name_or_arguments;
		public Id_Context table_schema_name;
		public Id_Context name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> PREDICATE() { return getTokens(TSqlParser.PREDICATE); }
		public TerminalNode PREDICATE(int i) {
			return getToken(TSqlParser.PREDICATE, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(TSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(TSqlParser.AFTER, i);
		}
		public List<TerminalNode> BEFORE() { return getTokens(TSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(TSqlParser.BEFORE, i);
		}
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public List<TerminalNode> FILTER() { return getTokens(TSqlParser.FILTER); }
		public TerminalNode FILTER(int i) {
			return getToken(TSqlParser.FILTER, i);
		}
		public List<TerminalNode> BLOCK() { return getTokens(TSqlParser.BLOCK); }
		public TerminalNode BLOCK(int i) {
			return getToken(TSqlParser.BLOCK, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(TSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(TSqlParser.INSERT, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(TSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(TSqlParser.UPDATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(TSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_security_policy(this);
		}
	}

	public final Create_security_policyContext create_security_policy() throws RecognitionException {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4478);
			match(CREATE);
			setState(4479);
			match(SECURITY);
			setState(4480);
			match(POLICY);
			setState(4484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				setState(4481);
				((Create_security_policyContext)_localctx).schema_name = id_();
				setState(4482);
				match(DOT);
				}
				break;
			}
			setState(4486);
			((Create_security_policyContext)_localctx).security_policy_name = id_();
			setState(4527); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4487);
					match(COMMA);
					}
				}

				setState(4490);
				match(ADD);
				setState(4492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILTER || _la==BLOCK) {
					{
					setState(4491);
					_la = _input.LA(1);
					if ( !(_la==FILTER || _la==BLOCK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4494);
				match(PREDICATE);
				setState(4495);
				((Create_security_policyContext)_localctx).tvf_schema_name = id_();
				setState(4496);
				match(DOT);
				setState(4497);
				((Create_security_policyContext)_localctx).security_predicate_function_name = id_();
				setState(4498);
				match(LR_BRACKET);
				setState(4503); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4500);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4499);
						match(COMMA);
						}
					}

					setState(4502);
					((Create_security_policyContext)_localctx).column_name_or_arguments = id_();
					}
					}
					setState(4505); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==COMMA );
				setState(4507);
				match(RR_BRACKET);
				setState(4508);
				match(ON);
				setState(4509);
				((Create_security_policyContext)_localctx).table_schema_name = id_();
				setState(4510);
				match(DOT);
				setState(4511);
				((Create_security_policyContext)_localctx).name = id_();
				setState(4524);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4522);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
						case 1:
							{
							setState(4513);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4512);
								match(COMMA);
								}
							}

							setState(4515);
							match(AFTER);
							setState(4516);
							_la = _input.LA(1);
							if ( !(_la==INSERT || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 2:
							{
							setState(4518);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4517);
								match(COMMA);
								}
							}

							setState(4520);
							match(BEFORE);
							setState(4521);
							_la = _input.LA(1);
							if ( !(_la==DELETE || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						} 
					}
					setState(4526);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
				}
				}
				}
				setState(4529); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==COMMA );
			setState(4541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4531);
				match(WITH);
				setState(4532);
				match(LR_BRACKET);
				setState(4533);
				match(STATE);
				setState(4534);
				match(EQUAL);
				setState(4535);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCHEMABINDING) {
					{
					setState(4536);
					match(SCHEMABINDING);
					setState(4537);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4540);
				match(RR_BRACKET);
				}
				break;
			}
			setState(4546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4543);
				match(NOT);
				setState(4544);
				match(FOR);
				setState(4545);
				match(REPLICATION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public Token sequnce_increment;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NO() { return getTokens(TSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(TSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_sequence(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_alter_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4548);
			match(ALTER);
			setState(4549);
			match(SEQUENCE);
			setState(4553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(4550);
				((Alter_sequenceContext)_localctx).schema_name = id_();
				setState(4551);
				match(DOT);
				}
				break;
			}
			setState(4555);
			((Alter_sequenceContext)_localctx).sequence_name = id_();
			setState(4561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(4556);
				match(RESTART);
				setState(4559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(4557);
					match(WITH);
					setState(4558);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			}
			setState(4566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(4563);
				match(INCREMENT);
				setState(4564);
				match(BY);
				setState(4565);
				((Alter_sequenceContext)_localctx).sequnce_increment = match(DECIMAL);
				}
				break;
			}
			setState(4572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				setState(4568);
				match(MINVALUE);
				setState(4569);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4570);
				match(NO);
				setState(4571);
				match(MINVALUE);
				}
				break;
			}
			setState(4578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(4574);
				match(MAXVALUE);
				setState(4575);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4576);
				match(NO);
				setState(4577);
				match(MAXVALUE);
				}
				break;
			}
			setState(4583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4580);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4581);
				match(NO);
				setState(4582);
				match(CYCLE);
				}
				break;
			}
			setState(4589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4585);
				match(CACHE);
				setState(4586);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4587);
				match(NO);
				setState(4588);
				match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public Id_Context schema_name;
		public Id_Context sequence_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(TSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(TSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode MINUS() { return getToken(TSqlParser.MINUS, 0); }
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_sequence(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4591);
			match(CREATE);
			setState(4592);
			match(SEQUENCE);
			setState(4596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(4593);
				((Create_sequenceContext)_localctx).schema_name = id_();
				setState(4594);
				match(DOT);
				}
				break;
			}
			setState(4598);
			((Create_sequenceContext)_localctx).sequence_name = id_();
			setState(4601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4599);
				match(AS);
				setState(4600);
				data_type();
				}
			}

			setState(4606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				setState(4603);
				match(START);
				setState(4604);
				match(WITH);
				setState(4605);
				match(DECIMAL);
				}
				break;
			}
			setState(4614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				setState(4608);
				match(INCREMENT);
				setState(4609);
				match(BY);
				setState(4611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4610);
					match(MINUS);
					}
				}

				setState(4613);
				match(DECIMAL);
				}
				break;
			}
			setState(4622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
			case 1:
				{
				setState(4616);
				match(MINVALUE);
				setState(4618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(4617);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4620);
				match(NO);
				setState(4621);
				match(MINVALUE);
				}
				break;
			}
			setState(4630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(4624);
				match(MAXVALUE);
				setState(4626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(4625);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4628);
				match(NO);
				setState(4629);
				match(MAXVALUE);
				}
				break;
			}
			setState(4635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				setState(4632);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4633);
				match(NO);
				setState(4634);
				match(CYCLE);
				}
				break;
			}
			setState(4643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				setState(4637);
				match(CACHE);
				setState(4639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(4638);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4641);
				match(NO);
				setState(4642);
				match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_auditContext extends ParserRuleContext {
		public Id_Context audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSqlParser.STATE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_audit(this);
		}
	}

	public final Alter_server_auditContext alter_server_audit() throws RecognitionException {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_alter_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4645);
			match(ALTER);
			setState(4646);
			match(SERVER);
			setState(4647);
			match(AUDIT);
			setState(4648);
			((Alter_server_auditContext)_localctx).audit_name = id_();
			setState(4780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4649);
					match(TO);
					setState(4694);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4650);
						match(FILE);
						{
						setState(4651);
						match(LR_BRACKET);
						setState(4688);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (MAX_FILES - 397)) | (1L << (MAX_ROLLOVER_FILES - 397)) | (1L << (MAXSIZE - 397)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4686);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
							case 1:
								{
								setState(4653);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4652);
									match(COMMA);
									}
								}

								setState(4655);
								match(FILEPATH);
								setState(4656);
								match(EQUAL);
								setState(4657);
								((Alter_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4659);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4658);
									match(COMMA);
									}
								}

								setState(4661);
								match(MAXSIZE);
								setState(4662);
								match(EQUAL);
								setState(4666);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4663);
									match(DECIMAL);
									setState(4664);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4665);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4669);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4668);
									match(COMMA);
									}
								}

								setState(4671);
								match(MAX_ROLLOVER_FILES);
								setState(4672);
								match(EQUAL);
								setState(4673);
								((Alter_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Alter_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4675);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4674);
									match(COMMA);
									}
								}

								setState(4677);
								match(MAX_FILES);
								setState(4678);
								match(EQUAL);
								setState(4679);
								((Alter_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4681);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4680);
									match(COMMA);
									}
								}

								setState(4683);
								match(RESERVE_DISK_SPACE);
								setState(4684);
								match(EQUAL);
								setState(4685);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(4690);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4691);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4692);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4693);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4724);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
				case 1:
					{
					setState(4698);
					match(WITH);
					setState(4699);
					match(LR_BRACKET);
					setState(4720);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==QUEUE_DELAY || _la==ON_FAILURE || _la==STATE || _la==COMMA) {
						{
						setState(4718);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
						case 1:
							{
							setState(4701);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4700);
								match(COMMA);
								}
							}

							setState(4703);
							match(QUEUE_DELAY);
							setState(4704);
							match(EQUAL);
							setState(4705);
							((Alter_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4707);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4706);
								match(COMMA);
								}
							}

							setState(4709);
							match(ON_FAILURE);
							setState(4710);
							match(EQUAL);
							setState(4711);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4713);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4712);
								match(COMMA);
								}
							}

							setState(4715);
							match(STATE);
							setState(4716);
							match(EQUAL);
							setState(4717);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						}
						setState(4722);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4723);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4726);
					match(WHERE);
					setState(4770);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
					case 1:
						{
						setState(4728);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4727);
							match(COMMA);
							}
						}

						{
						setState(4731);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4730);
							match(NOT);
							}
						}

						}
						setState(4733);
						((Alter_server_auditContext)_localctx).event_field_name = id_();
						setState(4745);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
						case 1:
							{
							setState(4734);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4735);
							match(LESS);
							setState(4736);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4737);
							match(EXCLAMATION);
							setState(4738);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4739);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4740);
							match(GREATER);
							setState(4741);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4742);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4743);
							match(LESS);
							setState(4744);
							match(EQUAL);
							}
							break;
						}
						setState(4747);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4750);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4749);
							match(COMMA);
							}
						}

						setState(4752);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4754);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4753);
							match(NOT);
							}
						}

						setState(4767);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
						case 1:
							{
							setState(4756);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4757);
							match(LESS);
							setState(4758);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4759);
							match(EXCLAMATION);
							setState(4760);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4761);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4762);
							match(GREATER);
							setState(4763);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4764);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4765);
							match(LESS);
							setState(4766);
							match(EQUAL);
							}
							break;
						}
						setState(4769);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4774);
				match(REMOVE);
				setState(4775);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4776);
				match(MODIFY);
				setState(4777);
				match(NAME);
				setState(4778);
				match(EQUAL);
				setState(4779);
				((Alter_server_auditContext)_localctx).new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_auditContext extends ParserRuleContext {
		public Id_Context audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public Id_Context audit_guid;
		public Id_Context event_field_name;
		public Id_Context new_audit_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSqlParser.STATE, i);
		}
		public List<TerminalNode> AUDIT_GUID() { return getTokens(TSqlParser.AUDIT_GUID); }
		public TerminalNode AUDIT_GUID(int i) {
			return getToken(TSqlParser.AUDIT_GUID, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_server_audit(this);
		}
	}

	public final Create_server_auditContext create_server_audit() throws RecognitionException {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_create_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4782);
			match(CREATE);
			setState(4783);
			match(SERVER);
			setState(4784);
			match(AUDIT);
			setState(4785);
			((Create_server_auditContext)_localctx).audit_name = id_();
			setState(4923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				{
				setState(4833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4786);
					match(TO);
					setState(4831);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4787);
						match(FILE);
						{
						setState(4788);
						match(LR_BRACKET);
						setState(4825);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (MAX_FILES - 397)) | (1L << (MAX_ROLLOVER_FILES - 397)) | (1L << (MAXSIZE - 397)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4823);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
							case 1:
								{
								setState(4790);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4789);
									match(COMMA);
									}
								}

								setState(4792);
								match(FILEPATH);
								setState(4793);
								match(EQUAL);
								setState(4794);
								((Create_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4796);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4795);
									match(COMMA);
									}
								}

								setState(4798);
								match(MAXSIZE);
								setState(4799);
								match(EQUAL);
								setState(4803);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4800);
									match(DECIMAL);
									setState(4801);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4802);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4806);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4805);
									match(COMMA);
									}
								}

								setState(4808);
								match(MAX_ROLLOVER_FILES);
								setState(4809);
								match(EQUAL);
								setState(4810);
								((Create_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Create_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4812);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4811);
									match(COMMA);
									}
								}

								setState(4814);
								match(MAX_FILES);
								setState(4815);
								match(EQUAL);
								setState(4816);
								((Create_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4818);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4817);
									match(COMMA);
									}
								}

								setState(4820);
								match(RESERVE_DISK_SPACE);
								setState(4821);
								match(EQUAL);
								setState(4822);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(4827);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4828);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4829);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4830);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4867);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
				case 1:
					{
					setState(4835);
					match(WITH);
					setState(4836);
					match(LR_BRACKET);
					setState(4863);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AUDIT_GUID || _la==QUEUE_DELAY || _la==ON_FAILURE || _la==STATE || _la==COMMA) {
						{
						setState(4861);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
						case 1:
							{
							setState(4838);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4837);
								match(COMMA);
								}
							}

							setState(4840);
							match(QUEUE_DELAY);
							setState(4841);
							match(EQUAL);
							setState(4842);
							((Create_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4844);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4843);
								match(COMMA);
								}
							}

							setState(4846);
							match(ON_FAILURE);
							setState(4847);
							match(EQUAL);
							setState(4848);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4850);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4849);
								match(COMMA);
								}
							}

							setState(4852);
							match(STATE);
							setState(4853);
							match(EQUAL);
							setState(4854);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(4856);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4855);
								match(COMMA);
								}
							}

							setState(4858);
							match(AUDIT_GUID);
							setState(4859);
							match(EQUAL);
							setState(4860);
							((Create_server_auditContext)_localctx).audit_guid = id_();
							}
							break;
						}
						}
						setState(4865);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4866);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4869);
					match(WHERE);
					setState(4913);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
					case 1:
						{
						setState(4871);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4870);
							match(COMMA);
							}
						}

						{
						setState(4874);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4873);
							match(NOT);
							}
						}

						}
						setState(4876);
						((Create_server_auditContext)_localctx).event_field_name = id_();
						setState(4888);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
						case 1:
							{
							setState(4877);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4878);
							match(LESS);
							setState(4879);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4880);
							match(EXCLAMATION);
							setState(4881);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4882);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4883);
							match(GREATER);
							setState(4884);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4885);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4886);
							match(LESS);
							setState(4887);
							match(EQUAL);
							}
							break;
						}
						setState(4890);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4893);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4892);
							match(COMMA);
							}
						}

						setState(4895);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4897);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4896);
							match(NOT);
							}
						}

						setState(4910);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
						case 1:
							{
							setState(4899);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4900);
							match(LESS);
							setState(4901);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4902);
							match(EXCLAMATION);
							setState(4903);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4904);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4905);
							match(GREATER);
							setState(4906);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4907);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4908);
							match(LESS);
							setState(4909);
							match(EQUAL);
							}
							break;
						}
						setState(4912);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4917);
				match(REMOVE);
				setState(4918);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4919);
				match(MODIFY);
				setState(4920);
				match(NAME);
				setState(4921);
				match(EQUAL);
				setState(4922);
				((Create_server_auditContext)_localctx).new_audit_name = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_audit_specificationContext extends ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_audit_specification(this);
		}
	}

	public final Alter_server_audit_specificationContext alter_server_audit_specification() throws RecognitionException {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4925);
			match(ALTER);
			setState(4926);
			match(SERVER);
			setState(4927);
			match(AUDIT);
			setState(4928);
			match(SPECIFICATION);
			setState(4929);
			((Alter_server_audit_specificationContext)_localctx).audit_specification_name = id_();
			setState(4934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4930);
				match(FOR);
				setState(4931);
				match(SERVER);
				setState(4932);
				match(AUDIT);
				setState(4933);
				((Alter_server_audit_specificationContext)_localctx).audit_name = id_();
				}
			}

			setState(4943);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4936);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4937);
					match(LR_BRACKET);
					setState(4938);
					((Alter_server_audit_specificationContext)_localctx).audit_action_group_name = id_();
					setState(4939);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4945);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			}
			setState(4952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				{
				setState(4946);
				match(WITH);
				setState(4947);
				match(LR_BRACKET);
				setState(4948);
				match(STATE);
				setState(4949);
				match(EQUAL);
				setState(4950);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4951);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_audit_specificationContext extends ParserRuleContext {
		public Id_Context audit_specification_name;
		public Id_Context audit_name;
		public Id_Context audit_action_group_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_server_audit_specification(this);
		}
	}

	public final Create_server_audit_specificationContext create_server_audit_specification() throws RecognitionException {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_create_server_audit_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4954);
			match(CREATE);
			setState(4955);
			match(SERVER);
			setState(4956);
			match(AUDIT);
			setState(4957);
			match(SPECIFICATION);
			setState(4958);
			((Create_server_audit_specificationContext)_localctx).audit_specification_name = id_();
			setState(4963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4959);
				match(FOR);
				setState(4960);
				match(SERVER);
				setState(4961);
				match(AUDIT);
				setState(4962);
				((Create_server_audit_specificationContext)_localctx).audit_name = id_();
				}
			}

			setState(4972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				setState(4965);
				match(ADD);
				setState(4966);
				match(LR_BRACKET);
				setState(4967);
				((Create_server_audit_specificationContext)_localctx).audit_action_group_name = id_();
				setState(4968);
				match(RR_BRACKET);
				}
				}
				setState(4974);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				{
				setState(4975);
				match(WITH);
				setState(4976);
				match(LR_BRACKET);
				setState(4977);
				match(STATE);
				setState(4978);
				match(EQUAL);
				setState(4979);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4980);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_configurationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode CONFIGURATION() { return getToken(TSqlParser.CONFIGURATION, 0); }
		public List<TerminalNode> SET() { return getTokens(TSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(TSqlParser.SET, i);
		}
		public TerminalNode PROCESS() { return getToken(TSqlParser.PROCESS, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(TSqlParser.DIAGNOSTICS, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode CLUSTER() { return getToken(TSqlParser.CLUSTER, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode CONTEXT() { return getToken(TSqlParser.CONTEXT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode BUFFER() { return getToken(TSqlParser.BUFFER, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode EXTENSION() { return getToken(TSqlParser.EXTENSION, 0); }
		public TerminalNode SOFTNUMA() { return getToken(TSqlParser.SOFTNUMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode MAX_SIZE() { return getToken(TSqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_FILES() { return getToken(TSqlParser.MAX_FILES, 0); }
		public TerminalNode VERBOSELOGGING() { return getToken(TSqlParser.VERBOSELOGGING, 0); }
		public TerminalNode SQLDUMPERFLAGS() { return getToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public TerminalNode SQLDUMPERPATH() { return getToken(TSqlParser.SQLDUMPERPATH, 0); }
		public TerminalNode SQLDUMPERTIMEOUT() { return getToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public TerminalNode FAILURECONDITIONLEVEL() { return getToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public TerminalNode HEALTHCHECKTIMEOUT() { return getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_configuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_configuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_configuration(this);
		}
	}

	public final Alter_server_configurationContext alter_server_configuration() throws RecognitionException {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alter_server_configuration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4983);
			match(ALTER);
			setState(4984);
			match(SERVER);
			setState(4985);
			match(CONFIGURATION);
			setState(4986);
			match(SET);
			{
			setState(5092);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCESS:
				{
				setState(4987);
				match(PROCESS);
				setState(4988);
				match(AFFINITY);
				setState(5024);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CPU:
					{
					setState(4989);
					match(CPU);
					setState(4990);
					match(EQUAL);
					setState(5006);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4991);
						match(AUTO);
						}
						break;
					case DECIMAL:
					case COMMA:
						{
						setState(5002); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							setState(5002);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
							case 1:
								{
								setState(4993);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4992);
									match(COMMA);
									}
								}

								setState(4995);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4997);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4996);
									match(COMMA);
									}
								}

								setState(4999);
								match(DECIMAL);
								setState(5000);
								match(TO);
								setState(5001);
								match(DECIMAL);
								}
								break;
							}
							}
							setState(5004); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NUMANODE:
					{
					setState(5008);
					match(NUMANODE);
					setState(5009);
					match(EQUAL);
					setState(5020); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(5020);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
						case 1:
							{
							setState(5011);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(5010);
								match(COMMA);
								}
							}

							setState(5013);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(5015);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(5014);
								match(COMMA);
								}
							}

							setState(5017);
							match(DECIMAL);
							setState(5018);
							match(TO);
							setState(5019);
							match(DECIMAL);
							}
							break;
						}
						}
						setState(5022); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DECIMAL || _la==COMMA );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DIAGNOSTICS:
				{
				setState(5026);
				match(DIAGNOSTICS);
				setState(5027);
				match(LOG);
				setState(5043);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(5028);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(5029);
					match(OFF);
					}
					break;
				case PATH:
					{
					setState(5030);
					match(PATH);
					setState(5031);
					match(EQUAL);
					setState(5032);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case MAX_SIZE:
					{
					setState(5033);
					match(MAX_SIZE);
					setState(5034);
					match(EQUAL);
					setState(5038);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(5035);
						match(DECIMAL);
						setState(5036);
						match(MB);
						}
						break;
					case DEFAULT:
						{
						setState(5037);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MAX_FILES:
					{
					setState(5040);
					match(MAX_FILES);
					setState(5041);
					match(EQUAL);
					setState(5042);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FAILOVER:
				{
				setState(5045);
				match(FAILOVER);
				setState(5046);
				match(CLUSTER);
				setState(5047);
				match(PROPERTY);
				setState(5065);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VERBOSELOGGING:
					{
					setState(5048);
					match(VERBOSELOGGING);
					setState(5049);
					match(EQUAL);
					setState(5050);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERFLAGS:
					{
					setState(5051);
					match(SQLDUMPERFLAGS);
					setState(5052);
					match(EQUAL);
					setState(5053);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERPATH:
					{
					setState(5054);
					match(SQLDUMPERPATH);
					setState(5055);
					match(EQUAL);
					setState(5056);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERTIMEOUT:
					{
					setState(5057);
					match(SQLDUMPERTIMEOUT);
					setState(5058);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURECONDITIONLEVEL:
					{
					setState(5059);
					match(FAILURECONDITIONLEVEL);
					setState(5060);
					match(EQUAL);
					setState(5061);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case HEALTHCHECKTIMEOUT:
					{
					setState(5062);
					match(HEALTHCHECKTIMEOUT);
					setState(5063);
					match(EQUAL);
					setState(5064);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HADR:
				{
				setState(5067);
				match(HADR);
				setState(5068);
				match(CLUSTER);
				setState(5069);
				match(CONTEXT);
				setState(5070);
				match(EQUAL);
				setState(5071);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BUFFER:
				{
				setState(5072);
				match(BUFFER);
				setState(5073);
				match(POOL);
				setState(5074);
				match(EXTENSION);
				setState(5087);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(5075);
					match(ON);
					setState(5076);
					match(LR_BRACKET);
					setState(5077);
					match(FILENAME);
					setState(5078);
					match(EQUAL);
					setState(5079);
					match(STRING);
					setState(5080);
					match(COMMA);
					setState(5081);
					match(SIZE);
					setState(5082);
					match(EQUAL);
					setState(5083);
					match(DECIMAL);
					setState(5084);
					_la = _input.LA(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5085);
					match(RR_BRACKET);
					}
					break;
				case OFF:
					{
					setState(5086);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SET:
				{
				setState(5089);
				match(SET);
				setState(5090);
				match(SOFTNUMA);
				setState(5091);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_roleContext extends ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context server_principal;
		public Id_Context new_server_role_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_role(this);
		}
	}

	public final Alter_server_roleContext alter_server_role() throws RecognitionException {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_alter_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5094);
			match(ALTER);
			setState(5095);
			match(SERVER);
			setState(5096);
			match(ROLE);
			setState(5097);
			((Alter_server_roleContext)_localctx).server_role_name = id_();
			setState(5105);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(5098);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5099);
				match(MEMBER);
				setState(5100);
				((Alter_server_roleContext)_localctx).server_principal = id_();
				}
				break;
			case WITH:
				{
				setState(5101);
				match(WITH);
				setState(5102);
				match(NAME);
				setState(5103);
				match(EQUAL);
				setState(5104);
				((Alter_server_roleContext)_localctx).new_server_role_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_roleContext extends ParserRuleContext {
		public Id_Context server_role;
		public Id_Context server_principal;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_server_role(this);
		}
	}

	public final Create_server_roleContext create_server_role() throws RecognitionException {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_create_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5107);
			match(CREATE);
			setState(5108);
			match(SERVER);
			setState(5109);
			match(ROLE);
			setState(5110);
			((Create_server_roleContext)_localctx).server_role = id_();
			setState(5113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5111);
				match(AUTHORIZATION);
				setState(5112);
				((Create_server_roleContext)_localctx).server_principal = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_role_pdwContext extends ParserRuleContext {
		public Id_Context server_role_name;
		public Id_Context login;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_role_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_role_pdw(this);
		}
	}

	public final Alter_server_role_pdwContext alter_server_role_pdw() throws RecognitionException {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alter_server_role_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5115);
			match(ALTER);
			setState(5116);
			match(SERVER);
			setState(5117);
			match(ROLE);
			setState(5118);
			((Alter_server_role_pdwContext)_localctx).server_role_name = id_();
			setState(5119);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5120);
			match(MEMBER);
			setState(5121);
			((Alter_server_role_pdwContext)_localctx).login = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_serviceContext extends ParserRuleContext {
		public Id_Context modified_service_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public Id_Context modified_contract_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_service(this);
		}
	}

	public final Alter_serviceContext alter_service() throws RecognitionException {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alter_service);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5123);
			match(ALTER);
			setState(5124);
			match(SERVICE);
			setState(5125);
			((Alter_serviceContext)_localctx).modified_service_name = id_();
			setState(5133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5126);
				match(ON);
				setState(5127);
				match(QUEUE);
				{
				setState(5128);
				((Alter_serviceContext)_localctx).schema_name = id_();
				setState(5129);
				match(DOT);
				}
				setState(5131);
				((Alter_serviceContext)_localctx).queue_name = id_();
				}
			}

			setState(5142);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,586,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5136);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5135);
						match(COMMA);
						}
					}

					setState(5138);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5139);
					((Alter_serviceContext)_localctx).modified_contract_name = id_();
					}
					} 
				}
				setState(5144);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,586,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_serviceContext extends ParserRuleContext {
		public Id_Context create_service_name;
		public Id_Context owner_name;
		public Id_Context schema_name;
		public Id_Context queue_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_service(this);
		}
	}

	public final Create_serviceContext create_service() throws RecognitionException {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_create_service);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5145);
			match(CREATE);
			setState(5146);
			match(SERVICE);
			setState(5147);
			((Create_serviceContext)_localctx).create_service_name = id_();
			setState(5150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5148);
				match(AUTHORIZATION);
				setState(5149);
				((Create_serviceContext)_localctx).owner_name = id_();
				}
			}

			setState(5152);
			match(ON);
			setState(5153);
			match(QUEUE);
			setState(5157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				{
				setState(5154);
				((Create_serviceContext)_localctx).schema_name = id_();
				setState(5155);
				match(DOT);
				}
				break;
			}
			setState(5159);
			((Create_serviceContext)_localctx).queue_name = id_();
			setState(5173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				setState(5160);
				match(LR_BRACKET);
				setState(5168); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5162);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5161);
						match(COMMA);
						}
					}

					setState(5166);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(5164);
						id_();
						}
						break;
					case DEFAULT:
						{
						setState(5165);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(5170); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DEFAULT || _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==COMMA );
				setState(5172);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_service_master_keyContext extends ParserRuleContext {
		public Token acold_account_name;
		public Token old_password;
		public Token new_account_name;
		public Token new_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(TSqlParser.OLD_ACCOUNT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(TSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(TSqlParser.NEW_PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_service_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_service_master_key(this);
		}
	}

	public final Alter_service_master_keyContext alter_service_master_key() throws RecognitionException {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_alter_service_master_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5175);
			match(ALTER);
			setState(5176);
			match(SERVICE);
			setState(5177);
			match(MASTER);
			setState(5178);
			match(KEY);
			setState(5200);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				setState(5180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(5179);
					match(FORCE);
					}
				}

				setState(5182);
				match(REGENERATE);
				}
				break;
			case WITH:
				{
				{
				setState(5183);
				match(WITH);
				setState(5198);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(5184);
					match(OLD_ACCOUNT);
					setState(5185);
					match(EQUAL);
					setState(5186);
					((Alter_service_master_keyContext)_localctx).acold_account_name = match(STRING);
					setState(5187);
					match(COMMA);
					setState(5188);
					match(OLD_PASSWORD);
					setState(5189);
					match(EQUAL);
					setState(5190);
					((Alter_service_master_keyContext)_localctx).old_password = match(STRING);
					}
					break;
				case 2:
					{
					setState(5191);
					match(NEW_ACCOUNT);
					setState(5192);
					match(EQUAL);
					setState(5193);
					((Alter_service_master_keyContext)_localctx).new_account_name = match(STRING);
					setState(5194);
					match(COMMA);
					setState(5195);
					match(NEW_PASSWORD);
					setState(5196);
					match(EQUAL);
					setState(5197);
					((Alter_service_master_keyContext)_localctx).new_password = match(STRING);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_symmetric_keyContext extends ParserRuleContext {
		public Id_Context key_name;
		public Id_Context certificate_name;
		public Token password;
		public Id_Context symmetric_key_name;
		public Id_Context Asym_key_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SYMMETRIC() { return getTokens(TSqlParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(TSqlParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_symmetric_key(this);
		}
	}

	public final Alter_symmetric_keyContext alter_symmetric_key() throws RecognitionException {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_alter_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5202);
			match(ALTER);
			setState(5203);
			match(SYMMETRIC);
			setState(5204);
			match(KEY);
			setState(5205);
			((Alter_symmetric_keyContext)_localctx).key_name = id_();
			{
			setState(5206);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5207);
			match(ENCRYPTION);
			setState(5208);
			match(BY);
			setState(5220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				{
				setState(5209);
				match(CERTIFICATE);
				setState(5210);
				((Alter_symmetric_keyContext)_localctx).certificate_name = id_();
				}
				break;
			case PASSWORD:
				{
				setState(5211);
				match(PASSWORD);
				setState(5212);
				match(EQUAL);
				setState(5213);
				((Alter_symmetric_keyContext)_localctx).password = match(STRING);
				}
				break;
			case SYMMETRIC:
				{
				setState(5214);
				match(SYMMETRIC);
				setState(5215);
				match(KEY);
				setState(5216);
				((Alter_symmetric_keyContext)_localctx).symmetric_key_name = id_();
				}
				break;
			case ASYMMETRIC:
				{
				setState(5217);
				match(ASYMMETRIC);
				setState(5218);
				match(KEY);
				setState(5219);
				((Alter_symmetric_keyContext)_localctx).Asym_key_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public Id_Context schema_name_1;
		public Id_Context synonym_name;
		public Id_Context server_name;
		public Id_Context database_name;
		public Id_Context schema_name_2;
		public Id_Context object_name;
		public Id_Context database_or_schema2;
		public Id_Context schema_id_2_or_object_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_synonym(this);
		}
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_create_synonym);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5222);
			match(CREATE);
			setState(5223);
			match(SYNONYM);
			setState(5227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
			case 1:
				{
				setState(5224);
				((Create_synonymContext)_localctx).schema_name_1 = id_();
				setState(5225);
				match(DOT);
				}
				break;
			}
			setState(5229);
			((Create_synonymContext)_localctx).synonym_name = id_();
			setState(5230);
			match(FOR);
			setState(5257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				{
				setState(5234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(5231);
					((Create_synonymContext)_localctx).server_name = id_();
					setState(5232);
					match(DOT);
					}
					break;
				}
				setState(5239);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(5236);
					((Create_synonymContext)_localctx).database_name = id_();
					setState(5237);
					match(DOT);
					}
					break;
				}
				setState(5244);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
				case 1:
					{
					setState(5241);
					((Create_synonymContext)_localctx).schema_name_2 = id_();
					setState(5242);
					match(DOT);
					}
					break;
				}
				setState(5246);
				((Create_synonymContext)_localctx).object_name = id_();
				}
				break;
			case 2:
				{
				setState(5250);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
				case 1:
					{
					setState(5247);
					((Create_synonymContext)_localctx).database_or_schema2 = id_();
					setState(5248);
					match(DOT);
					}
					break;
				}
				setState(5255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(5252);
					((Create_synonymContext)_localctx).schema_id_2_or_object_name = id_();
					setState(5253);
					match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_userContext extends ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public Token lcid;
		public Id_Context language_name_or_alias;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(TSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(TSqlParser.LOGIN, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> NULL_() { return getTokens(TSqlParser.NULL_); }
		public TerminalNode NULL_(int i) {
			return getToken(TSqlParser.NULL_, i);
		}
		public List<TerminalNode> NONE() { return getTokens(TSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(TSqlParser.NONE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> OLD_PASSWORD() { return getTokens(TSqlParser.OLD_PASSWORD); }
		public TerminalNode OLD_PASSWORD(int i) {
			return getToken(TSqlParser.OLD_PASSWORD, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_user(this);
		}
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_alter_user);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5259);
			match(ALTER);
			setState(5260);
			match(USER);
			setState(5261);
			((Alter_userContext)_localctx).username = id_();
			setState(5262);
			match(WITH);
			setState(5313); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5313);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
					case 1:
						{
						setState(5264);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5263);
							match(COMMA);
							}
						}

						setState(5266);
						match(NAME);
						setState(5267);
						match(EQUAL);
						setState(5268);
						((Alter_userContext)_localctx).newusername = id_();
						}
						break;
					case 2:
						{
						setState(5270);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5269);
							match(COMMA);
							}
						}

						setState(5272);
						match(DEFAULT_SCHEMA);
						setState(5273);
						match(EQUAL);
						setState(5276);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case OPENJSON:
						case PRECISION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(5274);
							((Alter_userContext)_localctx).schema_name = id_();
							}
							break;
						case NULL_:
							{
							setState(5275);
							match(NULL_);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						setState(5279);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5278);
							match(COMMA);
							}
						}

						setState(5281);
						match(LOGIN);
						setState(5282);
						match(EQUAL);
						setState(5283);
						((Alter_userContext)_localctx).loginame = id_();
						}
						break;
					case 4:
						{
						setState(5285);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5284);
							match(COMMA);
							}
						}

						setState(5287);
						match(PASSWORD);
						setState(5288);
						match(EQUAL);
						setState(5289);
						match(STRING);
						setState(5293); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(5290);
								match(OLD_PASSWORD);
								setState(5291);
								match(EQUAL);
								setState(5292);
								match(STRING);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5295); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,609,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 5:
						{
						setState(5298);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5297);
							match(COMMA);
							}
						}

						setState(5300);
						match(DEFAULT_LANGUAGE);
						setState(5301);
						match(EQUAL);
						setState(5305);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
						case 1:
							{
							setState(5302);
							match(NONE);
							}
							break;
						case 2:
							{
							setState(5303);
							((Alter_userContext)_localctx).lcid = match(DECIMAL);
							}
							break;
						case 3:
							{
							setState(5304);
							((Alter_userContext)_localctx).language_name_or_alias = id_();
							}
							break;
						}
						}
						break;
					case 6:
						{
						setState(5308);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5307);
							match(COMMA);
							}
						}

						setState(5310);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5311);
						match(EQUAL);
						setState(5312);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5315); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_userContext extends ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context windows_principal;
		public Id_Context language_name_or_alias;
		public Token password;
		public Id_Context Azure_Active_Directory_principal;
		public Id_Context cert_name;
		public Id_Context asym_key_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> SID() { return getTokens(TSqlParser.SID); }
		public TerminalNode SID(int i) {
			return getToken(TSqlParser.SID, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(TSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(TSqlParser.NONE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_user(this);
		}
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_create_user);
		int _la;
		try {
			int _alt;
			setState(5463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5317);
				match(CREATE);
				setState(5318);
				match(USER);
				setState(5319);
				((Create_userContext)_localctx).user_name = id_();
				setState(5323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==FROM) {
					{
					setState(5320);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5321);
					match(LOGIN);
					setState(5322);
					((Create_userContext)_localctx).login_name = id_();
					}
				}

				setState(5343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
				case 1:
					{
					setState(5325);
					match(WITH);
					setState(5340);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,619,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5338);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
							case 1:
								{
								setState(5327);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5326);
									match(COMMA);
									}
								}

								setState(5329);
								match(DEFAULT_SCHEMA);
								setState(5330);
								match(EQUAL);
								setState(5331);
								((Create_userContext)_localctx).schema_name = id_();
								}
								break;
							case 2:
								{
								setState(5333);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5332);
									match(COMMA);
									}
								}

								setState(5335);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5336);
								match(EQUAL);
								setState(5337);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5342);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,619,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5345);
				match(CREATE);
				setState(5346);
				match(USER);
				setState(5427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
				case 1:
					{
					setState(5347);
					((Create_userContext)_localctx).windows_principal = id_();
					setState(5382);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
					case 1:
						{
						setState(5348);
						match(WITH);
						setState(5379);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,627,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								setState(5377);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
								case 1:
									{
									setState(5350);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5349);
										match(COMMA);
										}
									}

									setState(5352);
									match(DEFAULT_SCHEMA);
									setState(5353);
									match(EQUAL);
									setState(5354);
									((Create_userContext)_localctx).schema_name = id_();
									}
									break;
								case 2:
									{
									setState(5356);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5355);
										match(COMMA);
										}
									}

									setState(5358);
									match(DEFAULT_LANGUAGE);
									setState(5359);
									match(EQUAL);
									setState(5363);
									_errHandler.sync(this);
									switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
									case 1:
										{
										setState(5360);
										match(NONE);
										}
										break;
									case 2:
										{
										setState(5361);
										match(DECIMAL);
										}
										break;
									case 3:
										{
										setState(5362);
										((Create_userContext)_localctx).language_name_or_alias = id_();
										}
										break;
									}
									}
									break;
								case 3:
									{
									setState(5366);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5365);
										match(COMMA);
										}
									}

									setState(5368);
									match(SID);
									setState(5369);
									match(EQUAL);
									setState(5370);
									match(BINARY);
									}
									break;
								case 4:
									{
									setState(5372);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5371);
										match(COMMA);
										}
									}

									setState(5374);
									match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									setState(5375);
									match(EQUAL);
									setState(5376);
									_la = _input.LA(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								}
								} 
							}
							setState(5381);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,627,_ctx);
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(5384);
					((Create_userContext)_localctx).user_name = id_();
					setState(5385);
					match(WITH);
					setState(5386);
					match(PASSWORD);
					setState(5387);
					match(EQUAL);
					setState(5388);
					((Create_userContext)_localctx).password = match(STRING);
					setState(5419);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,635,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5417);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
							case 1:
								{
								setState(5390);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5389);
									match(COMMA);
									}
								}

								setState(5392);
								match(DEFAULT_SCHEMA);
								setState(5393);
								match(EQUAL);
								setState(5394);
								((Create_userContext)_localctx).schema_name = id_();
								}
								break;
							case 2:
								{
								setState(5396);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5395);
									match(COMMA);
									}
								}

								setState(5398);
								match(DEFAULT_LANGUAGE);
								setState(5399);
								match(EQUAL);
								setState(5403);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
								case 1:
									{
									setState(5400);
									match(NONE);
									}
									break;
								case 2:
									{
									setState(5401);
									match(DECIMAL);
									}
									break;
								case 3:
									{
									setState(5402);
									((Create_userContext)_localctx).language_name_or_alias = id_();
									}
									break;
								}
								}
								break;
							case 3:
								{
								setState(5406);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5405);
									match(COMMA);
									}
								}

								setState(5408);
								match(SID);
								setState(5409);
								match(EQUAL);
								setState(5410);
								match(BINARY);
								}
								break;
							case 4:
								{
								setState(5412);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5411);
									match(COMMA);
									}
								}

								setState(5414);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5415);
								match(EQUAL);
								setState(5416);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5421);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,635,_ctx);
					}
					}
					break;
				case 3:
					{
					setState(5422);
					((Create_userContext)_localctx).Azure_Active_Directory_principal = id_();
					setState(5423);
					match(FROM);
					setState(5424);
					match(EXTERNAL);
					setState(5425);
					match(PROVIDER);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5429);
				match(CREATE);
				setState(5430);
				match(USER);
				setState(5431);
				((Create_userContext)_localctx).user_name = id_();
				setState(5458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
				case 1:
					{
					setState(5432);
					match(WITHOUT);
					setState(5433);
					match(LOGIN);
					setState(5448);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,640,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5446);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
							case 1:
								{
								setState(5435);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5434);
									match(COMMA);
									}
								}

								setState(5437);
								match(DEFAULT_SCHEMA);
								setState(5438);
								match(EQUAL);
								setState(5439);
								((Create_userContext)_localctx).schema_name = id_();
								}
								break;
							case 2:
								{
								setState(5441);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5440);
									match(COMMA);
									}
								}

								setState(5443);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5444);
								match(EQUAL);
								setState(5445);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5450);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,640,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(5451);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5452);
					match(CERTIFICATE);
					setState(5453);
					((Create_userContext)_localctx).cert_name = id_();
					}
					break;
				case 3:
					{
					setState(5454);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5455);
					match(ASYMMETRIC);
					setState(5456);
					match(KEY);
					setState(5457);
					((Create_userContext)_localctx).asym_key_name = id_();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5460);
				match(CREATE);
				setState(5461);
				match(USER);
				setState(5462);
				((Create_userContext)_localctx).user_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_azure_sql_dwContext extends ParserRuleContext {
		public Id_Context user_name;
		public Id_Context login_name;
		public Id_Context schema_name;
		public Id_Context Azure_Active_Directory_principal;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_azure_sql_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_user_azure_sql_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_user_azure_sql_dw(this);
		}
	}

	public final Create_user_azure_sql_dwContext create_user_azure_sql_dw() throws RecognitionException {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			setState(5493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5465);
				match(CREATE);
				setState(5466);
				match(USER);
				setState(5467);
				((Create_user_azure_sql_dwContext)_localctx).user_name = id_();
				setState(5473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
				case 1:
					{
					setState(5468);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5469);
					match(LOGIN);
					setState(5470);
					((Create_user_azure_sql_dwContext)_localctx).login_name = id_();
					}
					break;
				case 2:
					{
					setState(5471);
					match(WITHOUT);
					setState(5472);
					match(LOGIN);
					}
					break;
				}
				setState(5479);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
				case 1:
					{
					setState(5475);
					match(WITH);
					setState(5476);
					match(DEFAULT_SCHEMA);
					setState(5477);
					match(EQUAL);
					setState(5478);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id_();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5481);
				match(CREATE);
				setState(5482);
				match(USER);
				setState(5483);
				((Create_user_azure_sql_dwContext)_localctx).Azure_Active_Directory_principal = id_();
				setState(5484);
				match(FROM);
				setState(5485);
				match(EXTERNAL);
				setState(5486);
				match(PROVIDER);
				setState(5491);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
				case 1:
					{
					setState(5487);
					match(WITH);
					setState(5488);
					match(DEFAULT_SCHEMA);
					setState(5489);
					match(EQUAL);
					setState(5490);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_azure_sqlContext extends ParserRuleContext {
		public Id_Context username;
		public Id_Context newusername;
		public Id_Context schema_name;
		public Id_Context loginame;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(TSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(TSqlParser.LOGIN, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_user_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_user_azure_sql(this);
		}
	}

	public final Alter_user_azure_sqlContext alter_user_azure_sql() throws RecognitionException {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5495);
			match(ALTER);
			setState(5496);
			match(USER);
			setState(5497);
			((Alter_user_azure_sqlContext)_localctx).username = id_();
			setState(5498);
			match(WITH);
			setState(5523); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5523);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
					case 1:
						{
						setState(5500);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5499);
							match(COMMA);
							}
						}

						setState(5502);
						match(NAME);
						setState(5503);
						match(EQUAL);
						setState(5504);
						((Alter_user_azure_sqlContext)_localctx).newusername = id_();
						}
						break;
					case 2:
						{
						setState(5506);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5505);
							match(COMMA);
							}
						}

						setState(5508);
						match(DEFAULT_SCHEMA);
						setState(5509);
						match(EQUAL);
						setState(5510);
						((Alter_user_azure_sqlContext)_localctx).schema_name = id_();
						}
						break;
					case 3:
						{
						setState(5512);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5511);
							match(COMMA);
							}
						}

						setState(5514);
						match(LOGIN);
						setState(5515);
						match(EQUAL);
						setState(5516);
						((Alter_user_azure_sqlContext)_localctx).loginame = id_();
						}
						break;
					case 4:
						{
						setState(5518);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5517);
							match(COMMA);
							}
						}

						setState(5520);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5521);
						match(EQUAL);
						setState(5522);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5525); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,652,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_workload_groupContext extends ParserRuleContext {
		public Id_Context workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public Id_Context workload_group_pool_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> LOW() { return getTokens(TSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_workload_group(this);
		}
	}

	public final Alter_workload_groupContext alter_workload_group() throws RecognitionException {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_alter_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5527);
			match(ALTER);
			setState(5528);
			match(WORKLOAD);
			setState(5529);
			match(GROUP);
			setState(5532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(5530);
				((Alter_workload_groupContext)_localctx).workload_group_group_name = id_();
				}
				break;
			case 2:
				{
				setState(5531);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			setState(5565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				{
				setState(5534);
				match(WITH);
				setState(5535);
				match(LR_BRACKET);
				setState(5560); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5560);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
					case 1:
						{
						setState(5536);
						match(IMPORTANCE);
						setState(5537);
						match(EQUAL);
						setState(5538);
						_la = _input.LA(1);
						if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (HIGH - 350)) | (1L << (LOW - 350)) | (1L << (MEDIUM - 350)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5540);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5539);
							match(COMMA);
							}
						}

						setState(5542);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5543);
						match(EQUAL);
						setState(5544);
						((Alter_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5546);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5545);
							match(COMMA);
							}
						}

						setState(5548);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5549);
						match(EQUAL);
						setState(5550);
						((Alter_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5551);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5552);
						match(EQUAL);
						setState(5553);
						((Alter_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5554);
						match(MAX_DOP);
						setState(5555);
						match(EQUAL);
						setState(5556);
						((Alter_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5557);
						match(GROUP_MAX_REQUESTS);
						setState(5558);
						match(EQUAL);
						setState(5559);
						((Alter_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5562); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GROUP_MAX_REQUESTS - 344)) | (1L << (IMPORTANCE - 344)) | (1L << (MAX_DOP - 344)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 507)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 507)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 507)))) != 0) || _la==COMMA );
				setState(5564);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(5567);
				match(USING);
				setState(5570);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
				case 1:
					{
					setState(5568);
					((Alter_workload_groupContext)_localctx).workload_group_pool_name = id_();
					}
					break;
				case 2:
					{
					setState(5569);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_workload_groupContext extends ParserRuleContext {
		public Id_Context workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public Id_Context workload_group_pool_name;
		public Id_Context external_pool_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public List<TerminalNode> LOW() { return getTokens(TSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_workload_group(this);
		}
	}

	public final Create_workload_groupContext create_workload_group() throws RecognitionException {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_create_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5574);
			match(CREATE);
			setState(5575);
			match(WORKLOAD);
			setState(5576);
			match(GROUP);
			setState(5577);
			((Create_workload_groupContext)_localctx).workload_group_group_name = id_();
			setState(5609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(5578);
				match(WITH);
				setState(5579);
				match(LR_BRACKET);
				setState(5604); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5604);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
					case 1:
						{
						setState(5580);
						match(IMPORTANCE);
						setState(5581);
						match(EQUAL);
						setState(5582);
						_la = _input.LA(1);
						if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (HIGH - 350)) | (1L << (LOW - 350)) | (1L << (MEDIUM - 350)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5584);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5583);
							match(COMMA);
							}
						}

						setState(5586);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5587);
						match(EQUAL);
						setState(5588);
						((Create_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5590);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5589);
							match(COMMA);
							}
						}

						setState(5592);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5593);
						match(EQUAL);
						setState(5594);
						((Create_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5595);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5596);
						match(EQUAL);
						setState(5597);
						((Create_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5598);
						match(MAX_DOP);
						setState(5599);
						match(EQUAL);
						setState(5600);
						((Create_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5601);
						match(GROUP_MAX_REQUESTS);
						setState(5602);
						match(EQUAL);
						setState(5603);
						((Create_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5606); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GROUP_MAX_REQUESTS - 344)) | (1L << (IMPORTANCE - 344)) | (1L << (MAX_DOP - 344)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 507)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 507)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 507)))) != 0) || _la==COMMA );
				setState(5608);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				{
				setState(5611);
				match(USING);
				setState(5614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
				case 1:
					{
					setState(5612);
					((Create_workload_groupContext)_localctx).workload_group_pool_name = id_();
					}
					break;
				case 2:
					{
					setState(5613);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				setState(5622);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
				case 1:
					{
					setState(5617);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5616);
						match(COMMA);
						}
					}

					setState(5619);
					match(EXTERNAL);
					setState(5620);
					((Create_workload_groupContext)_localctx).external_pool_name = id_();
					}
					break;
				case 2:
					{
					setState(5621);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_xml_schema_collectionContext extends ParserRuleContext {
		public Id_Context relational_schema;
		public Id_Context sql_identifier;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_xml_schema_collection(this);
		}
	}

	public final Create_xml_schema_collectionContext create_xml_schema_collection() throws RecognitionException {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_create_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5626);
			match(CREATE);
			setState(5627);
			match(XML);
			setState(5628);
			match(SCHEMA);
			setState(5629);
			match(COLLECTION);
			setState(5633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				{
				setState(5630);
				((Create_xml_schema_collectionContext)_localctx).relational_schema = id_();
				setState(5631);
				match(DOT);
				}
				break;
			}
			setState(5635);
			((Create_xml_schema_collectionContext)_localctx).sql_identifier = id_();
			setState(5636);
			match(AS);
			setState(5640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(5637);
				match(STRING);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(5638);
				id_();
				}
				break;
			case LOCAL_ID:
				{
				setState(5639);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_partition_functionContext extends ParserRuleContext {
		public Id_Context partition_function_name;
		public Data_typeContext input_parameter_type;
		public Expression_listContext boundary_values;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(TSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(TSqlParser.RIGHT, 0); }
		public Create_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_partition_function(this);
		}
	}

	public final Create_partition_functionContext create_partition_function() throws RecognitionException {
		Create_partition_functionContext _localctx = new Create_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_create_partition_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5642);
			match(CREATE);
			setState(5643);
			match(PARTITION);
			setState(5644);
			match(FUNCTION);
			setState(5645);
			((Create_partition_functionContext)_localctx).partition_function_name = id_();
			setState(5646);
			match(LR_BRACKET);
			setState(5647);
			((Create_partition_functionContext)_localctx).input_parameter_type = data_type();
			setState(5648);
			match(RR_BRACKET);
			setState(5649);
			match(AS);
			setState(5650);
			match(RANGE);
			setState(5652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT) {
				{
				setState(5651);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5654);
			match(FOR);
			setState(5655);
			match(VALUES);
			setState(5656);
			match(LR_BRACKET);
			setState(5657);
			((Create_partition_functionContext)_localctx).boundary_values = expression_list();
			setState(5658);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_partition_schemeContext extends ParserRuleContext {
		public Id_Context partition_scheme_name;
		public Id_Context partition_function_name;
		public Id_Context id_;
		public List<Id_Context> file_group_names = new ArrayList<Id_Context>();
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(TSqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(TSqlParser.PARTITION, i);
		}
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Create_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_partition_scheme(this);
		}
	}

	public final Create_partition_schemeContext create_partition_scheme() throws RecognitionException {
		Create_partition_schemeContext _localctx = new Create_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_create_partition_scheme);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5660);
			match(CREATE);
			setState(5661);
			match(PARTITION);
			setState(5662);
			match(SCHEME);
			setState(5663);
			((Create_partition_schemeContext)_localctx).partition_scheme_name = id_();
			setState(5664);
			match(AS);
			setState(5665);
			match(PARTITION);
			setState(5666);
			((Create_partition_schemeContext)_localctx).partition_function_name = id_();
			setState(5668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(5667);
				match(ALL);
				}
			}

			setState(5670);
			match(TO);
			setState(5671);
			match(LR_BRACKET);
			setState(5672);
			((Create_partition_schemeContext)_localctx).id_ = id_();
			((Create_partition_schemeContext)_localctx).file_group_names.add(((Create_partition_schemeContext)_localctx).id_);
			setState(5677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5673);
				match(COMMA);
				setState(5674);
				((Create_partition_schemeContext)_localctx).id_ = id_();
				((Create_partition_schemeContext)_localctx).file_group_names.add(((Create_partition_schemeContext)_localctx).id_);
				}
				}
				setState(5679);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5680);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_queueContext extends ParserRuleContext {
		public Id_Context queue_name;
		public Id_Context filegroup;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_queue(this);
		}
	}

	public final Create_queueContext create_queue() throws RecognitionException {
		Create_queueContext _localctx = new Create_queueContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_create_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5682);
			match(CREATE);
			setState(5683);
			match(QUEUE);
			setState(5686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				{
				setState(5684);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5685);
				((Create_queueContext)_localctx).queue_name = id_();
				}
				break;
			}
			setState(5689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				{
				setState(5688);
				queue_settings();
				}
				break;
			}
			setState(5694);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(5691);
				match(ON);
				setState(5692);
				((Create_queueContext)_localctx).filegroup = id_();
				}
				break;
			case DEFAULT:
				{
				setState(5693);
				match(DEFAULT);
				}
				break;
			case EOF:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case ELSE:
			case END:
			case EXECUTE:
			case FETCH:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case KILL:
			case MERGE:
			case OPEN:
			case OPENJSON:
			case PRECISION:
			case PRINT:
			case RAISERROR:
			case RECONFIGURE:
			case RETURN:
			case REVERT:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case SHUTDOWN:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOT:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_settingsContext extends ParserRuleContext {
		public Token max_readers;
		public Token user_name;
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> STATUS() { return getTokens(TSqlParser.STATUS); }
		public TerminalNode STATUS(int i) {
			return getToken(TSqlParser.STATUS, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RETENTION() { return getToken(TSqlParser.RETENTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(TSqlParser.ACTIVATION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PROCEDURE_NAME() { return getToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return getRuleContext(Func_proc_name_database_schemaContext.class,0);
		}
		public TerminalNode MAX_QUEUE_READERS() { return getToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_settings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_settings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_settings(this);
		}
	}

	public final Queue_settingsContext queue_settings() throws RecognitionException {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_queue_settings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5696);
			match(WITH);
			setState(5703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
			case 1:
				{
				setState(5697);
				match(STATUS);
				setState(5698);
				match(EQUAL);
				setState(5699);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5700);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				setState(5705);
				match(RETENTION);
				setState(5706);
				match(EQUAL);
				setState(5707);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5708);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(5713);
				match(ACTIVATION);
				setState(5714);
				match(LR_BRACKET);
				setState(5752);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
				case MAX_QUEUE_READERS:
				case PROCEDURE_NAME:
				case STATUS:
				case RR_BRACKET:
					{
					{
					setState(5721);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STATUS) {
						{
						setState(5715);
						match(STATUS);
						setState(5716);
						match(EQUAL);
						setState(5717);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5719);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5718);
							match(COMMA);
							}
						}

						}
					}

					setState(5729);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PROCEDURE_NAME) {
						{
						setState(5723);
						match(PROCEDURE_NAME);
						setState(5724);
						match(EQUAL);
						setState(5725);
						func_proc_name_database_schema();
						setState(5727);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5726);
							match(COMMA);
							}
						}

						}
					}

					setState(5737);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MAX_QUEUE_READERS) {
						{
						setState(5731);
						match(MAX_QUEUE_READERS);
						setState(5732);
						match(EQUAL);
						setState(5733);
						((Queue_settingsContext)_localctx).max_readers = match(DECIMAL);
						setState(5735);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5734);
							match(COMMA);
							}
						}

						}
					}

					setState(5749);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EXECUTE) {
						{
						setState(5739);
						match(EXECUTE);
						setState(5740);
						match(AS);
						setState(5744);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case SELF:
							{
							setState(5741);
							match(SELF);
							}
							break;
						case STRING:
							{
							setState(5742);
							((Queue_settingsContext)_localctx).user_name = match(STRING);
							}
							break;
						case OWNER:
							{
							setState(5743);
							match(OWNER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5747);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5746);
							match(COMMA);
							}
						}

						}
					}

					}
					}
					break;
				case DROP:
					{
					setState(5751);
					match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5754);
				match(RR_BRACKET);
				setState(5756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5755);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
			case 1:
				{
				setState(5760);
				match(POISON_MESSAGE_HANDLING);
				setState(5761);
				match(LR_BRACKET);
				{
				setState(5762);
				match(STATUS);
				setState(5763);
				match(EQUAL);
				setState(5764);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				setState(5766);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_queueContext extends ParserRuleContext {
		public Id_Context queue_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public Queue_actionContext queue_action() {
			return getRuleContext(Queue_actionContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_queue(this);
		}
	}

	public final Alter_queueContext alter_queue() throws RecognitionException {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_alter_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5769);
			match(ALTER);
			setState(5770);
			match(QUEUE);
			setState(5773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				{
				setState(5771);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5772);
				((Alter_queueContext)_localctx).queue_name = id_();
				}
				break;
			}
			setState(5777);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(5775);
				queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				setState(5776);
				queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_actionContext extends ParserRuleContext {
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return getRuleContext(Queue_rebuild_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(TSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode MOVE() { return getToken(TSqlParser.MOVE, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_action(this);
		}
	}

	public final Queue_actionContext queue_action() throws RecognitionException {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_queue_action);
		int _la;
		try {
			setState(5800);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5779);
				match(REBUILD);
				setState(5785);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
				case 1:
					{
					setState(5780);
					match(WITH);
					setState(5781);
					match(LR_BRACKET);
					setState(5782);
					queue_rebuild_options();
					setState(5783);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5787);
				match(REORGANIZE);
				setState(5792);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
				case 1:
					{
					setState(5788);
					match(WITH);
					setState(5789);
					match(LOB_COMPACTION);
					setState(5790);
					match(EQUAL);
					setState(5791);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5794);
				match(MOVE);
				setState(5795);
				match(TO);
				setState(5798);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5796);
					id_();
					}
					break;
				case DEFAULT:
					{
					setState(5797);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_rebuild_optionsContext extends ParserRuleContext {
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_rebuild_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_rebuild_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_rebuild_options(this);
		}
	}

	public final Queue_rebuild_optionsContext queue_rebuild_options() throws RecognitionException {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_queue_rebuild_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5802);
			match(MAXDOP);
			setState(5803);
			match(EQUAL);
			setState(5804);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_contractContext extends ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context message_type_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public List<TerminalNode> SENT() { return getTokens(TSqlParser.SENT); }
		public TerminalNode SENT(int i) {
			return getToken(TSqlParser.SENT, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> INITIATOR() { return getTokens(TSqlParser.INITIATOR); }
		public TerminalNode INITIATOR(int i) {
			return getToken(TSqlParser.INITIATOR, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(TSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(TSqlParser.TARGET, i);
		}
		public List<TerminalNode> ANY() { return getTokens(TSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSqlParser.ANY, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_contract(this);
		}
	}

	public final Create_contractContext create_contract() throws RecognitionException {
		Create_contractContext _localctx = new Create_contractContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_create_contract);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5806);
			match(CREATE);
			setState(5807);
			match(CONTRACT);
			setState(5808);
			contract_name();
			setState(5811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5809);
				match(AUTHORIZATION);
				setState(5810);
				((Create_contractContext)_localctx).owner_name = id_();
				}
			}

			setState(5813);
			match(LR_BRACKET);
			setState(5824); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5816);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5814);
					((Create_contractContext)_localctx).message_type_name = id_();
					}
					break;
				case DEFAULT:
					{
					setState(5815);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5818);
				match(SENT);
				setState(5819);
				match(BY);
				setState(5820);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==INITIATOR || _la==TARGET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5821);
					match(COMMA);
					}
				}

				}
				}
				setState(5826); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DEFAULT || _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) );
			setState(5828);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversation_statementContext extends ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return getRuleContext(Begin_conversation_timerContext.class,0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return getRuleContext(Begin_conversation_dialogContext.class,0);
		}
		public End_conversationContext end_conversation() {
			return getRuleContext(End_conversationContext.class,0);
		}
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public Send_conversationContext send_conversation() {
			return getRuleContext(Send_conversationContext.class,0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return getRuleContext(Waitfor_conversationContext.class,0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConversation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConversation_statement(this);
		}
	}

	public final Conversation_statementContext conversation_statement() throws RecognitionException {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_conversation_statement);
		try {
			setState(5836);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5830);
				begin_conversation_timer();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5831);
				begin_conversation_dialog();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5832);
				end_conversation();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5833);
				get_conversation();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5834);
				send_conversation();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5835);
				waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_statementContext extends ParserRuleContext {
		public Id_Context message_type_name;
		public Id_Context owner_name;
		public Id_Context schema_collection_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMessage_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMessage_statement(this);
		}
	}

	public final Message_statementContext message_statement() throws RecognitionException {
		Message_statementContext _localctx = new Message_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_message_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5838);
			match(CREATE);
			setState(5839);
			match(MESSAGE);
			setState(5840);
			match(TYPE);
			setState(5841);
			((Message_statementContext)_localctx).message_type_name = id_();
			setState(5844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5842);
				match(AUTHORIZATION);
				setState(5843);
				((Message_statementContext)_localctx).owner_name = id_();
				}
			}

			{
			setState(5846);
			match(VALIDATION);
			setState(5847);
			match(EQUAL);
			setState(5856);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(5848);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(5849);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(5850);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(5851);
				match(VALID_XML);
				setState(5852);
				match(WITH);
				setState(5853);
				match(SCHEMA);
				setState(5854);
				match(COLLECTION);
				setState(5855);
				((Message_statementContext)_localctx).schema_collection_name = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public List<When_matchesContext> when_matches() {
			return getRuleContexts(When_matchesContext.class);
		}
		public When_matchesContext when_matches(int i) {
			return getRuleContext(When_matchesContext.class,i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMerge_statement(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5858);
				with_expression();
				}
			}

			setState(5861);
			match(MERGE);
			setState(5869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5862);
				match(TOP);
				setState(5863);
				match(LR_BRACKET);
				setState(5864);
				expression(0);
				setState(5865);
				match(RR_BRACKET);
				setState(5867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5866);
					match(PERCENT);
					}
				}

				}
			}

			setState(5872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5871);
				match(INTO);
				}
			}

			setState(5874);
			ddl_object();
			setState(5876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5875);
				insert_with_table_hints();
				}
			}

			setState(5879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(5878);
				as_table_alias();
				}
				break;
			}
			setState(5881);
			match(USING);
			setState(5882);
			table_sources();
			setState(5883);
			match(ON);
			setState(5884);
			search_condition(0);
			setState(5886); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5885);
				when_matches();
				}
				}
				setState(5888); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(5891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5890);
				output_clause();
				}
			}

			setState(5894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5893);
				option_clause();
				}
			}

			setState(5896);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_matchesContext extends ParserRuleContext {
		public List<TerminalNode> WHEN() { return getTokens(TSqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(TSqlParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(TSqlParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(TSqlParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(TSqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(TSqlParser.THEN, i);
		}
		public List<Merge_matchedContext> merge_matched() {
			return getRuleContexts(Merge_matchedContext.class);
		}
		public Merge_matchedContext merge_matched(int i) {
			return getRuleContext(Merge_matchedContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return getRuleContext(Merge_not_matchedContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public TerminalNode TARGET() { return getToken(TSqlParser.TARGET, 0); }
		public List<TerminalNode> SOURCE() { return getTokens(TSqlParser.SOURCE); }
		public TerminalNode SOURCE(int i) {
			return getToken(TSqlParser.SOURCE, i);
		}
		public When_matchesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_matches; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWhen_matches(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWhen_matches(this);
		}
	}

	public final When_matchesContext when_matches() throws RecognitionException {
		When_matchesContext _localctx = new When_matchesContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_when_matches);
		int _la;
		try {
			int _alt;
			setState(5938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5906); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5898);
						match(WHEN);
						setState(5899);
						match(MATCHED);
						setState(5902);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(5900);
							match(AND);
							setState(5901);
							search_condition(0);
							}
						}

						setState(5904);
						match(THEN);
						setState(5905);
						merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5908); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,718,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5910);
				match(WHEN);
				setState(5911);
				match(NOT);
				setState(5912);
				match(MATCHED);
				setState(5915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(5913);
					match(BY);
					setState(5914);
					match(TARGET);
					}
				}

				setState(5919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(5917);
					match(AND);
					setState(5918);
					search_condition(0);
					}
				}

				setState(5921);
				match(THEN);
				setState(5922);
				merge_not_matched();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5934); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5923);
						match(WHEN);
						setState(5924);
						match(NOT);
						setState(5925);
						match(MATCHED);
						setState(5926);
						match(BY);
						setState(5927);
						match(SOURCE);
						setState(5930);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(5928);
							match(AND);
							setState(5929);
							search_condition(0);
							}
						}

						setState(5932);
						match(THEN);
						setState(5933);
						merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5936); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,722,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_matchedContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Update_elem_mergeContext> update_elem_merge() {
			return getRuleContexts(Update_elem_mergeContext.class);
		}
		public Update_elem_mergeContext update_elem_merge(int i) {
			return getRuleContext(Update_elem_mergeContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMerge_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMerge_matched(this);
		}
	}

	public final Merge_matchedContext merge_matched() throws RecognitionException {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_merge_matched);
		int _la;
		try {
			setState(5951);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5940);
				match(UPDATE);
				setState(5941);
				match(SET);
				setState(5942);
				update_elem_merge();
				setState(5947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5943);
					match(COMMA);
					setState(5944);
					update_elem_merge();
					}
					}
					setState(5949);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5950);
				match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_not_matchedContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_not_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMerge_not_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMerge_not_matched(this);
		}
	}

	public final Merge_not_matchedContext merge_not_matched() throws RecognitionException {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_merge_not_matched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5953);
			match(INSERT);
			setState(5958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5954);
				match(LR_BRACKET);
				setState(5955);
				column_name_list();
				setState(5956);
				match(RR_BRACKET);
				}
			}

			setState(5963);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(5960);
				table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				setState(5961);
				match(DEFAULT);
				setState(5962);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return getRuleContext(Delete_statement_fromContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<TerminalNode> FROM() { return getTokens(TSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDelete_statement(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5965);
				with_expression();
				}
			}

			setState(5968);
			match(DELETE);
			setState(5978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
			case 1:
				{
				setState(5969);
				match(TOP);
				setState(5970);
				match(LR_BRACKET);
				setState(5971);
				expression(0);
				setState(5972);
				match(RR_BRACKET);
				setState(5974);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5973);
					match(PERCENT);
					}
				}

				}
				break;
			case 2:
				{
				setState(5976);
				match(TOP);
				setState(5977);
				match(DECIMAL);
				}
				break;
			}
			setState(5981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5980);
				match(FROM);
				}
			}

			setState(5983);
			delete_statement_from();
			setState(5985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5984);
				insert_with_table_hints();
				}
				break;
			}
			setState(5988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				{
				setState(5987);
				output_clause();
				}
				break;
			}
			setState(5992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5990);
				match(FROM);
				setState(5991);
				table_sources();
				}
			}

			setState(6007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5994);
				match(WHERE);
				setState(6005);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CASE:
				case COALESCE:
				case CONTAINS:
				case CONTAINSTABLE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FREETEXT:
				case FREETEXTTABLE:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL_:
				case NULLIF:
				case OPENJSON:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SEMANTICKEYPHRASETABLE:
				case SEMANTICSIMILARITYDETAILSTABLE:
				case SEMANTICSIMILARITYTABLE:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case DOLLAR_PARTITION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case DOLLAR_ACTION:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(5995);
					search_condition(0);
					}
					break;
				case CURRENT:
					{
					setState(5996);
					match(CURRENT);
					setState(5997);
					match(OF);
					setState(6003);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
					case 1:
						{
						setState(5999);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
						case 1:
							{
							setState(5998);
							match(GLOBAL);
							}
							break;
						}
						setState(6001);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(6002);
						((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6009);
				for_clause();
				}
			}

			setState(6013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(6012);
				option_clause();
				}
			}

			setState(6016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				setState(6015);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_fromContext extends ParserRuleContext {
		public Token table_var;
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDelete_statement_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDelete_statement_from(this);
		}
	}

	public final Delete_statement_fromContext delete_statement_from() throws RecognitionException {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_delete_statement_from);
		try {
			setState(6022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6018);
				ddl_object();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6019);
				table_alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6020);
				rowset_function_limited();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6021);
				((Delete_statement_fromContext)_localctx).table_var = match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Insert_column_name_listContext insert_column_name_list() {
			return getRuleContext(Insert_column_name_listContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6024);
				with_expression();
				}
			}

			setState(6027);
			match(INSERT);
			setState(6035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(6028);
				match(TOP);
				setState(6029);
				match(LR_BRACKET);
				setState(6030);
				expression(0);
				setState(6031);
				match(RR_BRACKET);
				setState(6033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(6032);
					match(PERCENT);
					}
				}

				}
			}

			setState(6038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(6037);
				match(INTO);
				}
			}

			setState(6042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(6040);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(6041);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6044);
				insert_with_table_hints();
				}
			}

			setState(6051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
			case 1:
				{
				setState(6047);
				match(LR_BRACKET);
				setState(6048);
				insert_column_name_list();
				setState(6049);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(6053);
				output_clause();
				}
			}

			setState(6056);
			insert_statement_value();
			setState(6058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6057);
				for_clause();
				}
			}

			setState(6061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(6060);
				option_clause();
				}
			}

			setState(6064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
			case 1:
				{
				setState(6063);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statement_valueContext extends ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_statement_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_statement_value(this);
		}
	}

	public final Insert_statement_valueContext insert_statement_value() throws RecognitionException {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_insert_statement_value);
		try {
			setState(6071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6066);
				table_value_constructor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6067);
				derived_table();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6068);
				execute_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6069);
				match(DEFAULT);
				setState(6070);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Receive_statementContext extends ParserRuleContext {
		public Id_Context table_variable;
		public Search_conditionContext where;
		public TerminalNode RECEIVE() { return getToken(TSqlParser.RECEIVE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_receive_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterReceive_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitReceive_statement(this);
		}
	}

	public final Receive_statementContext receive_statement() throws RecognitionException {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_receive_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(6073);
				match(LR_BRACKET);
				}
			}

			setState(6076);
			match(RECEIVE);
			setState(6081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(6077);
				match(ALL);
				}
				break;
			case DISTINCT:
				{
				setState(6078);
				match(DISTINCT);
				}
				break;
			case TOP:
				{
				setState(6079);
				top_clause();
				}
				break;
			case STAR:
				{
				setState(6080);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOCAL_ID) {
				{
				{
				setState(6083);
				match(LOCAL_ID);
				setState(6084);
				match(EQUAL);
				setState(6085);
				expression(0);
				setState(6087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6086);
					match(COMMA);
					}
				}

				}
				}
				setState(6093);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6094);
			match(FROM);
			setState(6095);
			full_table_name();
			setState(6101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(6096);
				match(INTO);
				setState(6097);
				((Receive_statementContext)_localctx).table_variable = id_();
				{
				setState(6098);
				match(WHERE);
				setState(6099);
				((Receive_statementContext)_localctx).where = search_condition(0);
				}
				}
			}

			setState(6104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RR_BRACKET) {
				{
				setState(6103);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statement_standaloneContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public Select_statement_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement_standalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_statement_standalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_statement_standalone(this);
		}
	}

	public final Select_statement_standaloneContext select_statement_standalone() throws RecognitionException {
		Select_statement_standaloneContext _localctx = new Select_statement_standaloneContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_select_statement_standalone);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6106);
				with_expression();
				}
			}

			setState(6109);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_statement(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6111);
			query_expression();
			setState(6113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6112);
				order_by_clause();
				}
			}

			setState(6116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
			case 1:
				{
				setState(6115);
				for_clause();
				}
				break;
			}
			setState(6119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
			case 1:
				{
				setState(6118);
				option_clause();
				}
				break;
			}
			setState(6122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
			case 1:
				{
				setState(6121);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTime(this);
		}
	}

	public final TimeContext time() throws RecognitionException {
		TimeContext _localctx = new TimeContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(6124);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(6125);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUpdate_statement(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6128);
				with_expression();
				}
			}

			setState(6131);
			match(UPDATE);
			setState(6139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(6132);
				match(TOP);
				setState(6133);
				match(LR_BRACKET);
				setState(6134);
				expression(0);
				setState(6135);
				match(RR_BRACKET);
				setState(6137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(6136);
					match(PERCENT);
					}
				}

				}
			}

			setState(6143);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(6141);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(6142);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				setState(6145);
				with_table_hints();
				}
			}

			setState(6148);
			match(SET);
			setState(6149);
			update_elem();
			setState(6154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6150);
				match(COMMA);
				setState(6151);
				update_elem();
				}
				}
				setState(6156);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
			case 1:
				{
				setState(6157);
				output_clause();
				}
				break;
			}
			setState(6162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(6160);
				match(FROM);
				setState(6161);
				table_sources();
				}
			}

			setState(6177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6164);
				match(WHERE);
				setState(6175);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CASE:
				case COALESCE:
				case CONTAINS:
				case CONTAINSTABLE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FREETEXT:
				case FREETEXTTABLE:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL_:
				case NULLIF:
				case OPENJSON:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SEMANTICKEYPHRASETABLE:
				case SEMANTICSIMILARITYDETAILSTABLE:
				case SEMANTICSIMILARITYTABLE:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case DOLLAR_PARTITION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case DOLLAR_ACTION:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(6165);
					search_condition(0);
					}
					break;
				case CURRENT:
					{
					setState(6166);
					match(CURRENT);
					setState(6167);
					match(OF);
					setState(6173);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
					case 1:
						{
						setState(6169);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
						case 1:
							{
							setState(6168);
							match(GLOBAL);
							}
							break;
						}
						setState(6171);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(6172);
						((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6179);
				for_clause();
				}
			}

			setState(6183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(6182);
				option_clause();
				}
			}

			setState(6186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				setState(6185);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_clauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public List<Output_dml_list_elemContext> output_dml_list_elem() {
			return getRuleContexts(Output_dml_list_elemContext.class);
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return getRuleContext(Output_dml_list_elemContext.class,i);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOutput_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOutput_clause(this);
		}
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6188);
			match(OUTPUT);
			setState(6189);
			output_dml_list_elem();
			setState(6194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6190);
				match(COMMA);
				setState(6191);
				output_dml_list_elem();
				}
				}
				setState(6196);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(6197);
				match(INTO);
				setState(6200);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(6198);
					match(LOCAL_ID);
					}
					break;
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6199);
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6206);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
				case 1:
					{
					setState(6202);
					match(LR_BRACKET);
					setState(6203);
					column_name_list();
					setState(6204);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_dml_list_elemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_dml_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOutput_dml_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOutput_dml_list_elem(this);
		}
	}

	public final Output_dml_list_elemContext output_dml_list_elem() throws RecognitionException {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_output_dml_list_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
			case 1:
				{
				setState(6210);
				expression(0);
				}
				break;
			case 2:
				{
				setState(6211);
				asterisk();
				}
				break;
			}
			setState(6215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				setState(6214);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_databaseContext extends ParserRuleContext {
		public Id_Context database;
		public Id_Context collation_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<Database_file_specContext> database_file_spec() {
			return getRuleContexts(Database_file_specContext.class);
		}
		public Database_file_specContext database_file_spec(int i) {
			return getRuleContext(Database_file_specContext.class,i);
		}
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Create_database_optionContext> create_database_option() {
			return getRuleContexts(Create_database_optionContext.class);
		}
		public Create_database_optionContext create_database_option(int i) {
			return getRuleContext(Create_database_optionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_database(this);
		}
	}

	public final Create_databaseContext create_database() throws RecognitionException {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_create_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6217);
			match(CREATE);
			setState(6218);
			match(DATABASE);
			{
			setState(6219);
			((Create_databaseContext)_localctx).database = id_();
			}
			setState(6223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				setState(6220);
				match(CONTAINMENT);
				setState(6221);
				match(EQUAL);
				setState(6222);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(6237);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6225);
				match(ON);
				setState(6227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(6226);
					match(PRIMARY);
					}
				}

				setState(6229);
				database_file_spec();
				setState(6234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6230);
					match(COMMA);
					setState(6231);
					database_file_spec();
					}
					}
					setState(6236);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				setState(6239);
				match(LOG);
				setState(6240);
				match(ON);
				setState(6241);
				database_file_spec();
				setState(6246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6242);
					match(COMMA);
					setState(6243);
					database_file_spec();
					}
					}
					setState(6248);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(6253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(6251);
				match(COLLATE);
				setState(6252);
				((Create_databaseContext)_localctx).collation_name = id_();
				}
			}

			setState(6264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
			case 1:
				{
				setState(6255);
				match(WITH);
				setState(6256);
				create_database_option();
				setState(6261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6257);
					match(COMMA);
					setState(6258);
					create_database_option();
					}
					}
					setState(6263);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public Search_conditionContext where;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_index(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6266);
			match(CREATE);
			setState(6268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(6267);
				match(UNIQUE);
				}
			}

			setState(6271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(6270);
				clustered();
				}
			}

			setState(6273);
			match(INDEX);
			setState(6274);
			id_();
			setState(6275);
			match(ON);
			setState(6276);
			table_name();
			setState(6277);
			match(LR_BRACKET);
			setState(6278);
			column_name_list_with_order();
			setState(6279);
			match(RR_BRACKET);
			setState(6285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				{
				setState(6280);
				match(INCLUDE);
				setState(6281);
				match(LR_BRACKET);
				setState(6282);
				column_name_list();
				setState(6283);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6287);
				match(WHERE);
				setState(6288);
				((Create_indexContext)_localctx).where = search_condition(0);
				}
			}

			setState(6292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(6291);
				index_options();
				}
				break;
			}
			setState(6296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6294);
				match(ON);
				setState(6295);
				id_();
				}
			}

			setState(6299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				setState(6298);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_xml_indexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> XML() { return getTokens(TSqlParser.XML); }
		public TerminalNode XML(int i) {
			return getToken(TSqlParser.XML, i);
		}
		public List<TerminalNode> INDEX() { return getTokens(TSqlParser.INDEX); }
		public TerminalNode INDEX(int i) {
			return getToken(TSqlParser.INDEX, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public Create_xml_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_xml_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_xml_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_xml_index(this);
		}
	}

	public final Create_xml_indexContext create_xml_index() throws RecognitionException {
		Create_xml_indexContext _localctx = new Create_xml_indexContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_create_xml_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6301);
			match(CREATE);
			setState(6303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(6302);
				match(PRIMARY);
				}
			}

			setState(6305);
			match(XML);
			setState(6306);
			match(INDEX);
			setState(6307);
			id_();
			setState(6308);
			match(ON);
			setState(6309);
			table_name();
			setState(6310);
			match(LR_BRACKET);
			setState(6311);
			id_();
			setState(6312);
			match(RR_BRACKET);
			setState(6323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
			case 1:
				{
				setState(6313);
				match(USING);
				setState(6314);
				match(XML);
				setState(6315);
				match(INDEX);
				setState(6316);
				id_();
				setState(6321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6317);
					match(FOR);
					setState(6319);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
					case 1:
						{
						setState(6318);
						_la = _input.LA(1);
						if ( !(_la==PATH || _la==PROPERTY || _la==VALUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			}
			setState(6326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				{
				setState(6325);
				index_options();
				}
				break;
			}
			setState(6329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
			case 1:
				{
				setState(6328);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_procedureContext extends ParserRuleContext {
		public Token proc;
		public Func_proc_name_schemaContext procName;
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PROC() { return getToken(TSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSqlParser.PROCEDURE, 0); }
		public As_external_nameContext as_external_name() {
			return getRuleContext(As_external_nameContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Procedure_optionContext> procedure_option() {
			return getRuleContexts(Procedure_optionContext.class);
		}
		public Procedure_optionContext procedure_option(int i) {
			return getRuleContext(Procedure_optionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_procedure(this);
		}
	}

	public final Create_or_alter_procedureContext create_or_alter_procedure() throws RecognitionException {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_create_or_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6337);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6331);
				match(CREATE);
				setState(6334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6332);
					match(OR);
					setState(6333);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6336);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6339);
			((Create_or_alter_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Create_or_alter_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6340);
			((Create_or_alter_procedureContext)_localctx).procName = func_proc_name_schema();
			setState(6343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6341);
				match(SEMI);
				setState(6342);
				match(DECIMAL);
				}
			}

			setState(6359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				setState(6346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6345);
					match(LR_BRACKET);
					}
				}

				setState(6348);
				procedure_param();
				setState(6353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6349);
					match(COMMA);
					setState(6350);
					procedure_param();
					}
					}
					setState(6355);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(6356);
					match(RR_BRACKET);
					}
				}

				}
			}

			setState(6370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6361);
				match(WITH);
				setState(6362);
				procedure_option();
				setState(6367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6363);
					match(COMMA);
					setState(6364);
					procedure_option();
					}
					}
					setState(6369);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6372);
				match(FOR);
				setState(6373);
				match(REPLICATION);
				}
			}

			setState(6376);
			match(AS);
			setState(6384);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXTERNAL:
				{
				setState(6377);
				as_external_name();
				}
				break;
			case EOF:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case END:
			case EXECUTE:
			case FETCH:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case KILL:
			case MERGE:
			case OPEN:
			case OPENJSON:
			case PRECISION:
			case PRINT:
			case RAISERROR:
			case RECONFIGURE:
			case RETURN:
			case REVERT:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case SHUTDOWN:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOT:
			case LR_BRACKET:
			case SEMI:
				{
				setState(6381);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,820,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6378);
						sql_clauses();
						}
						} 
					}
					setState(6383);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,820,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_external_nameContext extends ParserRuleContext {
		public Id_Context assembly_name;
		public Id_Context class_name;
		public Id_Context method_name;
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public As_external_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_external_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAs_external_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAs_external_name(this);
		}
	}

	public final As_external_nameContext as_external_name() throws RecognitionException {
		As_external_nameContext _localctx = new As_external_nameContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_as_external_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6386);
			match(EXTERNAL);
			setState(6387);
			match(NAME);
			setState(6388);
			((As_external_nameContext)_localctx).assembly_name = id_();
			setState(6389);
			match(DOT);
			setState(6390);
			((As_external_nameContext)_localctx).class_name = id_();
			setState(6391);
			match(DOT);
			setState(6392);
			((As_external_nameContext)_localctx).method_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_triggerContext extends ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return getRuleContext(Create_or_alter_dml_triggerContext.class,0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return getRuleContext(Create_or_alter_ddl_triggerContext.class,0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_trigger(this);
		}
	}

	public final Create_or_alter_triggerContext create_or_alter_trigger() throws RecognitionException {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_create_or_alter_trigger);
		try {
			setState(6396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6394);
				create_or_alter_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6395);
				create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_dml_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> FOR() { return getTokens(TSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(TSqlParser.FOR, i);
		}
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(TSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public TerminalNode APPEND() { return getToken(TSqlParser.APPEND, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_dml_trigger(this);
		}
	}

	public final Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() throws RecognitionException {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6404);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6398);
				match(CREATE);
				setState(6401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6399);
					match(OR);
					setState(6400);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6403);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6406);
			match(TRIGGER);
			setState(6407);
			simple_name();
			setState(6408);
			match(ON);
			setState(6409);
			table_name();
			setState(6419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6410);
				match(WITH);
				setState(6411);
				dml_trigger_option();
				setState(6416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6412);
					match(COMMA);
					setState(6413);
					dml_trigger_option();
					}
					}
					setState(6418);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6425);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(6421);
				match(FOR);
				}
				break;
			case AFTER:
				{
				setState(6422);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(6423);
				match(INSTEAD);
				setState(6424);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6427);
			dml_trigger_operation();
			setState(6432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6428);
				match(COMMA);
				setState(6429);
				dml_trigger_operation();
				}
				}
				setState(6434);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6435);
				match(WITH);
				setState(6436);
				match(APPEND);
				}
			}

			setState(6442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6439);
				match(NOT);
				setState(6440);
				match(FOR);
				setState(6441);
				match(REPLICATION);
				}
			}

			setState(6444);
			match(AS);
			setState(6446); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6445);
					sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6448); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,831,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDml_trigger_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDml_trigger_option(this);
		}
	}

	public final Dml_trigger_optionContext dml_trigger_option() throws RecognitionException {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_dml_trigger_option);
		try {
			setState(6452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6450);
				match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6451);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_operationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDml_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDml_trigger_operation(this);
		}
	}

	public final Dml_trigger_operationContext dml_trigger_operation() throws RecognitionException {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_dml_trigger_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6454);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext ddl_trigger_operation() {
			return getRuleContext(Ddl_trigger_operationContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_ddl_trigger(this);
		}
	}

	public final Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() throws RecognitionException {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6462);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6456);
				match(CREATE);
				setState(6459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6457);
					match(OR);
					setState(6458);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6461);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6464);
			match(TRIGGER);
			setState(6465);
			simple_name();
			setState(6466);
			match(ON);
			setState(6470);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(6467);
				match(ALL);
				setState(6468);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(6469);
				match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6472);
				match(WITH);
				setState(6473);
				dml_trigger_option();
				setState(6478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6474);
					match(COMMA);
					setState(6475);
					dml_trigger_option();
					}
					}
					setState(6480);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6483);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6484);
			ddl_trigger_operation();
			setState(6489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6485);
				match(COMMA);
				setState(6486);
				dml_trigger_operation();
				}
				}
				setState(6491);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6492);
			match(AS);
			setState(6494); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6493);
					sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6496); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_trigger_operationContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDdl_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDdl_trigger_operation(this);
		}
	}

	public final Ddl_trigger_operationContext ddl_trigger_operation() throws RecognitionException {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_ddl_trigger_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6498);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_functionContext extends ParserRuleContext {
		public Func_proc_name_schemaContext funcName;
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return getRuleContext(Func_body_returns_selectContext.class,0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return getRuleContext(Func_body_returns_tableContext.class,0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return getRuleContext(Func_body_returns_scalarContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_function(this);
		}
	}

	public final Create_or_alter_functionContext create_or_alter_function() throws RecognitionException {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_create_or_alter_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6506);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6500);
				match(CREATE);
				setState(6503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6501);
					match(OR);
					setState(6502);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6505);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6508);
			match(FUNCTION);
			setState(6509);
			((Create_or_alter_functionContext)_localctx).funcName = func_proc_name_schema();
			setState(6523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
			case 1:
				{
				{
				setState(6510);
				match(LR_BRACKET);
				setState(6511);
				procedure_param();
				setState(6516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6512);
					match(COMMA);
					setState(6513);
					procedure_param();
					}
					}
					setState(6518);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6519);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				{
				setState(6521);
				match(LR_BRACKET);
				setState(6522);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				setState(6525);
				func_body_returns_select();
				}
				break;
			case 2:
				{
				setState(6526);
				func_body_returns_table();
				}
				break;
			case 3:
				{
				setState(6527);
				func_body_returns_scalar();
				}
				break;
			}
			setState(6531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				setState(6530);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_selectContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_body_returns_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_body_returns_select(this);
		}
	}

	public final Func_body_returns_selectContext func_body_returns_select() throws RecognitionException {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_func_body_returns_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6533);
			match(RETURNS);
			setState(6534);
			match(TABLE);
			setState(6544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6535);
				match(WITH);
				setState(6536);
				function_option();
				setState(6541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6537);
					match(COMMA);
					setState(6538);
					function_option();
					}
					}
					setState(6543);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6546);
				match(AS);
				}
			}

			setState(6549);
			match(RETURN);
			setState(6555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				setState(6550);
				match(LR_BRACKET);
				setState(6551);
				select_statement_standalone();
				setState(6552);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6554);
				select_statement_standalone();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_tableContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_body_returns_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_body_returns_table(this);
		}
	}

	public final Func_body_returns_tableContext func_body_returns_table() throws RecognitionException {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6557);
			match(RETURNS);
			setState(6558);
			match(LOCAL_ID);
			setState(6559);
			table_type_definition();
			setState(6569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6560);
				match(WITH);
				setState(6561);
				function_option();
				setState(6566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6562);
					match(COMMA);
					setState(6563);
					function_option();
					}
					}
					setState(6568);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6571);
				match(AS);
				}
			}

			setState(6574);
			match(BEGIN);
			setState(6578);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6575);
					sql_clauses();
					}
					} 
				}
				setState(6580);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			}
			setState(6581);
			match(RETURN);
			setState(6583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6582);
				match(SEMI);
				}
			}

			setState(6585);
			match(END);
			setState(6587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
			case 1:
				{
				setState(6586);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_scalarContext extends ParserRuleContext {
		public ExpressionContext ret;
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_scalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_body_returns_scalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_body_returns_scalar(this);
		}
	}

	public final Func_body_returns_scalarContext func_body_returns_scalar() throws RecognitionException {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6589);
			match(RETURNS);
			setState(6590);
			data_type();
			setState(6600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6591);
				match(WITH);
				setState(6592);
				function_option();
				setState(6597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6593);
					match(COMMA);
					setState(6594);
					function_option();
					}
					}
					setState(6599);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6602);
				match(AS);
				}
			}

			setState(6605);
			match(BEGIN);
			setState(6609);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,859,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6606);
					sql_clauses();
					}
					} 
				}
				setState(6611);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,859,_ctx);
			}
			setState(6612);
			match(RETURN);
			setState(6613);
			((Func_body_returns_scalarContext)_localctx).ret = expression(0);
			setState(6615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6614);
				match(SEMI);
				}
			}

			setState(6617);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_paramContext extends ParserRuleContext {
		public Id_Context type_schema;
		public Default_valueContext default_val;
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode VARYING() { return getToken(TSqlParser.VARYING, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode READONLY() { return getToken(TSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterProcedure_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitProcedure_param(this);
		}
	}

	public final Procedure_paramContext procedure_param() throws RecognitionException {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_procedure_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6619);
			match(LOCAL_ID);
			setState(6621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6620);
				match(AS);
				}
			}

			setState(6626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
			case 1:
				{
				setState(6623);
				((Procedure_paramContext)_localctx).type_schema = id_();
				setState(6624);
				match(DOT);
				}
				break;
			}
			setState(6628);
			data_type();
			setState(6630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(6629);
				match(VARYING);
				}
			}

			setState(6634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(6632);
				match(EQUAL);
				setState(6633);
				((Procedure_paramContext)_localctx).default_val = default_value();
				}
			}

			setState(6637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (OUT - 452)) | (1L << (OUTPUT - 452)) | (1L << (READONLY - 452)))) != 0)) {
				{
				setState(6636);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (OUT - 452)) | (1L << (OUTPUT - 452)) | (1L << (READONLY - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterProcedure_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitProcedure_option(this);
		}
	}

	public final Procedure_optionContext procedure_option() throws RecognitionException {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_procedure_option);
		try {
			setState(6642);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6639);
				match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6640);
				match(RECOMPILE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6641);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public List<TerminalNode> NULL_() { return getTokens(TSqlParser.NULL_); }
		public TerminalNode NULL_(int i) {
			return getToken(TSqlParser.NULL_, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(TSqlParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunction_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunction_option(this);
		}
	}

	public final Function_optionContext function_option() throws RecognitionException {
		Function_optionContext _localctx = new Function_optionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_function_option);
		try {
			setState(6656);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6644);
				match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6645);
				match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6646);
				match(RETURNS);
				setState(6647);
				match(NULL_);
				setState(6648);
				match(ON);
				setState(6649);
				match(NULL_);
				setState(6650);
				match(INPUT);
				}
				break;
			case CALLED:
				enterOuterAlt(_localctx, 4);
				{
				setState(6651);
				match(CALLED);
				setState(6652);
				match(ON);
				setState(6653);
				match(NULL_);
				setState(6654);
				match(INPUT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6655);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FULLSCAN() { return getToken(TSqlParser.FULLSCAN, 0); }
		public TerminalNode SAMPLE() { return getToken(TSqlParser.SAMPLE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STATS_STREAM() { return getToken(TSqlParser.STATS_STREAM, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(TSqlParser.NORECOMPUTE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_statistics(this);
		}
	}

	public final Create_statisticsContext create_statistics() throws RecognitionException {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_create_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6658);
			match(CREATE);
			setState(6659);
			match(STATISTICS);
			setState(6660);
			id_();
			setState(6661);
			match(ON);
			setState(6662);
			table_name();
			setState(6663);
			match(LR_BRACKET);
			setState(6664);
			column_name_list();
			setState(6665);
			match(RR_BRACKET);
			setState(6684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
			case 1:
				{
				setState(6666);
				match(WITH);
				setState(6672);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FULLSCAN:
					{
					setState(6667);
					match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					setState(6668);
					match(SAMPLE);
					setState(6669);
					match(DECIMAL);
					setState(6670);
					_la = _input.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					setState(6671);
					match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6676);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					setState(6674);
					match(COMMA);
					setState(6675);
					match(NORECOMPUTE);
					}
					break;
				}
				setState(6682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6678);
					match(COMMA);
					setState(6679);
					match(INCREMENTAL);
					setState(6680);
					match(EQUAL);
					setState(6681);
					on_off();
					}
				}

				}
				break;
			}
			setState(6687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
			case 1:
				{
				setState(6686);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statisticsContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUpdate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUpdate_statistics(this);
		}
	}

	public final Update_statisticsContext update_statistics() throws RecognitionException {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_update_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6689);
			match(UPDATE);
			setState(6691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==INDEX) {
				{
				setState(6690);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6693);
			match(STATISTICS);
			setState(6694);
			full_table_name();
			setState(6696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
			case 1:
				{
				setState(6695);
				id_();
				}
				break;
			}
			setState(6701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
			case 1:
				{
				setState(6698);
				match(USING);
				setState(6699);
				match(DECIMAL);
				setState(6700);
				match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public List<Table_indicesContext> table_indices() {
			return getRuleContexts(Table_indicesContext.class);
		}
		public Table_indicesContext table_indices(int i) {
			return getRuleContext(Table_indicesContext.class,i);
		}
		public TerminalNode LOCK() { return getToken(TSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public List<Table_optionsContext> table_options() {
			return getRuleContexts(Table_optionsContext.class);
		}
		public Table_optionsContext table_options(int i) {
			return getRuleContext(Table_optionsContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_table(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6703);
			match(CREATE);
			setState(6704);
			match(TABLE);
			setState(6705);
			table_name();
			setState(6706);
			match(LR_BRACKET);
			setState(6707);
			column_def_table_constraints();
			setState(6714);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,877,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6709);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6708);
						match(COMMA);
						}
					}

					setState(6711);
					table_indices();
					}
					} 
				}
				setState(6716);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,877,_ctx);
			}
			setState(6718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6717);
				match(COMMA);
				}
			}

			setState(6720);
			match(RR_BRACKET);
			setState(6723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
			case 1:
				{
				setState(6721);
				match(LOCK);
				setState(6722);
				simple_id();
				}
				break;
			}
			setState(6728);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,880,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6725);
					table_options();
					}
					} 
				}
				setState(6730);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,880,_ctx);
			}
			setState(6734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				setState(6731);
				match(ON);
				setState(6732);
				id_();
				}
				break;
			case 2:
				{
				setState(6733);
				match(DEFAULT);
				}
				break;
			}
			setState(6739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
			case 1:
				{
				setState(6736);
				match(TEXTIMAGE_ON);
				setState(6737);
				id_();
				}
				break;
			case 2:
				{
				setState(6738);
				match(DEFAULT);
				}
				break;
			}
			setState(6742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,883,_ctx) ) {
			case 1:
				{
				setState(6741);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indicesContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public TerminalNode CLUSTERED() { return getToken(TSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(TSqlParser.NONCLUSTERED, 0); }
		public Table_indicesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indices; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_indices(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_indices(this);
		}
	}

	public final Table_indicesContext table_indices() throws RecognitionException {
		Table_indicesContext _localctx = new Table_indicesContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_table_indices);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6744);
			match(INDEX);
			setState(6745);
			id_();
			setState(6747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED || _la==UNIQUE) {
				{
				setState(6746);
				_la = _input.LA(1);
				if ( !(_la==CLUSTERED || _la==NONCLUSTERED || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6749);
			match(LR_BRACKET);
			setState(6750);
			column_name_list_with_order();
			setState(6751);
			match(RR_BRACKET);
			setState(6753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6752);
				index_options();
				}
			}

			setState(6757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6755);
				match(ON);
				setState(6756);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_options(this);
		}
	}

	public final Table_optionsContext table_options() throws RecognitionException {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6759);
			match(WITH);
			setState(6779);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(6760);
				match(LR_BRACKET);
				setState(6761);
				index_option();
				setState(6766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6762);
					match(COMMA);
					setState(6763);
					index_option();
					}
					}
					setState(6768);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6769);
				match(RR_BRACKET);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case ID:
				{
				setState(6771);
				index_option();
				setState(6776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6772);
					match(COMMA);
					setState(6773);
					index_option();
					}
					}
					setState(6778);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_view(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6781);
			match(CREATE);
			setState(6782);
			match(VIEW);
			setState(6783);
			simple_name();
			setState(6788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(6784);
				match(LR_BRACKET);
				setState(6785);
				column_name_list();
				setState(6786);
				match(RR_BRACKET);
				}
			}

			setState(6799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6790);
				match(WITH);
				setState(6791);
				view_attribute();
				setState(6796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6792);
					match(COMMA);
					setState(6793);
					view_attribute();
					}
					}
					setState(6798);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6801);
			match(AS);
			setState(6802);
			select_statement_standalone();
			setState(6806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
			case 1:
				{
				setState(6803);
				match(WITH);
				setState(6804);
				match(CHECK);
				setState(6805);
				match(OPTION);
				}
				break;
			}
			setState(6809);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
			case 1:
				{
				setState(6808);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterView_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitView_attribute(this);
		}
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6811);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> ALTER() { return getTokens(TSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(TSqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(TSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(TSqlParser.TABLE, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(TSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return getRuleContext(Table_optionsContext.class,0);
		}
		public TerminalNode SWITCH() { return getToken(TSqlParser.SWITCH, 0); }
		public Switch_partitionContext switch_partition() {
			return getRuleContext(Switch_partitionContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_table(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6813);
			match(ALTER);
			setState(6814);
			match(TABLE);
			setState(6815);
			table_name();
			setState(6868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
			case 1:
				{
				setState(6816);
				match(SET);
				setState(6817);
				match(LR_BRACKET);
				setState(6818);
				match(LOCK_ESCALATION);
				setState(6819);
				match(EQUAL);
				setState(6820);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6821);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6822);
				match(ADD);
				setState(6823);
				column_def_table_constraints();
				}
				break;
			case 3:
				{
				setState(6824);
				match(ALTER);
				setState(6825);
				match(COLUMN);
				setState(6826);
				column_definition();
				}
				break;
			case 4:
				{
				setState(6827);
				match(DROP);
				setState(6828);
				match(COLUMN);
				setState(6829);
				id_();
				setState(6834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6830);
					match(COMMA);
					setState(6831);
					id_();
					}
					}
					setState(6836);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				{
				setState(6837);
				match(DROP);
				setState(6838);
				match(CONSTRAINT);
				setState(6839);
				((Alter_tableContext)_localctx).constraint = id_();
				}
				break;
			case 6:
				{
				setState(6840);
				match(WITH);
				setState(6841);
				match(CHECK);
				setState(6842);
				match(ADD);
				setState(6843);
				match(CONSTRAINT);
				setState(6844);
				((Alter_tableContext)_localctx).constraint = id_();
				setState(6845);
				match(FOREIGN);
				setState(6846);
				match(KEY);
				setState(6847);
				match(LR_BRACKET);
				setState(6848);
				((Alter_tableContext)_localctx).fk = column_name_list();
				setState(6849);
				match(RR_BRACKET);
				setState(6850);
				match(REFERENCES);
				setState(6851);
				table_name();
				setState(6852);
				match(LR_BRACKET);
				setState(6853);
				((Alter_tableContext)_localctx).pk = column_name_list();
				setState(6854);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(6856);
				match(CHECK);
				setState(6857);
				match(CONSTRAINT);
				setState(6858);
				((Alter_tableContext)_localctx).constraint = id_();
				}
				break;
			case 8:
				{
				setState(6859);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6860);
				match(TRIGGER);
				setState(6862);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
				case 1:
					{
					setState(6861);
					id_();
					}
					break;
				}
				}
				break;
			case 9:
				{
				setState(6864);
				match(REBUILD);
				setState(6865);
				table_options();
				}
				break;
			case 10:
				{
				setState(6866);
				match(SWITCH);
				setState(6867);
				switch_partition();
				}
				break;
			}
			setState(6871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				{
				setState(6870);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_partitionContext extends ParserRuleContext {
		public ExpressionContext source_partition_number_expression;
		public Table_nameContext target_table;
		public ExpressionContext target_partition_number_expression;
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<TerminalNode> PARTITION() { return getTokens(TSqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(TSqlParser.PARTITION, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Low_priority_lock_waitContext low_priority_lock_wait() {
			return getRuleContext(Low_priority_lock_waitContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Switch_partitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSwitch_partition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSwitch_partition(this);
		}
	}

	public final Switch_partitionContext switch_partition() throws RecognitionException {
		Switch_partitionContext _localctx = new Switch_partitionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_switch_partition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (CASE - 18)) | (1L << (COALESCE - 18)) | (1L << (CONTAINSTABLE - 18)) | (1L << (CONVERT - 18)) | (1L << (CURRENT_TIMESTAMP - 18)) | (1L << (CURRENT_USER - 18)) | (1L << (DEFAULT - 18)) | (1L << (FREETEXTTABLE - 18)) | (1L << (IDENTITY - 18)))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (LEFT - 95)) | (1L << (NULL_ - 95)) | (1L << (NULLIF - 95)) | (1L << (OPENJSON - 95)) | (1L << (OVER - 95)) | (1L << (PRECISION - 95)) | (1L << (RIGHT - 95)) | (1L << (SEMANTICKEYPHRASETABLE - 95)) | (1L << (SEMANTICSIMILARITYDETAILSTABLE - 95)) | (1L << (SEMANTICSIMILARITYTABLE - 95)) | (1L << (SESSION_USER - 95)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (SYSTEM_USER - 161)) | (1L << (USER - 161)) | (1L << (DOLLAR_PARTITION - 161)) | (1L << (ABSOLUTE - 161)) | (1L << (AT_KEYWORD - 161)) | (1L << (ACCENT_SENSITIVITY - 161)) | (1L << (ACTION - 161)) | (1L << (ACTIVATION - 161)) | (1L << (ACTIVE - 161)) | (1L << (ADDRESS - 161)) | (1L << (AES_128 - 161)) | (1L << (AES_192 - 161)) | (1L << (AES_256 - 161)) | (1L << (AFFINITY - 161)) | (1L << (AFTER - 161)) | (1L << (AGGREGATE - 161)) | (1L << (ALGORITHM - 161)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 161)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 161)) | (1L << (ALLOWED - 161)) | (1L << (ANSI_NULL_DEFAULT - 161)) | (1L << (ANSI_NULLS - 161)) | (1L << (ANSI_PADDING - 161)) | (1L << (ANSI_WARNINGS - 161)) | (1L << (APPLICATION_LOG - 161)) | (1L << (APPLY - 161)) | (1L << (ARITHABORT - 161)) | (1L << (ASSEMBLY - 161)) | (1L << (AUDIT - 161)) | (1L << (AUDIT_GUID - 161)) | (1L << (AUTO - 161)) | (1L << (AUTO_CLEANUP - 161)) | (1L << (AUTO_CLOSE - 161)) | (1L << (AUTO_CREATE_STATISTICS - 161)) | (1L << (AUTO_SHRINK - 161)) | (1L << (AUTO_UPDATE_STATISTICS - 161)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 161)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (AVAILABILITY - 227)) | (1L << (AVG - 227)) | (1L << (BACKUP_PRIORITY - 227)) | (1L << (BEGIN_DIALOG - 227)) | (1L << (BIGINT - 227)) | (1L << (BINARY_KEYWORD - 227)) | (1L << (BINARY_BASE64 - 227)) | (1L << (BINARY_CHECKSUM - 227)) | (1L << (BINDING - 227)) | (1L << (BLOB_STORAGE - 227)) | (1L << (BROKER - 227)) | (1L << (BROKER_INSTANCE - 227)) | (1L << (BULK_LOGGED - 227)) | (1L << (CALLER - 227)) | (1L << (CAP_CPU_PERCENT - 227)) | (1L << (CAST - 227)) | (1L << (TRY_CAST - 227)) | (1L << (CATALOG - 227)) | (1L << (CATCH - 227)) | (1L << (CHANGE_RETENTION - 227)) | (1L << (CHANGE_TRACKING - 227)) | (1L << (CHECKSUM - 227)) | (1L << (CHECKSUM_AGG - 227)) | (1L << (CLEANUP - 227)) | (1L << (COLLECTION - 227)) | (1L << (COLUMN_MASTER_KEY - 227)) | (1L << (COMMITTED - 227)) | (1L << (COMPATIBILITY_LEVEL - 227)) | (1L << (CONCAT - 227)) | (1L << (CONCAT_NULL_YIELDS_NULL - 227)) | (1L << (CONTENT - 227)) | (1L << (CONTROL - 227)) | (1L << (COOKIE - 227)) | (1L << (COUNT - 227)) | (1L << (COUNT_BIG - 227)) | (1L << (COUNTER - 227)) | (1L << (CPU - 227)) | (1L << (CREATE_NEW - 227)) | (1L << (CREATION_DISPOSITION - 227)) | (1L << (CREDENTIAL - 227)) | (1L << (CRYPTOGRAPHIC - 227)) | (1L << (CUME_DIST - 227)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 227)) | (1L << (CURSOR_DEFAULT - 227)) | (1L << (DATA - 227)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 227)) | (1L << (DATEADD - 227)) | (1L << (DATEDIFF - 227)) | (1L << (DATENAME - 227)) | (1L << (DATEPART - 227)) | (1L << (DAYS - 227)) | (1L << (DB_CHAINING - 227)) | (1L << (DB_FAILOVER - 227)) | (1L << (DECRYPTION - 227)) | (1L << (DEFAULT_DOUBLE_QUOTE - 227)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 227)) | (1L << (DEFAULT_LANGUAGE - 227)) | (1L << (DELAY - 227)) | (1L << (DELAYED_DURABILITY - 227)) | (1L << (DELETED - 227)) | (1L << (DENSE_RANK - 227)) | (1L << (DEPENDENTS - 227)) | (1L << (DES - 227)) | (1L << (DESCRIPTION - 227)))) != 0) || ((((_la - 291)) & ~0x3f) == 0 && ((1L << (_la - 291)) & ((1L << (DESX - 291)) | (1L << (DHCP - 291)) | (1L << (DIALOG - 291)) | (1L << (DIRECTORY_NAME - 291)) | (1L << (DISABLE - 291)) | (1L << (DISABLE_BROKER - 291)) | (1L << (DISABLED - 291)) | (1L << (DISK_DRIVE - 291)) | (1L << (DOCUMENT - 291)) | (1L << (DYNAMIC - 291)) | (1L << (ELEMENTS - 291)) | (1L << (EMERGENCY - 291)) | (1L << (EMPTY - 291)) | (1L << (ENABLE - 291)) | (1L << (ENABLE_BROKER - 291)) | (1L << (ENCRYPTED_VALUE - 291)) | (1L << (ENCRYPTION - 291)) | (1L << (ENDPOINT_URL - 291)) | (1L << (ERROR_BROKER_CONVERSATIONS - 291)) | (1L << (EXCLUSIVE - 291)) | (1L << (EXECUTABLE - 291)) | (1L << (EXIST - 291)) | (1L << (EXPAND - 291)) | (1L << (EXPIRY_DATE - 291)) | (1L << (EXPLICIT - 291)) | (1L << (FAIL_OPERATION - 291)) | (1L << (FAILOVER_MODE - 291)) | (1L << (FAILURE - 291)) | (1L << (FAILURE_CONDITION_LEVEL - 291)) | (1L << (FAST - 291)) | (1L << (FAST_FORWARD - 291)) | (1L << (FILEGROUP - 291)) | (1L << (FILEGROWTH - 291)) | (1L << (FILENAME - 291)) | (1L << (FILEPATH - 291)) | (1L << (FILESTREAM - 291)) | (1L << (FILTER - 291)) | (1L << (FIRST - 291)) | (1L << (FIRST_VALUE - 291)) | (1L << (FOLLOWING - 291)) | (1L << (FORCE - 291)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 291)) | (1L << (FORCED - 291)) | (1L << (FORMAT - 291)) | (1L << (FORWARD_ONLY - 291)) | (1L << (FULLSCAN - 291)) | (1L << (FULLTEXT - 291)) | (1L << (GB - 291)) | (1L << (GETDATE - 291)) | (1L << (GETUTCDATE - 291)) | (1L << (GLOBAL - 291)) | (1L << (GO_BATCH - 291)) | (1L << (GO - 291)) | (1L << (GROUP_MAX_REQUESTS - 291)) | (1L << (GROUPING - 291)) | (1L << (GROUPING_ID - 291)) | (1L << (HADR - 291)) | (1L << (HASH - 291)) | (1L << (HEALTH_CHECK_TIMEOUT - 291)) | (1L << (HIGH - 291)) | (1L << (HONOR_BROKER_PRIORITY - 291)) | (1L << (HOURS - 291)) | (1L << (IDENTITY_VALUE - 291)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 291)))) != 0) || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & ((1L << (IMMEDIATE - 355)) | (1L << (IMPERSONATE - 355)) | (1L << (IMPORTANCE - 355)) | (1L << (INCLUDE_NULL_VALUES - 355)) | (1L << (INCREMENTAL - 355)) | (1L << (INITIATOR - 355)) | (1L << (INPUT - 355)) | (1L << (INSENSITIVE - 355)) | (1L << (INSERTED - 355)) | (1L << (INT - 355)) | (1L << (IP - 355)) | (1L << (ISOLATION - 355)) | (1L << (JOB - 355)) | (1L << (JSON - 355)) | (1L << (KB - 355)) | (1L << (KEEP - 355)) | (1L << (KEEPFIXED - 355)) | (1L << (KEY_SOURCE - 355)) | (1L << (KEYS - 355)) | (1L << (KEYSET - 355)) | (1L << (LAG - 355)) | (1L << (LAST - 355)) | (1L << (LAST_VALUE - 355)) | (1L << (LEAD - 355)) | (1L << (LEVEL - 355)) | (1L << (LIST - 355)) | (1L << (LISTENER - 355)) | (1L << (LISTENER_URL - 355)) | (1L << (LOB_COMPACTION - 355)) | (1L << (LOCAL - 355)) | (1L << (LOCATION - 355)) | (1L << (LOCK - 355)) | (1L << (LOCK_ESCALATION - 355)) | (1L << (LOGIN - 355)) | (1L << (LOOP - 355)) | (1L << (LOW - 355)) | (1L << (MANUAL - 355)) | (1L << (MARK - 355)) | (1L << (MATERIALIZED - 355)) | (1L << (MAX - 355)) | (1L << (MAX_CPU_PERCENT - 355)) | (1L << (MAX_DOP - 355)) | (1L << (MAX_FILES - 355)) | (1L << (MAX_IOPS_PER_VOLUME - 355)) | (1L << (MAX_MEMORY_PERCENT - 355)) | (1L << (MAX_PROCESSES - 355)) | (1L << (MAX_QUEUE_READERS - 355)) | (1L << (MAX_ROLLOVER_FILES - 355)) | (1L << (MAXDOP - 355)) | (1L << (MAXRECURSION - 355)) | (1L << (MAXSIZE - 355)) | (1L << (MB - 355)) | (1L << (MEDIUM - 355)) | (1L << (MEMORY_OPTIMIZED_DATA - 355)) | (1L << (MESSAGE - 355)) | (1L << (MIN - 355)) | (1L << (MIN_ACTIVE_ROWVERSION - 355)) | (1L << (MIN_CPU_PERCENT - 355)) | (1L << (MIN_IOPS_PER_VOLUME - 355)) | (1L << (MIN_MEMORY_PERCENT - 355)) | (1L << (MINUTES - 355)) | (1L << (MIRROR_ADDRESS - 355)) | (1L << (MIXED_PAGE_ALLOCATION - 355)) | (1L << (MODE - 355)))) != 0) || ((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (MODIFY - 419)) | (1L << (MOVE - 419)) | (1L << (MULTI_USER - 419)) | (1L << (NAME - 419)) | (1L << (NESTED_TRIGGERS - 419)) | (1L << (NEW_ACCOUNT - 419)) | (1L << (NEW_BROKER - 419)) | (1L << (NEW_PASSWORD - 419)) | (1L << (NEXT - 419)) | (1L << (NO - 419)) | (1L << (NO_TRUNCATE - 419)) | (1L << (NO_WAIT - 419)) | (1L << (NOCOUNT - 419)) | (1L << (NODES - 419)) | (1L << (NOEXPAND - 419)) | (1L << (NON_TRANSACTED_ACCESS - 419)) | (1L << (NORECOMPUTE - 419)) | (1L << (NORECOVERY - 419)) | (1L << (NOWAIT - 419)) | (1L << (NTILE - 419)) | (1L << (NUMANODE - 419)) | (1L << (NUMBER - 419)) | (1L << (NUMERIC_ROUNDABORT - 419)) | (1L << (OBJECT - 419)) | (1L << (OFFLINE - 419)) | (1L << (OFFSET - 419)) | (1L << (OLD_ACCOUNT - 419)) | (1L << (ONLINE - 419)) | (1L << (ONLY - 419)) | (1L << (OPEN_EXISTING - 419)) | (1L << (OPTIMISTIC - 419)) | (1L << (OPTIMIZE - 419)) | (1L << (OUT - 419)) | (1L << (OUTPUT - 419)) | (1L << (OVERRIDE - 419)) | (1L << (OWNER - 419)) | (1L << (PAGE_VERIFY - 419)) | (1L << (PARAMETERIZATION - 419)) | (1L << (PARTITION - 419)) | (1L << (PARTITIONS - 419)) | (1L << (PARTNER - 419)) | (1L << (PATH - 419)) | (1L << (PERCENT_RANK - 419)) | (1L << (PERCENTILE_CONT - 419)) | (1L << (PERCENTILE_DISC - 419)) | (1L << (POISON_MESSAGE_HANDLING - 419)) | (1L << (POOL - 419)) | (1L << (PORT - 419)) | (1L << (PRECEDING - 419)) | (1L << (PRIMARY_ROLE - 419)) | (1L << (PRIOR - 419)) | (1L << (PRIORITY - 419)) | (1L << (PRIORITY_LEVEL - 419)) | (1L << (PRIVATE - 419)) | (1L << (PRIVATE_KEY - 419)) | (1L << (PRIVILEGES - 419)) | (1L << (PROCEDURE_NAME - 419)) | (1L << (PROPERTY - 419)) | (1L << (PROVIDER - 419)) | (1L << (PROVIDER_KEY_NAME - 419)) | (1L << (QUERY - 419)) | (1L << (QUEUE - 419)) | (1L << (QUEUE_DELAY - 419)))) != 0) || ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (QUOTED_IDENTIFIER - 483)) | (1L << (RANGE - 483)) | (1L << (RANK - 483)) | (1L << (RC2 - 483)) | (1L << (RC4 - 483)) | (1L << (RC4_128 - 483)) | (1L << (READ_COMMITTED_SNAPSHOT - 483)) | (1L << (READ_ONLY - 483)) | (1L << (READ_ONLY_ROUTING_LIST - 483)) | (1L << (READ_WRITE - 483)) | (1L << (READONLY - 483)) | (1L << (REBUILD - 483)) | (1L << (RECEIVE - 483)) | (1L << (RECOMPILE - 483)) | (1L << (RECOVERY - 483)) | (1L << (RECURSIVE_TRIGGERS - 483)) | (1L << (RELATIVE - 483)) | (1L << (REMOTE - 483)) | (1L << (REMOTE_SERVICE_NAME - 483)) | (1L << (REMOVE - 483)) | (1L << (REORGANIZE - 483)) | (1L << (REPEATABLE - 483)) | (1L << (REPLICA - 483)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 483)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 483)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 483)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 483)) | (1L << (RESERVE_DISK_SPACE - 483)) | (1L << (RESOURCE - 483)) | (1L << (RESOURCE_MANAGER_LOCATION - 483)) | (1L << (RESTRICTED_USER - 483)) | (1L << (RETENTION - 483)) | (1L << (ROBUST - 483)) | (1L << (ROOT - 483)) | (1L << (ROUTE - 483)) | (1L << (ROW - 483)) | (1L << (ROW_NUMBER - 483)) | (1L << (ROWGUID - 483)) | (1L << (ROWS - 483)) | (1L << (SAMPLE - 483)) | (1L << (SCHEMABINDING - 483)) | (1L << (SCOPED - 483)) | (1L << (SCROLL - 483)) | (1L << (SCROLL_LOCKS - 483)) | (1L << (SEARCH - 483)) | (1L << (SECONDARY - 483)) | (1L << (SECONDARY_ONLY - 483)) | (1L << (SECONDARY_ROLE - 483)) | (1L << (SECONDS - 483)) | (1L << (SECRET - 483)) | (1L << (SECURITY - 483)) | (1L << (SECURITY_LOG - 483)) | (1L << (SEEDING_MODE - 483)) | (1L << (SELF - 483)) | (1L << (SEMI_SENSITIVE - 483)) | (1L << (SEND - 483)) | (1L << (SENT - 483)) | (1L << (SEQUENCE - 483)) | (1L << (SERIALIZABLE - 483)) | (1L << (SESSION_TIMEOUT - 483)) | (1L << (SETERROR - 483)) | (1L << (SHARE - 483)) | (1L << (SHOWPLAN - 483)))) != 0) || ((((_la - 547)) & ~0x3f) == 0 && ((1L << (_la - 547)) & ((1L << (SIGNATURE - 547)) | (1L << (SIMPLE - 547)) | (1L << (SINGLE_USER - 547)) | (1L << (SIZE - 547)) | (1L << (SMALLINT - 547)) | (1L << (SNAPSHOT - 547)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 547)) | (1L << (STANDBY - 547)) | (1L << (START_DATE - 547)) | (1L << (STATIC - 547)) | (1L << (STATS_STREAM - 547)) | (1L << (STATUS - 547)) | (1L << (STATUSONLY - 547)) | (1L << (STDEV - 547)) | (1L << (STDEVP - 547)) | (1L << (STOPLIST - 547)) | (1L << (STRING_AGG - 547)) | (1L << (STUFF - 547)) | (1L << (SUBJECT - 547)) | (1L << (SUBSCRIPTION - 547)) | (1L << (SUM - 547)) | (1L << (SUSPEND - 547)) | (1L << (SYMMETRIC - 547)) | (1L << (SYNCHRONOUS_COMMIT - 547)) | (1L << (SYNONYM - 547)) | (1L << (SYSTEM - 547)) | (1L << (TAKE - 547)) | (1L << (TARGET_RECOVERY_TIME - 547)) | (1L << (TB - 547)) | (1L << (TEXTIMAGE_ON - 547)) | (1L << (THROW - 547)) | (1L << (TIES - 547)) | (1L << (TIME - 547)) | (1L << (TIMEOUT - 547)) | (1L << (TIMER - 547)) | (1L << (TINYINT - 547)) | (1L << (TORN_PAGE_DETECTION - 547)) | (1L << (TRANSFORM_NOISE_WORDS - 547)) | (1L << (TRIPLE_DES - 547)) | (1L << (TRIPLE_DES_3KEY - 547)) | (1L << (TRUSTWORTHY - 547)) | (1L << (TRY - 547)) | (1L << (TSQL - 547)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 547)) | (1L << (TYPE - 547)) | (1L << (TYPE_WARNING - 547)) | (1L << (UNBOUNDED - 547)) | (1L << (UNCOMMITTED - 547)) | (1L << (UNKNOWN - 547)) | (1L << (UNLIMITED - 547)) | (1L << (UOW - 547)) | (1L << (USING - 547)) | (1L << (VALID_XML - 547)) | (1L << (VALIDATION - 547)) | (1L << (VALUE - 547)) | (1L << (VAR - 547)) | (1L << (VARBINARY_KEYWORD - 547)) | (1L << (VARP - 547)) | (1L << (VIEW_METADATA - 547)) | (1L << (VIEWS - 547)) | (1L << (WAIT - 547)) | (1L << (WELL_FORMED_XML - 547)) | (1L << (WITHOUT_ARRAY_WRAPPER - 547)) | (1L << (WORK - 547)))) != 0) || ((((_la - 611)) & ~0x3f) == 0 && ((1L << (_la - 611)) & ((1L << (WORKLOAD - 611)) | (1L << (XML - 611)) | (1L << (XMLDATA - 611)) | (1L << (XMLNAMESPACES - 611)) | (1L << (XMLSCHEMA - 611)) | (1L << (XSINIL - 611)) | (1L << (ZONE - 611)) | (1L << (DOLLAR_ACTION - 611)) | (1L << (ABSENT - 611)) | (1L << (AES - 611)) | (1L << (ALLOW_CONNECTIONS - 611)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 611)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 611)) | (1L << (ANONYMOUS - 611)) | (1L << (APPEND - 611)) | (1L << (APPLICATION - 611)) | (1L << (ASYMMETRIC - 611)) | (1L << (ASYNCHRONOUS_COMMIT - 611)) | (1L << (AUTHENTICATION - 611)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 611)) | (1L << (AUTOMATIC - 611)) | (1L << (AVAILABILITY_MODE - 611)) | (1L << (BEFORE - 611)) | (1L << (BLOCK - 611)) | (1L << (BLOCKSIZE - 611)) | (1L << (BLOCKING_HIERARCHY - 611)) | (1L << (BUFFER - 611)) | (1L << (BUFFERCOUNT - 611)) | (1L << (CACHE - 611)) | (1L << (CALLED - 611)) | (1L << (CERTIFICATE - 611)) | (1L << (CHANGETABLE - 611)) | (1L << (CHANGES - 611)) | (1L << (CHECK_POLICY - 611)) | (1L << (CHECK_EXPIRATION - 611)) | (1L << (CLASSIFIER_FUNCTION - 611)) | (1L << (CLUSTER - 611)) | (1L << (COMPRESSION - 611)) | (1L << (CONFIGURATION - 611)) | (1L << (CONTAINMENT - 611)) | (1L << (CONTEXT - 611)) | (1L << (CONTINUE_AFTER_ERROR - 611)) | (1L << (CONTRACT - 611)) | (1L << (CONTRACT_NAME - 611)) | (1L << (CONVERSATION - 611)) | (1L << (COPY_ONLY - 611)) | (1L << (CYCLE - 611)) | (1L << (DATA_COMPRESSION - 611)) | (1L << (DATA_SOURCE - 611)) | (1L << (DATABASE_MIRRORING - 611)) | (1L << (DEFAULT_DATABASE - 611)) | (1L << (DEFAULT_SCHEMA - 611)) | (1L << (DIAGNOSTICS - 611)) | (1L << (DIFFERENTIAL - 611)) | (1L << (DTC_SUPPORT - 611)) | (1L << (ENABLED - 611)) | (1L << (ENDPOINT - 611)) | (1L << (ERROR - 611)) | (1L << (EVENT - 611)) | (1L << (EVENTDATA - 611)) | (1L << (EVENT_RETENTION_MODE - 611)) | (1L << (EXECUTABLE_FILE - 611)))) != 0) || ((((_la - 675)) & ~0x3f) == 0 && ((1L << (_la - 675)) & ((1L << (EXPIREDATE - 675)) | (1L << (EXTENSION - 675)) | (1L << (EXTERNAL_ACCESS - 675)) | (1L << (FAILOVER - 675)) | (1L << (FAILURECONDITIONLEVEL - 675)) | (1L << (FAN_IN - 675)) | (1L << (FILE_SNAPSHOT - 675)) | (1L << (FORCESEEK - 675)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 675)) | (1L << (GET - 675)) | (1L << (GOVERNOR - 675)) | (1L << (HASHED - 675)) | (1L << (HEALTHCHECKTIMEOUT - 675)) | (1L << (IIF - 675)) | (1L << (IO - 675)) | (1L << (INCLUDE - 675)) | (1L << (INCREMENT - 675)) | (1L << (INFINITE - 675)) | (1L << (INIT - 675)) | (1L << (INSTEAD - 675)) | (1L << (ISNULL - 675)) | (1L << (KERBEROS - 675)) | (1L << (KEY_PATH - 675)) | (1L << (KEY_STORE_PROVIDER_NAME - 675)) | (1L << (LANGUAGE - 675)) | (1L << (LIBRARY - 675)) | (1L << (LIFETIME - 675)) | (1L << (LINUX - 675)) | (1L << (LISTENER_IP - 675)) | (1L << (LISTENER_PORT - 675)) | (1L << (LOCAL_SERVICE_NAME - 675)) | (1L << (LOG - 675)) | (1L << (MATCHED - 675)) | (1L << (MASTER - 675)) | (1L << (MAX_MEMORY - 675)) | (1L << (MAXTRANSFER - 675)) | (1L << (MAXVALUE - 675)) | (1L << (MAX_DISPATCH_LATENCY - 675)) | (1L << (MAX_EVENT_SIZE - 675)) | (1L << (MAX_SIZE - 675)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 675)) | (1L << (MEDIADESCRIPTION - 675)) | (1L << (MEDIANAME - 675)) | (1L << (MEMBER - 675)) | (1L << (MEMORY_PARTITION_MODE - 675)) | (1L << (MESSAGE_FORWARDING - 675)) | (1L << (MESSAGE_FORWARD_SIZE - 675)) | (1L << (MINVALUE - 675)) | (1L << (MIRROR - 675)) | (1L << (MUST_CHANGE - 675)) | (1L << (NOFORMAT - 675)) | (1L << (NOINIT - 675)) | (1L << (NONE - 675)) | (1L << (NOREWIND - 675)) | (1L << (NOSKIP - 675)) | (1L << (NOUNLOAD - 675)) | (1L << (NO_CHECKSUM - 675)) | (1L << (NO_COMPRESSION - 675)) | (1L << (NO_EVENT_LOSS - 675)) | (1L << (NOTIFICATION - 675)) | (1L << (NTLM - 675)) | (1L << (OLD_PASSWORD - 675)) | (1L << (ON_FAILURE - 675)))) != 0) || ((((_la - 739)) & ~0x3f) == 0 && ((1L << (_la - 739)) & ((1L << (PAGE - 739)) | (1L << (PARAM_NODE - 739)) | (1L << (PARTIAL - 739)) | (1L << (PASSWORD - 739)) | (1L << (PERMISSION_SET - 739)) | (1L << (PER_CPU - 739)) | (1L << (PER_DB - 739)) | (1L << (PER_NODE - 739)) | (1L << (PERSISTED - 739)) | (1L << (PLATFORM - 739)) | (1L << (POLICY - 739)) | (1L << (PREDICATE - 739)) | (1L << (PROCESS - 739)) | (1L << (PROFILE - 739)) | (1L << (PYTHON - 739)) | (1L << (R - 739)) | (1L << (READ_WRITE_FILEGROUPS - 739)) | (1L << (REGENERATE - 739)) | (1L << (RELATED_CONVERSATION - 739)) | (1L << (RELATED_CONVERSATION_GROUP - 739)) | (1L << (REQUIRED - 739)) | (1L << (RESET - 739)) | (1L << (RESTART - 739)) | (1L << (RESUME - 739)) | (1L << (RETAINDAYS - 739)) | (1L << (RETURNS - 739)) | (1L << (REWIND - 739)) | (1L << (ROLE - 739)) | (1L << (RSA_512 - 739)) | (1L << (RSA_1024 - 739)) | (1L << (RSA_2048 - 739)) | (1L << (RSA_3072 - 739)) | (1L << (RSA_4096 - 739)) | (1L << (SAFETY - 739)) | (1L << (SAFE - 739)) | (1L << (SCHEDULER - 739)) | (1L << (SCHEME - 739)) | (1L << (SERVER - 739)) | (1L << (SERVICE - 739)) | (1L << (SERVICE_BROKER - 739)) | (1L << (SERVICE_NAME - 739)) | (1L << (SESSION - 739)) | (1L << (SID - 739)) | (1L << (SKIP_KEYWORD - 739)) | (1L << (SOFTNUMA - 739)) | (1L << (SOURCE - 739)) | (1L << (SPECIFICATION - 739)) | (1L << (SPLIT - 739)) | (1L << (SQLDUMPERFLAGS - 739)) | (1L << (SQLDUMPERPATH - 739)) | (1L << (SQLDUMPERTIMEOUT - 739)) | (1L << (STATE - 739)) | (1L << (STATS - 739)) | (1L << (START - 739)) | (1L << (STARTED - 739)) | (1L << (STARTUP_STATE - 739)) | (1L << (STOP - 739)) | (1L << (STOPPED - 739)) | (1L << (STOP_ON_ERROR - 739)) | (1L << (SUPPORTED - 739)) | (1L << (TAPE - 739)) | (1L << (TARGET - 739)))) != 0) || ((((_la - 803)) & ~0x3f) == 0 && ((1L << (_la - 803)) & ((1L << (TCP - 803)) | (1L << (TRACK_CAUSALITY - 803)) | (1L << (TRANSFER - 803)) | (1L << (UNCHECKED - 803)) | (1L << (UNLOCK - 803)) | (1L << (UNSAFE - 803)) | (1L << (URL - 803)) | (1L << (USED - 803)) | (1L << (VERBOSELOGGING - 803)) | (1L << (VISIBILITY - 803)) | (1L << (WINDOWS - 803)) | (1L << (WITHOUT - 803)) | (1L << (WITNESS - 803)) | (1L << (VARCHAR - 803)) | (1L << (NVARCHAR - 803)) | (1L << (DOUBLE_QUOTE_ID - 803)) | (1L << (SQUARE_BRACKET_ID - 803)) | (1L << (LOCAL_ID - 803)) | (1L << (DECIMAL - 803)) | (1L << (ID - 803)) | (1L << (STRING - 803)) | (1L << (BINARY - 803)) | (1L << (FLOAT - 803)) | (1L << (REAL - 803)) | (1L << (DOT - 803)) | (1L << (DOLLAR - 803)) | (1L << (LR_BRACKET - 803)) | (1L << (PLUS - 803)) | (1L << (MINUS - 803)) | (1L << (BIT_NOT - 803)))) != 0)) {
				{
				setState(6874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(6873);
					match(PARTITION);
					}
					break;
				}
				setState(6876);
				((Switch_partitionContext)_localctx).source_partition_number_expression = expression(0);
				}
			}

			setState(6879);
			match(TO);
			setState(6880);
			((Switch_partitionContext)_localctx).target_table = table_name();
			setState(6883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				{
				setState(6881);
				match(PARTITION);
				setState(6882);
				((Switch_partitionContext)_localctx).target_partition_number_expression = expression(0);
				}
				break;
			}
			setState(6887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,902,_ctx) ) {
			case 1:
				{
				setState(6885);
				match(WITH);
				setState(6886);
				low_priority_lock_wait();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Low_priority_lock_waitContext extends ParserRuleContext {
		public TimeContext max_duration;
		public Token abort_after_wait;
		public TerminalNode WAIT_AT_LOW_PRIORITY() { return getToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0); }
		public TerminalNode MAX_DURATION() { return getToken(TSqlParser.MAX_DURATION, 0); }
		public TerminalNode ABORT_AFTER_WAIT() { return getToken(TSqlParser.ABORT_AFTER_WAIT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode BLOCKERS() { return getToken(TSqlParser.BLOCKERS, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public Low_priority_lock_waitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_low_priority_lock_wait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterLow_priority_lock_wait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitLow_priority_lock_wait(this);
		}
	}

	public final Low_priority_lock_waitContext low_priority_lock_wait() throws RecognitionException {
		Low_priority_lock_waitContext _localctx = new Low_priority_lock_waitContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_low_priority_lock_wait);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6889);
			match(WAIT_AT_LOW_PRIORITY);
			setState(6890);
			match(LR_BRACKET);
			setState(6891);
			match(MAX_DURATION);
			setState(6892);
			match(EQUAL);
			setState(6893);
			((Low_priority_lock_waitContext)_localctx).max_duration = time();
			setState(6895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUTES) {
				{
				setState(6894);
				match(MINUTES);
				}
			}

			setState(6897);
			match(COMMA);
			setState(6898);
			match(ABORT_AFTER_WAIT);
			setState(6899);
			match(EQUAL);
			setState(6900);
			((Low_priority_lock_waitContext)_localctx).abort_after_wait = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==SELF || _la==BLOCKERS || _la==NONE) ) {
				((Low_priority_lock_waitContext)_localctx).abort_after_wait = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6901);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_databaseContext extends ParserRuleContext {
		public Id_Context database;
		public Id_Context new_name;
		public Id_Context collation;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return getRuleContext(Database_optionspecContext.class,0);
		}
		public Add_or_modify_filesContext add_or_modify_files() {
			return getRuleContext(Add_or_modify_filesContext.class,0);
		}
		public Add_or_modify_filegroupsContext add_or_modify_filegroups() {
			return getRuleContext(Add_or_modify_filegroupsContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_database(this);
		}
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_alter_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6903);
			match(ALTER);
			setState(6904);
			match(DATABASE);
			setState(6907);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(6905);
				((Alter_databaseContext)_localctx).database = id_();
				}
				break;
			case CURRENT:
				{
				setState(6906);
				match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
			case 1:
				{
				setState(6909);
				match(MODIFY);
				setState(6910);
				match(NAME);
				setState(6911);
				match(EQUAL);
				setState(6912);
				((Alter_databaseContext)_localctx).new_name = id_();
				}
				break;
			case 2:
				{
				setState(6913);
				match(COLLATE);
				setState(6914);
				((Alter_databaseContext)_localctx).collation = id_();
				}
				break;
			case 3:
				{
				setState(6915);
				match(SET);
				setState(6916);
				database_optionspec();
				setState(6919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
				case 1:
					{
					setState(6917);
					match(WITH);
					setState(6918);
					termination();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(6921);
				add_or_modify_files();
				}
				break;
			case 5:
				{
				setState(6922);
				add_or_modify_filegroups();
				}
				break;
			}
			setState(6926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
			case 1:
				{
				setState(6925);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_or_modify_filesContext extends ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context logical_file_name;
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public List<FilespecContext> filespec() {
			return getRuleContexts(FilespecContext.class);
		}
		public FilespecContext filespec(int i) {
			return getRuleContext(FilespecContext.class,i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public Add_or_modify_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_or_modify_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAdd_or_modify_files(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAdd_or_modify_files(this);
		}
	}

	public final Add_or_modify_filesContext add_or_modify_files() throws RecognitionException {
		Add_or_modify_filesContext _localctx = new Add_or_modify_filesContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_add_or_modify_files);
		int _la;
		try {
			setState(6960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,911,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6928);
				match(ADD);
				setState(6929);
				match(FILE);
				setState(6930);
				filespec();
				setState(6935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6931);
					match(COMMA);
					setState(6932);
					filespec();
					}
					}
					setState(6937);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(6938);
					match(TO);
					setState(6939);
					match(FILEGROUP);
					setState(6940);
					((Add_or_modify_filesContext)_localctx).filegroup_name = id_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6943);
				match(ADD);
				setState(6944);
				match(LOG);
				setState(6945);
				match(FILE);
				setState(6946);
				filespec();
				setState(6951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6947);
					match(COMMA);
					setState(6948);
					filespec();
					}
					}
					setState(6953);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6954);
				match(REMOVE);
				setState(6955);
				match(FILE);
				setState(6956);
				((Add_or_modify_filesContext)_localctx).logical_file_name = id_();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6957);
				match(MODIFY);
				setState(6958);
				match(FILE);
				setState(6959);
				filespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilespecContext extends ParserRuleContext {
		public Id_or_stringContext name;
		public Id_or_stringContext new_name;
		public Token file_name;
		public File_sizeContext size;
		public File_sizeContext max_size;
		public File_sizeContext growth_increment;
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<Id_or_stringContext> id_or_string() {
			return getRuleContexts(Id_or_stringContext.class);
		}
		public Id_or_stringContext id_or_string(int i) {
			return getRuleContext(Id_or_stringContext.class,i);
		}
		public TerminalNode NEWNAME() { return getToken(TSqlParser.NEWNAME, 0); }
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public TerminalNode MAXSIZE() { return getToken(TSqlParser.MAXSIZE, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSqlParser.UNLIMITED, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSqlParser.FILEGROWTH, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<File_sizeContext> file_size() {
			return getRuleContexts(File_sizeContext.class);
		}
		public File_sizeContext file_size(int i) {
			return getRuleContext(File_sizeContext.class,i);
		}
		public FilespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filespec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFilespec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFilespec(this);
		}
	}

	public final FilespecContext filespec() throws RecognitionException {
		FilespecContext _localctx = new FilespecContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_filespec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6962);
			match(LR_BRACKET);
			setState(6963);
			match(NAME);
			setState(6964);
			match(EQUAL);
			setState(6965);
			((FilespecContext)_localctx).name = id_or_string();
			setState(6970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
			case 1:
				{
				setState(6966);
				match(COMMA);
				setState(6967);
				match(NEWNAME);
				setState(6968);
				match(EQUAL);
				setState(6969);
				((FilespecContext)_localctx).new_name = id_or_string();
				}
				break;
			}
			setState(6976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
			case 1:
				{
				setState(6972);
				match(COMMA);
				setState(6973);
				match(FILENAME);
				setState(6974);
				match(EQUAL);
				setState(6975);
				((FilespecContext)_localctx).file_name = match(STRING);
				}
				break;
			}
			setState(6982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
			case 1:
				{
				setState(6978);
				match(COMMA);
				setState(6979);
				match(SIZE);
				setState(6980);
				match(EQUAL);
				setState(6981);
				((FilespecContext)_localctx).size = file_size();
				}
				break;
			}
			setState(6989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				{
				setState(6984);
				match(COMMA);
				setState(6985);
				match(MAXSIZE);
				setState(6986);
				match(EQUAL);
				{
				setState(6987);
				((FilespecContext)_localctx).max_size = file_size();
				}
				}
				break;
			case 2:
				{
				setState(6988);
				match(UNLIMITED);
				}
				break;
			}
			setState(6995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				{
				setState(6991);
				match(COMMA);
				setState(6992);
				match(FILEGROWTH);
				setState(6993);
				match(EQUAL);
				setState(6994);
				((FilespecContext)_localctx).growth_increment = file_size();
				}
				break;
			}
			setState(6999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6997);
				match(COMMA);
				setState(6998);
				match(OFFLINE);
				}
			}

			setState(7001);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_or_modify_filegroupsContext extends ParserRuleContext {
		public Id_Context filegroup_name;
		public Id_Context filegrou_name;
		public Id_Context new_filegroup_name;
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode CONTAINS() { return getToken(TSqlParser.CONTAINS, 0); }
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public Filegroup_updatability_optionContext filegroup_updatability_option() {
			return getRuleContext(Filegroup_updatability_optionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode AUTOGROW_SINGLE_FILE() { return getToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0); }
		public TerminalNode AUTOGROW_ALL_FILES() { return getToken(TSqlParser.AUTOGROW_ALL_FILES, 0); }
		public Add_or_modify_filegroupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_or_modify_filegroups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAdd_or_modify_filegroups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAdd_or_modify_filegroups(this);
		}
	}

	public final Add_or_modify_filegroupsContext add_or_modify_filegroups() throws RecognitionException {
		Add_or_modify_filegroupsContext _localctx = new Add_or_modify_filegroupsContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_add_or_modify_filegroups);
		try {
			setState(7027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7003);
				match(ADD);
				setState(7004);
				match(FILEGROUP);
				setState(7005);
				((Add_or_modify_filegroupsContext)_localctx).filegroup_name = id_();
				setState(7010);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
				case 1:
					{
					setState(7006);
					match(CONTAINS);
					setState(7007);
					match(FILESTREAM);
					}
					break;
				case 2:
					{
					setState(7008);
					match(CONTAINS);
					setState(7009);
					match(MEMORY_OPTIMIZED_DATA);
					}
					break;
				}
				}
				break;
			case REMOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7012);
				match(REMOVE);
				setState(7013);
				match(FILEGROUP);
				setState(7014);
				((Add_or_modify_filegroupsContext)_localctx).filegrou_name = id_();
				}
				break;
			case MODIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(7015);
				match(MODIFY);
				setState(7016);
				match(FILEGROUP);
				setState(7017);
				((Add_or_modify_filegroupsContext)_localctx).filegrou_name = id_();
				setState(7025);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case READ_ONLY:
				case READ_WRITE:
				case READONLY:
				case READWRITE:
					{
					setState(7018);
					filegroup_updatability_option();
					}
					break;
				case DEFAULT:
					{
					setState(7019);
					match(DEFAULT);
					}
					break;
				case NAME:
					{
					setState(7020);
					match(NAME);
					setState(7021);
					match(EQUAL);
					setState(7022);
					((Add_or_modify_filegroupsContext)_localctx).new_filegroup_name = id_();
					}
					break;
				case AUTOGROW_SINGLE_FILE:
					{
					setState(7023);
					match(AUTOGROW_SINGLE_FILE);
					}
					break;
				case AUTOGROW_ALL_FILES:
					{
					setState(7024);
					match(AUTOGROW_ALL_FILES);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filegroup_updatability_optionContext extends ParserRuleContext {
		public TerminalNode READONLY() { return getToken(TSqlParser.READONLY, 0); }
		public TerminalNode READWRITE() { return getToken(TSqlParser.READWRITE, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public Filegroup_updatability_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filegroup_updatability_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFilegroup_updatability_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFilegroup_updatability_option(this);
		}
	}

	public final Filegroup_updatability_optionContext filegroup_updatability_option() throws RecognitionException {
		Filegroup_updatability_optionContext _localctx = new Filegroup_updatability_optionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_filegroup_updatability_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7029);
			_la = _input.LA(1);
			if ( !(((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (READ_ONLY - 490)) | (1L << (READ_WRITE - 490)) | (1L << (READONLY - 490)) | (1L << (READWRITE - 490)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_optionspecContext extends ParserRuleContext {
		public Auto_optionContext auto_option() {
			return getRuleContext(Auto_optionContext.class,0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return getRuleContext(Change_tracking_optionContext.class,0);
		}
		public Containment_optionContext containment_option() {
			return getRuleContext(Containment_optionContext.class,0);
		}
		public Cursor_optionContext cursor_option() {
			return getRuleContext(Cursor_optionContext.class,0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return getRuleContext(Database_mirroring_optionContext.class,0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return getRuleContext(Date_correlation_optimization_optionContext.class,0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return getRuleContext(Db_encryption_optionContext.class,0);
		}
		public Db_state_optionContext db_state_option() {
			return getRuleContext(Db_state_optionContext.class,0);
		}
		public Db_update_optionContext db_update_option() {
			return getRuleContext(Db_update_optionContext.class,0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return getRuleContext(Db_user_access_optionContext.class,0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return getRuleContext(Delayed_durability_optionContext.class,0);
		}
		public External_access_optionContext external_access_option() {
			return getRuleContext(External_access_optionContext.class,0);
		}
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return getRuleContext(Database_filestream_optionContext.class,0);
		}
		public Hadr_optionsContext hadr_options() {
			return getRuleContext(Hadr_optionsContext.class,0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return getRuleContext(Mixed_page_allocation_optionContext.class,0);
		}
		public Parameterization_optionContext parameterization_option() {
			return getRuleContext(Parameterization_optionContext.class,0);
		}
		public Recovery_optionContext recovery_option() {
			return getRuleContext(Recovery_optionContext.class,0);
		}
		public Service_broker_optionContext service_broker_option() {
			return getRuleContext(Service_broker_optionContext.class,0);
		}
		public Snapshot_optionContext snapshot_option() {
			return getRuleContext(Snapshot_optionContext.class,0);
		}
		public Sql_optionContext sql_option() {
			return getRuleContext(Sql_optionContext.class,0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return getRuleContext(Target_recovery_time_optionContext.class,0);
		}
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_optionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_optionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_optionspec(this);
		}
	}

	public final Database_optionspecContext database_optionspec() throws RecognitionException {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_database_optionspec);
		try {
			setState(7054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7031);
				auto_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7032);
				change_tracking_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7033);
				containment_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7034);
				cursor_option();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7035);
				database_mirroring_option();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7036);
				date_correlation_optimization_option();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7037);
				db_encryption_option();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7038);
				db_state_option();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7039);
				db_update_option();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7040);
				db_user_access_option();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7041);
				delayed_durability_option();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7042);
				external_access_option();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7043);
				match(FILESTREAM);
				setState(7044);
				database_filestream_option();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7045);
				hadr_options();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7046);
				mixed_page_allocation_option();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7047);
				parameterization_option();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7048);
				recovery_option();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7049);
				service_broker_option();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7050);
				snapshot_option();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7051);
				sql_option();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7052);
				target_recovery_time_option();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7053);
				termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_optionContext extends ParserRuleContext {
		public TerminalNode AUTO_CLOSE() { return getToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(TSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAuto_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAuto_option(this);
		}
	}

	public final Auto_optionContext auto_option() throws RecognitionException {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_auto_option);
		int _la;
		try {
			setState(7073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7056);
				match(AUTO_CLOSE);
				setState(7057);
				on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7058);
				match(AUTO_CREATE_STATISTICS);
				setState(7059);
				match(OFF);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(7060);
				match(ON);
				setState(7065);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INCREMENTAL:
					{
					setState(7061);
					match(INCREMENTAL);
					setState(7062);
					match(EQUAL);
					setState(7063);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(7064);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				enterOuterAlt(_localctx, 4);
				{
				setState(7067);
				match(AUTO_SHRINK);
				setState(7068);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				enterOuterAlt(_localctx, 5);
				{
				setState(7069);
				match(AUTO_UPDATE_STATISTICS);
				setState(7070);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				enterOuterAlt(_localctx, 6);
				{
				setState(7071);
				match(AUTO_UPDATE_STATISTICS_ASYNC);
				setState(7072);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_optionContext extends ParserRuleContext {
		public TerminalNode CHANGE_TRACKING() { return getToken(TSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<Change_tracking_option_listContext> change_tracking_option_list() {
			return getRuleContexts(Change_tracking_option_listContext.class);
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return getRuleContext(Change_tracking_option_listContext.class,i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_tracking_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_tracking_option(this);
		}
	}

	public final Change_tracking_optionContext change_tracking_option() throws RecognitionException {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_change_tracking_option);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7075);
			match(CHANGE_TRACKING);
			setState(7076);
			match(EQUAL);
			setState(7092);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(7077);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(7078);
				match(ON);
				setState(7089);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,925,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7079);
						change_tracking_option_list();
						setState(7084);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(7080);
							match(COMMA);
							setState(7081);
							change_tracking_option_list();
							}
							}
							setState(7086);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						} 
					}
					setState(7091);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,925,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_option_listContext extends ParserRuleContext {
		public TerminalNode AUTO_CLEANUP() { return getToken(TSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CHANGE_RETENTION() { return getToken(TSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode DAYS() { return getToken(TSqlParser.DAYS, 0); }
		public TerminalNode HOURS() { return getToken(TSqlParser.HOURS, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_tracking_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_tracking_option_list(this);
		}
	}

	public final Change_tracking_option_listContext change_tracking_option_list() throws RecognitionException {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_change_tracking_option_list);
		int _la;
		try {
			setState(7100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLEANUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(7094);
				match(AUTO_CLEANUP);
				setState(7095);
				match(EQUAL);
				setState(7096);
				on_off();
				}
				break;
			case CHANGE_RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7097);
				match(CHANGE_RETENTION);
				setState(7098);
				match(EQUAL);
				setState(7099);
				_la = _input.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Containment_optionContext extends ParserRuleContext {
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_containment_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterContainment_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitContainment_option(this);
		}
	}

	public final Containment_optionContext containment_option() throws RecognitionException {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_containment_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7102);
			match(CONTAINMENT);
			setState(7103);
			match(EQUAL);
			setState(7104);
			_la = _input.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionContext extends ParserRuleContext {
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CURSOR_DEFAULT() { return getToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCursor_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCursor_option(this);
		}
	}

	public final Cursor_optionContext cursor_option() throws RecognitionException {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_cursor_option);
		int _la;
		try {
			setState(7110);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7106);
				match(CURSOR_CLOSE_ON_COMMIT);
				setState(7107);
				on_off();
				}
				break;
			case CURSOR_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7108);
				match(CURSOR_DEFAULT);
				setState(7109);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_endpointContext extends ParserRuleContext {
		public Id_Context endpointname;
		public Id_Context login;
		public Token state;
		public Token port;
		public Id_Context cert_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode LISTENER_PORT() { return getToken(TSqlParser.LISTENER_PORT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode TSQL() { return getToken(TSqlParser.TSQL, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode SERVICE_BROKER() { return getToken(TSqlParser.SERVICE_BROKER, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(TSqlParser.AUTHENTICATION, 0); }
		public TerminalNode DATABASE_MIRRORING() { return getToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode LISTENER_IP() { return getToken(TSqlParser.LISTENER_IP, 0); }
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode IPV4_ADDR() { return getToken(TSqlParser.IPV4_ADDR, 0); }
		public TerminalNode IPV6_ADDR() { return getToken(TSqlParser.IPV6_ADDR, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode MESSAGE_FORWARDING() { return getToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public TerminalNode MESSAGE_FORWARD_SIZE() { return getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public TerminalNode STARTED() { return getToken(TSqlParser.STARTED, 0); }
		public TerminalNode STOPPED() { return getToken(TSqlParser.STOPPED, 0); }
		public List<TerminalNode> DISABLED() { return getTokens(TSqlParser.DISABLED); }
		public TerminalNode DISABLED(int i) {
			return getToken(TSqlParser.DISABLED, i);
		}
		public TerminalNode SUPPORTED() { return getToken(TSqlParser.SUPPORTED, 0); }
		public TerminalNode REQUIRED() { return getToken(TSqlParser.REQUIRED, 0); }
		public TerminalNode ENABLED() { return getToken(TSqlParser.ENABLED, 0); }
		public TerminalNode NTLM() { return getToken(TSqlParser.NTLM, 0); }
		public TerminalNode KERBEROS() { return getToken(TSqlParser.KERBEROS, 0); }
		public TerminalNode NEGOTIATE() { return getToken(TSqlParser.NEGOTIATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode AES() { return getToken(TSqlParser.AES, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_endpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_endpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_endpoint(this);
		}
	}

	public final Alter_endpointContext alter_endpoint() throws RecognitionException {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_alter_endpoint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7112);
			match(ALTER);
			setState(7113);
			match(ENDPOINT);
			setState(7114);
			((Alter_endpointContext)_localctx).endpointname = id_();
			setState(7117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(7115);
				match(AUTHORIZATION);
				setState(7116);
				((Alter_endpointContext)_localctx).login = id_();
				}
			}

			setState(7126);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATE) {
				{
				setState(7119);
				match(STATE);
				setState(7120);
				match(EQUAL);
				setState(7124);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STARTED:
					{
					setState(7121);
					((Alter_endpointContext)_localctx).state = match(STARTED);
					}
					break;
				case STOPPED:
					{
					setState(7122);
					((Alter_endpointContext)_localctx).state = match(STOPPED);
					}
					break;
				case DISABLED:
					{
					setState(7123);
					((Alter_endpointContext)_localctx).state = match(DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(7128);
			match(AS);
			setState(7129);
			match(TCP);
			setState(7130);
			match(LR_BRACKET);
			setState(7131);
			match(LISTENER_PORT);
			setState(7132);
			match(EQUAL);
			setState(7133);
			((Alter_endpointContext)_localctx).port = match(DECIMAL);
			setState(7138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7134);
				match(COMMA);
				setState(7135);
				match(LISTENER_IP);
				setState(7136);
				match(EQUAL);
				setState(7137);
				_la = _input.LA(1);
				if ( !(_la==ALL || ((((_la - 828)) & ~0x3f) == 0 && ((1L << (_la - 828)) & ((1L << (STRING - 828)) | (1L << (IPV4_ADDR - 828)) | (1L << (IPV6_ADDR - 828)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7140);
			match(RR_BRACKET);
			setState(7250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				setState(7141);
				match(TSQL);
				}
				break;
			case 2:
				{
				setState(7142);
				match(FOR);
				setState(7143);
				match(SERVICE_BROKER);
				setState(7144);
				match(LR_BRACKET);
				setState(7145);
				match(AUTHENTICATION);
				setState(7146);
				match(EQUAL);
				setState(7163);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(7147);
					match(WINDOWS);
					setState(7149);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						setState(7148);
						_la = _input.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(7153);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(7151);
						match(CERTIFICATE);
						setState(7152);
						((Alter_endpointContext)_localctx).cert_name = id_();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(7155);
					match(CERTIFICATE);
					setState(7156);
					((Alter_endpointContext)_localctx).cert_name = id_();
					setState(7158);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(7157);
						match(WINDOWS);
						}
					}

					setState(7161);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						setState(7160);
						_la = _input.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7182);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(7166);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7165);
						match(COMMA);
						}
					}

					setState(7168);
					match(ENCRYPTION);
					setState(7169);
					match(EQUAL);
					setState(7170);
					_la = _input.LA(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7180);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(7171);
						match(ALGORITHM);
						setState(7178);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
						case 1:
							{
							setState(7172);
							match(AES);
							}
							break;
						case 2:
							{
							setState(7173);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(7174);
							match(AES);
							setState(7175);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(7176);
							match(RC4);
							setState(7177);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(7190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
				case 1:
					{
					setState(7185);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7184);
						match(COMMA);
						}
					}

					setState(7187);
					match(MESSAGE_FORWARDING);
					setState(7188);
					match(EQUAL);
					setState(7189);
					_la = _input.LA(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MESSAGE_FORWARD_SIZE || _la==COMMA) {
					{
					setState(7193);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7192);
						match(COMMA);
						}
					}

					setState(7195);
					match(MESSAGE_FORWARD_SIZE);
					setState(7196);
					match(EQUAL);
					setState(7197);
					match(DECIMAL);
					}
				}

				setState(7200);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(7201);
				match(FOR);
				setState(7202);
				match(DATABASE_MIRRORING);
				setState(7203);
				match(LR_BRACKET);
				setState(7204);
				match(AUTHENTICATION);
				setState(7205);
				match(EQUAL);
				setState(7222);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(7206);
					match(WINDOWS);
					setState(7208);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						setState(7207);
						_la = _input.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(7212);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(7210);
						match(CERTIFICATE);
						setState(7211);
						((Alter_endpointContext)_localctx).cert_name = id_();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(7214);
					match(CERTIFICATE);
					setState(7215);
					((Alter_endpointContext)_localctx).cert_name = id_();
					setState(7217);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(7216);
						match(WINDOWS);
						}
					}

					setState(7220);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						setState(7219);
						_la = _input.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7241);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
				case 1:
					{
					setState(7225);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7224);
						match(COMMA);
						}
					}

					setState(7227);
					match(ENCRYPTION);
					setState(7228);
					match(EQUAL);
					setState(7229);
					_la = _input.LA(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7239);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(7230);
						match(ALGORITHM);
						setState(7237);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
						case 1:
							{
							setState(7231);
							match(AES);
							}
							break;
						case 2:
							{
							setState(7232);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(7233);
							match(AES);
							setState(7234);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(7235);
							match(RC4);
							setState(7236);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(7244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7243);
					match(COMMA);
					}
				}

				setState(7246);
				match(ROLE);
				setState(7247);
				match(EQUAL);
				setState(7248);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7249);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_mirroring_optionContext extends ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return getRuleContext(Mirroring_set_optionContext.class,0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_mirroring_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_mirroring_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_mirroring_option(this);
		}
	}

	public final Database_mirroring_optionContext database_mirroring_option() throws RecognitionException {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_database_mirroring_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7252);
			mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_set_optionContext extends ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return getRuleContext(Mirroring_partnerContext.class,0);
		}
		public Partner_optionContext partner_option() {
			return getRuleContext(Partner_optionContext.class,0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return getRuleContext(Mirroring_witnessContext.class,0);
		}
		public Witness_optionContext witness_option() {
			return getRuleContext(Witness_optionContext.class,0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_set_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_set_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_set_option(this);
		}
	}

	public final Mirroring_set_optionContext mirroring_set_option() throws RecognitionException {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_mirroring_set_option);
		try {
			setState(7260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7254);
				mirroring_partner();
				setState(7255);
				partner_option();
				}
				break;
			case WITNESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7257);
				mirroring_witness();
				setState(7258);
				witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_partnerContext extends ParserRuleContext {
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_partner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_partner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_partner(this);
		}
	}

	public final Mirroring_partnerContext mirroring_partner() throws RecognitionException {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_mirroring_partner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7262);
			match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_witnessContext extends ParserRuleContext {
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_witness; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_witness(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_witness(this);
		}
	}

	public final Mirroring_witnessContext mirroring_witness() throws RecognitionException {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_mirroring_witness);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7264);
			match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_partner_equalContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_partner_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWitness_partner_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWitness_partner_equal(this);
		}
	}

	public final Witness_partner_equalContext witness_partner_equal() throws RecognitionException {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_witness_partner_equal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7266);
			match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode SAFETY() { return getToken(TSqlParser.SAFETY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartner_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartner_option(this);
		}
	}

	public final Partner_optionContext partner_option() throws RecognitionException {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_partner_option);
		int _la;
		try {
			setState(7280);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7268);
				witness_partner_equal();
				setState(7269);
				partner_server();
				}
				break;
			case FAILOVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7271);
				match(FAILOVER);
				}
				break;
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
				enterOuterAlt(_localctx, 3);
				{
				setState(7272);
				match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 4);
				{
				setState(7273);
				match(OFF);
				}
				break;
			case RESUME:
				enterOuterAlt(_localctx, 5);
				{
				setState(7274);
				match(RESUME);
				}
				break;
			case SAFETY:
				enterOuterAlt(_localctx, 6);
				{
				setState(7275);
				match(SAFETY);
				setState(7276);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 7);
				{
				setState(7277);
				match(SUSPEND);
				}
				break;
			case TIMEOUT:
				enterOuterAlt(_localctx, 8);
				{
				setState(7278);
				match(TIMEOUT);
				setState(7279);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Witness_serverContext witness_server() {
			return getRuleContext(Witness_serverContext.class,0);
		}
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWitness_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWitness_option(this);
		}
	}

	public final Witness_optionContext witness_option() throws RecognitionException {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_witness_option);
		try {
			setState(7286);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7282);
				witness_partner_equal();
				setState(7283);
				witness_server();
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 2);
				{
				setState(7285);
				match(OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_serverContext extends ParserRuleContext {
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWitness_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWitness_server(this);
		}
	}

	public final Witness_serverContext witness_server() throws RecognitionException {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_witness_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7288);
			partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_serverContext extends ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return getRuleContext(Partner_server_tcp_prefixContext.class,0);
		}
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return getRuleContext(Mirroring_host_port_seperatorContext.class,0);
		}
		public Port_numberContext port_number() {
			return getRuleContext(Port_numberContext.class,0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartner_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartner_server(this);
		}
	}

	public final Partner_serverContext partner_server() throws RecognitionException {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_partner_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7290);
			partner_server_tcp_prefix();
			setState(7291);
			host();
			setState(7292);
			mirroring_host_port_seperator();
			setState(7293);
			port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_host_port_seperatorContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_host_port_seperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_host_port_seperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_host_port_seperator(this);
		}
	}

	public final Mirroring_host_port_seperatorContext mirroring_host_port_seperator() throws RecognitionException {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_mirroring_host_port_seperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7295);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_server_tcp_prefixContext extends ParserRuleContext {
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public TerminalNode COLON() { return getToken(TSqlParser.COLON, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server_tcp_prefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartner_server_tcp_prefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartner_server_tcp_prefix(this);
		}
	}

	public final Partner_server_tcp_prefixContext partner_server_tcp_prefix() throws RecognitionException {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_partner_server_tcp_prefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7297);
			match(TCP);
			setState(7298);
			match(COLON);
			setState(7299);
			match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Port_numberContext extends ParserRuleContext {
		public Token port;
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPort_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPort_number(this);
		}
	}

	public final Port_numberContext port_number() throws RecognitionException {
		Port_numberContext _localctx = new Port_numberContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_port_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7301);
			((Port_numberContext)_localctx).port = match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterHost(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitHost(this);
		}
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_host);
		try {
			setState(7313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7303);
				id_();
				setState(7304);
				match(DOT);
				setState(7305);
				host();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7311);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,960,_ctx) ) {
				case 1:
					{
					setState(7307);
					id_();
					setState(7308);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(7310);
					id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_correlation_optimization_optionContext extends ParserRuleContext {
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_correlation_optimization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDate_correlation_optimization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDate_correlation_optimization_option(this);
		}
	}

	public final Date_correlation_optimization_optionContext date_correlation_optimization_option() throws RecognitionException {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_date_correlation_optimization_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7315);
			match(DATE_CORRELATION_OPTIMIZATION);
			setState(7316);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_encryption_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_encryption_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_encryption_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_encryption_option(this);
		}
	}

	public final Db_encryption_optionContext db_encryption_option() throws RecognitionException {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_db_encryption_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7318);
			match(ENCRYPTION);
			setState(7319);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_state_optionContext extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(TSqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode EMERGENCY() { return getToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_state_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_state_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_state_option(this);
		}
	}

	public final Db_state_optionContext db_state_option() throws RecognitionException {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_db_state_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7321);
			_la = _input.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_update_optionContext extends ParserRuleContext {
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_update_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_update_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_update_option(this);
		}
	}

	public final Db_update_optionContext db_update_option() throws RecognitionException {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_db_update_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7323);
			_la = _input.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_user_access_optionContext extends ParserRuleContext {
		public TerminalNode SINGLE_USER() { return getToken(TSqlParser.SINGLE_USER, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(TSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode MULTI_USER() { return getToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_user_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_user_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_user_access_option(this);
		}
	}

	public final Db_user_access_optionContext db_user_access_option() throws RecognitionException {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_db_user_access_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7325);
			_la = _input.LA(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delayed_durability_optionContext extends ParserRuleContext {
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DISABLED() { return getToken(TSqlParser.DISABLED, 0); }
		public TerminalNode ALLOWED() { return getToken(TSqlParser.ALLOWED, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delayed_durability_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDelayed_durability_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDelayed_durability_option(this);
		}
	}

	public final Delayed_durability_optionContext delayed_durability_option() throws RecognitionException {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_delayed_durability_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7327);
			match(DELAYED_DURABILITY);
			setState(7328);
			match(EQUAL);
			setState(7329);
			_la = _input.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_access_optionContext extends ParserRuleContext {
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExternal_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExternal_access_option(this);
		}
	}

	public final External_access_optionContext external_access_option() throws RecognitionException {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_external_access_option);
		int _la;
		try {
			setState(7356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DB_CHAINING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7331);
				match(DB_CHAINING);
				setState(7332);
				on_off();
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 2);
				{
				setState(7333);
				match(TRUSTWORTHY);
				setState(7334);
				on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7335);
				match(DEFAULT_LANGUAGE);
				setState(7336);
				match(EQUAL);
				setState(7339);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(7337);
					id_();
					}
					break;
				case STRING:
					{
					setState(7338);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7341);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(7342);
				match(EQUAL);
				setState(7345);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(7343);
					id_();
					}
					break;
				case STRING:
					{
					setState(7344);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 5);
				{
				setState(7347);
				match(NESTED_TRIGGERS);
				setState(7348);
				match(EQUAL);
				setState(7349);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 6);
				{
				setState(7350);
				match(TRANSFORM_NOISE_WORDS);
				setState(7351);
				match(EQUAL);
				setState(7352);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 7);
				{
				setState(7353);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(7354);
				match(EQUAL);
				setState(7355);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hadr_optionsContext extends ParserRuleContext {
		public Id_Context availability_group_name;
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hadr_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterHadr_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitHadr_options(this);
		}
	}

	public final Hadr_optionsContext hadr_options() throws RecognitionException {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_hadr_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7358);
			match(HADR);
			setState(7367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
			case AVAILABILITY:
				{
				setState(7364);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AVAILABILITY:
					{
					setState(7359);
					match(AVAILABILITY);
					setState(7360);
					match(GROUP);
					setState(7361);
					match(EQUAL);
					setState(7362);
					((Hadr_optionsContext)_localctx).availability_group_name = id_();
					}
					break;
				case OFF:
					{
					setState(7363);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SUSPEND:
			case RESUME:
				{
				setState(7366);
				_la = _input.LA(1);
				if ( !(_la==SUSPEND || _la==RESUME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mixed_page_allocation_optionContext extends ParserRuleContext {
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mixed_page_allocation_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMixed_page_allocation_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMixed_page_allocation_option(this);
		}
	}

	public final Mixed_page_allocation_optionContext mixed_page_allocation_option() throws RecognitionException {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_mixed_page_allocation_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7369);
			match(MIXED_PAGE_ALLOCATION);
			setState(7370);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameterization_optionContext extends ParserRuleContext {
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterParameterization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitParameterization_option(this);
		}
	}

	public final Parameterization_optionContext parameterization_option() throws RecognitionException {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_parameterization_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7372);
			match(PARAMETERIZATION);
			setState(7373);
			_la = _input.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recovery_optionContext extends ParserRuleContext {
		public TerminalNode RECOVERY() { return getToken(TSqlParser.RECOVERY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(TSqlParser.BULK_LOGGED, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode PAGE_VERIFY() { return getToken(TSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recovery_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRecovery_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRecovery_option(this);
		}
	}

	public final Recovery_optionContext recovery_option() throws RecognitionException {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_recovery_option);
		int _la;
		try {
			setState(7381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECOVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7375);
				match(RECOVERY);
				setState(7376);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7377);
				match(TORN_PAGE_DETECTION);
				setState(7378);
				on_off();
				}
				break;
			case PAGE_VERIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(7379);
				match(PAGE_VERIFY);
				setState(7380);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==TORN_PAGE_DETECTION || _la==NONE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_broker_optionContext extends ParserRuleContext {
		public TerminalNode ENABLE_BROKER() { return getToken(TSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(TSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode NEW_BROKER() { return getToken(TSqlParser.NEW_BROKER, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_broker_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterService_broker_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitService_broker_option(this);
		}
	}

	public final Service_broker_optionContext service_broker_option() throws RecognitionException {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_service_broker_option);
		try {
			setState(7389);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_BROKER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7383);
				match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7384);
				match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(7385);
				match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(7386);
				match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				enterOuterAlt(_localctx, 5);
				{
				setState(7387);
				match(HONOR_BROKER_PRIORITY);
				setState(7388);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Snapshot_optionContext extends ParserRuleContext {
		public Token MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snapshot_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSnapshot_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSnapshot_option(this);
		}
	}

	public final Snapshot_optionContext snapshot_option() throws RecognitionException {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_snapshot_option);
		int _la;
		try {
			setState(7396);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(7391);
				match(ALLOW_SNAPSHOT_ISOLATION);
				setState(7392);
				on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7393);
				match(READ_COMMITTED_SNAPSHOT);
				setState(7394);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OFF:
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(7395);
				((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
					((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_optionContext extends ParserRuleContext {
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_option(this);
		}
	}

	public final Sql_optionContext sql_option() throws RecognitionException {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_sql_option);
		try {
			setState(7419);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANSI_NULL_DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7398);
				match(ANSI_NULL_DEFAULT);
				setState(7399);
				on_off();
				}
				break;
			case ANSI_NULLS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7400);
				match(ANSI_NULLS);
				setState(7401);
				on_off();
				}
				break;
			case ANSI_PADDING:
				enterOuterAlt(_localctx, 3);
				{
				setState(7402);
				match(ANSI_PADDING);
				setState(7403);
				on_off();
				}
				break;
			case ANSI_WARNINGS:
				enterOuterAlt(_localctx, 4);
				{
				setState(7404);
				match(ANSI_WARNINGS);
				setState(7405);
				on_off();
				}
				break;
			case ARITHABORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(7406);
				match(ARITHABORT);
				setState(7407);
				on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7408);
				match(COMPATIBILITY_LEVEL);
				setState(7409);
				match(EQUAL);
				setState(7410);
				match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(7411);
				match(CONCAT_NULL_YIELDS_NULL);
				setState(7412);
				on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				enterOuterAlt(_localctx, 8);
				{
				setState(7413);
				match(NUMERIC_ROUNDABORT);
				setState(7414);
				on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 9);
				{
				setState(7415);
				match(QUOTED_IDENTIFIER);
				setState(7416);
				on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				enterOuterAlt(_localctx, 10);
				{
				setState(7417);
				match(RECURSIVE_TRIGGERS);
				setState(7418);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_recovery_time_optionContext extends ParserRuleContext {
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_recovery_time_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTarget_recovery_time_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTarget_recovery_time_option(this);
		}
	}

	public final Target_recovery_time_optionContext target_recovery_time_option() throws RecognitionException {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_target_recovery_time_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7421);
			match(TARGET_RECOVERY_TIME);
			setState(7422);
			match(EQUAL);
			setState(7423);
			match(DECIMAL);
			setState(7424);
			_la = _input.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminationContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode ROLLBACK() { return getToken(TSqlParser.ROLLBACK, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode IMMEDIATE() { return getToken(TSqlParser.IMMEDIATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_termination; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTermination(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTermination(this);
		}
	}

	public final TerminationContext termination() throws RecognitionException {
		TerminationContext _localctx = new TerminationContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_termination);
		try {
			setState(7432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7426);
				match(ROLLBACK);
				setState(7427);
				match(AFTER);
				setState(7428);
				((TerminationContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7429);
				match(ROLLBACK);
				setState(7430);
				match(IMMEDIATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7431);
				match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<Drop_relational_or_xml_or_spatial_indexContext> drop_relational_or_xml_or_spatial_index() {
			return getRuleContexts(Drop_relational_or_xml_or_spatial_indexContext.class);
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return getRuleContext(Drop_relational_or_xml_or_spatial_indexContext.class,i);
		}
		public List<Drop_backward_compatible_indexContext> drop_backward_compatible_index() {
			return getRuleContexts(Drop_backward_compatible_indexContext.class);
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return getRuleContext(Drop_backward_compatible_indexContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_index(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7434);
			match(DROP);
			setState(7435);
			match(INDEX);
			setState(7438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7436);
				match(IF);
				setState(7437);
				match(EXISTS);
				}
			}

			setState(7456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,975,_ctx) ) {
			case 1:
				{
				setState(7440);
				drop_relational_or_xml_or_spatial_index();
				setState(7445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7441);
					match(COMMA);
					setState(7442);
					drop_relational_or_xml_or_spatial_index();
					}
					}
					setState(7447);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(7448);
				drop_backward_compatible_index();
				setState(7453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7449);
					match(COMMA);
					setState(7450);
					drop_backward_compatible_index();
					}
					}
					setState(7455);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(7459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
			case 1:
				{
				setState(7458);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
		public Id_Context index_name;
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_relational_or_xml_or_spatial_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_relational_or_xml_or_spatial_index(this);
		}
	}

	public final Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() throws RecognitionException {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7461);
			((Drop_relational_or_xml_or_spatial_indexContext)_localctx).index_name = id_();
			setState(7462);
			match(ON);
			setState(7463);
			full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_backward_compatible_indexContext extends ParserRuleContext {
		public Id_Context owner_name;
		public Id_Context table_or_view_name;
		public Id_Context index_name;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_backward_compatible_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_backward_compatible_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_backward_compatible_index(this);
		}
	}

	public final Drop_backward_compatible_indexContext drop_backward_compatible_index() throws RecognitionException {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_drop_backward_compatible_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
			case 1:
				{
				setState(7465);
				((Drop_backward_compatible_indexContext)_localctx).owner_name = id_();
				setState(7466);
				match(DOT);
				}
				break;
			}
			setState(7470);
			((Drop_backward_compatible_indexContext)_localctx).table_or_view_name = id_();
			setState(7471);
			match(DOT);
			setState(7472);
			((Drop_backward_compatible_indexContext)_localctx).index_name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public Token proc;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<Func_proc_name_schemaContext> func_proc_name_schema() {
			return getRuleContexts(Func_proc_name_schemaContext.class);
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return getRuleContext(Func_proc_name_schemaContext.class,i);
		}
		public TerminalNode PROC() { return getToken(TSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSqlParser.PROCEDURE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_procedure(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_drop_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7474);
			match(DROP);
			setState(7475);
			((Drop_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Drop_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7476);
				match(IF);
				setState(7477);
				match(EXISTS);
				}
			}

			setState(7480);
			func_proc_name_schema();
			setState(7485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7481);
				match(COMMA);
				setState(7482);
				func_proc_name_schema();
				}
				}
				setState(7487);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7489);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
			case 1:
				{
				setState(7488);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return getRuleContext(Drop_dml_triggerContext.class,0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return getRuleContext(Drop_ddl_triggerContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_trigger(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_drop_trigger);
		try {
			setState(7493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7491);
				drop_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7492);
				drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_dml_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_dml_trigger(this);
		}
	}

	public final Drop_dml_triggerContext drop_dml_trigger() throws RecognitionException {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_drop_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7495);
			match(DROP);
			setState(7496);
			match(TRIGGER);
			setState(7499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7497);
				match(IF);
				setState(7498);
				match(EXISTS);
				}
			}

			setState(7501);
			simple_name();
			setState(7506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7502);
				match(COMMA);
				setState(7503);
				simple_name();
				}
				}
				setState(7508);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
			case 1:
				{
				setState(7509);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_ddl_trigger(this);
		}
	}

	public final Drop_ddl_triggerContext drop_ddl_trigger() throws RecognitionException {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_drop_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7512);
			match(DROP);
			setState(7513);
			match(TRIGGER);
			setState(7516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7514);
				match(IF);
				setState(7515);
				match(EXISTS);
				}
			}

			setState(7518);
			simple_name();
			setState(7523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7519);
				match(COMMA);
				setState(7520);
				simple_name();
				}
				}
				setState(7525);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7526);
			match(ON);
			setState(7530);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
				{
				setState(7527);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(7528);
				match(ALL);
				setState(7529);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
			case 1:
				{
				setState(7532);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public List<Func_proc_name_schemaContext> func_proc_name_schema() {
			return getRuleContexts(Func_proc_name_schemaContext.class);
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return getRuleContext(Func_proc_name_schemaContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_function(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_drop_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7535);
			match(DROP);
			setState(7536);
			match(FUNCTION);
			setState(7539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7537);
				match(IF);
				setState(7538);
				match(EXISTS);
				}
			}

			setState(7541);
			func_proc_name_schema();
			setState(7546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7542);
				match(COMMA);
				setState(7543);
				func_proc_name_schema();
				}
				}
				setState(7548);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
			case 1:
				{
				setState(7549);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statisticsContext extends ParserRuleContext {
		public Id_Context name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_statistics(this);
		}
	}

	public final Drop_statisticsContext drop_statistics() throws RecognitionException {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_drop_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7552);
			match(DROP);
			setState(7553);
			match(STATISTICS);
			setState(7563); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7554);
					match(COMMA);
					}
				}

				setState(7560);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
				case 1:
					{
					setState(7557);
					table_name();
					setState(7558);
					match(DOT);
					}
					break;
				}
				setState(7562);
				((Drop_statisticsContext)_localctx).name = id_();
				}
				}
				setState(7565); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) || _la==COMMA );
			setState(7567);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_table(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7569);
			match(DROP);
			setState(7570);
			match(TABLE);
			setState(7573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7571);
				match(IF);
				setState(7572);
				match(EXISTS);
				}
			}

			setState(7575);
			table_name();
			setState(7577);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,996,_ctx) ) {
			case 1:
				{
				setState(7576);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_view(this);
		}
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_drop_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7579);
			match(DROP);
			setState(7580);
			match(VIEW);
			setState(7583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7581);
				match(IF);
				setState(7582);
				match(EXISTS);
				}
			}

			setState(7585);
			simple_name();
			setState(7590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7586);
				match(COMMA);
				setState(7587);
				simple_name();
				}
				}
				setState(7592);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,999,_ctx) ) {
			case 1:
				{
				setState(7593);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_type(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7596);
			match(CREATE);
			setState(7597);
			match(TYPE);
			setState(7598);
			((Create_typeContext)_localctx).name = simple_name();
			setState(7603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7599);
				match(FROM);
				setState(7600);
				data_type();
				setState(7601);
				default_value();
				}
			}

			setState(7611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7605);
				match(AS);
				setState(7606);
				match(TABLE);
				setState(7607);
				match(LR_BRACKET);
				setState(7608);
				column_def_table_constraints();
				setState(7609);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_type(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7613);
			match(DROP);
			setState(7614);
			match(TYPE);
			setState(7617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7615);
				match(IF);
				setState(7616);
				match(EXISTS);
				}
			}

			setState(7619);
			((Drop_typeContext)_localctx).name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRowset_function_limited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRowset_function_limited(this);
		}
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_rowset_function_limited);
		try {
			setState(7623);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7621);
				openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7622);
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenqueryContext extends ParserRuleContext {
		public Id_Context linked_server;
		public Token query;
		public TerminalNode OPENQUERY() { return getToken(TSqlParser.OPENQUERY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpenquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpenquery(this);
		}
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7625);
			match(OPENQUERY);
			setState(7626);
			match(LR_BRACKET);
			setState(7627);
			((OpenqueryContext)_localctx).linked_server = id_();
			setState(7628);
			match(COMMA);
			setState(7629);
			((OpenqueryContext)_localctx).query = match(STRING);
			setState(7630);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public Id_Context database;
		public Id_Context scheme;
		public Id_Context table;
		public TerminalNode OPENDATASOURCE() { return getToken(TSqlParser.OPENDATASOURCE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpendatasource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpendatasource(this);
		}
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7632);
			match(OPENDATASOURCE);
			setState(7633);
			match(LR_BRACKET);
			setState(7634);
			((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(7635);
			match(COMMA);
			setState(7636);
			((OpendatasourceContext)_localctx).init = match(STRING);
			setState(7637);
			match(RR_BRACKET);
			setState(7638);
			match(DOT);
			setState(7640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
				{
				setState(7639);
				((OpendatasourceContext)_localctx).database = id_();
				}
			}

			setState(7642);
			match(DOT);
			setState(7644);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
				{
				setState(7643);
				((OpendatasourceContext)_localctx).scheme = id_();
				}
			}

			setState(7646);
			match(DOT);
			{
			setState(7647);
			((OpendatasourceContext)_localctx).table = id_();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public Declare_localContext declare_local;
		public List<Declare_localContext> loc = new ArrayList<Declare_localContext>();
		public Xml_declarationContext xml_declaration;
		public List<Xml_declarationContext> xml_dec = new ArrayList<Xml_declarationContext>();
		public TerminalNode DECLARE() { return getToken(TSqlParser.DECLARE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Declare_localContext> declare_local() {
			return getRuleContexts(Declare_localContext.class);
		}
		public Declare_localContext declare_local(int i) {
			return getRuleContext(Declare_localContext.class,i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return getRuleContext(Xml_type_definitionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public List<Xml_declarationContext> xml_declaration() {
			return getRuleContexts(Xml_declarationContext.class);
		}
		public Xml_declarationContext xml_declaration(int i) {
			return getRuleContext(Xml_declarationContext.class,i);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_statement(this);
		}
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_declare_statement);
		int _la;
		try {
			setState(7694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7649);
				match(DECLARE);
				setState(7650);
				match(LOCAL_ID);
				setState(7652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7651);
					match(AS);
					}
				}

				setState(7654);
				table_type_definition();
				setState(7656);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
				case 1:
					{
					setState(7655);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7658);
				match(DECLARE);
				setState(7659);
				((Declare_statementContext)_localctx).declare_local = declare_local();
				((Declare_statementContext)_localctx).loc.add(((Declare_statementContext)_localctx).declare_local);
				setState(7664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7660);
					match(COMMA);
					setState(7661);
					((Declare_statementContext)_localctx).declare_local = declare_local();
					((Declare_statementContext)_localctx).loc.add(((Declare_statementContext)_localctx).declare_local);
					}
					}
					setState(7666);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
				case 1:
					{
					setState(7667);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7670);
				match(DECLARE);
				setState(7671);
				match(LOCAL_ID);
				setState(7673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7672);
					match(AS);
					}
				}

				setState(7675);
				xml_type_definition();
				setState(7677);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
				case 1:
					{
					setState(7676);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7679);
				match(WITH);
				setState(7680);
				match(XMLNAMESPACES);
				setState(7681);
				match(LR_BRACKET);
				setState(7682);
				((Declare_statementContext)_localctx).xml_declaration = xml_declaration();
				((Declare_statementContext)_localctx).xml_dec.add(((Declare_statementContext)_localctx).xml_declaration);
				setState(7687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7683);
					match(COMMA);
					setState(7684);
					((Declare_statementContext)_localctx).xml_declaration = xml_declaration();
					((Declare_statementContext)_localctx).xml_dec.add(((Declare_statementContext)_localctx).xml_declaration);
					}
					}
					setState(7689);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7690);
				match(RR_BRACKET);
				setState(7692);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1013,_ctx) ) {
				case 1:
					{
					setState(7691);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_declarationContext extends ParserRuleContext {
		public Token xml_namespace_uri;
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Xml_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_declaration(this);
		}
	}

	public final Xml_declarationContext xml_declaration() throws RecognitionException {
		Xml_declarationContext _localctx = new Xml_declarationContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_xml_declaration);
		try {
			setState(7701);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7696);
				((Xml_declarationContext)_localctx).xml_namespace_uri = match(STRING);
				setState(7697);
				match(AS);
				setState(7698);
				id_();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7699);
				match(DEFAULT);
				setState(7700);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode DEALLOCATE() { return getToken(TSqlParser.DEALLOCATE, 0); }
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return getRuleContext(Declare_cursorContext.class,0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return getRuleContext(Fetch_cursorContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCursor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCursor_statement(this);
		}
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_cursor_statement);
		int _la;
		try {
			setState(7732);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7703);
				match(CLOSE);
				setState(7705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1016,_ctx) ) {
				case 1:
					{
					setState(7704);
					match(GLOBAL);
					}
					break;
				}
				setState(7707);
				cursor_name();
				setState(7709);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
				case 1:
					{
					setState(7708);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7711);
				match(DEALLOCATE);
				setState(7713);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1018,_ctx) ) {
				case 1:
					{
					setState(7712);
					match(GLOBAL);
					}
					break;
				}
				setState(7716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CURSOR) {
					{
					setState(7715);
					match(CURSOR);
					}
				}

				setState(7718);
				cursor_name();
				setState(7720);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1020,_ctx) ) {
				case 1:
					{
					setState(7719);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7722);
				declare_cursor();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(7723);
				fetch_cursor();
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 5);
				{
				setState(7724);
				match(OPEN);
				setState(7726);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1021,_ctx) ) {
				case 1:
					{
					setState(7725);
					match(GLOBAL);
					}
					break;
				}
				setState(7728);
				cursor_name();
				setState(7730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1022,_ctx) ) {
				case 1:
					{
					setState(7729);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_databaseContext extends ParserRuleContext {
		public Id_Context database_name;
		public Token file_or_filegroup;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public Id_Context encryptor_name;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode READ_WRITE_FILEGROUPS() { return getToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> FILEGROUP() { return getTokens(TSqlParser.FILEGROUP); }
		public TerminalNode FILEGROUP(int i) {
			return getToken(TSqlParser.FILEGROUP, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> DISK() { return getTokens(TSqlParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(TSqlParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(TSqlParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(TSqlParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(TSqlParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(TSqlParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(TSqlParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(TSqlParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(TSqlParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(TSqlParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(TSqlParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(TSqlParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(TSqlParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(TSqlParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(TSqlParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(TSqlParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(TSqlParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(TSqlParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(TSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(TSqlParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(TSqlParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(TSqlParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(TSqlParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(TSqlParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(TSqlParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(TSqlParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(TSqlParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(TSqlParser.STATS, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(TSqlParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(TSqlParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(TSqlParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(TSqlParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(TSqlParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(TSqlParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(TSqlParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(TSqlParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(TSqlParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(TSqlParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(TSqlParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(TSqlParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(TSqlParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(TSqlParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(TSqlParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(TSqlParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(TSqlParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(TSqlParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(TSqlParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(TSqlParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(TSqlParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(TSqlParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(TSqlParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(TSqlParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(TSqlParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(TSqlParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(TSqlParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(TSqlParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(TSqlParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(TSqlParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(TSqlParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(TSqlParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(TSqlParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(TSqlParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(TSqlParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(TSqlParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(TSqlParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(TSqlParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_database(this);
		}
	}

	public final Backup_databaseContext backup_database() throws RecognitionException {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_backup_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7734);
			match(BACKUP);
			setState(7735);
			match(DATABASE);
			{
			setState(7736);
			((Backup_databaseContext)_localctx).database_name = id_();
			}
			setState(7749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ_WRITE_FILEGROUPS) {
				{
				setState(7737);
				match(READ_WRITE_FILEGROUPS);
				setState(7746);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1025,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7739);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7738);
							match(COMMA);
							}
						}

						setState(7741);
						_la = _input.LA(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7742);
						match(EQUAL);
						setState(7743);
						((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
						}
						} 
					}
					setState(7748);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1025,_ctx);
				}
				}
			}

			setState(7759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FILE || _la==FILEGROUP || _la==COMMA) {
				{
				{
				setState(7752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7751);
					match(COMMA);
					}
				}

				setState(7754);
				_la = _input.LA(1);
				if ( !(_la==FILE || _la==FILEGROUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7755);
				match(EQUAL);
				setState(7756);
				((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
				}
				}
				setState(7761);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1034,_ctx) ) {
			case 1:
				{
				setState(7762);
				match(TO);
				setState(7767); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7764);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7763);
							match(COMMA);
							}
						}

						setState(7766);
						((Backup_databaseContext)_localctx).logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7769); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1030,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7771);
				match(TO);
				setState(7781); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7773);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7772);
							match(COMMA);
							}
						}

						setState(7775);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7776);
						match(EQUAL);
						setState(7779);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7777);
							match(STRING);
							}
							break;
						case OPENJSON:
						case PRECISION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7778);
							id_();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7783); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1033,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(7820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1042,_ctx) ) {
			case 1:
				{
				setState(7797); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7787);
						match(MIRROR);
						setState(7788);
						match(TO);
						setState(7793); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(7790);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(7789);
									match(COMMA);
									}
								}

								setState(7792);
								((Backup_databaseContext)_localctx).logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(7795); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1036,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7799); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1037,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7816); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7801);
						match(MIRROR);
						setState(7802);
						match(TO);
						setState(7812); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(7804);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(7803);
									match(COMMA);
									}
								}

								setState(7806);
								_la = _input.LA(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								setState(7807);
								match(EQUAL);
								setState(7810);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7808);
									match(STRING);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7809);
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(7814); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1040,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7818); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1041,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(7982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1078,_ctx) ) {
			case 1:
				{
				setState(7822);
				match(WITH);
				setState(7979);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1077,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(7977);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1076,_ctx) ) {
						case 1:
							{
							setState(7824);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7823);
								match(COMMA);
								}
							}

							setState(7826);
							match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							setState(7828);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7827);
								match(COMMA);
								}
							}

							setState(7830);
							match(COPY_ONLY);
							}
							break;
						case 3:
							{
							setState(7832);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7831);
								match(COMMA);
								}
							}

							setState(7834);
							_la = _input.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(7836);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7835);
								match(COMMA);
								}
							}

							setState(7838);
							match(DESCRIPTION);
							setState(7839);
							match(EQUAL);
							setState(7842);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7840);
								match(STRING);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7841);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							setState(7845);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7844);
								match(COMMA);
								}
							}

							setState(7847);
							match(NAME);
							setState(7848);
							match(EQUAL);
							setState(7849);
							((Backup_databaseContext)_localctx).backup_set_name = id_();
							}
							break;
						case 6:
							{
							setState(7851);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7850);
								match(COMMA);
								}
							}

							setState(7853);
							match(CREDENTIAL);
							}
							break;
						case 7:
							{
							setState(7855);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7854);
								match(COMMA);
								}
							}

							setState(7857);
							match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							setState(7859);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7858);
								match(COMMA);
								}
							}

							setState(7873);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case EXPIREDATE:
								{
								setState(7861);
								match(EXPIREDATE);
								setState(7862);
								match(EQUAL);
								setState(7865);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7863);
									match(STRING);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7864);
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								setState(7867);
								match(RETAINDAYS);
								setState(7868);
								match(EQUAL);
								setState(7871);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(7869);
									match(DECIMAL);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7870);
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							setState(7876);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7875);
								match(COMMA);
								}
							}

							setState(7878);
							_la = _input.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 10:
							{
							setState(7880);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7879);
								match(COMMA);
								}
							}

							setState(7882);
							_la = _input.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 11:
							{
							setState(7884);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7883);
								match(COMMA);
								}
							}

							setState(7886);
							_la = _input.LA(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 12:
							{
							setState(7888);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7887);
								match(COMMA);
								}
							}

							setState(7890);
							match(MEDIADESCRIPTION);
							setState(7891);
							match(EQUAL);
							setState(7894);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7892);
								match(STRING);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7893);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							setState(7897);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7896);
								match(COMMA);
								}
							}

							setState(7899);
							match(MEDIANAME);
							setState(7900);
							match(EQUAL);
							{
							setState(7901);
							((Backup_databaseContext)_localctx).medianame = match(STRING);
							}
							}
							break;
						case 14:
							{
							setState(7903);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7902);
								match(COMMA);
								}
							}

							setState(7905);
							match(BLOCKSIZE);
							setState(7906);
							match(EQUAL);
							setState(7909);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7907);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7908);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							setState(7912);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7911);
								match(COMMA);
								}
							}

							setState(7914);
							match(BUFFERCOUNT);
							setState(7915);
							match(EQUAL);
							setState(7918);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7916);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7917);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							setState(7921);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7920);
								match(COMMA);
								}
							}

							setState(7923);
							match(MAXTRANSFER);
							setState(7924);
							match(EQUAL);
							setState(7927);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7925);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7926);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							setState(7930);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7929);
								match(COMMA);
								}
							}

							setState(7932);
							_la = _input.LA(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 18:
							{
							setState(7934);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7933);
								match(COMMA);
								}
							}

							setState(7936);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 19:
							{
							setState(7938);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7937);
								match(COMMA);
								}
							}

							setState(7940);
							match(RESTART);
							}
							break;
						case 20:
							{
							setState(7942);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7941);
								match(COMMA);
								}
							}

							setState(7944);
							match(STATS);
							setState(7947);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==EQUAL) {
								{
								setState(7945);
								match(EQUAL);
								setState(7946);
								((Backup_databaseContext)_localctx).stats_percent = match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							setState(7950);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7949);
								match(COMMA);
								}
							}

							setState(7952);
							_la = _input.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 22:
							{
							setState(7954);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7953);
								match(COMMA);
								}
							}

							setState(7956);
							_la = _input.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 23:
							{
							setState(7958);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7957);
								match(COMMA);
								}
							}

							setState(7960);
							match(ENCRYPTION);
							setState(7961);
							match(LR_BRACKET);
							setState(7962);
							match(ALGORITHM);
							setState(7963);
							match(EQUAL);
							setState(7964);
							_la = _input.LA(1);
							if ( !(((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (AES_128 - 198)) | (1L << (AES_192 - 198)) | (1L << (AES_256 - 198)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(7965);
							match(COMMA);
							setState(7966);
							match(SERVER);
							setState(7967);
							match(CERTIFICATE);
							setState(7968);
							match(EQUAL);
							setState(7975);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,1075,_ctx) ) {
							case 1:
								{
								setState(7969);
								((Backup_databaseContext)_localctx).encryptor_name = id_();
								}
								break;
							case 2:
								{
								setState(7970);
								match(SERVER);
								setState(7971);
								match(ASYMMETRIC);
								setState(7972);
								match(KEY);
								setState(7973);
								match(EQUAL);
								setState(7974);
								((Backup_databaseContext)_localctx).encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					setState(7981);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1077,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_logContext extends ParserRuleContext {
		public Id_Context database_name;
		public Id_Context logical_device_name;
		public Id_Context backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public Token undo_file_name;
		public Id_Context encryptor_name;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DISK() { return getTokens(TSqlParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(TSqlParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(TSqlParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(TSqlParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(TSqlParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(TSqlParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(TSqlParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(TSqlParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(TSqlParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(TSqlParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(TSqlParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(TSqlParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(TSqlParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(TSqlParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(TSqlParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(TSqlParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(TSqlParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(TSqlParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(TSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(TSqlParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(TSqlParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(TSqlParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(TSqlParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(TSqlParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(TSqlParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(TSqlParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(TSqlParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(TSqlParser.STATS, i);
		}
		public List<TerminalNode> NO_TRUNCATE() { return getTokens(TSqlParser.NO_TRUNCATE); }
		public TerminalNode NO_TRUNCATE(int i) {
			return getToken(TSqlParser.NO_TRUNCATE, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(TSqlParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(TSqlParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(TSqlParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(TSqlParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(TSqlParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(TSqlParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(TSqlParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(TSqlParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(TSqlParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(TSqlParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(TSqlParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(TSqlParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(TSqlParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(TSqlParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(TSqlParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(TSqlParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(TSqlParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(TSqlParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(TSqlParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(TSqlParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(TSqlParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(TSqlParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(TSqlParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(TSqlParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(TSqlParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(TSqlParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(TSqlParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(TSqlParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(TSqlParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(TSqlParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(TSqlParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(TSqlParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(TSqlParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(TSqlParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(TSqlParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(TSqlParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(TSqlParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(TSqlParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NORECOVERY() { return getTokens(TSqlParser.NORECOVERY); }
		public TerminalNode NORECOVERY(int i) {
			return getToken(TSqlParser.NORECOVERY, i);
		}
		public List<TerminalNode> STANDBY() { return getTokens(TSqlParser.STANDBY); }
		public TerminalNode STANDBY(int i) {
			return getToken(TSqlParser.STANDBY, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_log; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_log(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_log(this);
		}
	}

	public final Backup_logContext backup_log() throws RecognitionException {
		Backup_logContext _localctx = new Backup_logContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_backup_log);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7984);
			match(BACKUP);
			setState(7985);
			match(LOG);
			{
			setState(7986);
			((Backup_logContext)_localctx).database_name = id_();
			}
			setState(8010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1084,_ctx) ) {
			case 1:
				{
				setState(7987);
				match(TO);
				setState(7992); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7989);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7988);
							match(COMMA);
							}
						}

						setState(7991);
						((Backup_logContext)_localctx).logical_device_name = id_();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7994); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1080,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7996);
				match(TO);
				setState(8006); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7998);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7997);
							match(COMMA);
							}
						}

						setState(8000);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8001);
						match(EQUAL);
						setState(8004);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(8002);
							match(STRING);
							}
							break;
						case OPENJSON:
						case PRECISION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(8003);
							id_();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8008); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1083,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(8045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
			case 1:
				{
				setState(8022); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(8012);
						match(MIRROR);
						setState(8013);
						match(TO);
						setState(8018); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(8015);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(8014);
									match(COMMA);
									}
								}

								setState(8017);
								((Backup_logContext)_localctx).logical_device_name = id_();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(8020); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1086,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8024); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1087,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(8041); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(8026);
						match(MIRROR);
						setState(8027);
						match(TO);
						setState(8037); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(8029);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(8028);
									match(COMMA);
									}
								}

								setState(8031);
								_la = _input.LA(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								setState(8032);
								match(EQUAL);
								setState(8035);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(8033);
									match(STRING);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(8034);
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(8039); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1090,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8043); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1091,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(8220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1131,_ctx) ) {
			case 1:
				{
				setState(8047);
				match(WITH);
				setState(8217);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1130,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(8215);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1129,_ctx) ) {
						case 1:
							{
							setState(8049);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8048);
								match(COMMA);
								}
							}

							setState(8051);
							match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							setState(8053);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8052);
								match(COMMA);
								}
							}

							setState(8055);
							match(COPY_ONLY);
							}
							break;
						case 3:
							{
							setState(8057);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8056);
								match(COMMA);
								}
							}

							setState(8059);
							_la = _input.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(8061);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8060);
								match(COMMA);
								}
							}

							setState(8063);
							match(DESCRIPTION);
							setState(8064);
							match(EQUAL);
							setState(8067);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(8065);
								match(STRING);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(8066);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							setState(8070);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8069);
								match(COMMA);
								}
							}

							setState(8072);
							match(NAME);
							setState(8073);
							match(EQUAL);
							setState(8074);
							((Backup_logContext)_localctx).backup_set_name = id_();
							}
							break;
						case 6:
							{
							setState(8076);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8075);
								match(COMMA);
								}
							}

							setState(8078);
							match(CREDENTIAL);
							}
							break;
						case 7:
							{
							setState(8080);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8079);
								match(COMMA);
								}
							}

							setState(8082);
							match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							setState(8084);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8083);
								match(COMMA);
								}
							}

							setState(8098);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case EXPIREDATE:
								{
								setState(8086);
								match(EXPIREDATE);
								setState(8087);
								match(EQUAL);
								setState(8090);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(8088);
									match(STRING);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(8089);
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								setState(8092);
								match(RETAINDAYS);
								setState(8093);
								match(EQUAL);
								setState(8096);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(8094);
									match(DECIMAL);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(8095);
									id_();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							setState(8101);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8100);
								match(COMMA);
								}
							}

							setState(8103);
							_la = _input.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 10:
							{
							setState(8105);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8104);
								match(COMMA);
								}
							}

							setState(8107);
							_la = _input.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 11:
							{
							setState(8109);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8108);
								match(COMMA);
								}
							}

							setState(8111);
							_la = _input.LA(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 12:
							{
							setState(8113);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8112);
								match(COMMA);
								}
							}

							setState(8115);
							match(MEDIADESCRIPTION);
							setState(8116);
							match(EQUAL);
							setState(8119);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(8117);
								match(STRING);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(8118);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							setState(8122);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8121);
								match(COMMA);
								}
							}

							setState(8124);
							match(MEDIANAME);
							setState(8125);
							match(EQUAL);
							{
							setState(8126);
							((Backup_logContext)_localctx).medianame = match(STRING);
							}
							}
							break;
						case 14:
							{
							setState(8128);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8127);
								match(COMMA);
								}
							}

							setState(8130);
							match(BLOCKSIZE);
							setState(8131);
							match(EQUAL);
							setState(8134);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(8132);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(8133);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							setState(8137);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8136);
								match(COMMA);
								}
							}

							setState(8139);
							match(BUFFERCOUNT);
							setState(8140);
							match(EQUAL);
							setState(8143);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(8141);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(8142);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							setState(8146);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8145);
								match(COMMA);
								}
							}

							setState(8148);
							match(MAXTRANSFER);
							setState(8149);
							match(EQUAL);
							setState(8152);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(8150);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(8151);
								id_();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							setState(8155);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8154);
								match(COMMA);
								}
							}

							setState(8157);
							_la = _input.LA(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 18:
							{
							setState(8159);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8158);
								match(COMMA);
								}
							}

							setState(8161);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 19:
							{
							setState(8163);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8162);
								match(COMMA);
								}
							}

							setState(8165);
							match(RESTART);
							}
							break;
						case 20:
							{
							setState(8167);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8166);
								match(COMMA);
								}
							}

							setState(8169);
							match(STATS);
							setState(8172);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==EQUAL) {
								{
								setState(8170);
								match(EQUAL);
								setState(8171);
								((Backup_logContext)_localctx).stats_percent = match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							setState(8175);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8174);
								match(COMMA);
								}
							}

							setState(8177);
							_la = _input.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 22:
							{
							setState(8179);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8178);
								match(COMMA);
								}
							}

							setState(8181);
							_la = _input.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 23:
							{
							setState(8183);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8182);
								match(COMMA);
								}
							}

							setState(8189);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case NORECOVERY:
								{
								setState(8185);
								match(NORECOVERY);
								}
								break;
							case STANDBY:
								{
								setState(8186);
								match(STANDBY);
								setState(8187);
								match(EQUAL);
								setState(8188);
								((Backup_logContext)_localctx).undo_file_name = match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 24:
							{
							setState(8192);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8191);
								match(COMMA);
								}
							}

							setState(8194);
							match(NO_TRUNCATE);
							}
							break;
						case 25:
							{
							setState(8196);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8195);
								match(COMMA);
								}
							}

							setState(8198);
							match(ENCRYPTION);
							setState(8199);
							match(LR_BRACKET);
							setState(8200);
							match(ALGORITHM);
							setState(8201);
							match(EQUAL);
							setState(8202);
							_la = _input.LA(1);
							if ( !(((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (AES_128 - 198)) | (1L << (AES_192 - 198)) | (1L << (AES_256 - 198)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(8203);
							match(COMMA);
							setState(8204);
							match(SERVER);
							setState(8205);
							match(CERTIFICATE);
							setState(8206);
							match(EQUAL);
							setState(8213);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,1128,_ctx) ) {
							case 1:
								{
								setState(8207);
								((Backup_logContext)_localctx).encryptor_name = id_();
								}
								break;
							case 2:
								{
								setState(8208);
								match(SERVER);
								setState(8209);
								match(ASYMMETRIC);
								setState(8210);
								match(KEY);
								setState(8211);
								match(EQUAL);
								setState(8212);
								((Backup_logContext)_localctx).encryptor_name = id_();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					setState(8219);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1130,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_certificateContext extends ParserRuleContext {
		public Id_Context certname;
		public Token cert_file;
		public Token private_key_file;
		public Token encryption_password;
		public Token decryption_pasword;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(TSqlParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(TSqlParser.DECRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_certificate(this);
		}
	}

	public final Backup_certificateContext backup_certificate() throws RecognitionException {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_backup_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8222);
			match(BACKUP);
			setState(8223);
			match(CERTIFICATE);
			setState(8224);
			((Backup_certificateContext)_localctx).certname = id_();
			setState(8225);
			match(TO);
			setState(8226);
			match(FILE);
			setState(8227);
			match(EQUAL);
			setState(8228);
			((Backup_certificateContext)_localctx).cert_file = match(STRING);
			setState(8260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1137,_ctx) ) {
			case 1:
				{
				setState(8229);
				match(WITH);
				setState(8230);
				match(PRIVATE);
				setState(8231);
				match(KEY);
				setState(8232);
				match(LR_BRACKET);
				setState(8255); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(8255);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1135,_ctx) ) {
					case 1:
						{
						setState(8234);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8233);
							match(COMMA);
							}
						}

						setState(8236);
						match(FILE);
						setState(8237);
						match(EQUAL);
						setState(8238);
						((Backup_certificateContext)_localctx).private_key_file = match(STRING);
						}
						break;
					case 2:
						{
						setState(8240);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8239);
							match(COMMA);
							}
						}

						setState(8242);
						match(ENCRYPTION);
						setState(8243);
						match(BY);
						setState(8244);
						match(PASSWORD);
						setState(8245);
						match(EQUAL);
						setState(8246);
						((Backup_certificateContext)_localctx).encryption_password = match(STRING);
						}
						break;
					case 3:
						{
						setState(8248);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8247);
							match(COMMA);
							}
						}

						setState(8250);
						match(DECRYPTION);
						setState(8251);
						match(BY);
						setState(8252);
						match(PASSWORD);
						setState(8253);
						match(EQUAL);
						setState(8254);
						((Backup_certificateContext)_localctx).decryption_pasword = match(STRING);
						}
						break;
					}
					}
					setState(8257); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION || _la==COMMA );
				setState(8259);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_master_keyContext extends ParserRuleContext {
		public Token master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_master_key(this);
		}
	}

	public final Backup_master_keyContext backup_master_key() throws RecognitionException {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_backup_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8262);
			match(BACKUP);
			setState(8263);
			match(MASTER);
			setState(8264);
			match(KEY);
			setState(8265);
			match(TO);
			setState(8266);
			match(FILE);
			setState(8267);
			match(EQUAL);
			setState(8268);
			((Backup_master_keyContext)_localctx).master_key_backup_file = match(STRING);
			setState(8269);
			match(ENCRYPTION);
			setState(8270);
			match(BY);
			setState(8271);
			match(PASSWORD);
			setState(8272);
			match(EQUAL);
			setState(8273);
			((Backup_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_service_master_keyContext extends ParserRuleContext {
		public Token service_master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_service_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_service_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_service_master_key(this);
		}
	}

	public final Backup_service_master_keyContext backup_service_master_key() throws RecognitionException {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_backup_service_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8275);
			match(BACKUP);
			setState(8276);
			match(SERVICE);
			setState(8277);
			match(MASTER);
			setState(8278);
			match(KEY);
			setState(8279);
			match(TO);
			setState(8280);
			match(FILE);
			setState(8281);
			match(EQUAL);
			setState(8282);
			((Backup_service_master_keyContext)_localctx).service_master_key_backup_file = match(STRING);
			setState(8283);
			match(ENCRYPTION);
			setState(8284);
			match(BY);
			setState(8285);
			match(PASSWORD);
			setState(8286);
			match(EQUAL);
			setState(8287);
			((Backup_service_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_statementContext extends ParserRuleContext {
		public TerminalNode KILL() { return getToken(TSqlParser.KILL, 0); }
		public Kill_processContext kill_process() {
			return getRuleContext(Kill_processContext.class,0);
		}
		public Kill_query_notificationContext kill_query_notification() {
			return getRuleContext(Kill_query_notificationContext.class,0);
		}
		public Kill_stats_jobContext kill_stats_job() {
			return getRuleContext(Kill_stats_jobContext.class,0);
		}
		public Kill_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterKill_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitKill_statement(this);
		}
	}

	public final Kill_statementContext kill_statement() throws RecognitionException {
		Kill_statementContext _localctx = new Kill_statementContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_kill_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8289);
			match(KILL);
			setState(8293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UOW:
			case DECIMAL:
			case STRING:
				{
				setState(8290);
				kill_process();
				}
				break;
			case QUERY:
				{
				setState(8291);
				kill_query_notification();
				}
				break;
			case STATS:
				{
				setState(8292);
				kill_stats_job();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_processContext extends ParserRuleContext {
		public Token session_id;
		public TerminalNode UOW() { return getToken(TSqlParser.UOW, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATUSONLY() { return getToken(TSqlParser.STATUSONLY, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Kill_processContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_process; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterKill_process(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitKill_process(this);
		}
	}

	public final Kill_processContext kill_process() throws RecognitionException {
		Kill_processContext _localctx = new Kill_processContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_kill_process);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
				{
				setState(8295);
				((Kill_processContext)_localctx).session_id = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
					((Kill_processContext)_localctx).session_id = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UOW:
				{
				setState(8296);
				match(UOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1140,_ctx) ) {
			case 1:
				{
				setState(8299);
				match(WITH);
				setState(8300);
				match(STATUSONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_query_notificationContext extends ParserRuleContext {
		public Token subscription_id;
		public TerminalNode QUERY() { return getToken(TSqlParser.QUERY, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(TSqlParser.SUBSCRIPTION, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Kill_query_notificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_query_notification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterKill_query_notification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitKill_query_notification(this);
		}
	}

	public final Kill_query_notificationContext kill_query_notification() throws RecognitionException {
		Kill_query_notificationContext _localctx = new Kill_query_notificationContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_kill_query_notification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8303);
			match(QUERY);
			setState(8304);
			match(NOTIFICATION);
			setState(8305);
			match(SUBSCRIPTION);
			setState(8308);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(8306);
				match(ALL);
				}
				break;
			case DECIMAL:
				{
				setState(8307);
				((Kill_query_notificationContext)_localctx).subscription_id = match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_stats_jobContext extends ParserRuleContext {
		public Token job_id;
		public TerminalNode STATS() { return getToken(TSqlParser.STATS, 0); }
		public TerminalNode JOB() { return getToken(TSqlParser.JOB, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Kill_stats_jobContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_stats_job; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterKill_stats_job(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitKill_stats_job(this);
		}
	}

	public final Kill_stats_jobContext kill_stats_job() throws RecognitionException {
		Kill_stats_jobContext _localctx = new Kill_stats_jobContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_kill_stats_job);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8310);
			match(STATS);
			setState(8311);
			match(JOB);
			setState(8312);
			((Kill_stats_jobContext)_localctx).job_id = match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return getRuleContext(Execute_bodyContext.class,0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_statement(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_execute_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8314);
			match(EXECUTE);
			setState(8315);
			execute_body();
			setState(8317);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1142,_ctx) ) {
			case 1:
				{
				setState(8316);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_body_batchContext extends ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public Execute_body_batchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_body_batch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_body_batch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_body_batch(this);
		}
	}

	public final Execute_body_batchContext execute_body_batch() throws RecognitionException {
		Execute_body_batchContext _localctx = new Execute_body_batchContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_execute_body_batch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8319);
			func_proc_name_server_database_schema();
			setState(8328);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1144,_ctx) ) {
			case 1:
				{
				setState(8320);
				execute_statement_arg();
				setState(8325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8321);
					match(COMMA);
					setState(8322);
					execute_statement_arg();
					}
					}
					setState(8327);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(8331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1145,_ctx) ) {
			case 1:
				{
				setState(8330);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_bodyContext extends ParserRuleContext {
		public Token return_status;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public Execute_statement_argContext execute_statement_arg() {
			return getRuleContext(Execute_statement_argContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_body(this);
		}
	}

	public final Execute_bodyContext execute_body() throws RecognitionException {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_execute_body);
		int _la;
		try {
			setState(8362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
			case STRING:
			case DOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8335);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1146,_ctx) ) {
				case 1:
					{
					setState(8333);
					((Execute_bodyContext)_localctx).return_status = match(LOCAL_ID);
					setState(8334);
					match(EQUAL);
					}
					break;
				}
				setState(8339);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(8337);
					func_proc_name_server_database_schema();
					}
					break;
				case LOCAL_ID:
				case STRING:
					{
					setState(8338);
					execute_var_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8342);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1148,_ctx) ) {
				case 1:
					{
					setState(8341);
					execute_statement_arg();
					}
					break;
				}
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8344);
				match(LR_BRACKET);
				setState(8345);
				execute_var_string();
				setState(8350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(8346);
					match(PLUS);
					setState(8347);
					execute_var_string();
					}
					}
					setState(8352);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8353);
				match(RR_BRACKET);
				setState(8360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1151,_ctx) ) {
				case 1:
					{
					setState(8355);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(8354);
						match(AS);
						}
					}

					setState(8357);
					_la = _input.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8358);
					match(EQUAL);
					setState(8359);
					match(STRING);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_argContext extends ParserRuleContext {
		public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
			return getRuleContext(Execute_statement_arg_unnamedContext.class,0);
		}
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public List<Execute_statement_arg_namedContext> execute_statement_arg_named() {
			return getRuleContexts(Execute_statement_arg_namedContext.class);
		}
		public Execute_statement_arg_namedContext execute_statement_arg_named(int i) {
			return getRuleContext(Execute_statement_arg_namedContext.class,i);
		}
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_statement_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_statement_arg(this);
		}
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_execute_statement_arg);
		try {
			int _alt;
			setState(8380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1155,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8364);
				execute_statement_arg_unnamed();
				setState(8369);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1153,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8365);
						match(COMMA);
						setState(8366);
						execute_statement_arg();
						}
						} 
					}
					setState(8371);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1153,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8372);
				execute_statement_arg_named();
				setState(8377);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1154,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8373);
						match(COMMA);
						setState(8374);
						execute_statement_arg_named();
						}
						} 
					}
					setState(8379);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1154,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_arg_namedContext extends ParserRuleContext {
		public Token name;
		public Execute_parameterContext value;
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Execute_parameterContext execute_parameter() {
			return getRuleContext(Execute_parameterContext.class,0);
		}
		public Execute_statement_arg_namedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg_named; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_statement_arg_named(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_statement_arg_named(this);
		}
	}

	public final Execute_statement_arg_namedContext execute_statement_arg_named() throws RecognitionException {
		Execute_statement_arg_namedContext _localctx = new Execute_statement_arg_namedContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_execute_statement_arg_named);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8382);
			((Execute_statement_arg_namedContext)_localctx).name = match(LOCAL_ID);
			setState(8383);
			match(EQUAL);
			setState(8384);
			((Execute_statement_arg_namedContext)_localctx).value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_arg_unnamedContext extends ParserRuleContext {
		public Execute_parameterContext value;
		public Execute_parameterContext execute_parameter() {
			return getRuleContext(Execute_parameterContext.class,0);
		}
		public Execute_statement_arg_unnamedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg_unnamed; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_statement_arg_unnamed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_statement_arg_unnamed(this);
		}
	}

	public final Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() throws RecognitionException {
		Execute_statement_arg_unnamedContext _localctx = new Execute_statement_arg_unnamedContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_execute_statement_arg_unnamed);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8386);
			((Execute_statement_arg_unnamedContext)_localctx).value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_parameterContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public Execute_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_parameter(this);
		}
	}

	public final Execute_parameterContext execute_parameter() throws RecognitionException {
		Execute_parameterContext _localctx = new Execute_parameterContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_execute_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8396);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(8388);
				constant();
				}
				break;
			case LOCAL_ID:
				{
				setState(8389);
				match(LOCAL_ID);
				setState(8391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1156,_ctx) ) {
				case 1:
					{
					setState(8390);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(8393);
				id_();
				}
				break;
			case DEFAULT:
				{
				setState(8394);
				match(DEFAULT);
				}
				break;
			case NULL_:
				{
				setState(8395);
				match(NULL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_var_stringContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_var_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_var_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_var_string(this);
		}
	}

	public final Execute_var_stringContext execute_var_string() throws RecognitionException {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_execute_var_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8398);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_statementContext extends ParserRuleContext {
		public Table_nameContext on_id;
		public Principal_idContext principal_id;
		public List<Principal_idContext> to_principal = new ArrayList<Principal_idContext>();
		public Principal_idContext as_principal;
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public List<TerminalNode> GRANT() { return getTokens(TSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(TSqlParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<Principal_idContext> principal_id() {
			return getRuleContexts(Principal_idContext.class);
		}
		public Principal_idContext principal_id(int i) {
			return getRuleContext(Principal_idContext.class,i);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return getRuleContext(Grant_permissionContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(TSqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode REVERT() { return getToken(TSqlParser.REVERT, 0); }
		public TerminalNode COOKIE() { return getToken(TSqlParser.COOKIE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return getRuleContext(Open_keyContext.class,0);
		}
		public Close_keyContext close_key() {
			return getRuleContext(Close_keyContext.class,0);
		}
		public Create_keyContext create_key() {
			return getRuleContext(Create_keyContext.class,0);
		}
		public Create_certificateContext create_certificate() {
			return getRuleContext(Create_certificateContext.class,0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSecurity_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSecurity_statement(this);
		}
	}

	public final Security_statementContext security_statement() throws RecognitionException {
		Security_statementContext _localctx = new Security_statementContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_security_statement);
		int _la;
		try {
			setState(8459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8400);
				execute_clause();
				setState(8402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1158,_ctx) ) {
				case 1:
					{
					setState(8401);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8404);
				match(GRANT);
				setState(8416);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(8405);
					match(ALL);
					setState(8407);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(8406);
						match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					setState(8409);
					grant_permission();
					setState(8414);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LR_BRACKET) {
						{
						setState(8410);
						match(LR_BRACKET);
						setState(8411);
						column_name_list();
						setState(8412);
						match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8418);
					match(ON);
					setState(8419);
					((Security_statementContext)_localctx).on_id = table_name();
					}
				}

				setState(8422);
				match(TO);
				setState(8423);
				((Security_statementContext)_localctx).principal_id = principal_id();
				((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).principal_id);
				setState(8428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8424);
					match(COMMA);
					setState(8425);
					((Security_statementContext)_localctx).principal_id = principal_id();
					((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).principal_id);
					}
					}
					setState(8430);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8434);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1164,_ctx) ) {
				case 1:
					{
					setState(8431);
					match(WITH);
					setState(8432);
					match(GRANT);
					setState(8433);
					match(OPTION);
					}
					break;
				}
				setState(8438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8436);
					match(AS);
					setState(8437);
					((Security_statementContext)_localctx).as_principal = principal_id();
					}
				}

				setState(8441);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1166,_ctx) ) {
				case 1:
					{
					setState(8440);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8443);
				match(REVERT);
				setState(8450);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1167,_ctx) ) {
				case 1:
					{
					setState(8444);
					match(LR_BRACKET);
					setState(8445);
					match(WITH);
					setState(8446);
					match(COOKIE);
					setState(8447);
					match(EQUAL);
					setState(8448);
					match(LOCAL_ID);
					setState(8449);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8453);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1168,_ctx) ) {
				case 1:
					{
					setState(8452);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8455);
				open_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8456);
				close_key();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8457);
				create_key();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8458);
				create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Principal_idContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(TSqlParser.PUBLIC, 0); }
		public Principal_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_principal_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrincipal_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrincipal_id(this);
		}
	}

	public final Principal_idContext principal_id() throws RecognitionException {
		Principal_idContext _localctx = new Principal_idContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_principal_id);
		try {
			setState(8464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8462);
				id_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8463);
				match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_certificateContext extends ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context user_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return getRuleContext(Existing_keysContext.class,0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return getRuleContext(Generate_new_keysContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_certificate(this);
		}
	}

	public final Create_certificateContext create_certificate() throws RecognitionException {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_create_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8466);
			match(CREATE);
			setState(8467);
			match(CERTIFICATE);
			setState(8468);
			((Create_certificateContext)_localctx).certificate_name = id_();
			setState(8471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(8469);
				match(AUTHORIZATION);
				setState(8470);
				((Create_certificateContext)_localctx).user_name = id_();
				}
			}

			setState(8476);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(8473);
				match(FROM);
				setState(8474);
				existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				setState(8475);
				generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1173,_ctx) ) {
			case 1:
				{
				setState(8478);
				match(ACTIVE);
				setState(8479);
				match(FOR);
				setState(8480);
				match(BEGIN);
				setState(8481);
				match(DIALOG);
				setState(8482);
				match(EQUAL);
				setState(8483);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_keysContext extends ParserRuleContext {
		public Id_Context assembly_name;
		public Token path_to_file;
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode EXECUTABLE() { return getToken(TSqlParser.EXECUTABLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return getRuleContext(Private_key_optionsContext.class,0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExisting_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExisting_keys(this);
		}
	}

	public final Existing_keysContext existing_keys() throws RecognitionException {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_existing_keys);
		int _la;
		try {
			setState(8503);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASSEMBLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(8486);
				match(ASSEMBLY);
				setState(8487);
				((Existing_keysContext)_localctx).assembly_name = id_();
				}
				break;
			case FILE:
			case EXECUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTABLE) {
					{
					setState(8488);
					match(EXECUTABLE);
					}
				}

				setState(8491);
				match(FILE);
				setState(8492);
				match(EQUAL);
				setState(8493);
				((Existing_keysContext)_localctx).path_to_file = match(STRING);
				setState(8501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1175,_ctx) ) {
				case 1:
					{
					setState(8494);
					match(WITH);
					setState(8495);
					match(PRIVATE);
					setState(8496);
					match(KEY);
					setState(8497);
					match(LR_BRACKET);
					setState(8498);
					private_key_options();
					setState(8499);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Private_key_optionsContext extends ParserRuleContext {
		public Token path;
		public Token password;
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_private_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrivate_key_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrivate_key_options(this);
		}
	}

	public final Private_key_optionsContext private_key_options() throws RecognitionException {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_private_key_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8505);
			_la = _input.LA(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8506);
			match(EQUAL);
			setState(8507);
			((Private_key_optionsContext)_localctx).path = match(STRING);
			setState(8514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8508);
				match(COMMA);
				setState(8509);
				_la = _input.LA(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8510);
				match(BY);
				setState(8511);
				match(PASSWORD);
				setState(8512);
				match(EQUAL);
				setState(8513);
				((Private_key_optionsContext)_localctx).password = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generate_new_keysContext extends ParserRuleContext {
		public Token password;
		public Token certificate_subject_name;
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SUBJECT() { return getToken(TSqlParser.SUBJECT, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<Date_optionsContext> date_options() {
			return getRuleContexts(Date_optionsContext.class);
		}
		public Date_optionsContext date_options(int i) {
			return getRuleContext(Date_optionsContext.class,i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generate_new_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGenerate_new_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGenerate_new_keys(this);
		}
	}

	public final Generate_new_keysContext generate_new_keys() throws RecognitionException {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_generate_new_keys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(8516);
				match(ENCRYPTION);
				setState(8517);
				match(BY);
				setState(8518);
				match(PASSWORD);
				setState(8519);
				match(EQUAL);
				setState(8520);
				((Generate_new_keysContext)_localctx).password = match(STRING);
				}
			}

			setState(8523);
			match(WITH);
			setState(8524);
			match(SUBJECT);
			setState(8525);
			match(EQUAL);
			setState(8526);
			((Generate_new_keysContext)_localctx).certificate_subject_name = match(STRING);
			setState(8531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8527);
				match(COMMA);
				setState(8528);
				date_options();
				}
				}
				setState(8533);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_optionsContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode START_DATE() { return getToken(TSqlParser.START_DATE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDate_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDate_options(this);
		}
	}

	public final Date_optionsContext date_options() throws RecognitionException {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_date_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8534);
			_la = _input.LA(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8535);
			match(EQUAL);
			setState(8536);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_keyContext extends ParserRuleContext {
		public Id_Context key_name;
		public Token password;
		public TerminalNode OPEN() { return getToken(TSqlParser.OPEN, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return getRuleContext(Decryption_mechanismContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpen_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpen_key(this);
		}
	}

	public final Open_keyContext open_key() throws RecognitionException {
		Open_keyContext _localctx = new Open_keyContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_open_key);
		try {
			setState(8554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1180,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8538);
				match(OPEN);
				setState(8539);
				match(SYMMETRIC);
				setState(8540);
				match(KEY);
				setState(8541);
				((Open_keyContext)_localctx).key_name = id_();
				setState(8542);
				match(DECRYPTION);
				setState(8543);
				match(BY);
				setState(8544);
				decryption_mechanism();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8546);
				match(OPEN);
				setState(8547);
				match(MASTER);
				setState(8548);
				match(KEY);
				setState(8549);
				match(DECRYPTION);
				setState(8550);
				match(BY);
				setState(8551);
				match(PASSWORD);
				setState(8552);
				match(EQUAL);
				setState(8553);
				((Open_keyContext)_localctx).password = match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_keyContext extends ParserRuleContext {
		public Id_Context key_name;
		public TerminalNode CLOSE() { return getToken(TSqlParser.CLOSE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode KEYS() { return getToken(TSqlParser.KEYS, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClose_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClose_key(this);
		}
	}

	public final Close_keyContext close_key() throws RecognitionException {
		Close_keyContext _localctx = new Close_keyContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_close_key);
		try {
			setState(8567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8556);
				match(CLOSE);
				setState(8557);
				match(SYMMETRIC);
				setState(8558);
				match(KEY);
				setState(8559);
				((Close_keyContext)_localctx).key_name = id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8560);
				match(CLOSE);
				setState(8561);
				match(ALL);
				setState(8562);
				match(SYMMETRIC);
				setState(8563);
				match(KEYS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8564);
				match(CLOSE);
				setState(8565);
				match(MASTER);
				setState(8566);
				match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_keyContext extends ParserRuleContext {
		public Token password;
		public Id_Context key_name;
		public Id_Context user_name;
		public Id_Context provider_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public List<Key_optionsContext> key_options() {
			return getRuleContexts(Key_optionsContext.class);
		}
		public Key_optionsContext key_options(int i) {
			return getRuleContext(Key_optionsContext.class,i);
		}
		public List<Encryption_mechanismContext> encryption_mechanism() {
			return getRuleContexts(Encryption_mechanismContext.class);
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return getRuleContext(Encryption_mechanismContext.class,i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_key(this);
		}
	}

	public final Create_keyContext create_key() throws RecognitionException {
		Create_keyContext _localctx = new Create_keyContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_create_key);
		int _la;
		try {
			int _alt;
			setState(8604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1187,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8569);
				match(CREATE);
				setState(8570);
				match(MASTER);
				setState(8571);
				match(KEY);
				setState(8572);
				match(ENCRYPTION);
				setState(8573);
				match(BY);
				setState(8574);
				match(PASSWORD);
				setState(8575);
				match(EQUAL);
				setState(8576);
				((Create_keyContext)_localctx).password = match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8577);
				match(CREATE);
				setState(8578);
				match(SYMMETRIC);
				setState(8579);
				match(KEY);
				setState(8580);
				((Create_keyContext)_localctx).key_name = id_();
				setState(8583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(8581);
					match(AUTHORIZATION);
					setState(8582);
					((Create_keyContext)_localctx).user_name = id_();
					}
				}

				setState(8588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(8585);
					match(FROM);
					setState(8586);
					match(PROVIDER);
					setState(8587);
					((Create_keyContext)_localctx).provider_name = id_();
					}
				}

				setState(8590);
				match(WITH);
				setState(8600); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(8595);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ALGORITHM:
						case CREATION_DISPOSITION:
						case IDENTITY_VALUE:
						case KEY_SOURCE:
						case PROVIDER_KEY_NAME:
							{
							setState(8591);
							key_options();
							}
							break;
						case ENCRYPTION:
							{
							setState(8592);
							match(ENCRYPTION);
							setState(8593);
							match(BY);
							setState(8594);
							encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(8598);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8597);
							match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8602); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1186,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_optionsContext extends ParserRuleContext {
		public Token pass_phrase;
		public Token identity_phrase;
		public Token key_name_in_provider;
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return getRuleContext(AlgorithmContext.class,0);
		}
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterKey_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitKey_options(this);
		}
	}

	public final Key_optionsContext key_options() throws RecognitionException {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_key_options);
		int _la;
		try {
			setState(8621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8606);
				match(KEY_SOURCE);
				setState(8607);
				match(EQUAL);
				setState(8608);
				((Key_optionsContext)_localctx).pass_phrase = match(STRING);
				}
				break;
			case ALGORITHM:
				enterOuterAlt(_localctx, 2);
				{
				setState(8609);
				match(ALGORITHM);
				setState(8610);
				match(EQUAL);
				setState(8611);
				algorithm();
				}
				break;
			case IDENTITY_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8612);
				match(IDENTITY_VALUE);
				setState(8613);
				match(EQUAL);
				setState(8614);
				((Key_optionsContext)_localctx).identity_phrase = match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(8615);
				match(PROVIDER_KEY_NAME);
				setState(8616);
				match(EQUAL);
				setState(8617);
				((Key_optionsContext)_localctx).key_name_in_provider = match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				enterOuterAlt(_localctx, 5);
				{
				setState(8618);
				match(CREATION_DISPOSITION);
				setState(8619);
				match(EQUAL);
				setState(8620);
				_la = _input.LA(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlgorithmContext extends ParserRuleContext {
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_algorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlgorithm(this);
		}
	}

	public final AlgorithmContext algorithm() throws RecognitionException {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_algorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8623);
			_la = _input.LA(1);
			if ( !(((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (AES_128 - 198)) | (1L << (AES_192 - 198)) | (1L << (AES_256 - 198)))) != 0) || _la==DES || _la==DESX || ((((_la - 486)) & ~0x3f) == 0 && ((1L << (_la - 486)) & ((1L << (RC2 - 486)) | (1L << (RC4 - 486)) | (1L << (RC4_128 - 486)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encryption_mechanismContext extends ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEncryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEncryption_mechanism(this);
		}
	}

	public final Encryption_mechanismContext encryption_mechanism() throws RecognitionException {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_encryption_mechanism);
		try {
			setState(8636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8625);
				match(CERTIFICATE);
				setState(8626);
				((Encryption_mechanismContext)_localctx).certificate_name = id_();
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(8627);
				match(ASYMMETRIC);
				setState(8628);
				match(KEY);
				setState(8629);
				((Encryption_mechanismContext)_localctx).asym_key_name = id_();
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8630);
				match(SYMMETRIC);
				setState(8631);
				match(KEY);
				setState(8632);
				((Encryption_mechanismContext)_localctx).decrypting_Key_name = id_();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(8633);
				match(PASSWORD);
				setState(8634);
				match(EQUAL);
				setState(8635);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decryption_mechanismContext extends ParserRuleContext {
		public Id_Context certificate_name;
		public Id_Context asym_key_name;
		public Id_Context decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDecryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDecryption_mechanism(this);
		}
	}

	public final Decryption_mechanismContext decryption_mechanism() throws RecognitionException {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_decryption_mechanism);
		try {
			setState(8661);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8638);
				match(CERTIFICATE);
				setState(8639);
				((Decryption_mechanismContext)_localctx).certificate_name = id_();
				setState(8644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1190,_ctx) ) {
				case 1:
					{
					setState(8640);
					match(WITH);
					setState(8641);
					match(PASSWORD);
					setState(8642);
					match(EQUAL);
					setState(8643);
					match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(8646);
				match(ASYMMETRIC);
				setState(8647);
				match(KEY);
				setState(8648);
				((Decryption_mechanismContext)_localctx).asym_key_name = id_();
				setState(8653);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1191,_ctx) ) {
				case 1:
					{
					setState(8649);
					match(WITH);
					setState(8650);
					match(PASSWORD);
					setState(8651);
					match(EQUAL);
					setState(8652);
					match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8655);
				match(SYMMETRIC);
				setState(8656);
				match(KEY);
				setState(8657);
				((Decryption_mechanismContext)_localctx).decrypting_Key_name = id_();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(8658);
				match(PASSWORD);
				setState(8659);
				match(EQUAL);
				setState(8660);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_permissionContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode TAKE() { return getToken(TSqlParser.TAKE, 0); }
		public TerminalNode CONTROL() { return getToken(TSqlParser.CONTROL, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(TSqlParser.SHOWPLAN, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSqlParser.IMPERSONATE, 0); }
		public TerminalNode SELECT() { return getToken(TSqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGrant_permission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGrant_permission(this);
		}
	}

	public final Grant_permissionContext grant_permission() throws RecognitionException {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_grant_permission);
		int _la;
		try {
			setState(8689);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8663);
				match(EXECUTE);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 2);
				{
				setState(8664);
				match(VIEW);
				setState(8665);
				id_();
				}
				break;
			case TAKE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8666);
				match(TAKE);
				setState(8667);
				id_();
				}
				break;
			case CONTROL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8668);
				match(CONTROL);
				setState(8670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(8669);
					id_();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8672);
				match(CREATE);
				setState(8673);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHOWPLAN:
				enterOuterAlt(_localctx, 6);
				{
				setState(8674);
				match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8675);
				match(IMPERSONATE);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 8);
				{
				setState(8676);
				match(SELECT);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 9);
				{
				setState(8677);
				match(REFERENCES);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 10);
				{
				setState(8678);
				match(INSERT);
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 11);
				{
				setState(8679);
				match(ALTER);
				setState(8687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY || _la==DATABASE || _la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(8681);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ANY) {
						{
						setState(8680);
						match(ANY);
						}
					}

					setState(8685);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(8683);
						id_();
						}
						break;
					case DATABASE:
						{
						setState(8684);
						match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public Id_Context member_name;
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Set_specialContext set_special() {
			return getRuleContext(Set_specialContext.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSet_statement(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_set_statement);
		int _la;
		try {
			setState(8730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8691);
				match(SET);
				setState(8692);
				match(LOCAL_ID);
				setState(8695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(8693);
					match(DOT);
					setState(8694);
					((Set_statementContext)_localctx).member_name = id_();
					}
				}

				setState(8697);
				match(EQUAL);
				setState(8698);
				expression(0);
				setState(8700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1199,_ctx) ) {
				case 1:
					{
					setState(8699);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8702);
				match(SET);
				setState(8703);
				match(LOCAL_ID);
				setState(8704);
				assignment_operator();
				setState(8705);
				expression(0);
				setState(8707);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1200,_ctx) ) {
				case 1:
					{
					setState(8706);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8709);
				match(SET);
				setState(8710);
				match(LOCAL_ID);
				setState(8711);
				match(EQUAL);
				setState(8712);
				match(CURSOR);
				setState(8713);
				declare_set_cursor_common();
				setState(8724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8714);
					match(FOR);
					setState(8722);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(8715);
						match(READ);
						setState(8716);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(8717);
						match(UPDATE);
						setState(8720);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(8718);
							match(OF);
							setState(8719);
							column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(8727);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1204,_ctx) ) {
				case 1:
					{
					setState(8726);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8729);
				set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(TSqlParser.DISTRIBUTED, 0); }
		public TerminalNode TRAN() { return getToken(TSqlParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(TSqlParser.TRANSACTION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode MARK() { return getToken(TSqlParser.MARK, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode COMMIT() { return getToken(TSqlParser.COMMIT, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode WORK() { return getToken(TSqlParser.WORK, 0); }
		public TerminalNode ROLLBACK() { return getToken(TSqlParser.ROLLBACK, 0); }
		public TerminalNode SAVE() { return getToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTransaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTransaction_statement(this);
		}
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_transaction_statement);
		int _la;
		try {
			setState(8813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8732);
				match(BEGIN);
				setState(8733);
				match(DISTRIBUTED);
				setState(8734);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8737);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1206,_ctx) ) {
				case 1:
					{
					setState(8735);
					id_();
					}
					break;
				case 2:
					{
					setState(8736);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8740);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1207,_ctx) ) {
				case 1:
					{
					setState(8739);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8742);
				match(BEGIN);
				setState(8743);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8753);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1210,_ctx) ) {
				case 1:
					{
					setState(8746);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(8744);
						id_();
						}
						break;
					case LOCAL_ID:
						{
						setState(8745);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8751);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1209,_ctx) ) {
					case 1:
						{
						setState(8748);
						match(WITH);
						setState(8749);
						match(MARK);
						setState(8750);
						match(STRING);
						}
						break;
					}
					}
					break;
				}
				setState(8756);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1211,_ctx) ) {
				case 1:
					{
					setState(8755);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8758);
				match(COMMIT);
				setState(8759);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8772);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1214,_ctx) ) {
				case 1:
					{
					setState(8762);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(8760);
						id_();
						}
						break;
					case LOCAL_ID:
						{
						setState(8761);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8770);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1213,_ctx) ) {
					case 1:
						{
						setState(8764);
						match(WITH);
						setState(8765);
						match(LR_BRACKET);
						setState(8766);
						match(DELAYED_DURABILITY);
						setState(8767);
						match(EQUAL);
						setState(8768);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8769);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(8775);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1215,_ctx) ) {
				case 1:
					{
					setState(8774);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8777);
				match(COMMIT);
				setState(8779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1216,_ctx) ) {
				case 1:
					{
					setState(8778);
					match(WORK);
					}
					break;
				}
				setState(8782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1217,_ctx) ) {
				case 1:
					{
					setState(8781);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8784);
				match(COMMIT);
				setState(8785);
				id_();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8786);
				match(ROLLBACK);
				setState(8787);
				id_();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8788);
				match(ROLLBACK);
				setState(8789);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8792);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1218,_ctx) ) {
				case 1:
					{
					setState(8790);
					id_();
					}
					break;
				case 2:
					{
					setState(8791);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1219,_ctx) ) {
				case 1:
					{
					setState(8794);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8797);
				match(ROLLBACK);
				setState(8799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1220,_ctx) ) {
				case 1:
					{
					setState(8798);
					match(WORK);
					}
					break;
				}
				setState(8802);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1221,_ctx) ) {
				case 1:
					{
					setState(8801);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8804);
				match(SAVE);
				setState(8805);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1222,_ctx) ) {
				case 1:
					{
					setState(8806);
					id_();
					}
					break;
				case 2:
					{
					setState(8807);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8811);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1223,_ctx) ) {
				case 1:
					{
					setState(8810);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_batch_statementContext extends ParserRuleContext {
		public Token count;
		public TerminalNode GO_BATCH() { return getToken(TSqlParser.GO_BATCH, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Go_batch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_batch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGo_batch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGo_batch_statement(this);
		}
	}

	public final Go_batch_statementContext go_batch_statement() throws RecognitionException {
		Go_batch_statementContext _localctx = new Go_batch_statementContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_go_batch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8815);
			match(GO_BATCH);
			setState(8817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL) {
				{
				setState(8816);
				((Go_batch_statementContext)_localctx).count = match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_statementContext extends ParserRuleContext {
		public Token count;
		public TerminalNode GO() { return getToken(TSqlParser.GO, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGo_statement(this);
		}
	}

	public final Go_statementContext go_statement() throws RecognitionException {
		Go_statementContext _localctx = new Go_statementContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_go_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8819);
			match(GO);
			setState(8821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL) {
				{
				setState(8820);
				((Go_statementContext)_localctx).count = match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public Id_Context database;
		public TerminalNode USE() { return getToken(TSqlParser.USE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUse_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUse_statement(this);
		}
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_use_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8823);
			match(USE);
			setState(8824);
			((Use_statementContext)_localctx).database = id_();
			setState(8826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1227,_ctx) ) {
			case 1:
				{
				setState(8825);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Setuser_statementContext extends ParserRuleContext {
		public Token user;
		public TerminalNode SETUSER() { return getToken(TSqlParser.SETUSER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setuser_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSetuser_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSetuser_statement(this);
		}
	}

	public final Setuser_statementContext setuser_statement() throws RecognitionException {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_setuser_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8828);
			match(SETUSER);
			setState(8830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(8829);
				((Setuser_statementContext)_localctx).user = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reconfigure_statementContext extends ParserRuleContext {
		public TerminalNode RECONFIGURE() { return getToken(TSqlParser.RECONFIGURE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode OVERRIDE() { return getToken(TSqlParser.OVERRIDE, 0); }
		public Reconfigure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reconfigure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterReconfigure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitReconfigure_statement(this);
		}
	}

	public final Reconfigure_statementContext reconfigure_statement() throws RecognitionException {
		Reconfigure_statementContext _localctx = new Reconfigure_statementContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_reconfigure_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8832);
			match(RECONFIGURE);
			setState(8835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1229,_ctx) ) {
			case 1:
				{
				setState(8833);
				match(WITH);
				setState(8834);
				match(OVERRIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shutdown_statementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(TSqlParser.SHUTDOWN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdown_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterShutdown_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitShutdown_statement(this);
		}
	}

	public final Shutdown_statementContext shutdown_statement() throws RecognitionException {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_shutdown_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8837);
			match(SHUTDOWN);
			setState(8840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1230,_ctx) ) {
			case 1:
				{
				setState(8838);
				match(WITH);
				setState(8839);
				match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_specialContext extends ParserRuleContext {
		public TerminalNode DBCC() { return getToken(TSqlParser.DBCC, 0); }
		public TerminalNode SHRINKLOG() { return getToken(TSqlParser.SHRINKLOG, 0); }
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Dbcc_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_special; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDbcc_special(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDbcc_special(this);
		}
	}

	public final Dbcc_specialContext dbcc_special() throws RecognitionException {
		Dbcc_specialContext _localctx = new Dbcc_specialContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_dbcc_special);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8842);
			match(DBCC);
			setState(8843);
			match(SHRINKLOG);
			setState(8853);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1232,_ctx) ) {
			case 1:
				{
				setState(8844);
				match(LR_BRACKET);
				setState(8845);
				match(SIZE);
				setState(8846);
				match(EQUAL);
				setState(8850);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1231,_ctx) ) {
				case 1:
					{
					setState(8847);
					constant_expression();
					}
					break;
				case 2:
					{
					setState(8848);
					id_();
					}
					break;
				case 3:
					{
					setState(8849);
					match(DEFAULT);
					}
					break;
				}
				setState(8852);
				match(RR_BRACKET);
				}
				break;
			}
			setState(8856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1233,_ctx) ) {
			case 1:
				{
				setState(8855);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_clauseContext extends ParserRuleContext {
		public Dbcc_commandContext name;
		public TerminalNode DBCC() { return getToken(TSqlParser.DBCC, 0); }
		public Dbcc_commandContext dbcc_command() {
			return getRuleContext(Dbcc_commandContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Dbcc_optionsContext dbcc_options() {
			return getRuleContext(Dbcc_optionsContext.class,0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDbcc_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDbcc_clause(this);
		}
	}

	public final Dbcc_clauseContext dbcc_clause() throws RecognitionException {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_dbcc_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8858);
			match(DBCC);
			setState(8859);
			((Dbcc_clauseContext)_localctx).name = dbcc_command();
			setState(8864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1234,_ctx) ) {
			case 1:
				{
				setState(8860);
				match(LR_BRACKET);
				setState(8861);
				expression_list();
				setState(8862);
				match(RR_BRACKET);
				}
				break;
			}
			setState(8868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1235,_ctx) ) {
			case 1:
				{
				setState(8866);
				match(WITH);
				setState(8867);
				dbcc_options();
				}
				break;
			}
			setState(8871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1236,_ctx) ) {
			case 1:
				{
				setState(8870);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_commandContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public Dbcc_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDbcc_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDbcc_command(this);
		}
	}

	public final Dbcc_commandContext dbcc_command() throws RecognitionException {
		Dbcc_commandContext _localctx = new Dbcc_commandContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_dbcc_command);
		try {
			setState(8875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8873);
				simple_id();
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8874);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_optionsContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDbcc_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDbcc_options(this);
		}
	}

	public final Dbcc_optionsContext dbcc_options() throws RecognitionException {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_dbcc_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8877);
			simple_id();
			setState(8880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8878);
				match(COMMA);
				setState(8879);
				simple_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_clauseContext extends ParserRuleContext {
		public Token clause;
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode CALLER() { return getToken(TSqlParser.CALLER, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_clause(this);
		}
	}

	public final Execute_clauseContext execute_clause() throws RecognitionException {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_execute_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8882);
			match(EXECUTE);
			setState(8883);
			match(AS);
			setState(8884);
			((Execute_clauseContext)_localctx).clause = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				((Execute_clauseContext)_localctx).clause = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_localContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_local; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_local(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_local(this);
		}
	}

	public final Declare_localContext declare_local() throws RecognitionException {
		Declare_localContext _localctx = new Declare_localContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_declare_local);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8886);
			match(LOCAL_ID);
			setState(8888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8887);
				match(AS);
				}
			}

			setState(8890);
			data_type();
			setState(8893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(8891);
				match(EQUAL);
				setState(8892);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_definitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public List<Table_type_indicesContext> table_type_indices() {
			return getRuleContexts(Table_type_indicesContext.class);
		}
		public Table_type_indicesContext table_type_indices(int i) {
			return getRuleContext(Table_type_indicesContext.class,i);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_type_definition(this);
		}
	}

	public final Table_type_definitionContext table_type_definition() throws RecognitionException {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_table_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8895);
			match(TABLE);
			setState(8896);
			match(LR_BRACKET);
			setState(8897);
			column_def_table_constraints();
			setState(8904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CHECK || _la==INDEX || _la==PRIMARY || _la==UNIQUE || _la==COMMA) {
				{
				{
				setState(8899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8898);
					match(COMMA);
					}
				}

				setState(8901);
				table_type_indices();
				}
				}
				setState(8906);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8907);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_indicesContext extends ParserRuleContext {
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode CLUSTERED() { return getToken(TSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(TSqlParser.NONCLUSTERED, 0); }
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Table_type_indicesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_indices; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_type_indices(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_type_indices(this);
		}
	}

	public final Table_type_indicesContext table_type_indices() throws RecognitionException {
		Table_type_indicesContext _localctx = new Table_type_indicesContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_table_type_indices);
		int _la;
		try {
			setState(8930);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8919);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INDEX:
				case PRIMARY:
					{
					{
					setState(8913);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIMARY:
						{
						setState(8909);
						match(PRIMARY);
						setState(8910);
						match(KEY);
						}
						break;
					case INDEX:
						{
						setState(8911);
						match(INDEX);
						setState(8912);
						id_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8916);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						setState(8915);
						_la = _input.LA(1);
						if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					}
					break;
				case UNIQUE:
					{
					setState(8918);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8921);
				match(LR_BRACKET);
				setState(8922);
				column_name_list_with_order();
				setState(8923);
				match(RR_BRACKET);
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 2);
				{
				setState(8925);
				match(CHECK);
				setState(8926);
				match(LR_BRACKET);
				setState(8927);
				search_condition(0);
				setState(8928);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_type_definitionContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return getRuleContext(Xml_schema_collectionContext.class,0);
		}
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public TerminalNode DOCUMENT() { return getToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_type_definition(this);
		}
	}

	public final Xml_type_definitionContext xml_type_definition() throws RecognitionException {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_xml_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8932);
			match(XML);
			setState(8933);
			match(LR_BRACKET);
			setState(8935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				setState(8934);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8937);
			xml_schema_collection();
			setState(8938);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_schema_collectionContext extends ParserRuleContext {
		public List<TerminalNode> ID() { return getTokens(TSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_schema_collection(this);
		}
	}

	public final Xml_schema_collectionContext xml_schema_collection() throws RecognitionException {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8940);
			match(ID);
			setState(8941);
			match(DOT);
			setState(8942);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_def_table_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_def_table_constraints(this);
		}
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8944);
			column_def_table_constraint();
			setState(8951);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1249,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8946);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8945);
						match(COMMA);
						}
					}

					setState(8948);
					column_def_table_constraint();
					}
					} 
				}
				setState(8953);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1249,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return getRuleContext(Materialized_column_definitionContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_def_table_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_def_table_constraint(this);
		}
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_column_def_table_constraint);
		try {
			setState(8957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8954);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8955);
				materialized_column_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8956);
				table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Id_Context constraint;
		public Token seed;
		public Token increment;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public List<Null_or_defaultContext> null_or_default() {
			return getRuleContexts(Null_or_defaultContext.class);
		}
		public Null_or_defaultContext null_or_default(int i) {
			return getRuleContext(Null_or_defaultContext.class,i);
		}
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(TSqlParser.ROWGUIDCOL, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public TerminalNode PERSISTED() { return getToken(TSqlParser.PERSISTED, 0); }
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_definition(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8959);
			id_();
			setState(8966);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(8960);
				data_type();
				}
				break;
			case AS:
				{
				setState(8961);
				match(AS);
				setState(8962);
				expression(0);
				setState(8964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1251,_ctx) ) {
				case 1:
					{
					setState(8963);
					match(PERSISTED);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(8968);
				match(COLLATE);
				setState(8969);
				id_();
				}
			}

			setState(8973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1254,_ctx) ) {
			case 1:
				{
				setState(8972);
				null_notnull();
				}
				break;
			}
			setState(8996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1259,_ctx) ) {
			case 1:
				{
				setState(8977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(8975);
					match(CONSTRAINT);
					setState(8976);
					((Column_definitionContext)_localctx).constraint = id_();
					}
				}

				setState(8979);
				null_or_default();
				setState(8981);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1256,_ctx) ) {
				case 1:
					{
					setState(8980);
					null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8983);
				match(IDENTITY);
				setState(8989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1257,_ctx) ) {
				case 1:
					{
					setState(8984);
					match(LR_BRACKET);
					setState(8985);
					((Column_definitionContext)_localctx).seed = match(DECIMAL);
					setState(8986);
					match(COMMA);
					setState(8987);
					((Column_definitionContext)_localctx).increment = match(DECIMAL);
					setState(8988);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8994);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1258,_ctx) ) {
				case 1:
					{
					setState(8991);
					match(NOT);
					setState(8992);
					match(FOR);
					setState(8993);
					match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			setState(8999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				setState(8998);
				match(ROWGUIDCOL);
				}
			}

			setState(9004);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1261,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9001);
					column_constraint();
					}
					} 
				}
				setState(9006);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1261,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Materialized_column_definitionContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(TSqlParser.COMPUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode MATERIALIZED() { return getToken(TSqlParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materialized_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMaterialized_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMaterialized_column_definition(this);
		}
	}

	public final Materialized_column_definitionContext materialized_column_definition() throws RecognitionException {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_materialized_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9007);
			id_();
			setState(9008);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9009);
			expression(0);
			setState(9013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1262,_ctx) ) {
			case 1:
				{
				setState(9010);
				match(MATERIALIZED);
				}
				break;
			case 2:
				{
				setState(9011);
				match(NOT);
				setState(9012);
				match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext pk;
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_constraint(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(9015);
				match(CONSTRAINT);
				setState(9016);
				((Column_constraintContext)_localctx).constraint = id_();
				}
			}

			setState(9056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(9022);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(9019);
					match(PRIMARY);
					setState(9020);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(9021);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(9024);
					clustered();
					}
				}

				setState(9028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1266,_ctx) ) {
				case 1:
					{
					setState(9027);
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				setState(9030);
				match(CHECK);
				setState(9034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9031);
					match(NOT);
					setState(9032);
					match(FOR);
					setState(9033);
					match(REPLICATION);
					}
				}

				setState(9036);
				match(LR_BRACKET);
				setState(9037);
				search_condition(0);
				setState(9038);
				match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				setState(9042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(9040);
					match(FOREIGN);
					setState(9041);
					match(KEY);
					}
				}

				setState(9044);
				match(REFERENCES);
				setState(9045);
				table_name();
				setState(9046);
				match(LR_BRACKET);
				setState(9047);
				((Column_constraintContext)_localctx).pk = column_name_list();
				setState(9048);
				match(RR_BRACKET);
				setState(9050);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1269,_ctx) ) {
				case 1:
					{
					setState(9049);
					on_delete();
					}
					break;
				}
				setState(9053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(9052);
					on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL_:
				{
				setState(9055);
				null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public Id_Context constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(TSqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(TSqlParser.PLUS, i);
		}
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_constraint(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(9058);
				match(CONSTRAINT);
				setState(9059);
				((Table_constraintContext)_localctx).constraint = id_();
				}
			}

			setState(9126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(9065);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(9062);
					match(PRIMARY);
					setState(9063);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(9064);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(9067);
					clustered();
					}
				}

				setState(9070);
				match(LR_BRACKET);
				setState(9071);
				column_name_list_with_order();
				setState(9072);
				match(RR_BRACKET);
				setState(9074);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1275,_ctx) ) {
				case 1:
					{
					setState(9073);
					index_options();
					}
					break;
				}
				setState(9078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(9076);
					match(ON);
					setState(9077);
					id_();
					}
				}

				}
				break;
			case CHECK:
				{
				setState(9080);
				match(CHECK);
				setState(9084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9081);
					match(NOT);
					setState(9082);
					match(FOR);
					setState(9083);
					match(REPLICATION);
					}
				}

				setState(9086);
				match(LR_BRACKET);
				setState(9087);
				search_condition(0);
				setState(9088);
				match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				setState(9090);
				match(DEFAULT);
				setState(9092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1278,_ctx) ) {
				case 1:
					{
					setState(9091);
					match(LR_BRACKET);
					}
					break;
				}
				setState(9098); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(9098);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(9094);
						match(STRING);
						}
						break;
					case PLUS:
						{
						setState(9095);
						match(PLUS);
						}
						break;
					case COALESCE:
					case CONTAINSTABLE:
					case CONVERT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case FREETEXTTABLE:
					case IDENTITY:
					case LEFT:
					case NULLIF:
					case OPENJSON:
					case PRECISION:
					case RIGHT:
					case SEMANTICKEYPHRASETABLE:
					case SEMANTICSIMILARITYDETAILSTABLE:
					case SEMANTICSIMILARITYTABLE:
					case SESSION_USER:
					case SYSTEM_USER:
					case USER:
					case DOLLAR_PARTITION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case ID:
					case DOT:
					case LR_BRACKET:
						{
						setState(9096);
						function_call();
						}
						break;
					case DECIMAL:
						{
						setState(9097);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(9100); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (COALESCE - 23)) | (1L << (CONTAINSTABLE - 23)) | (1L << (CONVERT - 23)) | (1L << (CURRENT_TIMESTAMP - 23)) | (1L << (CURRENT_USER - 23)) | (1L << (FREETEXTTABLE - 23)) | (1L << (IDENTITY - 23)))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (LEFT - 95)) | (1L << (NULLIF - 95)) | (1L << (OPENJSON - 95)) | (1L << (PRECISION - 95)) | (1L << (RIGHT - 95)) | (1L << (SEMANTICKEYPHRASETABLE - 95)) | (1L << (SEMANTICSIMILARITYDETAILSTABLE - 95)) | (1L << (SEMANTICSIMILARITYTABLE - 95)) | (1L << (SESSION_USER - 95)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (SYSTEM_USER - 161)) | (1L << (USER - 161)) | (1L << (DOLLAR_PARTITION - 161)) | (1L << (ABSOLUTE - 161)) | (1L << (AT_KEYWORD - 161)) | (1L << (ACCENT_SENSITIVITY - 161)) | (1L << (ACTION - 161)) | (1L << (ACTIVATION - 161)) | (1L << (ACTIVE - 161)) | (1L << (ADDRESS - 161)) | (1L << (AES_128 - 161)) | (1L << (AES_192 - 161)) | (1L << (AES_256 - 161)) | (1L << (AFFINITY - 161)) | (1L << (AFTER - 161)) | (1L << (AGGREGATE - 161)) | (1L << (ALGORITHM - 161)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 161)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 161)) | (1L << (ALLOWED - 161)) | (1L << (ANSI_NULL_DEFAULT - 161)) | (1L << (ANSI_NULLS - 161)) | (1L << (ANSI_PADDING - 161)) | (1L << (ANSI_WARNINGS - 161)) | (1L << (APPLICATION_LOG - 161)) | (1L << (APPLY - 161)) | (1L << (ARITHABORT - 161)) | (1L << (ASSEMBLY - 161)) | (1L << (AUDIT - 161)) | (1L << (AUDIT_GUID - 161)) | (1L << (AUTO - 161)) | (1L << (AUTO_CLEANUP - 161)) | (1L << (AUTO_CLOSE - 161)) | (1L << (AUTO_CREATE_STATISTICS - 161)) | (1L << (AUTO_SHRINK - 161)) | (1L << (AUTO_UPDATE_STATISTICS - 161)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 161)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (AVAILABILITY - 227)) | (1L << (AVG - 227)) | (1L << (BACKUP_PRIORITY - 227)) | (1L << (BEGIN_DIALOG - 227)) | (1L << (BIGINT - 227)) | (1L << (BINARY_KEYWORD - 227)) | (1L << (BINARY_BASE64 - 227)) | (1L << (BINARY_CHECKSUM - 227)) | (1L << (BINDING - 227)) | (1L << (BLOB_STORAGE - 227)) | (1L << (BROKER - 227)) | (1L << (BROKER_INSTANCE - 227)) | (1L << (BULK_LOGGED - 227)) | (1L << (CALLER - 227)) | (1L << (CAP_CPU_PERCENT - 227)) | (1L << (CAST - 227)) | (1L << (TRY_CAST - 227)) | (1L << (CATALOG - 227)) | (1L << (CATCH - 227)) | (1L << (CHANGE_RETENTION - 227)) | (1L << (CHANGE_TRACKING - 227)) | (1L << (CHECKSUM - 227)) | (1L << (CHECKSUM_AGG - 227)) | (1L << (CLEANUP - 227)) | (1L << (COLLECTION - 227)) | (1L << (COLUMN_MASTER_KEY - 227)) | (1L << (COMMITTED - 227)) | (1L << (COMPATIBILITY_LEVEL - 227)) | (1L << (CONCAT - 227)) | (1L << (CONCAT_NULL_YIELDS_NULL - 227)) | (1L << (CONTENT - 227)) | (1L << (CONTROL - 227)) | (1L << (COOKIE - 227)) | (1L << (COUNT - 227)) | (1L << (COUNT_BIG - 227)) | (1L << (COUNTER - 227)) | (1L << (CPU - 227)) | (1L << (CREATE_NEW - 227)) | (1L << (CREATION_DISPOSITION - 227)) | (1L << (CREDENTIAL - 227)) | (1L << (CRYPTOGRAPHIC - 227)) | (1L << (CUME_DIST - 227)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 227)) | (1L << (CURSOR_DEFAULT - 227)) | (1L << (DATA - 227)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 227)) | (1L << (DATEADD - 227)) | (1L << (DATEDIFF - 227)) | (1L << (DATENAME - 227)) | (1L << (DATEPART - 227)) | (1L << (DAYS - 227)) | (1L << (DB_CHAINING - 227)) | (1L << (DB_FAILOVER - 227)) | (1L << (DECRYPTION - 227)) | (1L << (DEFAULT_DOUBLE_QUOTE - 227)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 227)) | (1L << (DEFAULT_LANGUAGE - 227)) | (1L << (DELAY - 227)) | (1L << (DELAYED_DURABILITY - 227)) | (1L << (DELETED - 227)) | (1L << (DENSE_RANK - 227)) | (1L << (DEPENDENTS - 227)) | (1L << (DES - 227)) | (1L << (DESCRIPTION - 227)))) != 0) || ((((_la - 291)) & ~0x3f) == 0 && ((1L << (_la - 291)) & ((1L << (DESX - 291)) | (1L << (DHCP - 291)) | (1L << (DIALOG - 291)) | (1L << (DIRECTORY_NAME - 291)) | (1L << (DISABLE - 291)) | (1L << (DISABLE_BROKER - 291)) | (1L << (DISABLED - 291)) | (1L << (DISK_DRIVE - 291)) | (1L << (DOCUMENT - 291)) | (1L << (DYNAMIC - 291)) | (1L << (ELEMENTS - 291)) | (1L << (EMERGENCY - 291)) | (1L << (EMPTY - 291)) | (1L << (ENABLE - 291)) | (1L << (ENABLE_BROKER - 291)) | (1L << (ENCRYPTED_VALUE - 291)) | (1L << (ENCRYPTION - 291)) | (1L << (ENDPOINT_URL - 291)) | (1L << (ERROR_BROKER_CONVERSATIONS - 291)) | (1L << (EXCLUSIVE - 291)) | (1L << (EXECUTABLE - 291)) | (1L << (EXIST - 291)) | (1L << (EXPAND - 291)) | (1L << (EXPIRY_DATE - 291)) | (1L << (EXPLICIT - 291)) | (1L << (FAIL_OPERATION - 291)) | (1L << (FAILOVER_MODE - 291)) | (1L << (FAILURE - 291)) | (1L << (FAILURE_CONDITION_LEVEL - 291)) | (1L << (FAST - 291)) | (1L << (FAST_FORWARD - 291)) | (1L << (FILEGROUP - 291)) | (1L << (FILEGROWTH - 291)) | (1L << (FILENAME - 291)) | (1L << (FILEPATH - 291)) | (1L << (FILESTREAM - 291)) | (1L << (FILTER - 291)) | (1L << (FIRST - 291)) | (1L << (FIRST_VALUE - 291)) | (1L << (FOLLOWING - 291)) | (1L << (FORCE - 291)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 291)) | (1L << (FORCED - 291)) | (1L << (FORMAT - 291)) | (1L << (FORWARD_ONLY - 291)) | (1L << (FULLSCAN - 291)) | (1L << (FULLTEXT - 291)) | (1L << (GB - 291)) | (1L << (GETDATE - 291)) | (1L << (GETUTCDATE - 291)) | (1L << (GLOBAL - 291)) | (1L << (GO_BATCH - 291)) | (1L << (GO - 291)) | (1L << (GROUP_MAX_REQUESTS - 291)) | (1L << (GROUPING - 291)) | (1L << (GROUPING_ID - 291)) | (1L << (HADR - 291)) | (1L << (HASH - 291)) | (1L << (HEALTH_CHECK_TIMEOUT - 291)) | (1L << (HIGH - 291)) | (1L << (HONOR_BROKER_PRIORITY - 291)) | (1L << (HOURS - 291)) | (1L << (IDENTITY_VALUE - 291)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 291)))) != 0) || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & ((1L << (IMMEDIATE - 355)) | (1L << (IMPERSONATE - 355)) | (1L << (IMPORTANCE - 355)) | (1L << (INCLUDE_NULL_VALUES - 355)) | (1L << (INCREMENTAL - 355)) | (1L << (INITIATOR - 355)) | (1L << (INPUT - 355)) | (1L << (INSENSITIVE - 355)) | (1L << (INSERTED - 355)) | (1L << (INT - 355)) | (1L << (IP - 355)) | (1L << (ISOLATION - 355)) | (1L << (JOB - 355)) | (1L << (JSON - 355)) | (1L << (KB - 355)) | (1L << (KEEP - 355)) | (1L << (KEEPFIXED - 355)) | (1L << (KEY_SOURCE - 355)) | (1L << (KEYS - 355)) | (1L << (KEYSET - 355)) | (1L << (LAG - 355)) | (1L << (LAST - 355)) | (1L << (LAST_VALUE - 355)) | (1L << (LEAD - 355)) | (1L << (LEVEL - 355)) | (1L << (LIST - 355)) | (1L << (LISTENER - 355)) | (1L << (LISTENER_URL - 355)) | (1L << (LOB_COMPACTION - 355)) | (1L << (LOCAL - 355)) | (1L << (LOCATION - 355)) | (1L << (LOCK - 355)) | (1L << (LOCK_ESCALATION - 355)) | (1L << (LOGIN - 355)) | (1L << (LOOP - 355)) | (1L << (LOW - 355)) | (1L << (MANUAL - 355)) | (1L << (MARK - 355)) | (1L << (MATERIALIZED - 355)) | (1L << (MAX - 355)) | (1L << (MAX_CPU_PERCENT - 355)) | (1L << (MAX_DOP - 355)) | (1L << (MAX_FILES - 355)) | (1L << (MAX_IOPS_PER_VOLUME - 355)) | (1L << (MAX_MEMORY_PERCENT - 355)) | (1L << (MAX_PROCESSES - 355)) | (1L << (MAX_QUEUE_READERS - 355)) | (1L << (MAX_ROLLOVER_FILES - 355)) | (1L << (MAXDOP - 355)) | (1L << (MAXRECURSION - 355)) | (1L << (MAXSIZE - 355)) | (1L << (MB - 355)) | (1L << (MEDIUM - 355)) | (1L << (MEMORY_OPTIMIZED_DATA - 355)) | (1L << (MESSAGE - 355)) | (1L << (MIN - 355)) | (1L << (MIN_ACTIVE_ROWVERSION - 355)) | (1L << (MIN_CPU_PERCENT - 355)) | (1L << (MIN_IOPS_PER_VOLUME - 355)) | (1L << (MIN_MEMORY_PERCENT - 355)) | (1L << (MINUTES - 355)) | (1L << (MIRROR_ADDRESS - 355)) | (1L << (MIXED_PAGE_ALLOCATION - 355)) | (1L << (MODE - 355)))) != 0) || ((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (MODIFY - 419)) | (1L << (MOVE - 419)) | (1L << (MULTI_USER - 419)) | (1L << (NAME - 419)) | (1L << (NESTED_TRIGGERS - 419)) | (1L << (NEW_ACCOUNT - 419)) | (1L << (NEW_BROKER - 419)) | (1L << (NEW_PASSWORD - 419)) | (1L << (NEXT - 419)) | (1L << (NO - 419)) | (1L << (NO_TRUNCATE - 419)) | (1L << (NO_WAIT - 419)) | (1L << (NOCOUNT - 419)) | (1L << (NODES - 419)) | (1L << (NOEXPAND - 419)) | (1L << (NON_TRANSACTED_ACCESS - 419)) | (1L << (NORECOMPUTE - 419)) | (1L << (NORECOVERY - 419)) | (1L << (NOWAIT - 419)) | (1L << (NTILE - 419)) | (1L << (NUMANODE - 419)) | (1L << (NUMBER - 419)) | (1L << (NUMERIC_ROUNDABORT - 419)) | (1L << (OBJECT - 419)) | (1L << (OFFLINE - 419)) | (1L << (OFFSET - 419)) | (1L << (OLD_ACCOUNT - 419)) | (1L << (ONLINE - 419)) | (1L << (ONLY - 419)) | (1L << (OPEN_EXISTING - 419)) | (1L << (OPTIMISTIC - 419)) | (1L << (OPTIMIZE - 419)) | (1L << (OUT - 419)) | (1L << (OUTPUT - 419)) | (1L << (OVERRIDE - 419)) | (1L << (OWNER - 419)) | (1L << (PAGE_VERIFY - 419)) | (1L << (PARAMETERIZATION - 419)) | (1L << (PARTITION - 419)) | (1L << (PARTITIONS - 419)) | (1L << (PARTNER - 419)) | (1L << (PATH - 419)) | (1L << (PERCENT_RANK - 419)) | (1L << (PERCENTILE_CONT - 419)) | (1L << (PERCENTILE_DISC - 419)) | (1L << (POISON_MESSAGE_HANDLING - 419)) | (1L << (POOL - 419)) | (1L << (PORT - 419)) | (1L << (PRECEDING - 419)) | (1L << (PRIMARY_ROLE - 419)) | (1L << (PRIOR - 419)) | (1L << (PRIORITY - 419)) | (1L << (PRIORITY_LEVEL - 419)) | (1L << (PRIVATE - 419)) | (1L << (PRIVATE_KEY - 419)) | (1L << (PRIVILEGES - 419)) | (1L << (PROCEDURE_NAME - 419)) | (1L << (PROPERTY - 419)) | (1L << (PROVIDER - 419)) | (1L << (PROVIDER_KEY_NAME - 419)) | (1L << (QUERY - 419)) | (1L << (QUEUE - 419)) | (1L << (QUEUE_DELAY - 419)))) != 0) || ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (QUOTED_IDENTIFIER - 483)) | (1L << (RANGE - 483)) | (1L << (RANK - 483)) | (1L << (RC2 - 483)) | (1L << (RC4 - 483)) | (1L << (RC4_128 - 483)) | (1L << (READ_COMMITTED_SNAPSHOT - 483)) | (1L << (READ_ONLY - 483)) | (1L << (READ_ONLY_ROUTING_LIST - 483)) | (1L << (READ_WRITE - 483)) | (1L << (READONLY - 483)) | (1L << (REBUILD - 483)) | (1L << (RECEIVE - 483)) | (1L << (RECOMPILE - 483)) | (1L << (RECOVERY - 483)) | (1L << (RECURSIVE_TRIGGERS - 483)) | (1L << (RELATIVE - 483)) | (1L << (REMOTE - 483)) | (1L << (REMOTE_SERVICE_NAME - 483)) | (1L << (REMOVE - 483)) | (1L << (REORGANIZE - 483)) | (1L << (REPEATABLE - 483)) | (1L << (REPLICA - 483)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 483)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 483)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 483)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 483)) | (1L << (RESERVE_DISK_SPACE - 483)) | (1L << (RESOURCE - 483)) | (1L << (RESOURCE_MANAGER_LOCATION - 483)) | (1L << (RESTRICTED_USER - 483)) | (1L << (RETENTION - 483)) | (1L << (ROBUST - 483)) | (1L << (ROOT - 483)) | (1L << (ROUTE - 483)) | (1L << (ROW - 483)) | (1L << (ROW_NUMBER - 483)) | (1L << (ROWGUID - 483)) | (1L << (ROWS - 483)) | (1L << (SAMPLE - 483)) | (1L << (SCHEMABINDING - 483)) | (1L << (SCOPED - 483)) | (1L << (SCROLL - 483)) | (1L << (SCROLL_LOCKS - 483)) | (1L << (SEARCH - 483)) | (1L << (SECONDARY - 483)) | (1L << (SECONDARY_ONLY - 483)) | (1L << (SECONDARY_ROLE - 483)) | (1L << (SECONDS - 483)) | (1L << (SECRET - 483)) | (1L << (SECURITY - 483)) | (1L << (SECURITY_LOG - 483)) | (1L << (SEEDING_MODE - 483)) | (1L << (SELF - 483)) | (1L << (SEMI_SENSITIVE - 483)) | (1L << (SEND - 483)) | (1L << (SENT - 483)) | (1L << (SEQUENCE - 483)) | (1L << (SERIALIZABLE - 483)) | (1L << (SESSION_TIMEOUT - 483)) | (1L << (SETERROR - 483)) | (1L << (SHARE - 483)) | (1L << (SHOWPLAN - 483)))) != 0) || ((((_la - 547)) & ~0x3f) == 0 && ((1L << (_la - 547)) & ((1L << (SIGNATURE - 547)) | (1L << (SIMPLE - 547)) | (1L << (SINGLE_USER - 547)) | (1L << (SIZE - 547)) | (1L << (SMALLINT - 547)) | (1L << (SNAPSHOT - 547)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 547)) | (1L << (STANDBY - 547)) | (1L << (START_DATE - 547)) | (1L << (STATIC - 547)) | (1L << (STATS_STREAM - 547)) | (1L << (STATUS - 547)) | (1L << (STATUSONLY - 547)) | (1L << (STDEV - 547)) | (1L << (STDEVP - 547)) | (1L << (STOPLIST - 547)) | (1L << (STRING_AGG - 547)) | (1L << (STUFF - 547)) | (1L << (SUBJECT - 547)) | (1L << (SUBSCRIPTION - 547)) | (1L << (SUM - 547)) | (1L << (SUSPEND - 547)) | (1L << (SYMMETRIC - 547)) | (1L << (SYNCHRONOUS_COMMIT - 547)) | (1L << (SYNONYM - 547)) | (1L << (SYSTEM - 547)) | (1L << (TAKE - 547)) | (1L << (TARGET_RECOVERY_TIME - 547)) | (1L << (TB - 547)) | (1L << (TEXTIMAGE_ON - 547)) | (1L << (THROW - 547)) | (1L << (TIES - 547)) | (1L << (TIME - 547)) | (1L << (TIMEOUT - 547)) | (1L << (TIMER - 547)) | (1L << (TINYINT - 547)) | (1L << (TORN_PAGE_DETECTION - 547)) | (1L << (TRANSFORM_NOISE_WORDS - 547)) | (1L << (TRIPLE_DES - 547)) | (1L << (TRIPLE_DES_3KEY - 547)) | (1L << (TRUSTWORTHY - 547)) | (1L << (TRY - 547)) | (1L << (TSQL - 547)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 547)) | (1L << (TYPE - 547)) | (1L << (TYPE_WARNING - 547)) | (1L << (UNBOUNDED - 547)) | (1L << (UNCOMMITTED - 547)) | (1L << (UNKNOWN - 547)) | (1L << (UNLIMITED - 547)) | (1L << (UOW - 547)) | (1L << (USING - 547)) | (1L << (VALID_XML - 547)) | (1L << (VALIDATION - 547)) | (1L << (VALUE - 547)) | (1L << (VAR - 547)) | (1L << (VARBINARY_KEYWORD - 547)) | (1L << (VARP - 547)) | (1L << (VIEW_METADATA - 547)) | (1L << (VIEWS - 547)) | (1L << (WAIT - 547)) | (1L << (WELL_FORMED_XML - 547)) | (1L << (WITHOUT_ARRAY_WRAPPER - 547)) | (1L << (WORK - 547)))) != 0) || ((((_la - 611)) & ~0x3f) == 0 && ((1L << (_la - 611)) & ((1L << (WORKLOAD - 611)) | (1L << (XML - 611)) | (1L << (XMLDATA - 611)) | (1L << (XMLNAMESPACES - 611)) | (1L << (XMLSCHEMA - 611)) | (1L << (XSINIL - 611)) | (1L << (ZONE - 611)) | (1L << (ABSENT - 611)) | (1L << (AES - 611)) | (1L << (ALLOW_CONNECTIONS - 611)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 611)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 611)) | (1L << (ANONYMOUS - 611)) | (1L << (APPEND - 611)) | (1L << (APPLICATION - 611)) | (1L << (ASYMMETRIC - 611)) | (1L << (ASYNCHRONOUS_COMMIT - 611)) | (1L << (AUTHENTICATION - 611)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 611)) | (1L << (AUTOMATIC - 611)) | (1L << (AVAILABILITY_MODE - 611)) | (1L << (BEFORE - 611)) | (1L << (BLOCK - 611)) | (1L << (BLOCKSIZE - 611)) | (1L << (BLOCKING_HIERARCHY - 611)) | (1L << (BUFFER - 611)) | (1L << (BUFFERCOUNT - 611)) | (1L << (CACHE - 611)) | (1L << (CALLED - 611)) | (1L << (CERTIFICATE - 611)) | (1L << (CHANGETABLE - 611)) | (1L << (CHANGES - 611)) | (1L << (CHECK_POLICY - 611)) | (1L << (CHECK_EXPIRATION - 611)) | (1L << (CLASSIFIER_FUNCTION - 611)) | (1L << (CLUSTER - 611)) | (1L << (COMPRESSION - 611)) | (1L << (CONFIGURATION - 611)) | (1L << (CONTAINMENT - 611)) | (1L << (CONTEXT - 611)) | (1L << (CONTINUE_AFTER_ERROR - 611)) | (1L << (CONTRACT - 611)) | (1L << (CONTRACT_NAME - 611)) | (1L << (CONVERSATION - 611)) | (1L << (COPY_ONLY - 611)) | (1L << (CYCLE - 611)) | (1L << (DATA_COMPRESSION - 611)) | (1L << (DATA_SOURCE - 611)) | (1L << (DATABASE_MIRRORING - 611)) | (1L << (DEFAULT_DATABASE - 611)) | (1L << (DEFAULT_SCHEMA - 611)) | (1L << (DIAGNOSTICS - 611)) | (1L << (DIFFERENTIAL - 611)) | (1L << (DTC_SUPPORT - 611)) | (1L << (ENABLED - 611)) | (1L << (ENDPOINT - 611)) | (1L << (ERROR - 611)) | (1L << (EVENT - 611)) | (1L << (EVENTDATA - 611)) | (1L << (EVENT_RETENTION_MODE - 611)) | (1L << (EXECUTABLE_FILE - 611)))) != 0) || ((((_la - 675)) & ~0x3f) == 0 && ((1L << (_la - 675)) & ((1L << (EXPIREDATE - 675)) | (1L << (EXTENSION - 675)) | (1L << (EXTERNAL_ACCESS - 675)) | (1L << (FAILOVER - 675)) | (1L << (FAILURECONDITIONLEVEL - 675)) | (1L << (FAN_IN - 675)) | (1L << (FILE_SNAPSHOT - 675)) | (1L << (FORCESEEK - 675)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 675)) | (1L << (GET - 675)) | (1L << (GOVERNOR - 675)) | (1L << (HASHED - 675)) | (1L << (HEALTHCHECKTIMEOUT - 675)) | (1L << (IIF - 675)) | (1L << (IO - 675)) | (1L << (INCLUDE - 675)) | (1L << (INCREMENT - 675)) | (1L << (INFINITE - 675)) | (1L << (INIT - 675)) | (1L << (INSTEAD - 675)) | (1L << (ISNULL - 675)) | (1L << (KERBEROS - 675)) | (1L << (KEY_PATH - 675)) | (1L << (KEY_STORE_PROVIDER_NAME - 675)) | (1L << (LANGUAGE - 675)) | (1L << (LIBRARY - 675)) | (1L << (LIFETIME - 675)) | (1L << (LINUX - 675)) | (1L << (LISTENER_IP - 675)) | (1L << (LISTENER_PORT - 675)) | (1L << (LOCAL_SERVICE_NAME - 675)) | (1L << (LOG - 675)) | (1L << (MATCHED - 675)) | (1L << (MASTER - 675)) | (1L << (MAX_MEMORY - 675)) | (1L << (MAXTRANSFER - 675)) | (1L << (MAXVALUE - 675)) | (1L << (MAX_DISPATCH_LATENCY - 675)) | (1L << (MAX_EVENT_SIZE - 675)) | (1L << (MAX_SIZE - 675)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 675)) | (1L << (MEDIADESCRIPTION - 675)) | (1L << (MEDIANAME - 675)) | (1L << (MEMBER - 675)) | (1L << (MEMORY_PARTITION_MODE - 675)) | (1L << (MESSAGE_FORWARDING - 675)) | (1L << (MESSAGE_FORWARD_SIZE - 675)) | (1L << (MINVALUE - 675)) | (1L << (MIRROR - 675)) | (1L << (MUST_CHANGE - 675)) | (1L << (NOFORMAT - 675)) | (1L << (NOINIT - 675)) | (1L << (NONE - 675)) | (1L << (NOREWIND - 675)) | (1L << (NOSKIP - 675)) | (1L << (NOUNLOAD - 675)) | (1L << (NO_CHECKSUM - 675)) | (1L << (NO_COMPRESSION - 675)) | (1L << (NO_EVENT_LOSS - 675)) | (1L << (NOTIFICATION - 675)) | (1L << (NTLM - 675)) | (1L << (OLD_PASSWORD - 675)) | (1L << (ON_FAILURE - 675)))) != 0) || ((((_la - 739)) & ~0x3f) == 0 && ((1L << (_la - 739)) & ((1L << (PAGE - 739)) | (1L << (PARAM_NODE - 739)) | (1L << (PARTIAL - 739)) | (1L << (PASSWORD - 739)) | (1L << (PERMISSION_SET - 739)) | (1L << (PER_CPU - 739)) | (1L << (PER_DB - 739)) | (1L << (PER_NODE - 739)) | (1L << (PERSISTED - 739)) | (1L << (PLATFORM - 739)) | (1L << (POLICY - 739)) | (1L << (PREDICATE - 739)) | (1L << (PROCESS - 739)) | (1L << (PROFILE - 739)) | (1L << (PYTHON - 739)) | (1L << (R - 739)) | (1L << (READ_WRITE_FILEGROUPS - 739)) | (1L << (REGENERATE - 739)) | (1L << (RELATED_CONVERSATION - 739)) | (1L << (RELATED_CONVERSATION_GROUP - 739)) | (1L << (REQUIRED - 739)) | (1L << (RESET - 739)) | (1L << (RESTART - 739)) | (1L << (RESUME - 739)) | (1L << (RETAINDAYS - 739)) | (1L << (RETURNS - 739)) | (1L << (REWIND - 739)) | (1L << (ROLE - 739)) | (1L << (RSA_512 - 739)) | (1L << (RSA_1024 - 739)) | (1L << (RSA_2048 - 739)) | (1L << (RSA_3072 - 739)) | (1L << (RSA_4096 - 739)) | (1L << (SAFETY - 739)) | (1L << (SAFE - 739)) | (1L << (SCHEDULER - 739)) | (1L << (SCHEME - 739)) | (1L << (SERVER - 739)) | (1L << (SERVICE - 739)) | (1L << (SERVICE_BROKER - 739)) | (1L << (SERVICE_NAME - 739)) | (1L << (SESSION - 739)) | (1L << (SID - 739)) | (1L << (SKIP_KEYWORD - 739)) | (1L << (SOFTNUMA - 739)) | (1L << (SOURCE - 739)) | (1L << (SPECIFICATION - 739)) | (1L << (SPLIT - 739)) | (1L << (SQLDUMPERFLAGS - 739)) | (1L << (SQLDUMPERPATH - 739)) | (1L << (SQLDUMPERTIMEOUT - 739)) | (1L << (STATE - 739)) | (1L << (STATS - 739)) | (1L << (START - 739)) | (1L << (STARTED - 739)) | (1L << (STARTUP_STATE - 739)) | (1L << (STOP - 739)) | (1L << (STOPPED - 739)) | (1L << (STOP_ON_ERROR - 739)) | (1L << (SUPPORTED - 739)) | (1L << (TAPE - 739)) | (1L << (TARGET - 739)))) != 0) || ((((_la - 803)) & ~0x3f) == 0 && ((1L << (_la - 803)) & ((1L << (TCP - 803)) | (1L << (TRACK_CAUSALITY - 803)) | (1L << (TRANSFER - 803)) | (1L << (UNCHECKED - 803)) | (1L << (UNLOCK - 803)) | (1L << (UNSAFE - 803)) | (1L << (URL - 803)) | (1L << (USED - 803)) | (1L << (VERBOSELOGGING - 803)) | (1L << (VISIBILITY - 803)) | (1L << (WINDOWS - 803)) | (1L << (WITHOUT - 803)) | (1L << (WITNESS - 803)) | (1L << (VARCHAR - 803)) | (1L << (NVARCHAR - 803)) | (1L << (DOUBLE_QUOTE_ID - 803)) | (1L << (SQUARE_BRACKET_ID - 803)) | (1L << (LOCAL_ID - 803)) | (1L << (DECIMAL - 803)) | (1L << (ID - 803)) | (1L << (STRING - 803)) | (1L << (DOT - 803)) | (1L << (LR_BRACKET - 803)) | (1L << (PLUS - 803)))) != 0) );
				setState(9103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(9102);
					match(RR_BRACKET);
					}
				}

				setState(9105);
				match(FOR);
				setState(9106);
				id_();
				}
				break;
			case FOREIGN:
				{
				setState(9107);
				match(FOREIGN);
				setState(9108);
				match(KEY);
				setState(9109);
				match(LR_BRACKET);
				setState(9110);
				((Table_constraintContext)_localctx).fk = column_name_list();
				setState(9111);
				match(RR_BRACKET);
				setState(9112);
				match(REFERENCES);
				setState(9113);
				table_name();
				setState(9118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1282,_ctx) ) {
				case 1:
					{
					setState(9114);
					match(LR_BRACKET);
					setState(9115);
					((Table_constraintContext)_localctx).pk = column_name_list();
					setState(9116);
					match(RR_BRACKET);
					}
					break;
				}
				setState(9121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1283,_ctx) ) {
				case 1:
					{
					setState(9120);
					on_delete();
					}
					break;
				}
				setState(9124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(9123);
					on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOn_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOn_delete(this);
		}
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9128);
			match(ON);
			setState(9129);
			match(DELETE);
			setState(9137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1286,_ctx) ) {
			case 1:
				{
				setState(9130);
				match(NO);
				setState(9131);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(9132);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(9133);
				match(SET);
				setState(9134);
				match(NULL_);
				}
				break;
			case 4:
				{
				setState(9135);
				match(SET);
				setState(9136);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOn_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOn_update(this);
		}
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9139);
			match(ON);
			setState(9140);
			match(UPDATE);
			setState(9148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1287,_ctx) ) {
			case 1:
				{
				setState(9141);
				match(NO);
				setState(9142);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(9143);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(9144);
				match(SET);
				setState(9145);
				match(NULL_);
				}
				break;
			case 4:
				{
				setState(9146);
				match(SET);
				setState(9147);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIndex_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIndex_options(this);
		}
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9150);
			match(WITH);
			setState(9151);
			match(LR_BRACKET);
			setState(9152);
			index_option();
			setState(9157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9153);
				match(COMMA);
				setState(9154);
				index_option();
				}
				}
				setState(9159);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9160);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public List<KeywordContext> keyword() {
			return getRuleContexts(KeywordContext.class);
		}
		public KeywordContext keyword(int i) {
			return getRuleContext(KeywordContext.class,i);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIndex_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIndex_option(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				{
				setState(9162);
				simple_id();
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				{
				setState(9163);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9166);
			match(EQUAL);
			setState(9171);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				{
				setState(9167);
				simple_id();
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				{
				setState(9168);
				keyword();
				}
				break;
			case OFF:
			case ON:
				{
				setState(9169);
				on_off();
				}
				break;
			case DECIMAL:
				{
				setState(9170);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public List<TerminalNode> FOR() { return getTokens(TSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(TSqlParser.FOR, i);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(TSqlParser.INSENSITIVE, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_cursor(this);
		}
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9173);
			match(DECLARE);
			setState(9174);
			cursor_name();
			setState(9206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1298,_ctx) ) {
			case 1:
				{
				setState(9175);
				match(CURSOR);
				setState(9185);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1293,_ctx) ) {
				case 1:
					{
					setState(9176);
					declare_set_cursor_common();
					setState(9183);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR) {
						{
						setState(9177);
						match(FOR);
						setState(9178);
						match(UPDATE);
						setState(9181);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(9179);
							match(OF);
							setState(9180);
							column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(9188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INSENSITIVE || _la==SEMI_SENSITIVE) {
					{
					setState(9187);
					_la = _input.LA(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCROLL) {
					{
					setState(9190);
					match(SCROLL);
					}
				}

				setState(9193);
				match(CURSOR);
				setState(9194);
				match(FOR);
				setState(9195);
				select_statement_standalone();
				setState(9204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(9196);
					match(FOR);
					setState(9202);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(9197);
						match(READ);
						setState(9198);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(9199);
						match(UPDATE);
						}
						break;
					case OF:
						{
						{
						setState(9200);
						match(OF);
						setState(9201);
						column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			setState(9209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1299,_ctx) ) {
			case 1:
				{
				setState(9208);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_commonContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public List<Declare_set_cursor_common_partialContext> declare_set_cursor_common_partial() {
			return getRuleContexts(Declare_set_cursor_common_partialContext.class);
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return getRuleContext(Declare_set_cursor_common_partialContext.class,i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_set_cursor_common(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_set_cursor_common(this);
		}
	}

	public final Declare_set_cursor_commonContext declare_set_cursor_common() throws RecognitionException {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_declare_set_cursor_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DYNAMIC - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (GLOBAL - 300)))) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SCROLL - 526)) | (1L << (SCROLL_LOCKS - 526)) | (1L << (STATIC - 526)))) != 0) || _la==TYPE_WARNING) {
				{
				{
				setState(9211);
				declare_set_cursor_common_partial();
				}
				}
				setState(9216);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9217);
			match(FOR);
			setState(9218);
			select_statement_standalone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_common_partialContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode STATIC() { return getToken(TSqlParser.STATIC, 0); }
		public TerminalNode KEYSET() { return getToken(TSqlParser.KEYSET, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSqlParser.DYNAMIC, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSqlParser.FAST_FORWARD, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSqlParser.OPTIMISTIC, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common_partial; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_set_cursor_common_partial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_set_cursor_common_partial(this);
		}
	}

	public final Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() throws RecognitionException {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			setState(9225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9220);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FORWARD_ONLY:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9221);
				_la = _input.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DYNAMIC:
			case FAST_FORWARD:
			case KEYSET:
			case STATIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(9222);
				_la = _input.LA(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OPTIMISTIC:
			case READ_ONLY:
			case SCROLL_LOCKS:
				enterOuterAlt(_localctx, 4);
				{
				setState(9223);
				_la = _input.LA(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TYPE_WARNING:
				enterOuterAlt(_localctx, 5);
				{
				setState(9224);
				match(TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_cursorContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(TSqlParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ABSOLUTE() { return getToken(TSqlParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFetch_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFetch_cursor(this);
		}
	}

	public final Fetch_cursorContext fetch_cursor() throws RecognitionException {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_fetch_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9227);
			match(FETCH);
			setState(9237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1303,_ctx) ) {
			case 1:
				{
				setState(9234);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NEXT:
					{
					setState(9228);
					match(NEXT);
					}
					break;
				case PRIOR:
					{
					setState(9229);
					match(PRIOR);
					}
					break;
				case FIRST:
					{
					setState(9230);
					match(FIRST);
					}
					break;
				case LAST:
					{
					setState(9231);
					match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					setState(9232);
					_la = _input.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9233);
					expression(0);
					}
					break;
				case FROM:
					break;
				default:
					break;
				}
				setState(9236);
				match(FROM);
				}
				break;
			}
			setState(9240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1304,_ctx) ) {
			case 1:
				{
				setState(9239);
				match(GLOBAL);
				}
				break;
			}
			setState(9242);
			cursor_name();
			setState(9252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(9243);
				match(INTO);
				setState(9244);
				match(LOCAL_ID);
				setState(9249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9245);
					match(COMMA);
					setState(9246);
					match(LOCAL_ID);
					}
					}
					setState(9251);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(9255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1307,_ctx) ) {
			case 1:
				{
				setState(9254);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_specialContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public TerminalNode IO() { return getToken(TSqlParser.IO, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode PROFILE() { return getToken(TSqlParser.PROFILE, 0); }
		public TerminalNode ROWCOUNT() { return getToken(TSqlParser.ROWCOUNT, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(TSqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(TSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(TSqlParser.LEVEL, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSqlParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(TSqlParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSqlParser.REPEATABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode IDENTITY_INSERT() { return getToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ANSI_DEFAULTS() { return getToken(TSqlParser.ANSI_DEFAULTS, 0); }
		public TerminalNode ANSI_NULL_DFLT_OFF() { return getToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		public TerminalNode ANSI_NULL_DFLT_ON() { return getToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode ARITHIGNORE() { return getToken(TSqlParser.ARITHIGNORE, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode FMTONLY() { return getToken(TSqlParser.FMTONLY, 0); }
		public TerminalNode FORCEPLAN() { return getToken(TSqlParser.FORCEPLAN, 0); }
		public TerminalNode IMPLICIT_TRANSACTIONS() { return getToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		public TerminalNode NOCOUNT() { return getToken(TSqlParser.NOCOUNT, 0); }
		public TerminalNode NOEXEC() { return getToken(TSqlParser.NOEXEC, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode PARSEONLY() { return getToken(TSqlParser.PARSEONLY, 0); }
		public TerminalNode REMOTE_PROC_TRANSACTIONS() { return getToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		public TerminalNode SHOWPLAN_ALL() { return getToken(TSqlParser.SHOWPLAN_ALL, 0); }
		public TerminalNode SHOWPLAN_TEXT() { return getToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		public TerminalNode SHOWPLAN_XML() { return getToken(TSqlParser.SHOWPLAN_XML, 0); }
		public TerminalNode XACT_ABORT() { return getToken(TSqlParser.XACT_ABORT, 0); }
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_special; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSet_special(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSet_special(this);
		}
	}

	public final Set_specialContext set_special() throws RecognitionException {
		Set_specialContext _localctx = new Set_specialContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_set_special);
		int _la;
		try {
			setState(9310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1315,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9257);
				match(SET);
				setState(9258);
				id_();
				setState(9262);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(9259);
					id_();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(9260);
					constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					setState(9261);
					on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1309,_ctx) ) {
				case 1:
					{
					setState(9264);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9267);
				match(SET);
				setState(9268);
				match(STATISTICS);
				setState(9269);
				_la = _input.LA(1);
				if ( !(_la==TIME || _la==XML || _la==IO || _la==PROFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9270);
				on_off();
				setState(9272);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1310,_ctx) ) {
				case 1:
					{
					setState(9271);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9274);
				match(SET);
				setState(9275);
				match(ROWCOUNT);
				setState(9276);
				_la = _input.LA(1);
				if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9278);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1311,_ctx) ) {
				case 1:
					{
					setState(9277);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9280);
				match(SET);
				setState(9281);
				match(TRANSACTION);
				setState(9282);
				match(ISOLATION);
				setState(9283);
				match(LEVEL);
				setState(9293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1312,_ctx) ) {
				case 1:
					{
					setState(9284);
					match(READ);
					setState(9285);
					match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					setState(9286);
					match(READ);
					setState(9287);
					match(COMMITTED);
					}
					break;
				case 3:
					{
					setState(9288);
					match(REPEATABLE);
					setState(9289);
					match(READ);
					}
					break;
				case 4:
					{
					setState(9290);
					match(SNAPSHOT);
					}
					break;
				case 5:
					{
					setState(9291);
					match(SERIALIZABLE);
					}
					break;
				case 6:
					{
					setState(9292);
					match(DECIMAL);
					}
					break;
				}
				setState(9296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1313,_ctx) ) {
				case 1:
					{
					setState(9295);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9298);
				match(SET);
				setState(9299);
				match(IDENTITY_INSERT);
				setState(9300);
				table_name();
				setState(9301);
				on_off();
				setState(9303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1314,_ctx) ) {
				case 1:
					{
					setState(9302);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9305);
				match(SET);
				setState(9306);
				_la = _input.LA(1);
				if ( !(((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (ANSI_NULLS - 209)) | (1L << (ANSI_PADDING - 209)) | (1L << (ANSI_WARNINGS - 209)) | (1L << (ARITHABORT - 209)) | (1L << (CONCAT_NULL_YIELDS_NULL - 209)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 209)))) != 0) || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (NOCOUNT - 432)) | (1L << (NUMERIC_ROUNDABORT - 432)) | (1L << (QUOTED_IDENTIFIER - 432)))) != 0) || ((((_la - 866)) & ~0x3f) == 0 && ((1L << (_la - 866)) & ((1L << (ANSI_DEFAULTS - 866)) | (1L << (ANSI_NULL_DFLT_OFF - 866)) | (1L << (ANSI_NULL_DFLT_ON - 866)) | (1L << (ARITHIGNORE - 866)) | (1L << (FMTONLY - 866)) | (1L << (FORCEPLAN - 866)) | (1L << (IMPLICIT_TRANSACTIONS - 866)) | (1L << (NOEXEC - 866)) | (1L << (PARSEONLY - 866)) | (1L << (REMOTE_PROC_TRANSACTIONS - 866)) | (1L << (SHOWPLAN_ALL - 866)) | (1L << (SHOWPLAN_TEXT - 866)) | (1L << (SHOWPLAN_XML - 866)) | (1L << (XACT_ABORT - 866)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9307);
				on_off();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9308);
				match(SET);
				setState(9309);
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_LOCAL_IDContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_LOCAL_ID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConstant_LOCAL_ID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConstant_LOCAL_ID(this);
		}
	}

	public final Constant_LOCAL_IDContext constant_LOCAL_ID() throws RecognitionException {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_constant_LOCAL_ID);
		try {
			setState(9314);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(9312);
				constant();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(9313);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Token op;
		public Primitive_expressionContext primitive_expression() {
			return getRuleContext(Primitive_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Bracket_expressionContext bracket_expression() {
			return getRuleContext(Bracket_expressionContext.class,0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return getRuleContext(Unary_operator_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode DOLLAR_ACTION() { return getToken(TSqlParser.DOLLAR_ACTION, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Value_callContext value_call() {
			return getRuleContext(Value_callContext.class,0);
		}
		public Query_callContext query_call() {
			return getRuleContext(Query_callContext.class,0);
		}
		public Exist_callContext exist_call() {
			return getRuleContext(Exist_callContext.class,0);
		}
		public Modify_callContext modify_call() {
			return getRuleContext(Modify_callContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Time_zoneContext time_zone() {
			return getRuleContext(Time_zoneContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 774;
		enterRecursionRule(_localctx, 774, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1317,_ctx) ) {
			case 1:
				{
				setState(9317);
				primitive_expression();
				}
				break;
			case 2:
				{
				setState(9318);
				function_call();
				}
				break;
			case 3:
				{
				setState(9319);
				case_expression();
				}
				break;
			case 4:
				{
				setState(9320);
				full_column_name();
				}
				break;
			case 5:
				{
				setState(9321);
				bracket_expression();
				}
				break;
			case 6:
				{
				setState(9322);
				unary_operator_expression();
				}
				break;
			case 7:
				{
				setState(9323);
				over_clause();
				}
				break;
			case 8:
				{
				setState(9324);
				match(DOLLAR_ACTION);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(9348);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1320,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9346);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1319,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9327);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(9328);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & ((1L << (STAR - 855)) | (1L << (DIVIDE - 855)) | (1L << (MODULE - 855)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9329);
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9330);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(9331);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 844)) & ~0x3f) == 0 && ((1L << (_la - 844)) & ((1L << (DOUBLE_BAR - 844)) | (1L << (PLUS - 844)) | (1L << (MINUS - 844)) | (1L << (BIT_OR - 844)) | (1L << (BIT_AND - 844)) | (1L << (BIT_XOR - 844)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9332);
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9333);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(9334);
						match(DOT);
						setState(9339);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case VALUE:
							{
							setState(9335);
							value_call();
							}
							break;
						case QUERY:
							{
							setState(9336);
							query_call();
							}
							break;
						case EXIST:
							{
							setState(9337);
							exist_call();
							}
							break;
						case MODIFY:
							{
							setState(9338);
							modify_call();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9341);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(9342);
						match(COLLATE);
						setState(9343);
						id_();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9344);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(9345);
						time_zone();
						}
						break;
					}
					} 
				}
				setState(9350);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1320,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Time_zoneContext extends ParserRuleContext {
		public TerminalNode AT_KEYWORD() { return getToken(TSqlParser.AT_KEYWORD, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(TSqlParser.ZONE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTime_zone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTime_zone(this);
		}
	}

	public final Time_zoneContext time_zone() throws RecognitionException {
		Time_zoneContext _localctx = new Time_zoneContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_time_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9351);
			match(AT_KEYWORD);
			setState(9352);
			match(TIME);
			setState(9353);
			match(ZONE);
			setState(9354);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primitive_expressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrimitive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrimitive_expression(this);
		}
	}

	public final Primitive_expressionContext primitive_expression() throws RecognitionException {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_primitive_expression);
		try {
			setState(9360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9356);
				match(DEFAULT);
				}
				break;
			case NULL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(9357);
				match(NULL_);
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(9358);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 4);
				{
				setState(9359);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public TerminalNode CASE() { return getToken(TSqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSqlParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCase_expression(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_case_expression);
		int _la;
		try {
			setState(9387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9362);
				match(CASE);
				setState(9363);
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				setState(9365); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(9364);
					switch_section();
					}
					}
					setState(9367); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(9371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(9369);
					match(ELSE);
					setState(9370);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(9373);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9375);
				match(CASE);
				setState(9377); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(9376);
					switch_search_condition_section();
					}
					}
					setState(9379); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(9383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(9381);
					match(ELSE);
					setState(9382);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(9385);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_operator_expressionContext extends ParserRuleContext {
		public Token op;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_operator_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUnary_operator_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUnary_operator_expression(this);
		}
	}

	public final Unary_operator_expressionContext unary_operator_expression() throws RecognitionException {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_unary_operator_expression);
		int _la;
		try {
			setState(9393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIT_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9389);
				match(BIT_NOT);
				setState(9390);
				expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9391);
				((Unary_operator_expressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9392);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bracket_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBracket_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBracket_expression(this);
		}
	}

	public final Bracket_expressionContext bracket_expression() throws RecognitionException {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_bracket_expression);
		try {
			setState(9403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9395);
				match(LR_BRACKET);
				setState(9396);
				expression(0);
				setState(9397);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9399);
				match(LR_BRACKET);
				setState(9400);
				subquery();
				setState(9401);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConstant_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConstant_expression(this);
		}
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_constant_expression);
		try {
			setState(9413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9405);
				match(NULL_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9406);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9407);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9408);
				match(LOCAL_ID);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9409);
				match(LR_BRACKET);
				setState(9410);
				constant_expression();
				setState(9411);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9415);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_expressionContext extends ParserRuleContext {
		public Common_table_expressionContext common_table_expression;
		public List<Common_table_expressionContext> ctes = new ArrayList<Common_table_expressionContext>();
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWith_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWith_expression(this);
		}
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_with_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9417);
			match(WITH);
			setState(9418);
			((With_expressionContext)_localctx).common_table_expression = common_table_expression();
			((With_expressionContext)_localctx).ctes.add(((With_expressionContext)_localctx).common_table_expression);
			setState(9423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9419);
				match(COMMA);
				setState(9420);
				((With_expressionContext)_localctx).common_table_expression = common_table_expression();
				((With_expressionContext)_localctx).ctes.add(((With_expressionContext)_localctx).common_table_expression);
				}
				}
				setState(9425);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_expressionContext extends ParserRuleContext {
		public Id_Context expression_name;
		public Column_name_listContext columns;
		public Select_statementContext cte_query;
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCommon_table_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCommon_table_expression(this);
		}
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9426);
			((Common_table_expressionContext)_localctx).expression_name = id_();
			setState(9431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(9427);
				match(LR_BRACKET);
				setState(9428);
				((Common_table_expressionContext)_localctx).columns = column_name_list();
				setState(9429);
				match(RR_BRACKET);
				}
			}

			setState(9433);
			match(AS);
			setState(9434);
			match(LR_BRACKET);
			setState(9435);
			((Common_table_expressionContext)_localctx).cte_query = select_statement();
			setState(9436);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUpdate_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUpdate_elem(this);
		}
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_update_elem);
		try {
			setState(9463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9438);
				match(LOCAL_ID);
				setState(9439);
				match(EQUAL);
				setState(9440);
				full_column_name();
				setState(9443);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(9441);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(9442);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9445);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9449);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(9447);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(9448);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9453);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(9451);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(9452);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9455);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9456);
				((Update_elemContext)_localctx).udt_column_name = id_();
				setState(9457);
				match(DOT);
				setState(9458);
				((Update_elemContext)_localctx).method_name = id_();
				setState(9459);
				match(LR_BRACKET);
				setState(9460);
				expression_list();
				setState(9461);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elem_mergeContext extends ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context method_name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Update_elem_mergeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem_merge; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUpdate_elem_merge(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUpdate_elem_merge(this);
		}
	}

	public final Update_elem_mergeContext update_elem_merge() throws RecognitionException {
		Update_elem_mergeContext _localctx = new Update_elem_mergeContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_update_elem_merge);
		try {
			setState(9481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9467);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(9465);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(9466);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9471);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(9469);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(9470);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9473);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9474);
				((Update_elem_mergeContext)_localctx).udt_column_name = id_();
				setState(9475);
				match(DOT);
				setState(9476);
				((Update_elem_mergeContext)_localctx).method_name = id_();
				setState(9477);
				match(LR_BRACKET);
				setState(9478);
				expression_list();
				setState(9479);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSearch_condition(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 798;
		enterRecursionRule(_localctx, 798, RULE_search_condition, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NOT) {
				{
				{
				setState(9484);
				match(NOT);
				}
				}
				setState(9489);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1340,_ctx) ) {
			case 1:
				{
				setState(9490);
				predicate();
				}
				break;
			case 2:
				{
				setState(9491);
				match(LR_BRACKET);
				setState(9492);
				search_condition(0);
				setState(9493);
				match(RR_BRACKET);
				}
				break;
			}
			}
			_ctx.stop = _input.LT(-1);
			setState(9505);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1342,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9503);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1341,_ctx) ) {
					case 1:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						setState(9497);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(9498);
						match(AND);
						setState(9499);
						search_condition(3);
						}
						break;
					case 2:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						setState(9500);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(9501);
						match(OR);
						setState(9502);
						search_condition(2);
						}
						break;
					}
					} 
				}
				setState(9507);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1342,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Freetext_predicateContext freetext_predicate() {
			return getRuleContext(Freetext_predicateContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(TSqlParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(TSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(TSqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(TSqlParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPredicate(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_predicate);
		int _la;
		try {
			setState(9569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1348,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9508);
				match(EXISTS);
				setState(9509);
				match(LR_BRACKET);
				setState(9510);
				subquery();
				setState(9511);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9513);
				freetext_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9514);
				expression(0);
				setState(9515);
				comparison_operator();
				setState(9516);
				expression(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9518);
				expression(0);
				setState(9519);
				comparison_operator();
				setState(9520);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9521);
				match(LR_BRACKET);
				setState(9522);
				subquery();
				setState(9523);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9525);
				expression(0);
				setState(9529);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NOT) {
					{
					{
					setState(9526);
					match(NOT);
					}
					}
					setState(9531);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9532);
				match(BETWEEN);
				setState(9533);
				expression(0);
				setState(9534);
				match(AND);
				setState(9535);
				expression(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9537);
				expression(0);
				setState(9541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NOT) {
					{
					{
					setState(9538);
					match(NOT);
					}
					}
					setState(9543);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9544);
				match(IN);
				setState(9545);
				match(LR_BRACKET);
				setState(9548);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1345,_ctx) ) {
				case 1:
					{
					setState(9546);
					subquery();
					}
					break;
				case 2:
					{
					setState(9547);
					expression_list();
					}
					break;
				}
				setState(9550);
				match(RR_BRACKET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9552);
				expression(0);
				setState(9556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NOT) {
					{
					{
					setState(9553);
					match(NOT);
					}
					}
					setState(9558);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9559);
				match(LIKE);
				setState(9560);
				expression(0);
				setState(9563);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1347,_ctx) ) {
				case 1:
					{
					setState(9561);
					match(ESCAPE);
					setState(9562);
					expression(0);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9565);
				expression(0);
				setState(9566);
				match(IS);
				setState(9567);
				null_notnull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Sql_unionContext sql_union;
		public List<Sql_unionContext> unions = new ArrayList<Sql_unionContext>();
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public List<Sql_unionContext> sql_union() {
			return getRuleContexts(Sql_unionContext.class);
		}
		public Sql_unionContext sql_union(int i) {
			return getRuleContext(Sql_unionContext.class,i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_expression(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_query_expression);
		int _la;
		try {
			setState(9587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1352,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9576);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
					{
					setState(9571);
					query_specification();
					}
					break;
				case LR_BRACKET:
					{
					setState(9572);
					match(LR_BRACKET);
					setState(9573);
					query_expression();
					setState(9574);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9578);
				query_specification();
				setState(9580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(9579);
					order_by_clause();
					}
				}

				setState(9583); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(9582);
					((Query_expressionContext)_localctx).sql_union = sql_union();
					((Query_expressionContext)_localctx).unions.add(((Query_expressionContext)_localctx).sql_union);
					}
					}
					setState(9585); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==EXCEPT || _la==INTERSECT || _la==UNION );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_unionContext extends ParserRuleContext {
		public Query_specificationContext spec;
		public Query_expressionContext op;
		public TerminalNode UNION() { return getToken(TSqlParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(TSqlParser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Sql_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_union; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_union(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_union(this);
		}
	}

	public final Sql_unionContext sql_union() throws RecognitionException {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_sql_union);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9595);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(9589);
				match(UNION);
				setState(9591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(9590);
					match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				setState(9593);
				match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				setState(9594);
				match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9602);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(9597);
				((Sql_unionContext)_localctx).spec = query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				setState(9598);
				match(LR_BRACKET);
				setState(9599);
				((Sql_unionContext)_localctx).op = query_expression();
				setState(9600);
				match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Token allOrDistinct;
		public Top_clauseContext top;
		public Select_listContext columns;
		public Table_nameContext into;
		public Table_sourcesContext from;
		public Search_conditionContext where;
		public Token groupByAll;
		public Group_by_itemContext group_by_item;
		public List<Group_by_itemContext> groupBys = new ArrayList<Group_by_itemContext>();
		public Search_conditionContext having;
		public TerminalNode SELECT() { return getToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode HAVING() { return getToken(TSqlParser.HAVING, 0); }
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_specification(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_query_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9604);
			match(SELECT);
			setState(9606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(9605);
				((Query_specificationContext)_localctx).allOrDistinct = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((Query_specificationContext)_localctx).allOrDistinct = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(9608);
				((Query_specificationContext)_localctx).top = top_clause();
				}
			}

			setState(9611);
			((Query_specificationContext)_localctx).columns = select_list();
			setState(9614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(9612);
				match(INTO);
				setState(9613);
				((Query_specificationContext)_localctx).into = table_name();
				}
			}

			setState(9618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(9616);
				match(FROM);
				setState(9617);
				((Query_specificationContext)_localctx).from = table_sources();
				}
			}

			setState(9622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(9620);
				match(WHERE);
				setState(9621);
				((Query_specificationContext)_localctx).where = search_condition(0);
				}
			}

			setState(9637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(9624);
				match(GROUP);
				setState(9625);
				match(BY);
				setState(9627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(9626);
					((Query_specificationContext)_localctx).groupByAll = match(ALL);
					}
				}

				setState(9629);
				((Query_specificationContext)_localctx).group_by_item = group_by_item();
				((Query_specificationContext)_localctx).groupBys.add(((Query_specificationContext)_localctx).group_by_item);
				setState(9634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9630);
					match(COMMA);
					setState(9631);
					((Query_specificationContext)_localctx).group_by_item = group_by_item();
					((Query_specificationContext)_localctx).groupBys.add(((Query_specificationContext)_localctx).group_by_item);
					}
					}
					setState(9636);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(9641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(9639);
				match(HAVING);
				setState(9640);
				((Query_specificationContext)_localctx).having = search_condition(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return getRuleContext(Top_percentContext.class,0);
		}
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTop_clause(this);
		}
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_top_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9643);
			match(TOP);
			setState(9646);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1365,_ctx) ) {
			case 1:
				{
				setState(9644);
				top_percent();
				}
				break;
			case 2:
				{
				setState(9645);
				top_count();
				}
				break;
			}
			setState(9650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9648);
				match(WITH);
				setState(9649);
				match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_percentContext extends ParserRuleContext {
		public Token percent_constant;
		public ExpressionContext topper_expression;
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public TerminalNode REAL() { return getToken(TSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSqlParser.FLOAT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_percent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTop_percent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTop_percent(this);
		}
	}

	public final Top_percentContext top_percent() throws RecognitionException {
		Top_percentContext _localctx = new Top_percentContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_top_percent);
		int _la;
		try {
			setState(9659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case FLOAT:
			case REAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9652);
				((Top_percentContext)_localctx).percent_constant = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 826)) & ~0x3f) == 0 && ((1L << (_la - 826)) & ((1L << (DECIMAL - 826)) | (1L << (FLOAT - 826)) | (1L << (REAL - 826)))) != 0)) ) {
					((Top_percentContext)_localctx).percent_constant = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9653);
				match(PERCENT);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9654);
				match(LR_BRACKET);
				setState(9655);
				((Top_percentContext)_localctx).topper_expression = expression(0);
				setState(9656);
				match(RR_BRACKET);
				setState(9657);
				match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_countContext extends ParserRuleContext {
		public Token count_constant;
		public ExpressionContext topcount_expression;
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTop_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTop_count(this);
		}
	}

	public final Top_countContext top_count() throws RecognitionException {
		Top_countContext _localctx = new Top_countContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_top_count);
		try {
			setState(9666);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9661);
				((Top_countContext)_localctx).count_constant = match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9662);
				match(LR_BRACKET);
				setState(9663);
				((Top_countContext)_localctx).topcount_expression = expression(0);
				setState(9664);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public Order_by_expressionContext order_by_expression;
		public List<Order_by_expressionContext> order_bys = new ArrayList<Order_by_expressionContext>();
		public ExpressionContext offset_exp;
		public Token offset_rows;
		public Token fetch_offset;
		public ExpressionContext fetch_exp;
		public Token fetch_rows;
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(TSqlParser.OFFSET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(TSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(TSqlParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(TSqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(TSqlParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(TSqlParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9668);
			match(ORDER);
			setState(9669);
			match(BY);
			setState(9670);
			((Order_by_clauseContext)_localctx).order_by_expression = order_by_expression();
			((Order_by_clauseContext)_localctx).order_bys.add(((Order_by_clauseContext)_localctx).order_by_expression);
			setState(9675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9671);
				match(COMMA);
				setState(9672);
				((Order_by_clauseContext)_localctx).order_by_expression = order_by_expression();
				((Order_by_clauseContext)_localctx).order_bys.add(((Order_by_clauseContext)_localctx).order_by_expression);
				}
				}
				setState(9677);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1371,_ctx) ) {
			case 1:
				{
				setState(9678);
				match(OFFSET);
				setState(9679);
				((Order_by_clauseContext)_localctx).offset_exp = expression(0);
				setState(9680);
				((Order_by_clauseContext)_localctx).offset_rows = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
					((Order_by_clauseContext)_localctx).offset_rows = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9687);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1370,_ctx) ) {
				case 1:
					{
					setState(9681);
					match(FETCH);
					setState(9682);
					((Order_by_clauseContext)_localctx).fetch_offset = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
						((Order_by_clauseContext)_localctx).fetch_offset = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9683);
					((Order_by_clauseContext)_localctx).fetch_exp = expression(0);
					setState(9684);
					((Order_by_clauseContext)_localctx).fetch_rows = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
						((Order_by_clauseContext)_localctx).fetch_rows = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9685);
					match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(TSqlParser.BROWSE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode RAW() { return getToken(TSqlParser.RAW, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<Xml_common_directivesContext> xml_common_directives() {
			return getRuleContexts(Xml_common_directivesContext.class);
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return getRuleContext(Xml_common_directivesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode ELEMENTS() { return getToken(TSqlParser.ELEMENTS, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode XMLDATA() { return getToken(TSqlParser.XMLDATA, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(TSqlParser.XMLSCHEMA, 0); }
		public TerminalNode XSINIL() { return getToken(TSqlParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(TSqlParser.ABSENT, 0); }
		public TerminalNode EXPLICIT() { return getToken(TSqlParser.EXPLICIT, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode JSON() { return getToken(TSqlParser.JSON, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFor_clause(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_for_clause);
		int _la;
		try {
			int _alt;
			setState(9783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1390,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9691);
				match(FOR);
				setState(9692);
				match(BROWSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9693);
				match(FOR);
				setState(9694);
				match(XML);
				setState(9702);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RAW:
					{
					setState(9695);
					match(RAW);
					setState(9699);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1372,_ctx) ) {
					case 1:
						{
						setState(9696);
						match(LR_BRACKET);
						setState(9697);
						match(STRING);
						setState(9698);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					setState(9701);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9707);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1374,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9704);
						xml_common_directives();
						}
						} 
					}
					setState(9709);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1374,_ctx);
				}
				setState(9720);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1377,_ctx) ) {
				case 1:
					{
					setState(9710);
					match(COMMA);
					setState(9718);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case XMLDATA:
						{
						setState(9711);
						match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						setState(9712);
						match(XMLSCHEMA);
						setState(9716);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1375,_ctx) ) {
						case 1:
							{
							setState(9713);
							match(LR_BRACKET);
							setState(9714);
							match(STRING);
							setState(9715);
							match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(9727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9722);
					match(COMMA);
					setState(9723);
					match(ELEMENTS);
					setState(9725);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1378,_ctx) ) {
					case 1:
						{
						setState(9724);
						_la = _input.LA(1);
						if ( !(_la==XSINIL || _la==ABSENT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9729);
				match(FOR);
				setState(9730);
				match(XML);
				setState(9731);
				match(EXPLICIT);
				setState(9735);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1380,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9732);
						xml_common_directives();
						}
						} 
					}
					setState(9737);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1380,_ctx);
				}
				setState(9740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9738);
					match(COMMA);
					setState(9739);
					match(XMLDATA);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9742);
				match(FOR);
				setState(9743);
				match(XML);
				setState(9744);
				match(PATH);
				setState(9748);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1382,_ctx) ) {
				case 1:
					{
					setState(9745);
					match(LR_BRACKET);
					setState(9746);
					match(STRING);
					setState(9747);
					match(RR_BRACKET);
					}
					break;
				}
				setState(9753);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1383,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9750);
						xml_common_directives();
						}
						} 
					}
					setState(9755);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1383,_ctx);
				}
				setState(9761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9756);
					match(COMMA);
					setState(9757);
					match(ELEMENTS);
					setState(9759);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1384,_ctx) ) {
					case 1:
						{
						setState(9758);
						_la = _input.LA(1);
						if ( !(_la==XSINIL || _la==ABSENT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9763);
				match(FOR);
				setState(9764);
				match(JSON);
				setState(9765);
				_la = _input.LA(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1387,_ctx) ) {
				case 1:
					{
					setState(9766);
					match(COMMA);
					setState(9767);
					match(ROOT);
					setState(9771);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1386,_ctx) ) {
					case 1:
						{
						setState(9768);
						match(LR_BRACKET);
						setState(9769);
						match(STRING);
						setState(9770);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(9777);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1388,_ctx) ) {
				case 1:
					{
					setState(9775);
					match(COMMA);
					setState(9776);
					match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				setState(9781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9779);
					match(COMMA);
					setState(9780);
					match(WITHOUT_ARRAY_WRAPPER);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode BINARY_BASE64() { return getToken(TSqlParser.BINARY_BASE64, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_common_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_common_directives(this);
		}
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_xml_common_directives);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9785);
			match(COMMA);
			setState(9794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_BASE64:
				{
				setState(9786);
				match(BINARY_BASE64);
				}
				break;
			case TYPE:
				{
				setState(9787);
				match(TYPE);
				}
				break;
			case ROOT:
				{
				setState(9788);
				match(ROOT);
				setState(9792);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1391,_ctx) ) {
				case 1:
					{
					setState(9789);
					match(LR_BRACKET);
					setState(9790);
					match(STRING);
					setState(9791);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext order_by;
		public Token ascending;
		public Token descending;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(TSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOrder_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOrder_by_expression(this);
		}
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_order_by_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9796);
			((Order_by_expressionContext)_localctx).order_by = expression(0);
			setState(9799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC:
				{
				setState(9797);
				((Order_by_expressionContext)_localctx).ascending = match(ASC);
				}
				break;
			case DESC:
				{
				setState(9798);
				((Order_by_expressionContext)_localctx).descending = match(DESC);
				}
				break;
			case EOF:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DENY:
			case DROP:
			case ELSE:
			case END:
			case EXCEPT:
			case EXECUTE:
			case FETCH:
			case FOR:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case INTERSECT:
			case KILL:
			case MERGE:
			case OPEN:
			case OPENJSON:
			case OPTION:
			case PRECISION:
			case PRINT:
			case RAISERROR:
			case RECONFIGURE:
			case RETURN:
			case REVERT:
			case REVOKE:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case SHUTDOWN:
			case TRUNCATE:
			case UNION:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOT:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGroup_by_item(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_group_by_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9801);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_clauseContext extends ParserRuleContext {
		public OptionContext option;
		public List<OptionContext> options = new ArrayList<OptionContext>();
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOption_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOption_clause(this);
		}
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9803);
			match(OPTION);
			setState(9804);
			match(LR_BRACKET);
			setState(9805);
			((Option_clauseContext)_localctx).option = option();
			((Option_clauseContext)_localctx).options.add(((Option_clauseContext)_localctx).option);
			setState(9810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9806);
				match(COMMA);
				setState(9807);
				((Option_clauseContext)_localctx).option = option();
				((Option_clauseContext)_localctx).options.add(((Option_clauseContext)_localctx).option);
				}
				}
				setState(9812);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9813);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Token number_of_processors;
		public Token number_recursion;
		public TerminalNode FAST() { return getToken(TSqlParser.FAST, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(TSqlParser.UNION, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public TerminalNode CONCAT() { return getToken(TSqlParser.CONCAT, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(TSqlParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(TSqlParser.VIEWS, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(TSqlParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(TSqlParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSqlParser.KEEPFIXED, 0); }
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSqlParser.MAXRECURSION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSqlParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(TSqlParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(TSqlParser.USE, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOption(this);
		}
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_option);
		int _la;
		try {
			setState(9860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9815);
				match(FAST);
				setState(9816);
				((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9817);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9818);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9819);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9820);
				match(UNION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9821);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9822);
				match(JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9823);
				match(EXPAND);
				setState(9824);
				match(VIEWS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9825);
				match(FORCE);
				setState(9826);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9827);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9828);
				match(KEEP);
				setState(9829);
				match(PLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9830);
				match(KEEPFIXED);
				setState(9831);
				match(PLAN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9832);
				match(MAXDOP);
				setState(9833);
				((OptionContext)_localctx).number_of_processors = match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9834);
				match(MAXRECURSION);
				setState(9835);
				((OptionContext)_localctx).number_recursion = match(DECIMAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9836);
				match(OPTIMIZE);
				setState(9837);
				match(FOR);
				setState(9838);
				match(LR_BRACKET);
				setState(9839);
				optimize_for_arg();
				setState(9844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9840);
					match(COMMA);
					setState(9841);
					optimize_for_arg();
					}
					}
					setState(9846);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9847);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9849);
				match(OPTIMIZE);
				setState(9850);
				match(FOR);
				setState(9851);
				match(UNKNOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9852);
				match(PARAMETERIZATION);
				setState(9853);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9854);
				match(RECOMPILE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9855);
				match(ROBUST);
				setState(9856);
				match(PLAN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9857);
				match(USE);
				setState(9858);
				match(PLAN);
				setState(9859);
				match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOptimize_for_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOptimize_for_arg(this);
		}
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9862);
			match(LOCAL_ID);
			setState(9869);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(9863);
				match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(9864);
				match(EQUAL);
				setState(9867);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(9865);
					constant();
					}
					break;
				case NULL_:
					{
					setState(9866);
					match(NULL_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public Select_list_elemContext select_list_elem;
		public List<Select_list_elemContext> selectElement = new ArrayList<Select_list_elemContext>();
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_list(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_select_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9871);
			((Select_listContext)_localctx).select_list_elem = select_list_elem();
			((Select_listContext)_localctx).selectElement.add(((Select_listContext)_localctx).select_list_elem);
			setState(9876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9872);
				match(COMMA);
				setState(9873);
				((Select_listContext)_localctx).select_list_elem = select_list_elem();
				((Select_listContext)_localctx).selectElement.add(((Select_listContext)_localctx).select_list_elem);
				}
				}
				setState(9878);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_method_argumentsContext extends ParserRuleContext {
		public Execute_var_stringContext execute_var_string;
		public List<Execute_var_stringContext> argument = new ArrayList<Execute_var_stringContext>();
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_method_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUdt_method_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUdt_method_arguments(this);
		}
	}

	public final Udt_method_argumentsContext udt_method_arguments() throws RecognitionException {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_udt_method_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9879);
			match(LR_BRACKET);
			setState(9880);
			((Udt_method_argumentsContext)_localctx).execute_var_string = execute_var_string();
			((Udt_method_argumentsContext)_localctx).argument.add(((Udt_method_argumentsContext)_localctx).execute_var_string);
			setState(9885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9881);
				match(COMMA);
				setState(9882);
				((Udt_method_argumentsContext)_localctx).execute_var_string = execute_var_string();
				((Udt_method_argumentsContext)_localctx).argument.add(((Udt_method_argumentsContext)_localctx).execute_var_string);
				}
				}
				setState(9887);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9888);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode INSERTED() { return getToken(TSqlParser.INSERTED, 0); }
		public TerminalNode DELETED() { return getToken(TSqlParser.DELETED, 0); }
		public AsteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asterisk; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsterisk(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsterisk(this);
		}
	}

	public final AsteriskContext asterisk() throws RecognitionException {
		AsteriskContext _localctx = new AsteriskContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_asterisk);
		int _la;
		try {
			setState(9899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(9890);
					table_name();
					setState(9891);
					match(DOT);
					}
				}

				setState(9895);
				match(STAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9896);
				_la = _input.LA(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9897);
				match(DOT);
				setState(9898);
				match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_elemContext extends ParserRuleContext {
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUID() { return getToken(TSqlParser.ROWGUID, 0); }
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_elem(this);
		}
	}

	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_column_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1403,_ctx) ) {
			case 1:
				{
				setState(9901);
				full_column_name();
				}
				break;
			case 2:
				{
				setState(9902);
				match(DOLLAR);
				setState(9903);
				match(IDENTITY);
				}
				break;
			case 3:
				{
				setState(9904);
				match(DOLLAR);
				setState(9905);
				match(ROWGUID);
				}
				break;
			case 4:
				{
				setState(9906);
				match(NULL_);
				}
				break;
			}
			setState(9910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1404,_ctx) ) {
			case 1:
				{
				setState(9909);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_elemContext extends ParserRuleContext {
		public Id_Context udt_column_name;
		public Id_Context non_static_attr;
		public Id_Context static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return getRuleContext(Udt_method_argumentsContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Udt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUdt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUdt_elem(this);
		}
	}

	public final Udt_elemContext udt_elem() throws RecognitionException {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_udt_elem);
		try {
			setState(9929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9912);
				((Udt_elemContext)_localctx).udt_column_name = id_();
				setState(9913);
				match(DOT);
				setState(9914);
				((Udt_elemContext)_localctx).non_static_attr = id_();
				setState(9915);
				udt_method_arguments();
				setState(9917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1405,_ctx) ) {
				case 1:
					{
					setState(9916);
					as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9919);
				((Udt_elemContext)_localctx).udt_column_name = id_();
				setState(9920);
				match(COLON);
				setState(9921);
				match(COLON);
				setState(9922);
				((Udt_elemContext)_localctx).static_attr = id_();
				setState(9924);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1406,_ctx) ) {
				case 1:
					{
					setState(9923);
					udt_method_arguments();
					}
					break;
				}
				setState(9927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1407,_ctx) ) {
				case 1:
					{
					setState(9926);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_elemContext extends ParserRuleContext {
		public Column_aliasContext leftAlias;
		public Token eq;
		public ExpressionContext leftAssignment;
		public ExpressionContext expressionAs;
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExpression_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExpression_elem(this);
		}
	}

	public final Expression_elemContext expression_elem() throws RecognitionException {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_expression_elem);
		try {
			setState(9939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1410,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9931);
				((Expression_elemContext)_localctx).leftAlias = column_alias();
				setState(9932);
				((Expression_elemContext)_localctx).eq = match(EQUAL);
				setState(9933);
				((Expression_elemContext)_localctx).leftAssignment = expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9935);
				((Expression_elemContext)_localctx).expressionAs = expression(0);
				setState(9937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1409,_ctx) ) {
				case 1:
					{
					setState(9936);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public Column_elemContext column_elem() {
			return getRuleContext(Column_elemContext.class,0);
		}
		public Udt_elemContext udt_elem() {
			return getRuleContext(Udt_elemContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Expression_elemContext expression_elem() {
			return getRuleContext(Expression_elemContext.class,0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_list_elem(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_select_list_elem);
		try {
			setState(9951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1412,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9941);
				asterisk();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9942);
				column_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9943);
				udt_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9944);
				match(LOCAL_ID);
				setState(9947);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(9945);
					assignment_operator();
					}
					break;
				case EQUAL:
					{
					setState(9946);
					match(EQUAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9949);
				expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9950);
				expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourcesContext extends ParserRuleContext {
		public Table_sourceContext table_source;
		public List<Table_sourceContext> source = new ArrayList<Table_sourceContext>();
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_sources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_sources(this);
		}
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_table_sources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9953);
			((Table_sourcesContext)_localctx).table_source = table_source();
			((Table_sourcesContext)_localctx).source.add(((Table_sourcesContext)_localctx).table_source);
			setState(9958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9954);
				match(COMMA);
				setState(9955);
				((Table_sourcesContext)_localctx).table_source = table_source();
				((Table_sourcesContext)_localctx).source.add(((Table_sourcesContext)_localctx).table_source);
				}
				}
				setState(9960);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_source(this);
		}
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_table_source);
		try {
			setState(9966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1414,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9961);
				table_source_item_joined();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9962);
				match(LR_BRACKET);
				setState(9963);
				table_source();
				setState(9964);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Join_partContext join_part;
		public List<Join_partContext> joins = new ArrayList<Join_partContext>();
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_source_item_joined(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_source_item_joined(this);
		}
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_table_source_item_joined);
		try {
			int _alt;
			setState(9984);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9968);
				table_source_item();
				setState(9972);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1415,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9969);
						((Table_source_item_joinedContext)_localctx).join_part = join_part();
						((Table_source_item_joinedContext)_localctx).joins.add(((Table_source_item_joinedContext)_localctx).join_part);
						}
						} 
					}
					setState(9974);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1415,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9975);
				match(LR_BRACKET);
				setState(9976);
				table_source_item_joined();
				setState(9977);
				match(RR_BRACKET);
				setState(9981);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1416,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9978);
						((Table_source_item_joinedContext)_localctx).join_part = join_part();
						((Table_source_item_joinedContext)_localctx).joins.add(((Table_source_item_joinedContext)_localctx).join_part);
						}
						} 
					}
					setState(9983);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1416,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_itemContext extends ParserRuleContext {
		public Token loc_id;
		public Token loc_id_call;
		public Function_callContext loc_fcall;
		public Function_callContext oldstyle_fcall;
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Nodes_methodContext nodes_method() {
			return getRuleContext(Nodes_methodContext.class,0);
		}
		public Open_xmlContext open_xml() {
			return getRuleContext(Open_xmlContext.class,0);
		}
		public Open_jsonContext open_json() {
			return getRuleContext(Open_jsonContext.class,0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_source_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_source_item(this);
		}
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_table_source_item);
		try {
			setState(10046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1432,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9986);
				table_name_with_hint();
				setState(9988);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1418,_ctx) ) {
				case 1:
					{
					setState(9987);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9990);
				full_table_name();
				setState(9992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1419,_ctx) ) {
				case 1:
					{
					setState(9991);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9994);
				rowset_function();
				setState(9996);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1420,_ctx) ) {
				case 1:
					{
					setState(9995);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9998);
				match(LR_BRACKET);
				setState(9999);
				derived_table();
				setState(10000);
				match(RR_BRACKET);
				setState(10005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1422,_ctx) ) {
				case 1:
					{
					setState(10001);
					as_table_alias();
					setState(10003);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1421,_ctx) ) {
					case 1:
						{
						setState(10002);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10007);
				change_table();
				setState(10009);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1423,_ctx) ) {
				case 1:
					{
					setState(10008);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10011);
				function_call();
				setState(10016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1425,_ctx) ) {
				case 1:
					{
					setState(10012);
					as_table_alias();
					setState(10014);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1424,_ctx) ) {
					case 1:
						{
						setState(10013);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10018);
				((Table_source_itemContext)_localctx).loc_id = match(LOCAL_ID);
				setState(10020);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1426,_ctx) ) {
				case 1:
					{
					setState(10019);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10022);
				nodes_method();
				setState(10027);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1428,_ctx) ) {
				case 1:
					{
					setState(10023);
					as_table_alias();
					setState(10025);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1427,_ctx) ) {
					case 1:
						{
						setState(10024);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10029);
				((Table_source_itemContext)_localctx).loc_id_call = match(LOCAL_ID);
				setState(10030);
				match(DOT);
				setState(10031);
				((Table_source_itemContext)_localctx).loc_fcall = function_call();
				setState(10036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1430,_ctx) ) {
				case 1:
					{
					setState(10032);
					as_table_alias();
					setState(10034);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1429,_ctx) ) {
					case 1:
						{
						setState(10033);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10038);
				open_xml();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10039);
				open_json();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10040);
				match(COLON);
				setState(10041);
				match(COLON);
				setState(10042);
				((Table_source_itemContext)_localctx).oldstyle_fcall = function_call();
				setState(10044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1431,_ctx) ) {
				case 1:
					{
					setState(10043);
					as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_xmlContext extends ParserRuleContext {
		public TerminalNode OPENXML() { return getToken(TSqlParser.OPENXML, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return getRuleContext(Schema_declarationContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_xml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpen_xml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpen_xml(this);
		}
	}

	public final Open_xmlContext open_xml() throws RecognitionException {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_open_xml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10048);
			match(OPENXML);
			setState(10049);
			match(LR_BRACKET);
			setState(10050);
			expression(0);
			setState(10051);
			match(COMMA);
			setState(10052);
			expression(0);
			setState(10055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10053);
				match(COMMA);
				setState(10054);
				expression(0);
				}
			}

			setState(10057);
			match(RR_BRACKET);
			setState(10063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1434,_ctx) ) {
			case 1:
				{
				setState(10058);
				match(WITH);
				setState(10059);
				match(LR_BRACKET);
				setState(10060);
				schema_declaration();
				setState(10061);
				match(RR_BRACKET);
				}
				break;
			}
			setState(10066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1435,_ctx) ) {
			case 1:
				{
				setState(10065);
				as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_jsonContext extends ParserRuleContext {
		public TerminalNode OPENJSON() { return getToken(TSqlParser.OPENJSON, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Json_declarationContext json_declaration() {
			return getRuleContext(Json_declarationContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Open_jsonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_json; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpen_json(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpen_json(this);
		}
	}

	public final Open_jsonContext open_json() throws RecognitionException {
		Open_jsonContext _localctx = new Open_jsonContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_open_json);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10068);
			match(OPENJSON);
			setState(10069);
			match(LR_BRACKET);
			setState(10070);
			expression(0);
			setState(10073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10071);
				match(COMMA);
				setState(10072);
				expression(0);
				}
			}

			setState(10075);
			match(RR_BRACKET);
			setState(10081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1437,_ctx) ) {
			case 1:
				{
				setState(10076);
				match(WITH);
				setState(10077);
				match(LR_BRACKET);
				setState(10078);
				json_declaration();
				setState(10079);
				match(RR_BRACKET);
				}
				break;
			}
			setState(10084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1438,_ctx) ) {
			case 1:
				{
				setState(10083);
				as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_declarationContext extends ParserRuleContext {
		public Json_column_declarationContext json_column_declaration;
		public List<Json_column_declarationContext> json_col = new ArrayList<Json_column_declarationContext>();
		public List<Json_column_declarationContext> json_column_declaration() {
			return getRuleContexts(Json_column_declarationContext.class);
		}
		public Json_column_declarationContext json_column_declaration(int i) {
			return getRuleContext(Json_column_declarationContext.class,i);
		}
		public Json_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterJson_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitJson_declaration(this);
		}
	}

	public final Json_declarationContext json_declaration() throws RecognitionException {
		Json_declarationContext _localctx = new Json_declarationContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_json_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10086);
			((Json_declarationContext)_localctx).json_column_declaration = json_column_declaration();
			((Json_declarationContext)_localctx).json_col.add(((Json_declarationContext)_localctx).json_column_declaration);
			setState(10091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10087);
				match(COMMA);
				setState(10088);
				((Json_declarationContext)_localctx).json_column_declaration = json_column_declaration();
				((Json_declarationContext)_localctx).json_col.add(((Json_declarationContext)_localctx).json_column_declaration);
				}
				}
				setState(10093);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_column_declarationContext extends ParserRuleContext {
		public Column_declarationContext column_declaration() {
			return getRuleContext(Column_declarationContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode JSON() { return getToken(TSqlParser.JSON, 0); }
		public Json_column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_column_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterJson_column_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitJson_column_declaration(this);
		}
	}

	public final Json_column_declarationContext json_column_declaration() throws RecognitionException {
		Json_column_declarationContext _localctx = new Json_column_declarationContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_json_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10094);
			column_declaration();
			setState(10097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(10095);
				match(AS);
				setState(10096);
				match(JSON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_declarationContext extends ParserRuleContext {
		public Column_declarationContext column_declaration;
		public List<Column_declarationContext> xml_col = new ArrayList<Column_declarationContext>();
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSchema_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSchema_declaration(this);
		}
	}

	public final Schema_declarationContext schema_declaration() throws RecognitionException {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_schema_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10099);
			((Schema_declarationContext)_localctx).column_declaration = column_declaration();
			((Schema_declarationContext)_localctx).xml_col.add(((Schema_declarationContext)_localctx).column_declaration);
			setState(10104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10100);
				match(COMMA);
				setState(10101);
				((Schema_declarationContext)_localctx).column_declaration = column_declaration();
				((Schema_declarationContext)_localctx).xml_col.add(((Schema_declarationContext)_localctx).column_declaration);
				}
				}
				setState(10106);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_declarationContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_declaration(this);
		}
	}

	public final Column_declarationContext column_declaration() throws RecognitionException {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10107);
			id_();
			setState(10108);
			data_type();
			setState(10110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(10109);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tableContext extends ParserRuleContext {
		public Change_table_changesContext change_table_changes() {
			return getRuleContext(Change_table_changesContext.class,0);
		}
		public Change_table_versionContext change_table_version() {
			return getRuleContext(Change_table_versionContext.class,0);
		}
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_table(this);
		}
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_change_table);
		try {
			setState(10114);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1443,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10112);
				change_table_changes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10113);
				change_table_version();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_table_changesContext extends ParserRuleContext {
		public Table_nameContext changetable;
		public Token changesid;
		public TerminalNode CHANGETABLE() { return getToken(TSqlParser.CHANGETABLE, 0); }
		public TerminalNode CHANGES() { return getToken(TSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Change_table_changesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table_changes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_table_changes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_table_changes(this);
		}
	}

	public final Change_table_changesContext change_table_changes() throws RecognitionException {
		Change_table_changesContext _localctx = new Change_table_changesContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_change_table_changes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10116);
			match(CHANGETABLE);
			setState(10117);
			match(LR_BRACKET);
			setState(10118);
			match(CHANGES);
			setState(10119);
			((Change_table_changesContext)_localctx).changetable = table_name();
			setState(10120);
			match(COMMA);
			setState(10121);
			((Change_table_changesContext)_localctx).changesid = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==NULL_ || _la==LOCAL_ID || _la==DECIMAL) ) {
				((Change_table_changesContext)_localctx).changesid = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10122);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_table_versionContext extends ParserRuleContext {
		public Table_nameContext versiontable;
		public Full_column_name_listContext pk_columns;
		public Select_listContext pk_values;
		public TerminalNode CHANGETABLE() { return getToken(TSqlParser.CHANGETABLE, 0); }
		public TerminalNode VERSION() { return getToken(TSqlParser.VERSION, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Change_table_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_table_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_table_version(this);
		}
	}

	public final Change_table_versionContext change_table_version() throws RecognitionException {
		Change_table_versionContext _localctx = new Change_table_versionContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_change_table_version);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10124);
			match(CHANGETABLE);
			setState(10125);
			match(LR_BRACKET);
			setState(10126);
			match(VERSION);
			setState(10127);
			((Change_table_versionContext)_localctx).versiontable = table_name();
			setState(10128);
			match(COMMA);
			setState(10129);
			((Change_table_versionContext)_localctx).pk_columns = full_column_name_list();
			setState(10130);
			match(COMMA);
			setState(10131);
			((Change_table_versionContext)_localctx).pk_values = select_list();
			setState(10132);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_partContext extends ParserRuleContext {
		public Join_onContext join_on() {
			return getRuleContext(Join_onContext.class,0);
		}
		public Cross_joinContext cross_join() {
			return getRuleContext(Cross_joinContext.class,0);
		}
		public Apply_Context apply_() {
			return getRuleContext(Apply_Context.class,0);
		}
		public PivotContext pivot() {
			return getRuleContext(PivotContext.class,0);
		}
		public UnpivotContext unpivot() {
			return getRuleContext(UnpivotContext.class,0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterJoin_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitJoin_part(this);
		}
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_join_part);
		try {
			setState(10139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1444,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10134);
				join_on();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10135);
				cross_join();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10136);
				apply_();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10137);
				pivot();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10138);
				unpivot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_onContext extends ParserRuleContext {
		public Token inner;
		public Token join_type;
		public Token outer;
		public Token join_hint;
		public Table_sourceContext source;
		public Search_conditionContext cond;
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(TSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(TSqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode INNER() { return getToken(TSqlParser.INNER, 0); }
		public TerminalNode OUTER() { return getToken(TSqlParser.OUTER, 0); }
		public Join_onContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterJoin_on(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitJoin_on(this);
		}
	}

	public final Join_onContext join_on() throws RecognitionException {
		Join_onContext _localctx = new Join_onContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_join_on);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
			case JOIN:
			case MERGE:
			case HASH:
			case LOOP:
			case REMOTE:
				{
				setState(10142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(10141);
					((Join_onContext)_localctx).inner = match(INNER);
					}
				}

				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(10144);
				((Join_onContext)_localctx).join_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					((Join_onContext)_localctx).join_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(10145);
					((Join_onContext)_localctx).outer = match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
				{
				setState(10150);
				((Join_onContext)_localctx).join_hint = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
					((Join_onContext)_localctx).join_hint = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(10153);
			match(JOIN);
			setState(10154);
			((Join_onContext)_localctx).source = table_source();
			setState(10155);
			match(ON);
			setState(10156);
			((Join_onContext)_localctx).cond = search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cross_joinContext extends ParserRuleContext {
		public TerminalNode CROSS() { return getToken(TSqlParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cross_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCross_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCross_join(this);
		}
	}

	public final Cross_joinContext cross_join() throws RecognitionException {
		Cross_joinContext _localctx = new Cross_joinContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_cross_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10158);
			match(CROSS);
			setState(10159);
			match(JOIN);
			setState(10160);
			table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Apply_Context extends ParserRuleContext {
		public Token apply_style;
		public Table_sourceContext source;
		public TerminalNode APPLY() { return getToken(TSqlParser.APPLY, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode CROSS() { return getToken(TSqlParser.CROSS, 0); }
		public TerminalNode OUTER() { return getToken(TSqlParser.OUTER, 0); }
		public Apply_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apply_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterApply_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitApply_(this);
		}
	}

	public final Apply_Context apply_() throws RecognitionException {
		Apply_Context _localctx = new Apply_Context(_ctx, getState());
		enterRule(_localctx, 876, RULE_apply_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10162);
			((Apply_Context)_localctx).apply_style = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CROSS || _la==OUTER) ) {
				((Apply_Context)_localctx).apply_style = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10163);
			match(APPLY);
			setState(10164);
			((Apply_Context)_localctx).source = table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PivotContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public PivotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPivot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPivot(this);
		}
	}

	public final PivotContext pivot() throws RecognitionException {
		PivotContext _localctx = new PivotContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_pivot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10166);
			match(PIVOT);
			setState(10167);
			pivot_clause();
			setState(10168);
			as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public UnpivotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUnpivot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUnpivot(this);
		}
	}

	public final UnpivotContext unpivot() throws RecognitionException {
		UnpivotContext _localctx = new UnpivotContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_unpivot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10170);
			match(UNPIVOT);
			setState(10171);
			unpivot_clause();
			setState(10172);
			as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPivot_clause(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_pivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10174);
			match(LR_BRACKET);
			setState(10175);
			aggregate_windowed_function();
			setState(10176);
			match(FOR);
			setState(10177);
			full_column_name();
			setState(10178);
			match(IN);
			setState(10179);
			column_alias_list();
			setState(10180);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public ExpressionContext unpivot_exp;
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUnpivot_clause(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_unpivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10182);
			match(LR_BRACKET);
			setState(10183);
			((Unpivot_clauseContext)_localctx).unpivot_exp = expression(0);
			setState(10184);
			match(FOR);
			setState(10185);
			full_column_name();
			setState(10186);
			match(IN);
			setState(10187);
			match(LR_BRACKET);
			setState(10188);
			full_column_name_list();
			setState(10189);
			match(RR_BRACKET);
			setState(10190);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_name_listContext extends ParserRuleContext {
		public Full_column_nameContext full_column_name;
		public List<Full_column_nameContext> column = new ArrayList<Full_column_nameContext>();
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFull_column_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFull_column_name_list(this);
		}
	}

	public final Full_column_name_listContext full_column_name_list() throws RecognitionException {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_full_column_name_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10192);
			((Full_column_name_listContext)_localctx).full_column_name = full_column_name();
			((Full_column_name_listContext)_localctx).column.add(((Full_column_name_listContext)_localctx).full_column_name);
			setState(10197);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1449,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10193);
					match(COMMA);
					setState(10194);
					((Full_column_name_listContext)_localctx).full_column_name = full_column_name();
					((Full_column_name_listContext)_localctx).column.add(((Full_column_name_listContext)_localctx).full_column_name);
					}
					} 
				}
				setState(10199);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1449,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_with_hintContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_name_with_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_name_with_hint(this);
		}
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10200);
			table_name();
			setState(10202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1450,_ctx) ) {
			case 1:
				{
				setState(10201);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_functionContext extends ParserRuleContext {
		public Token provider_name;
		public Token connectionString;
		public Token sql;
		public Token data_file;
		public TerminalNode OPENROWSET() { return getToken(TSqlParser.OPENROWSET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode BULK() { return getToken(TSqlParser.BULK, 0); }
		public List<Bulk_optionContext> bulk_option() {
			return getRuleContexts(Bulk_optionContext.class);
		}
		public Bulk_optionContext bulk_option(int i) {
			return getRuleContext(Bulk_optionContext.class,i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRowset_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRowset_function(this);
		}
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_rowset_function);
		int _la;
		try {
			setState(10230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(10204);
				match(OPENROWSET);
				setState(10205);
				match(LR_BRACKET);
				setState(10206);
				((Rowset_functionContext)_localctx).provider_name = match(STRING);
				setState(10207);
				match(COMMA);
				setState(10208);
				((Rowset_functionContext)_localctx).connectionString = match(STRING);
				setState(10209);
				match(COMMA);
				setState(10210);
				((Rowset_functionContext)_localctx).sql = match(STRING);
				setState(10211);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(10212);
				match(OPENROWSET);
				setState(10213);
				match(LR_BRACKET);
				setState(10214);
				match(BULK);
				setState(10215);
				((Rowset_functionContext)_localctx).data_file = match(STRING);
				setState(10216);
				match(COMMA);
				setState(10226);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1452,_ctx) ) {
				case 1:
					{
					setState(10217);
					bulk_option();
					setState(10222);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10218);
						match(COMMA);
						setState(10219);
						bulk_option();
						}
						}
						setState(10224);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(10225);
					id_();
					}
					break;
				}
				setState(10228);
				match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bulk_optionContext extends ParserRuleContext {
		public Token bulk_option_value;
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBulk_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBulk_option(this);
		}
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10232);
			id_();
			setState(10233);
			match(EQUAL);
			setState(10234);
			((Bulk_optionContext)_localctx).bulk_option_value = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				((Bulk_optionContext)_localctx).bulk_option_value = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDerived_table(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_derived_table);
		try {
			setState(10246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1454,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10236);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10237);
				match(LR_BRACKET);
				setState(10238);
				subquery();
				setState(10239);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10241);
				table_value_constructor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10242);
				match(LR_BRACKET);
				setState(10243);
				table_value_constructor();
				setState(10244);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	 
		public Function_callContext() { }
		public void copyFrom(Function_callContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RANKING_WINDOWED_FUNCContext extends Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRANKING_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRANKING_WINDOWED_FUNC(this);
		}
	}
	public static class BUILT_IN_FUNCContext extends Function_callContext {
		public Built_in_functionsContext built_in_functions() {
			return getRuleContext(Built_in_functionsContext.class,0);
		}
		public BUILT_IN_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBUILT_IN_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBUILT_IN_FUNC(this);
		}
	}
	public static class FREE_TEXTContext extends Function_callContext {
		public Freetext_functionContext freetext_function() {
			return getRuleContext(Freetext_functionContext.class,0);
		}
		public FREE_TEXTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFREE_TEXT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFREE_TEXT(this);
		}
	}
	public static class ANALYTIC_WINDOWED_FUNCContext extends Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return getRuleContext(Analytic_windowed_functionContext.class,0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterANALYTIC_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitANALYTIC_WINDOWED_FUNC(this);
		}
	}
	public static class SCALAR_FUNCTIONContext extends Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSCALAR_FUNCTION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSCALAR_FUNCTION(this);
		}
	}
	public static class PARTITION_FUNCContext extends Function_callContext {
		public Partition_functionContext partition_function() {
			return getRuleContext(Partition_functionContext.class,0);
		}
		public PARTITION_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPARTITION_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPARTITION_FUNC(this);
		}
	}
	public static class AGGREGATE_WINDOWED_FUNCContext extends Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAGGREGATE_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAGGREGATE_WINDOWED_FUNC(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_function_call);
		int _la;
		try {
			setState(10261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1456,_ctx) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(10248);
				ranking_windowed_function();
				}
				break;
			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(10249);
				aggregate_windowed_function();
				}
				break;
			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(10250);
				analytic_windowed_function();
				}
				break;
			case 4:
				_localctx = new BUILT_IN_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(10251);
				built_in_functions();
				}
				break;
			case 5:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(10252);
				scalar_function_name();
				setState(10253);
				match(LR_BRACKET);
				setState(10255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (CASE - 18)) | (1L << (COALESCE - 18)) | (1L << (CONTAINSTABLE - 18)) | (1L << (CONVERT - 18)) | (1L << (CURRENT_TIMESTAMP - 18)) | (1L << (CURRENT_USER - 18)) | (1L << (DEFAULT - 18)) | (1L << (FREETEXTTABLE - 18)) | (1L << (IDENTITY - 18)))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (LEFT - 95)) | (1L << (NULL_ - 95)) | (1L << (NULLIF - 95)) | (1L << (OPENJSON - 95)) | (1L << (OVER - 95)) | (1L << (PRECISION - 95)) | (1L << (RIGHT - 95)) | (1L << (SEMANTICKEYPHRASETABLE - 95)) | (1L << (SEMANTICSIMILARITYDETAILSTABLE - 95)) | (1L << (SEMANTICSIMILARITYTABLE - 95)) | (1L << (SESSION_USER - 95)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (SYSTEM_USER - 161)) | (1L << (USER - 161)) | (1L << (DOLLAR_PARTITION - 161)) | (1L << (ABSOLUTE - 161)) | (1L << (AT_KEYWORD - 161)) | (1L << (ACCENT_SENSITIVITY - 161)) | (1L << (ACTION - 161)) | (1L << (ACTIVATION - 161)) | (1L << (ACTIVE - 161)) | (1L << (ADDRESS - 161)) | (1L << (AES_128 - 161)) | (1L << (AES_192 - 161)) | (1L << (AES_256 - 161)) | (1L << (AFFINITY - 161)) | (1L << (AFTER - 161)) | (1L << (AGGREGATE - 161)) | (1L << (ALGORITHM - 161)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 161)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 161)) | (1L << (ALLOWED - 161)) | (1L << (ANSI_NULL_DEFAULT - 161)) | (1L << (ANSI_NULLS - 161)) | (1L << (ANSI_PADDING - 161)) | (1L << (ANSI_WARNINGS - 161)) | (1L << (APPLICATION_LOG - 161)) | (1L << (APPLY - 161)) | (1L << (ARITHABORT - 161)) | (1L << (ASSEMBLY - 161)) | (1L << (AUDIT - 161)) | (1L << (AUDIT_GUID - 161)) | (1L << (AUTO - 161)) | (1L << (AUTO_CLEANUP - 161)) | (1L << (AUTO_CLOSE - 161)) | (1L << (AUTO_CREATE_STATISTICS - 161)) | (1L << (AUTO_SHRINK - 161)) | (1L << (AUTO_UPDATE_STATISTICS - 161)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 161)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (AVAILABILITY - 227)) | (1L << (AVG - 227)) | (1L << (BACKUP_PRIORITY - 227)) | (1L << (BEGIN_DIALOG - 227)) | (1L << (BIGINT - 227)) | (1L << (BINARY_KEYWORD - 227)) | (1L << (BINARY_BASE64 - 227)) | (1L << (BINARY_CHECKSUM - 227)) | (1L << (BINDING - 227)) | (1L << (BLOB_STORAGE - 227)) | (1L << (BROKER - 227)) | (1L << (BROKER_INSTANCE - 227)) | (1L << (BULK_LOGGED - 227)) | (1L << (CALLER - 227)) | (1L << (CAP_CPU_PERCENT - 227)) | (1L << (CAST - 227)) | (1L << (TRY_CAST - 227)) | (1L << (CATALOG - 227)) | (1L << (CATCH - 227)) | (1L << (CHANGE_RETENTION - 227)) | (1L << (CHANGE_TRACKING - 227)) | (1L << (CHECKSUM - 227)) | (1L << (CHECKSUM_AGG - 227)) | (1L << (CLEANUP - 227)) | (1L << (COLLECTION - 227)) | (1L << (COLUMN_MASTER_KEY - 227)) | (1L << (COMMITTED - 227)) | (1L << (COMPATIBILITY_LEVEL - 227)) | (1L << (CONCAT - 227)) | (1L << (CONCAT_NULL_YIELDS_NULL - 227)) | (1L << (CONTENT - 227)) | (1L << (CONTROL - 227)) | (1L << (COOKIE - 227)) | (1L << (COUNT - 227)) | (1L << (COUNT_BIG - 227)) | (1L << (COUNTER - 227)) | (1L << (CPU - 227)) | (1L << (CREATE_NEW - 227)) | (1L << (CREATION_DISPOSITION - 227)) | (1L << (CREDENTIAL - 227)) | (1L << (CRYPTOGRAPHIC - 227)) | (1L << (CUME_DIST - 227)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 227)) | (1L << (CURSOR_DEFAULT - 227)) | (1L << (DATA - 227)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 227)) | (1L << (DATEADD - 227)) | (1L << (DATEDIFF - 227)) | (1L << (DATENAME - 227)) | (1L << (DATEPART - 227)) | (1L << (DAYS - 227)) | (1L << (DB_CHAINING - 227)) | (1L << (DB_FAILOVER - 227)) | (1L << (DECRYPTION - 227)) | (1L << (DEFAULT_DOUBLE_QUOTE - 227)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 227)) | (1L << (DEFAULT_LANGUAGE - 227)) | (1L << (DELAY - 227)) | (1L << (DELAYED_DURABILITY - 227)) | (1L << (DELETED - 227)) | (1L << (DENSE_RANK - 227)) | (1L << (DEPENDENTS - 227)) | (1L << (DES - 227)) | (1L << (DESCRIPTION - 227)))) != 0) || ((((_la - 291)) & ~0x3f) == 0 && ((1L << (_la - 291)) & ((1L << (DESX - 291)) | (1L << (DHCP - 291)) | (1L << (DIALOG - 291)) | (1L << (DIRECTORY_NAME - 291)) | (1L << (DISABLE - 291)) | (1L << (DISABLE_BROKER - 291)) | (1L << (DISABLED - 291)) | (1L << (DISK_DRIVE - 291)) | (1L << (DOCUMENT - 291)) | (1L << (DYNAMIC - 291)) | (1L << (ELEMENTS - 291)) | (1L << (EMERGENCY - 291)) | (1L << (EMPTY - 291)) | (1L << (ENABLE - 291)) | (1L << (ENABLE_BROKER - 291)) | (1L << (ENCRYPTED_VALUE - 291)) | (1L << (ENCRYPTION - 291)) | (1L << (ENDPOINT_URL - 291)) | (1L << (ERROR_BROKER_CONVERSATIONS - 291)) | (1L << (EXCLUSIVE - 291)) | (1L << (EXECUTABLE - 291)) | (1L << (EXIST - 291)) | (1L << (EXPAND - 291)) | (1L << (EXPIRY_DATE - 291)) | (1L << (EXPLICIT - 291)) | (1L << (FAIL_OPERATION - 291)) | (1L << (FAILOVER_MODE - 291)) | (1L << (FAILURE - 291)) | (1L << (FAILURE_CONDITION_LEVEL - 291)) | (1L << (FAST - 291)) | (1L << (FAST_FORWARD - 291)) | (1L << (FILEGROUP - 291)) | (1L << (FILEGROWTH - 291)) | (1L << (FILENAME - 291)) | (1L << (FILEPATH - 291)) | (1L << (FILESTREAM - 291)) | (1L << (FILTER - 291)) | (1L << (FIRST - 291)) | (1L << (FIRST_VALUE - 291)) | (1L << (FOLLOWING - 291)) | (1L << (FORCE - 291)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 291)) | (1L << (FORCED - 291)) | (1L << (FORMAT - 291)) | (1L << (FORWARD_ONLY - 291)) | (1L << (FULLSCAN - 291)) | (1L << (FULLTEXT - 291)) | (1L << (GB - 291)) | (1L << (GETDATE - 291)) | (1L << (GETUTCDATE - 291)) | (1L << (GLOBAL - 291)) | (1L << (GO_BATCH - 291)) | (1L << (GO - 291)) | (1L << (GROUP_MAX_REQUESTS - 291)) | (1L << (GROUPING - 291)) | (1L << (GROUPING_ID - 291)) | (1L << (HADR - 291)) | (1L << (HASH - 291)) | (1L << (HEALTH_CHECK_TIMEOUT - 291)) | (1L << (HIGH - 291)) | (1L << (HONOR_BROKER_PRIORITY - 291)) | (1L << (HOURS - 291)) | (1L << (IDENTITY_VALUE - 291)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 291)))) != 0) || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & ((1L << (IMMEDIATE - 355)) | (1L << (IMPERSONATE - 355)) | (1L << (IMPORTANCE - 355)) | (1L << (INCLUDE_NULL_VALUES - 355)) | (1L << (INCREMENTAL - 355)) | (1L << (INITIATOR - 355)) | (1L << (INPUT - 355)) | (1L << (INSENSITIVE - 355)) | (1L << (INSERTED - 355)) | (1L << (INT - 355)) | (1L << (IP - 355)) | (1L << (ISOLATION - 355)) | (1L << (JOB - 355)) | (1L << (JSON - 355)) | (1L << (KB - 355)) | (1L << (KEEP - 355)) | (1L << (KEEPFIXED - 355)) | (1L << (KEY_SOURCE - 355)) | (1L << (KEYS - 355)) | (1L << (KEYSET - 355)) | (1L << (LAG - 355)) | (1L << (LAST - 355)) | (1L << (LAST_VALUE - 355)) | (1L << (LEAD - 355)) | (1L << (LEVEL - 355)) | (1L << (LIST - 355)) | (1L << (LISTENER - 355)) | (1L << (LISTENER_URL - 355)) | (1L << (LOB_COMPACTION - 355)) | (1L << (LOCAL - 355)) | (1L << (LOCATION - 355)) | (1L << (LOCK - 355)) | (1L << (LOCK_ESCALATION - 355)) | (1L << (LOGIN - 355)) | (1L << (LOOP - 355)) | (1L << (LOW - 355)) | (1L << (MANUAL - 355)) | (1L << (MARK - 355)) | (1L << (MATERIALIZED - 355)) | (1L << (MAX - 355)) | (1L << (MAX_CPU_PERCENT - 355)) | (1L << (MAX_DOP - 355)) | (1L << (MAX_FILES - 355)) | (1L << (MAX_IOPS_PER_VOLUME - 355)) | (1L << (MAX_MEMORY_PERCENT - 355)) | (1L << (MAX_PROCESSES - 355)) | (1L << (MAX_QUEUE_READERS - 355)) | (1L << (MAX_ROLLOVER_FILES - 355)) | (1L << (MAXDOP - 355)) | (1L << (MAXRECURSION - 355)) | (1L << (MAXSIZE - 355)) | (1L << (MB - 355)) | (1L << (MEDIUM - 355)) | (1L << (MEMORY_OPTIMIZED_DATA - 355)) | (1L << (MESSAGE - 355)) | (1L << (MIN - 355)) | (1L << (MIN_ACTIVE_ROWVERSION - 355)) | (1L << (MIN_CPU_PERCENT - 355)) | (1L << (MIN_IOPS_PER_VOLUME - 355)) | (1L << (MIN_MEMORY_PERCENT - 355)) | (1L << (MINUTES - 355)) | (1L << (MIRROR_ADDRESS - 355)) | (1L << (MIXED_PAGE_ALLOCATION - 355)) | (1L << (MODE - 355)))) != 0) || ((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (MODIFY - 419)) | (1L << (MOVE - 419)) | (1L << (MULTI_USER - 419)) | (1L << (NAME - 419)) | (1L << (NESTED_TRIGGERS - 419)) | (1L << (NEW_ACCOUNT - 419)) | (1L << (NEW_BROKER - 419)) | (1L << (NEW_PASSWORD - 419)) | (1L << (NEXT - 419)) | (1L << (NO - 419)) | (1L << (NO_TRUNCATE - 419)) | (1L << (NO_WAIT - 419)) | (1L << (NOCOUNT - 419)) | (1L << (NODES - 419)) | (1L << (NOEXPAND - 419)) | (1L << (NON_TRANSACTED_ACCESS - 419)) | (1L << (NORECOMPUTE - 419)) | (1L << (NORECOVERY - 419)) | (1L << (NOWAIT - 419)) | (1L << (NTILE - 419)) | (1L << (NUMANODE - 419)) | (1L << (NUMBER - 419)) | (1L << (NUMERIC_ROUNDABORT - 419)) | (1L << (OBJECT - 419)) | (1L << (OFFLINE - 419)) | (1L << (OFFSET - 419)) | (1L << (OLD_ACCOUNT - 419)) | (1L << (ONLINE - 419)) | (1L << (ONLY - 419)) | (1L << (OPEN_EXISTING - 419)) | (1L << (OPTIMISTIC - 419)) | (1L << (OPTIMIZE - 419)) | (1L << (OUT - 419)) | (1L << (OUTPUT - 419)) | (1L << (OVERRIDE - 419)) | (1L << (OWNER - 419)) | (1L << (PAGE_VERIFY - 419)) | (1L << (PARAMETERIZATION - 419)) | (1L << (PARTITION - 419)) | (1L << (PARTITIONS - 419)) | (1L << (PARTNER - 419)) | (1L << (PATH - 419)) | (1L << (PERCENT_RANK - 419)) | (1L << (PERCENTILE_CONT - 419)) | (1L << (PERCENTILE_DISC - 419)) | (1L << (POISON_MESSAGE_HANDLING - 419)) | (1L << (POOL - 419)) | (1L << (PORT - 419)) | (1L << (PRECEDING - 419)) | (1L << (PRIMARY_ROLE - 419)) | (1L << (PRIOR - 419)) | (1L << (PRIORITY - 419)) | (1L << (PRIORITY_LEVEL - 419)) | (1L << (PRIVATE - 419)) | (1L << (PRIVATE_KEY - 419)) | (1L << (PRIVILEGES - 419)) | (1L << (PROCEDURE_NAME - 419)) | (1L << (PROPERTY - 419)) | (1L << (PROVIDER - 419)) | (1L << (PROVIDER_KEY_NAME - 419)) | (1L << (QUERY - 419)) | (1L << (QUEUE - 419)) | (1L << (QUEUE_DELAY - 419)))) != 0) || ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (QUOTED_IDENTIFIER - 483)) | (1L << (RANGE - 483)) | (1L << (RANK - 483)) | (1L << (RC2 - 483)) | (1L << (RC4 - 483)) | (1L << (RC4_128 - 483)) | (1L << (READ_COMMITTED_SNAPSHOT - 483)) | (1L << (READ_ONLY - 483)) | (1L << (READ_ONLY_ROUTING_LIST - 483)) | (1L << (READ_WRITE - 483)) | (1L << (READONLY - 483)) | (1L << (REBUILD - 483)) | (1L << (RECEIVE - 483)) | (1L << (RECOMPILE - 483)) | (1L << (RECOVERY - 483)) | (1L << (RECURSIVE_TRIGGERS - 483)) | (1L << (RELATIVE - 483)) | (1L << (REMOTE - 483)) | (1L << (REMOTE_SERVICE_NAME - 483)) | (1L << (REMOVE - 483)) | (1L << (REORGANIZE - 483)) | (1L << (REPEATABLE - 483)) | (1L << (REPLICA - 483)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 483)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 483)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 483)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 483)) | (1L << (RESERVE_DISK_SPACE - 483)) | (1L << (RESOURCE - 483)) | (1L << (RESOURCE_MANAGER_LOCATION - 483)) | (1L << (RESTRICTED_USER - 483)) | (1L << (RETENTION - 483)) | (1L << (ROBUST - 483)) | (1L << (ROOT - 483)) | (1L << (ROUTE - 483)) | (1L << (ROW - 483)) | (1L << (ROW_NUMBER - 483)) | (1L << (ROWGUID - 483)) | (1L << (ROWS - 483)) | (1L << (SAMPLE - 483)) | (1L << (SCHEMABINDING - 483)) | (1L << (SCOPED - 483)) | (1L << (SCROLL - 483)) | (1L << (SCROLL_LOCKS - 483)) | (1L << (SEARCH - 483)) | (1L << (SECONDARY - 483)) | (1L << (SECONDARY_ONLY - 483)) | (1L << (SECONDARY_ROLE - 483)) | (1L << (SECONDS - 483)) | (1L << (SECRET - 483)) | (1L << (SECURITY - 483)) | (1L << (SECURITY_LOG - 483)) | (1L << (SEEDING_MODE - 483)) | (1L << (SELF - 483)) | (1L << (SEMI_SENSITIVE - 483)) | (1L << (SEND - 483)) | (1L << (SENT - 483)) | (1L << (SEQUENCE - 483)) | (1L << (SERIALIZABLE - 483)) | (1L << (SESSION_TIMEOUT - 483)) | (1L << (SETERROR - 483)) | (1L << (SHARE - 483)) | (1L << (SHOWPLAN - 483)))) != 0) || ((((_la - 547)) & ~0x3f) == 0 && ((1L << (_la - 547)) & ((1L << (SIGNATURE - 547)) | (1L << (SIMPLE - 547)) | (1L << (SINGLE_USER - 547)) | (1L << (SIZE - 547)) | (1L << (SMALLINT - 547)) | (1L << (SNAPSHOT - 547)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 547)) | (1L << (STANDBY - 547)) | (1L << (START_DATE - 547)) | (1L << (STATIC - 547)) | (1L << (STATS_STREAM - 547)) | (1L << (STATUS - 547)) | (1L << (STATUSONLY - 547)) | (1L << (STDEV - 547)) | (1L << (STDEVP - 547)) | (1L << (STOPLIST - 547)) | (1L << (STRING_AGG - 547)) | (1L << (STUFF - 547)) | (1L << (SUBJECT - 547)) | (1L << (SUBSCRIPTION - 547)) | (1L << (SUM - 547)) | (1L << (SUSPEND - 547)) | (1L << (SYMMETRIC - 547)) | (1L << (SYNCHRONOUS_COMMIT - 547)) | (1L << (SYNONYM - 547)) | (1L << (SYSTEM - 547)) | (1L << (TAKE - 547)) | (1L << (TARGET_RECOVERY_TIME - 547)) | (1L << (TB - 547)) | (1L << (TEXTIMAGE_ON - 547)) | (1L << (THROW - 547)) | (1L << (TIES - 547)) | (1L << (TIME - 547)) | (1L << (TIMEOUT - 547)) | (1L << (TIMER - 547)) | (1L << (TINYINT - 547)) | (1L << (TORN_PAGE_DETECTION - 547)) | (1L << (TRANSFORM_NOISE_WORDS - 547)) | (1L << (TRIPLE_DES - 547)) | (1L << (TRIPLE_DES_3KEY - 547)) | (1L << (TRUSTWORTHY - 547)) | (1L << (TRY - 547)) | (1L << (TSQL - 547)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 547)) | (1L << (TYPE - 547)) | (1L << (TYPE_WARNING - 547)) | (1L << (UNBOUNDED - 547)) | (1L << (UNCOMMITTED - 547)) | (1L << (UNKNOWN - 547)) | (1L << (UNLIMITED - 547)) | (1L << (UOW - 547)) | (1L << (USING - 547)) | (1L << (VALID_XML - 547)) | (1L << (VALIDATION - 547)) | (1L << (VALUE - 547)) | (1L << (VAR - 547)) | (1L << (VARBINARY_KEYWORD - 547)) | (1L << (VARP - 547)) | (1L << (VIEW_METADATA - 547)) | (1L << (VIEWS - 547)) | (1L << (WAIT - 547)) | (1L << (WELL_FORMED_XML - 547)) | (1L << (WITHOUT_ARRAY_WRAPPER - 547)) | (1L << (WORK - 547)))) != 0) || ((((_la - 611)) & ~0x3f) == 0 && ((1L << (_la - 611)) & ((1L << (WORKLOAD - 611)) | (1L << (XML - 611)) | (1L << (XMLDATA - 611)) | (1L << (XMLNAMESPACES - 611)) | (1L << (XMLSCHEMA - 611)) | (1L << (XSINIL - 611)) | (1L << (ZONE - 611)) | (1L << (DOLLAR_ACTION - 611)) | (1L << (ABSENT - 611)) | (1L << (AES - 611)) | (1L << (ALLOW_CONNECTIONS - 611)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 611)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 611)) | (1L << (ANONYMOUS - 611)) | (1L << (APPEND - 611)) | (1L << (APPLICATION - 611)) | (1L << (ASYMMETRIC - 611)) | (1L << (ASYNCHRONOUS_COMMIT - 611)) | (1L << (AUTHENTICATION - 611)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 611)) | (1L << (AUTOMATIC - 611)) | (1L << (AVAILABILITY_MODE - 611)) | (1L << (BEFORE - 611)) | (1L << (BLOCK - 611)) | (1L << (BLOCKSIZE - 611)) | (1L << (BLOCKING_HIERARCHY - 611)) | (1L << (BUFFER - 611)) | (1L << (BUFFERCOUNT - 611)) | (1L << (CACHE - 611)) | (1L << (CALLED - 611)) | (1L << (CERTIFICATE - 611)) | (1L << (CHANGETABLE - 611)) | (1L << (CHANGES - 611)) | (1L << (CHECK_POLICY - 611)) | (1L << (CHECK_EXPIRATION - 611)) | (1L << (CLASSIFIER_FUNCTION - 611)) | (1L << (CLUSTER - 611)) | (1L << (COMPRESSION - 611)) | (1L << (CONFIGURATION - 611)) | (1L << (CONTAINMENT - 611)) | (1L << (CONTEXT - 611)) | (1L << (CONTINUE_AFTER_ERROR - 611)) | (1L << (CONTRACT - 611)) | (1L << (CONTRACT_NAME - 611)) | (1L << (CONVERSATION - 611)) | (1L << (COPY_ONLY - 611)) | (1L << (CYCLE - 611)) | (1L << (DATA_COMPRESSION - 611)) | (1L << (DATA_SOURCE - 611)) | (1L << (DATABASE_MIRRORING - 611)) | (1L << (DEFAULT_DATABASE - 611)) | (1L << (DEFAULT_SCHEMA - 611)) | (1L << (DIAGNOSTICS - 611)) | (1L << (DIFFERENTIAL - 611)) | (1L << (DTC_SUPPORT - 611)) | (1L << (ENABLED - 611)) | (1L << (ENDPOINT - 611)) | (1L << (ERROR - 611)) | (1L << (EVENT - 611)) | (1L << (EVENTDATA - 611)) | (1L << (EVENT_RETENTION_MODE - 611)) | (1L << (EXECUTABLE_FILE - 611)))) != 0) || ((((_la - 675)) & ~0x3f) == 0 && ((1L << (_la - 675)) & ((1L << (EXPIREDATE - 675)) | (1L << (EXTENSION - 675)) | (1L << (EXTERNAL_ACCESS - 675)) | (1L << (FAILOVER - 675)) | (1L << (FAILURECONDITIONLEVEL - 675)) | (1L << (FAN_IN - 675)) | (1L << (FILE_SNAPSHOT - 675)) | (1L << (FORCESEEK - 675)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 675)) | (1L << (GET - 675)) | (1L << (GOVERNOR - 675)) | (1L << (HASHED - 675)) | (1L << (HEALTHCHECKTIMEOUT - 675)) | (1L << (IIF - 675)) | (1L << (IO - 675)) | (1L << (INCLUDE - 675)) | (1L << (INCREMENT - 675)) | (1L << (INFINITE - 675)) | (1L << (INIT - 675)) | (1L << (INSTEAD - 675)) | (1L << (ISNULL - 675)) | (1L << (KERBEROS - 675)) | (1L << (KEY_PATH - 675)) | (1L << (KEY_STORE_PROVIDER_NAME - 675)) | (1L << (LANGUAGE - 675)) | (1L << (LIBRARY - 675)) | (1L << (LIFETIME - 675)) | (1L << (LINUX - 675)) | (1L << (LISTENER_IP - 675)) | (1L << (LISTENER_PORT - 675)) | (1L << (LOCAL_SERVICE_NAME - 675)) | (1L << (LOG - 675)) | (1L << (MATCHED - 675)) | (1L << (MASTER - 675)) | (1L << (MAX_MEMORY - 675)) | (1L << (MAXTRANSFER - 675)) | (1L << (MAXVALUE - 675)) | (1L << (MAX_DISPATCH_LATENCY - 675)) | (1L << (MAX_EVENT_SIZE - 675)) | (1L << (MAX_SIZE - 675)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 675)) | (1L << (MEDIADESCRIPTION - 675)) | (1L << (MEDIANAME - 675)) | (1L << (MEMBER - 675)) | (1L << (MEMORY_PARTITION_MODE - 675)) | (1L << (MESSAGE_FORWARDING - 675)) | (1L << (MESSAGE_FORWARD_SIZE - 675)) | (1L << (MINVALUE - 675)) | (1L << (MIRROR - 675)) | (1L << (MUST_CHANGE - 675)) | (1L << (NOFORMAT - 675)) | (1L << (NOINIT - 675)) | (1L << (NONE - 675)) | (1L << (NOREWIND - 675)) | (1L << (NOSKIP - 675)) | (1L << (NOUNLOAD - 675)) | (1L << (NO_CHECKSUM - 675)) | (1L << (NO_COMPRESSION - 675)) | (1L << (NO_EVENT_LOSS - 675)) | (1L << (NOTIFICATION - 675)) | (1L << (NTLM - 675)) | (1L << (OLD_PASSWORD - 675)) | (1L << (ON_FAILURE - 675)))) != 0) || ((((_la - 739)) & ~0x3f) == 0 && ((1L << (_la - 739)) & ((1L << (PAGE - 739)) | (1L << (PARAM_NODE - 739)) | (1L << (PARTIAL - 739)) | (1L << (PASSWORD - 739)) | (1L << (PERMISSION_SET - 739)) | (1L << (PER_CPU - 739)) | (1L << (PER_DB - 739)) | (1L << (PER_NODE - 739)) | (1L << (PERSISTED - 739)) | (1L << (PLATFORM - 739)) | (1L << (POLICY - 739)) | (1L << (PREDICATE - 739)) | (1L << (PROCESS - 739)) | (1L << (PROFILE - 739)) | (1L << (PYTHON - 739)) | (1L << (R - 739)) | (1L << (READ_WRITE_FILEGROUPS - 739)) | (1L << (REGENERATE - 739)) | (1L << (RELATED_CONVERSATION - 739)) | (1L << (RELATED_CONVERSATION_GROUP - 739)) | (1L << (REQUIRED - 739)) | (1L << (RESET - 739)) | (1L << (RESTART - 739)) | (1L << (RESUME - 739)) | (1L << (RETAINDAYS - 739)) | (1L << (RETURNS - 739)) | (1L << (REWIND - 739)) | (1L << (ROLE - 739)) | (1L << (RSA_512 - 739)) | (1L << (RSA_1024 - 739)) | (1L << (RSA_2048 - 739)) | (1L << (RSA_3072 - 739)) | (1L << (RSA_4096 - 739)) | (1L << (SAFETY - 739)) | (1L << (SAFE - 739)) | (1L << (SCHEDULER - 739)) | (1L << (SCHEME - 739)) | (1L << (SERVER - 739)) | (1L << (SERVICE - 739)) | (1L << (SERVICE_BROKER - 739)) | (1L << (SERVICE_NAME - 739)) | (1L << (SESSION - 739)) | (1L << (SID - 739)) | (1L << (SKIP_KEYWORD - 739)) | (1L << (SOFTNUMA - 739)) | (1L << (SOURCE - 739)) | (1L << (SPECIFICATION - 739)) | (1L << (SPLIT - 739)) | (1L << (SQLDUMPERFLAGS - 739)) | (1L << (SQLDUMPERPATH - 739)) | (1L << (SQLDUMPERTIMEOUT - 739)) | (1L << (STATE - 739)) | (1L << (STATS - 739)) | (1L << (START - 739)) | (1L << (STARTED - 739)) | (1L << (STARTUP_STATE - 739)) | (1L << (STOP - 739)) | (1L << (STOPPED - 739)) | (1L << (STOP_ON_ERROR - 739)) | (1L << (SUPPORTED - 739)) | (1L << (TAPE - 739)) | (1L << (TARGET - 739)))) != 0) || ((((_la - 803)) & ~0x3f) == 0 && ((1L << (_la - 803)) & ((1L << (TCP - 803)) | (1L << (TRACK_CAUSALITY - 803)) | (1L << (TRANSFER - 803)) | (1L << (UNCHECKED - 803)) | (1L << (UNLOCK - 803)) | (1L << (UNSAFE - 803)) | (1L << (URL - 803)) | (1L << (USED - 803)) | (1L << (VERBOSELOGGING - 803)) | (1L << (VISIBILITY - 803)) | (1L << (WINDOWS - 803)) | (1L << (WITHOUT - 803)) | (1L << (WITNESS - 803)) | (1L << (VARCHAR - 803)) | (1L << (NVARCHAR - 803)) | (1L << (DOUBLE_QUOTE_ID - 803)) | (1L << (SQUARE_BRACKET_ID - 803)) | (1L << (LOCAL_ID - 803)) | (1L << (DECIMAL - 803)) | (1L << (ID - 803)) | (1L << (STRING - 803)) | (1L << (BINARY - 803)) | (1L << (FLOAT - 803)) | (1L << (REAL - 803)) | (1L << (DOT - 803)) | (1L << (DOLLAR - 803)) | (1L << (LR_BRACKET - 803)) | (1L << (PLUS - 803)) | (1L << (MINUS - 803)) | (1L << (BIT_NOT - 803)))) != 0)) {
					{
					setState(10254);
					expression_list();
					}
				}

				setState(10257);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new FREE_TEXTContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(10259);
				freetext_function();
				}
				break;
			case 7:
				_localctx = new PARTITION_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(10260);
				partition_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_functionContext extends ParserRuleContext {
		public Id_Context database;
		public Id_Context func_name;
		public TerminalNode DOLLAR_PARTITION() { return getToken(TSqlParser.DOLLAR_PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartition_function(this);
		}
	}

	public final Partition_functionContext partition_function() throws RecognitionException {
		Partition_functionContext _localctx = new Partition_functionContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_partition_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
				{
				setState(10263);
				((Partition_functionContext)_localctx).database = id_();
				setState(10264);
				match(DOT);
				}
			}

			setState(10268);
			match(DOLLAR_PARTITION);
			setState(10269);
			match(DOT);
			setState(10270);
			((Partition_functionContext)_localctx).func_name = id_();
			setState(10271);
			match(LR_BRACKET);
			setState(10272);
			expression(0);
			setState(10273);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Freetext_functionContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode CONTAINSTABLE() { return getToken(TSqlParser.CONTAINSTABLE, 0); }
		public TerminalNode FREETEXTTABLE() { return getToken(TSqlParser.FREETEXTTABLE, 0); }
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public TerminalNode SEMANTICSIMILARITYTABLE() { return getToken(TSqlParser.SEMANTICSIMILARITYTABLE, 0); }
		public TerminalNode SEMANTICKEYPHRASETABLE() { return getToken(TSqlParser.SEMANTICKEYPHRASETABLE, 0); }
		public TerminalNode SEMANTICSIMILARITYDETAILSTABLE() { return getToken(TSqlParser.SEMANTICSIMILARITYDETAILSTABLE, 0); }
		public Freetext_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freetext_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFreetext_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFreetext_function(this);
		}
	}

	public final Freetext_functionContext freetext_function() throws RecognitionException {
		Freetext_functionContext _localctx = new Freetext_functionContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_freetext_function);
		int _la;
		try {
			setState(10343);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTAINSTABLE:
			case FREETEXTTABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10275);
				_la = _input.LA(1);
				if ( !(_la==CONTAINSTABLE || _la==FREETEXTTABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10276);
				match(LR_BRACKET);
				setState(10277);
				table_name();
				setState(10278);
				match(COMMA);
				setState(10292);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(10279);
					full_column_name();
					}
					break;
				case LR_BRACKET:
					{
					setState(10280);
					match(LR_BRACKET);
					setState(10281);
					full_column_name();
					setState(10286);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10282);
						match(COMMA);
						setState(10283);
						full_column_name();
						}
						}
						setState(10288);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10289);
					match(RR_BRACKET);
					}
					break;
				case STAR:
					{
					setState(10291);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10294);
				match(COMMA);
				setState(10295);
				expression(0);
				setState(10299);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1460,_ctx) ) {
				case 1:
					{
					setState(10296);
					match(COMMA);
					setState(10297);
					match(LANGUAGE);
					setState(10298);
					expression(0);
					}
					break;
				}
				setState(10303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10301);
					match(COMMA);
					setState(10302);
					expression(0);
					}
				}

				setState(10305);
				match(RR_BRACKET);
				}
				break;
			case SEMANTICKEYPHRASETABLE:
			case SEMANTICSIMILARITYTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10307);
				_la = _input.LA(1);
				if ( !(_la==SEMANTICKEYPHRASETABLE || _la==SEMANTICSIMILARITYTABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10308);
				match(LR_BRACKET);
				setState(10309);
				table_name();
				setState(10310);
				match(COMMA);
				setState(10324);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(10311);
					full_column_name();
					}
					break;
				case LR_BRACKET:
					{
					setState(10312);
					match(LR_BRACKET);
					setState(10313);
					full_column_name();
					setState(10318);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10314);
						match(COMMA);
						setState(10315);
						full_column_name();
						}
						}
						setState(10320);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10321);
					match(RR_BRACKET);
					}
					break;
				case STAR:
					{
					setState(10323);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10326);
				match(COMMA);
				setState(10327);
				expression(0);
				setState(10328);
				match(RR_BRACKET);
				}
				break;
			case SEMANTICSIMILARITYDETAILSTABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10330);
				match(SEMANTICSIMILARITYDETAILSTABLE);
				setState(10331);
				match(LR_BRACKET);
				setState(10332);
				table_name();
				setState(10333);
				match(COMMA);
				setState(10334);
				full_column_name();
				setState(10335);
				match(COMMA);
				setState(10336);
				expression(0);
				setState(10337);
				match(COMMA);
				setState(10338);
				full_column_name();
				setState(10339);
				match(COMMA);
				setState(10340);
				expression(0);
				setState(10341);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Freetext_predicateContext extends ParserRuleContext {
		public TerminalNode CONTAINS() { return getToken(TSqlParser.CONTAINS, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode FREETEXT() { return getToken(TSqlParser.FREETEXT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public Freetext_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freetext_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFreetext_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFreetext_predicate(this);
		}
	}

	public final Freetext_predicateContext freetext_predicate() throws RecognitionException {
		Freetext_predicateContext _localctx = new Freetext_predicateContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_freetext_predicate);
		int _la;
		try {
			setState(10401);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTAINS:
				enterOuterAlt(_localctx, 1);
				{
				setState(10345);
				match(CONTAINS);
				setState(10346);
				match(LR_BRACKET);
				setState(10367);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1466,_ctx) ) {
				case 1:
					{
					setState(10347);
					full_column_name();
					}
					break;
				case 2:
					{
					setState(10348);
					match(LR_BRACKET);
					setState(10349);
					full_column_name();
					setState(10354);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10350);
						match(COMMA);
						setState(10351);
						full_column_name();
						}
						}
						setState(10356);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10357);
					match(RR_BRACKET);
					}
					break;
				case 3:
					{
					setState(10359);
					match(STAR);
					}
					break;
				case 4:
					{
					setState(10360);
					match(PROPERTY);
					setState(10361);
					match(LR_BRACKET);
					setState(10362);
					full_column_name();
					setState(10363);
					match(COMMA);
					setState(10364);
					expression(0);
					setState(10365);
					match(RR_BRACKET);
					}
					break;
				}
				setState(10369);
				match(COMMA);
				setState(10370);
				expression(0);
				setState(10371);
				match(RR_BRACKET);
				}
				break;
			case FREETEXT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10373);
				match(FREETEXT);
				setState(10374);
				match(LR_BRACKET);
				setState(10375);
				table_name();
				setState(10376);
				match(COMMA);
				setState(10390);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(10377);
					full_column_name();
					}
					break;
				case LR_BRACKET:
					{
					setState(10378);
					match(LR_BRACKET);
					setState(10379);
					full_column_name();
					setState(10384);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10380);
						match(COMMA);
						setState(10381);
						full_column_name();
						}
						}
						setState(10386);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10387);
					match(RR_BRACKET);
					}
					break;
				case STAR:
					{
					setState(10389);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10392);
				match(COMMA);
				setState(10393);
				expression(0);
				setState(10397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10394);
					match(COMMA);
					setState(10395);
					match(LANGUAGE);
					setState(10396);
					expression(0);
					}
				}

				setState(10399);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Built_in_functionsContext extends ParserRuleContext {
		public Built_in_functionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_built_in_functions; }
	 
		public Built_in_functionsContext() { }
		public void copyFrom(Built_in_functionsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CURRENT_USERContext extends Built_in_functionsContext {
		public TerminalNode CURRENT_USER() { return getToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCURRENT_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCURRENT_USER(this);
		}
	}
	public static class DATEADDContext extends Built_in_functionsContext {
		public Token datepart;
		public ExpressionContext number;
		public ExpressionContext date;
		public TerminalNode DATEADD() { return getToken(TSqlParser.DATEADD, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEADDContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATEADD(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATEADD(this);
		}
	}
	public static class CHECKSUMContext extends Built_in_functionsContext {
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public CHECKSUMContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCHECKSUM(this);
		}
	}
	public static class CURRENT_TIMESTAMPContext extends Built_in_functionsContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCURRENT_TIMESTAMP(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCURRENT_TIMESTAMP(this);
		}
	}
	public static class BINARY_CHECKSUMContext extends Built_in_functionsContext {
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public BINARY_CHECKSUMContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBINARY_CHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBINARY_CHECKSUM(this);
		}
	}
	public static class SYSTEM_USERContext extends Built_in_functionsContext {
		public TerminalNode SYSTEM_USER() { return getToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSYSTEM_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSYSTEM_USER(this);
		}
	}
	public static class NULLIFContext extends Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public TerminalNode NULLIF() { return getToken(TSqlParser.NULLIF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public NULLIFContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNULLIF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNULLIF(this);
		}
	}
	public static class SESSION_USERContext extends Built_in_functionsContext {
		public TerminalNode SESSION_USER() { return getToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSESSION_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSESSION_USER(this);
		}
	}
	public static class CONVERTContext extends Built_in_functionsContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public TerminalNode CONVERT() { return getToken(TSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CONVERTContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCONVERT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCONVERT(this);
		}
	}
	public static class XML_DATA_TYPE_FUNCContext extends Built_in_functionsContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return getRuleContext(Xml_data_type_methodsContext.class,0);
		}
		public XML_DATA_TYPE_FUNCContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXML_DATA_TYPE_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXML_DATA_TYPE_FUNC(this);
		}
	}
	public static class COALESCEContext extends Built_in_functionsContext {
		public TerminalNode COALESCE() { return getToken(TSqlParser.COALESCE, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public COALESCEContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCOALESCE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCOALESCE(this);
		}
	}
	public static class CASTContext extends Built_in_functionsContext {
		public TerminalNode CAST() { return getToken(TSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public CASTContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCAST(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCAST(this);
		}
	}
	public static class MIN_ACTIVE_ROWVERSIONContext extends Built_in_functionsContext {
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMIN_ACTIVE_ROWVERSION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMIN_ACTIVE_ROWVERSION(this);
		}
	}
	public static class IIFContext extends Built_in_functionsContext {
		public Search_conditionContext cond;
		public ExpressionContext left;
		public ExpressionContext right;
		public TerminalNode IIF() { return getToken(TSqlParser.IIF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public IIFContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIIF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIIF(this);
		}
	}
	public static class DATEPARTContext extends Built_in_functionsContext {
		public Token datepart;
		public ExpressionContext date;
		public TerminalNode DATEPART() { return getToken(TSqlParser.DATEPART, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATEPARTContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATEPART(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATEPART(this);
		}
	}
	public static class USERContext extends Built_in_functionsContext {
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public USERContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUSER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUSER(this);
		}
	}
	public static class STUFFContext extends Built_in_functionsContext {
		public ExpressionContext str;
		public Token from;
		public Token to;
		public ExpressionContext str_with;
		public TerminalNode STUFF() { return getToken(TSqlParser.STUFF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public STUFFContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSTUFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSTUFF(this);
		}
	}
	public static class IDENTITYContext extends Built_in_functionsContext {
		public Token seed;
		public Token increment;
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIDENTITY(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIDENTITY(this);
		}
	}
	public static class DATENAMEContext extends Built_in_functionsContext {
		public Token datepart;
		public ExpressionContext date;
		public TerminalNode DATENAME() { return getToken(TSqlParser.DATENAME, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATENAMEContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATENAME(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATENAME(this);
		}
	}
	public static class GETUTCDATEContext extends Built_in_functionsContext {
		public TerminalNode GETUTCDATE() { return getToken(TSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGETUTCDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGETUTCDATE(this);
		}
	}
	public static class TRY_CASTContext extends Built_in_functionsContext {
		public TerminalNode TRY_CAST() { return getToken(TSqlParser.TRY_CAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TRY_CASTContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTRY_CAST(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTRY_CAST(this);
		}
	}
	public static class ISNULLContext extends Built_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public TerminalNode ISNULL() { return getToken(TSqlParser.ISNULL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ISNULLContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterISNULL(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitISNULL(this);
		}
	}
	public static class DATEDIFFContext extends Built_in_functionsContext {
		public Token datepart;
		public ExpressionContext date_first;
		public ExpressionContext date_second;
		public TerminalNode DATEDIFF() { return getToken(TSqlParser.DATEDIFF, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEDIFFContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATEDIFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATEDIFF(this);
		}
	}
	public static class GETDATEContext extends Built_in_functionsContext {
		public TerminalNode GETDATE() { return getToken(TSqlParser.GETDATE, 0); }
		public GETDATEContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGETDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGETDATE(this);
		}
	}
	public static class STRINGAGGContext extends Built_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public TerminalNode STRING_AGG() { return getToken(TSqlParser.STRING_AGG, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITHIN() { return getToken(TSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public STRINGAGGContext(Built_in_functionsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSTRINGAGG(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSTRINGAGG(this);
		}
	}

	public final Built_in_functionsContext built_in_functions() throws RecognitionException {
		Built_in_functionsContext _localctx = new Built_in_functionsContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_built_in_functions);
		int _la;
		try {
			setState(10549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1475,_ctx) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(10403);
				match(BINARY_CHECKSUM);
				setState(10404);
				match(LR_BRACKET);
				setState(10405);
				match(STAR);
				setState(10406);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new CASTContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(10407);
				match(CAST);
				setState(10408);
				match(LR_BRACKET);
				setState(10409);
				expression(0);
				setState(10410);
				match(AS);
				setState(10411);
				data_type();
				setState(10412);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new TRY_CASTContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(10414);
				match(TRY_CAST);
				setState(10415);
				match(LR_BRACKET);
				setState(10416);
				expression(0);
				setState(10417);
				match(AS);
				setState(10418);
				data_type();
				setState(10419);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new CONVERTContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(10421);
				match(CONVERT);
				setState(10422);
				match(LR_BRACKET);
				setState(10423);
				((CONVERTContext)_localctx).convert_data_type = data_type();
				setState(10424);
				match(COMMA);
				setState(10425);
				((CONVERTContext)_localctx).convert_expression = expression(0);
				setState(10428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10426);
					match(COMMA);
					setState(10427);
					((CONVERTContext)_localctx).style = expression(0);
					}
				}

				setState(10430);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(10432);
				match(CHECKSUM);
				setState(10433);
				match(LR_BRACKET);
				setState(10434);
				match(STAR);
				setState(10435);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new COALESCEContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(10436);
				match(COALESCE);
				setState(10437);
				match(LR_BRACKET);
				setState(10438);
				expression_list();
				setState(10439);
				match(RR_BRACKET);
				}
				break;
			case 7:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(10441);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 8:
				_localctx = new CURRENT_USERContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(10442);
				match(CURRENT_USER);
				}
				break;
			case 9:
				_localctx = new DATEADDContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(10443);
				match(DATEADD);
				setState(10444);
				match(LR_BRACKET);
				setState(10445);
				((DATEADDContext)_localctx).datepart = match(ID);
				setState(10446);
				match(COMMA);
				setState(10447);
				((DATEADDContext)_localctx).number = expression(0);
				setState(10448);
				match(COMMA);
				setState(10449);
				((DATEADDContext)_localctx).date = expression(0);
				setState(10450);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new DATEDIFFContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(10452);
				match(DATEDIFF);
				setState(10453);
				match(LR_BRACKET);
				setState(10454);
				((DATEDIFFContext)_localctx).datepart = match(ID);
				setState(10455);
				match(COMMA);
				setState(10456);
				((DATEDIFFContext)_localctx).date_first = expression(0);
				setState(10457);
				match(COMMA);
				setState(10458);
				((DATEDIFFContext)_localctx).date_second = expression(0);
				setState(10459);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new DATENAMEContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(10461);
				match(DATENAME);
				setState(10462);
				match(LR_BRACKET);
				setState(10463);
				((DATENAMEContext)_localctx).datepart = match(ID);
				setState(10464);
				match(COMMA);
				setState(10465);
				((DATENAMEContext)_localctx).date = expression(0);
				setState(10466);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new DATEPARTContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(10468);
				match(DATEPART);
				setState(10469);
				match(LR_BRACKET);
				setState(10470);
				((DATEPARTContext)_localctx).datepart = match(ID);
				setState(10471);
				match(COMMA);
				setState(10472);
				((DATEPARTContext)_localctx).date = expression(0);
				setState(10473);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new GETDATEContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(10475);
				match(GETDATE);
				setState(10476);
				match(LR_BRACKET);
				setState(10477);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new GETUTCDATEContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(10478);
				match(GETUTCDATE);
				setState(10479);
				match(LR_BRACKET);
				setState(10480);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new IDENTITYContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(10481);
				match(IDENTITY);
				setState(10482);
				match(LR_BRACKET);
				setState(10483);
				data_type();
				setState(10486);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1472,_ctx) ) {
				case 1:
					{
					setState(10484);
					match(COMMA);
					setState(10485);
					((IDENTITYContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(10490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10488);
					match(COMMA);
					setState(10489);
					((IDENTITYContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(10492);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(10494);
				match(MIN_ACTIVE_ROWVERSION);
				setState(10495);
				match(LR_BRACKET);
				setState(10496);
				match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new NULLIFContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(10497);
				match(NULLIF);
				setState(10498);
				match(LR_BRACKET);
				setState(10499);
				((NULLIFContext)_localctx).left = expression(0);
				setState(10500);
				match(COMMA);
				setState(10501);
				((NULLIFContext)_localctx).right = expression(0);
				setState(10502);
				match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new STUFFContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(10504);
				match(STUFF);
				setState(10505);
				match(LR_BRACKET);
				setState(10506);
				((STUFFContext)_localctx).str = expression(0);
				setState(10507);
				match(COMMA);
				setState(10508);
				((STUFFContext)_localctx).from = match(DECIMAL);
				setState(10509);
				match(COMMA);
				setState(10510);
				((STUFFContext)_localctx).to = match(DECIMAL);
				setState(10511);
				match(COMMA);
				setState(10512);
				((STUFFContext)_localctx).str_with = expression(0);
				setState(10513);
				match(RR_BRACKET);
				}
				break;
			case 19:
				_localctx = new SESSION_USERContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(10515);
				match(SESSION_USER);
				}
				break;
			case 20:
				_localctx = new SYSTEM_USERContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(10516);
				match(SYSTEM_USER);
				}
				break;
			case 21:
				_localctx = new USERContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(10517);
				match(USER);
				}
				break;
			case 22:
				_localctx = new ISNULLContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(10518);
				match(ISNULL);
				setState(10519);
				match(LR_BRACKET);
				setState(10520);
				((ISNULLContext)_localctx).left = expression(0);
				setState(10521);
				match(COMMA);
				setState(10522);
				((ISNULLContext)_localctx).right = expression(0);
				setState(10523);
				match(RR_BRACKET);
				}
				break;
			case 23:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(10525);
				xml_data_type_methods();
				}
				break;
			case 24:
				_localctx = new IIFContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(10526);
				match(IIF);
				setState(10527);
				match(LR_BRACKET);
				setState(10528);
				((IIFContext)_localctx).cond = search_condition(0);
				setState(10529);
				match(COMMA);
				setState(10530);
				((IIFContext)_localctx).left = expression(0);
				setState(10531);
				match(COMMA);
				setState(10532);
				((IIFContext)_localctx).right = expression(0);
				setState(10533);
				match(RR_BRACKET);
				}
				break;
			case 25:
				_localctx = new STRINGAGGContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(10535);
				match(STRING_AGG);
				setState(10536);
				match(LR_BRACKET);
				setState(10537);
				((STRINGAGGContext)_localctx).expr = expression(0);
				setState(10538);
				match(COMMA);
				setState(10539);
				((STRINGAGGContext)_localctx).separator = expression(0);
				setState(10540);
				match(RR_BRACKET);
				setState(10547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1474,_ctx) ) {
				case 1:
					{
					setState(10541);
					match(WITHIN);
					setState(10542);
					match(GROUP);
					setState(10543);
					match(LR_BRACKET);
					setState(10544);
					order_by_clause();
					setState(10545);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_data_type_methodsContext extends ParserRuleContext {
		public Value_methodContext value_method() {
			return getRuleContext(Value_methodContext.class,0);
		}
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Exist_methodContext exist_method() {
			return getRuleContext(Exist_methodContext.class,0);
		}
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_data_type_methods; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_data_type_methods(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_data_type_methods(this);
		}
	}

	public final Xml_data_type_methodsContext xml_data_type_methods() throws RecognitionException {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_xml_data_type_methods);
		try {
			setState(10555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1476,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10551);
				value_method();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10552);
				query_method();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10553);
				exist_method();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10554);
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_methodContext extends ParserRuleContext {
		public Token loc_id;
		public Id_Context value_id;
		public Token eventdata;
		public Query_methodContext query;
		public Value_callContext call;
		public Value_callContext value_call() {
			return getRuleContext(Value_callContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode EVENTDATA() { return getToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Value_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterValue_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitValue_method(this);
		}
	}

	public final Value_methodContext value_method() throws RecognitionException {
		Value_methodContext _localctx = new Value_methodContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_value_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1477,_ctx) ) {
			case 1:
				{
				setState(10557);
				((Value_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case 2:
				{
				setState(10558);
				((Value_methodContext)_localctx).value_id = id_();
				}
				break;
			case 3:
				{
				setState(10559);
				((Value_methodContext)_localctx).eventdata = match(EVENTDATA);
				}
				break;
			case 4:
				{
				setState(10560);
				((Value_methodContext)_localctx).query = query_method();
				}
				break;
			case 5:
				{
				setState(10561);
				match(LR_BRACKET);
				setState(10562);
				subquery();
				setState(10563);
				match(RR_BRACKET);
				}
				break;
			}
			setState(10567);
			match(DOT);
			setState(10568);
			((Value_methodContext)_localctx).call = value_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_callContext extends ParserRuleContext {
		public Token xquery;
		public Token sqltype;
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Value_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterValue_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitValue_call(this);
		}
	}

	public final Value_callContext value_call() throws RecognitionException {
		Value_callContext _localctx = new Value_callContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_value_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10570);
			match(VALUE);
			setState(10571);
			match(LR_BRACKET);
			setState(10572);
			((Value_callContext)_localctx).xquery = match(STRING);
			setState(10573);
			match(COMMA);
			setState(10574);
			((Value_callContext)_localctx).sqltype = match(STRING);
			setState(10575);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_methodContext extends ParserRuleContext {
		public Token loc_id;
		public Id_Context value_id;
		public Full_table_nameContext table;
		public Query_callContext call;
		public Query_callContext query_call() {
			return getRuleContext(Query_callContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Query_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_method(this);
		}
	}

	public final Query_methodContext query_method() throws RecognitionException {
		Query_methodContext _localctx = new Query_methodContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_query_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1478,_ctx) ) {
			case 1:
				{
				setState(10577);
				((Query_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case 2:
				{
				setState(10578);
				((Query_methodContext)_localctx).value_id = id_();
				}
				break;
			case 3:
				{
				setState(10579);
				((Query_methodContext)_localctx).table = full_table_name();
				}
				break;
			case 4:
				{
				setState(10580);
				match(LR_BRACKET);
				setState(10581);
				subquery();
				setState(10582);
				match(RR_BRACKET);
				}
				break;
			}
			setState(10586);
			match(DOT);
			setState(10587);
			((Query_methodContext)_localctx).call = query_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_callContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode QUERY() { return getToken(TSqlParser.QUERY, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Query_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_call(this);
		}
	}

	public final Query_callContext query_call() throws RecognitionException {
		Query_callContext _localctx = new Query_callContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_query_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10589);
			match(QUERY);
			setState(10590);
			match(LR_BRACKET);
			setState(10591);
			((Query_callContext)_localctx).xquery = match(STRING);
			setState(10592);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_methodContext extends ParserRuleContext {
		public Token loc_id;
		public Id_Context value_id;
		public Exist_callContext call;
		public Exist_callContext exist_call() {
			return getRuleContext(Exist_callContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Exist_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExist_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExist_method(this);
		}
	}

	public final Exist_methodContext exist_method() throws RecognitionException {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_exist_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(10594);
				((Exist_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(10595);
				((Exist_methodContext)_localctx).value_id = id_();
				}
				break;
			case LR_BRACKET:
				{
				setState(10596);
				match(LR_BRACKET);
				setState(10597);
				subquery();
				setState(10598);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10602);
			match(DOT);
			setState(10603);
			((Exist_methodContext)_localctx).call = exist_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_callContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode EXIST() { return getToken(TSqlParser.EXIST, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Exist_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExist_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExist_call(this);
		}
	}

	public final Exist_callContext exist_call() throws RecognitionException {
		Exist_callContext _localctx = new Exist_callContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_exist_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10605);
			match(EXIST);
			setState(10606);
			match(LR_BRACKET);
			setState(10607);
			((Exist_callContext)_localctx).xquery = match(STRING);
			setState(10608);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_methodContext extends ParserRuleContext {
		public Token loc_id;
		public Id_Context value_id;
		public Modify_callContext call;
		public Modify_callContext modify_call() {
			return getRuleContext(Modify_callContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Modify_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterModify_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitModify_method(this);
		}
	}

	public final Modify_methodContext modify_method() throws RecognitionException {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_modify_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(10610);
				((Modify_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(10611);
				((Modify_methodContext)_localctx).value_id = id_();
				}
				break;
			case LR_BRACKET:
				{
				setState(10612);
				match(LR_BRACKET);
				setState(10613);
				subquery();
				setState(10614);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10618);
			match(DOT);
			setState(10619);
			((Modify_methodContext)_localctx).call = modify_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_callContext extends ParserRuleContext {
		public Token xml_dml;
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Modify_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterModify_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitModify_call(this);
		}
	}

	public final Modify_callContext modify_call() throws RecognitionException {
		Modify_callContext _localctx = new Modify_callContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_modify_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10621);
			match(MODIFY);
			setState(10622);
			match(LR_BRACKET);
			setState(10623);
			((Modify_callContext)_localctx).xml_dml = match(STRING);
			setState(10624);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nodes_methodContext extends ParserRuleContext {
		public Token loc_id;
		public Id_Context value_id;
		public Token xquery;
		public TerminalNode NODES() { return getToken(TSqlParser.NODES, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Nodes_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodes_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNodes_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNodes_method(this);
		}
	}

	public final Nodes_methodContext nodes_method() throws RecognitionException {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_nodes_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10632);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(10626);
				((Nodes_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(10627);
				((Nodes_methodContext)_localctx).value_id = id_();
				}
				break;
			case LR_BRACKET:
				{
				setState(10628);
				match(LR_BRACKET);
				setState(10629);
				subquery();
				setState(10630);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10634);
			match(DOT);
			setState(10635);
			match(NODES);
			setState(10636);
			match(LR_BRACKET);
			setState(10637);
			((Nodes_methodContext)_localctx).xquery = match(STRING);
			setState(10638);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSwitch_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSwitch_section(this);
		}
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10640);
			match(WHEN);
			setState(10641);
			expression(0);
			setState(10642);
			match(THEN);
			setState(10643);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSwitch_search_condition_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSwitch_search_condition_section(this);
		}
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10645);
			match(WHEN);
			setState(10646);
			search_condition(0);
			setState(10647);
			match(THEN);
			setState(10648);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_column_aliasContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAs_column_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAs_column_alias(this);
		}
	}

	public final As_column_aliasContext as_column_alias() throws RecognitionException {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_as_column_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(10650);
				match(AS);
				}
			}

			setState(10653);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_table_aliasContext extends ParserRuleContext {
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAs_table_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAs_table_alias(this);
		}
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(10655);
				match(AS);
				}
			}

			setState(10658);
			table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_alias(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10660);
			id_();
			setState(10662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1484,_ctx) ) {
			case 1:
				{
				setState(10661);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_table_hintsContext extends ParserRuleContext {
		public Table_hintContext table_hint;
		public List<Table_hintContext> hint = new ArrayList<Table_hintContext>();
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWith_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWith_table_hints(this);
		}
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(10664);
				match(WITH);
				}
			}

			setState(10667);
			match(LR_BRACKET);
			setState(10668);
			((With_table_hintsContext)_localctx).table_hint = table_hint();
			((With_table_hintsContext)_localctx).hint.add(((With_table_hintsContext)_localctx).table_hint);
			setState(10675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==HOLDLOCK || _la==INDEX || _la==NOEXPAND || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (SERIALIZABLE - 542)) | (1L << (SNAPSHOT - 542)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 542)))) != 0) || _la==FORCESEEK || _la==ID || _la==COMMA) {
				{
				{
				setState(10670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10669);
					match(COMMA);
					}
				}

				setState(10672);
				((With_table_hintsContext)_localctx).table_hint = table_hint();
				((With_table_hintsContext)_localctx).hint.add(((With_table_hintsContext)_localctx).table_hint);
				}
				}
				setState(10677);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(10678);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_with_table_hintsContext extends ParserRuleContext {
		public Table_hintContext table_hint;
		public List<Table_hintContext> hint = new ArrayList<Table_hintContext>();
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_with_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_with_table_hints(this);
		}
	}

	public final Insert_with_table_hintsContext insert_with_table_hints() throws RecognitionException {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_insert_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10680);
			match(WITH);
			setState(10681);
			match(LR_BRACKET);
			setState(10682);
			((Insert_with_table_hintsContext)_localctx).table_hint = table_hint();
			((Insert_with_table_hintsContext)_localctx).hint.add(((Insert_with_table_hintsContext)_localctx).table_hint);
			setState(10689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==HOLDLOCK || _la==INDEX || _la==NOEXPAND || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (SERIALIZABLE - 542)) | (1L << (SNAPSHOT - 542)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 542)))) != 0) || _la==FORCESEEK || _la==ID || _la==COMMA) {
				{
				{
				setState(10684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10683);
					match(COMMA);
					}
				}

				setState(10686);
				((Insert_with_table_hintsContext)_localctx).table_hint = table_hint();
				((Insert_with_table_hintsContext)_localctx).hint.add(((Insert_with_table_hintsContext)_localctx).table_hint);
				}
				}
				setState(10691);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(10692);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<Index_valueContext> index_value() {
			return getRuleContexts(Index_valueContext.class);
		}
		public Index_valueContext index_value(int i) {
			return getRuleContext(Index_valueContext.class,i);
		}
		public TerminalNode FORCESEEK() { return getToken(TSqlParser.FORCESEEK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode HOLDLOCK() { return getToken(TSqlParser.HOLDLOCK, 0); }
		public List<TerminalNode> ID() { return getTokens(TSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSqlParser.ID, i);
		}
		public TerminalNode NOEXPAND() { return getToken(TSqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_hint(this);
		}
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_table_hint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(10694);
				match(NOEXPAND);
				}
			}

			setState(10746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1496,_ctx) ) {
			case 1:
				{
				setState(10697);
				match(INDEX);
				setState(10717);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(10698);
					match(LR_BRACKET);
					setState(10699);
					index_value();
					setState(10704);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10700);
						match(COMMA);
						setState(10701);
						index_value();
						}
						}
						setState(10706);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10707);
					match(RR_BRACKET);
					}
					break;
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case DECIMAL:
				case ID:
					{
					setState(10709);
					index_value();
					setState(10714);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1492,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(10710);
							match(COMMA);
							setState(10711);
							index_value();
							}
							} 
						}
						setState(10716);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1492,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(10719);
				match(INDEX);
				setState(10720);
				match(EQUAL);
				setState(10721);
				index_value();
				}
				break;
			case 3:
				{
				setState(10722);
				match(FORCESEEK);
				setState(10737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(10723);
					match(LR_BRACKET);
					setState(10724);
					index_value();
					setState(10725);
					match(LR_BRACKET);
					setState(10726);
					match(ID);
					setState(10731);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10727);
						match(COMMA);
						setState(10728);
						match(ID);
						}
						}
						setState(10733);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10734);
					match(RR_BRACKET);
					setState(10735);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				setState(10739);
				match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				setState(10740);
				match(SNAPSHOT);
				}
				break;
			case 6:
				{
				setState(10741);
				match(SPATIAL_WINDOW_MAX_CELLS);
				setState(10742);
				match(EQUAL);
				setState(10743);
				match(DECIMAL);
				}
				break;
			case 7:
				{
				setState(10744);
				match(HOLDLOCK);
				}
				break;
			case 8:
				{
				setState(10745);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_valueContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIndex_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIndex_value(this);
		}
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_index_value);
		try {
			setState(10750);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(10748);
				id_();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10749);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_listContext extends ParserRuleContext {
		public Column_aliasContext column_alias;
		public List<Column_aliasContext> alias = new ArrayList<Column_aliasContext>();
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_alias_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_alias_list(this);
		}
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10752);
			match(LR_BRACKET);
			setState(10753);
			((Column_alias_listContext)_localctx).column_alias = column_alias();
			((Column_alias_listContext)_localctx).alias.add(((Column_alias_listContext)_localctx).column_alias);
			setState(10758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10754);
				match(COMMA);
				setState(10755);
				((Column_alias_listContext)_localctx).column_alias = column_alias();
				((Column_alias_listContext)_localctx).alias.add(((Column_alias_listContext)_localctx).column_alias);
				}
				}
				setState(10760);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(10761);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_alias(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_column_alias);
		try {
			setState(10765);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(10763);
				id_();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10764);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public Expression_listContext expression_list;
		public List<Expression_listContext> exps = new ArrayList<Expression_listContext>();
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_value_constructor(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_table_value_constructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10767);
			match(VALUES);
			setState(10768);
			match(LR_BRACKET);
			setState(10769);
			((Table_value_constructorContext)_localctx).expression_list = expression_list();
			((Table_value_constructorContext)_localctx).exps.add(((Table_value_constructorContext)_localctx).expression_list);
			setState(10770);
			match(RR_BRACKET);
			setState(10778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10771);
				match(COMMA);
				setState(10772);
				match(LR_BRACKET);
				setState(10773);
				((Table_value_constructorContext)_localctx).expression_list = expression_list();
				((Table_value_constructorContext)_localctx).exps.add(((Table_value_constructorContext)_localctx).expression_list);
				setState(10774);
				match(RR_BRACKET);
				}
				}
				setState(10780);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public ExpressionContext expression;
		public List<ExpressionContext> exp = new ArrayList<ExpressionContext>();
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExpression_list(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10781);
			((Expression_listContext)_localctx).expression = expression(0);
			((Expression_listContext)_localctx).exp.add(((Expression_listContext)_localctx).expression);
			setState(10786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10782);
				match(COMMA);
				setState(10783);
				((Expression_listContext)_localctx).expression = expression(0);
				((Expression_listContext)_localctx).exp.add(((Expression_listContext)_localctx).expression);
				}
				}
				setState(10788);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RANK() { return getToken(TSqlParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(TSqlParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(TSqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTILE() { return getToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRanking_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRanking_windowed_function(this);
		}
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_ranking_windowed_function);
		int _la;
		try {
			setState(10799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(10789);
				_la = _input.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10790);
				match(LR_BRACKET);
				setState(10791);
				match(RR_BRACKET);
				setState(10792);
				over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10793);
				match(NTILE);
				setState(10794);
				match(LR_BRACKET);
				setState(10795);
				expression(0);
				setState(10796);
				match(RR_BRACKET);
				setState(10797);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public Token agg_func;
		public Token cnt;
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public TerminalNode AVG() { return getToken(TSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(TSqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(TSqlParser.SUM, 0); }
		public TerminalNode STDEV() { return getToken(TSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(TSqlParser.STDEVP, 0); }
		public TerminalNode VAR() { return getToken(TSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(TSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(TSqlParser.COUNT_BIG, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(TSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode GROUPING() { return getToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode GROUPING_ID() { return getToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAggregate_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAggregate_windowed_function(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(10833);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				enterOuterAlt(_localctx, 1);
				{
				setState(10801);
				((Aggregate_windowed_functionContext)_localctx).agg_func = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 560)) & ~0x3f) == 0 && ((1L << (_la - 560)) & ((1L << (STDEV - 560)) | (1L << (STDEVP - 560)) | (1L << (SUM - 560)) | (1L << (VAR - 560)) | (1L << (VARP - 560)))) != 0)) ) {
					((Aggregate_windowed_functionContext)_localctx).agg_func = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10802);
				match(LR_BRACKET);
				setState(10803);
				all_distinct_expression();
				setState(10804);
				match(RR_BRACKET);
				setState(10806);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1503,_ctx) ) {
				case 1:
					{
					setState(10805);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				enterOuterAlt(_localctx, 2);
				{
				setState(10808);
				((Aggregate_windowed_functionContext)_localctx).cnt = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
					((Aggregate_windowed_functionContext)_localctx).cnt = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10809);
				match(LR_BRACKET);
				setState(10812);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(10810);
					match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case COALESCE:
				case CONTAINSTABLE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DISTINCT:
				case FREETEXTTABLE:
				case IDENTITY:
				case LEFT:
				case NULL_:
				case NULLIF:
				case OPENJSON:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SEMANTICKEYPHRASETABLE:
				case SEMANTICSIMILARITYDETAILSTABLE:
				case SEMANTICSIMILARITYTABLE:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case DOLLAR_PARTITION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case DOLLAR_ACTION:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(10811);
					all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10814);
				match(RR_BRACKET);
				setState(10816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1505,_ctx) ) {
				case 1:
					{
					setState(10815);
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				enterOuterAlt(_localctx, 3);
				{
				setState(10818);
				match(CHECKSUM_AGG);
				setState(10819);
				match(LR_BRACKET);
				setState(10820);
				all_distinct_expression();
				setState(10821);
				match(RR_BRACKET);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 4);
				{
				setState(10823);
				match(GROUPING);
				setState(10824);
				match(LR_BRACKET);
				setState(10825);
				expression(0);
				setState(10826);
				match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				enterOuterAlt(_localctx, 5);
				{
				setState(10828);
				match(GROUPING_ID);
				setState(10829);
				match(LR_BRACKET);
				setState(10830);
				expression_list();
				setState(10831);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_windowed_functionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(TSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(TSqlParser.LAST_VALUE, 0); }
		public TerminalNode LAG() { return getToken(TSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(TSqlParser.LEAD, 0); }
		public TerminalNode OVER() { return getToken(TSqlParser.OVER, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode CUME_DIST() { return getToken(TSqlParser.CUME_DIST, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(TSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode WITHIN() { return getToken(TSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(TSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(TSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode ASC() { return getToken(TSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(TSqlParser.DESC, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAnalytic_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAnalytic_windowed_function(this);
		}
	}

	public final Analytic_windowed_functionContext analytic_windowed_function() throws RecognitionException {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_analytic_windowed_function);
		int _la;
		try {
			setState(10891);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10835);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10836);
				match(LR_BRACKET);
				setState(10837);
				expression(0);
				setState(10838);
				match(RR_BRACKET);
				setState(10839);
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 2);
				{
				setState(10841);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10842);
				match(LR_BRACKET);
				setState(10843);
				expression(0);
				setState(10850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10844);
					match(COMMA);
					setState(10845);
					expression(0);
					setState(10848);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10846);
						match(COMMA);
						setState(10847);
						expression(0);
						}
					}

					}
				}

				setState(10852);
				match(RR_BRACKET);
				setState(10853);
				over_clause();
				}
				break;
			case CUME_DIST:
			case PERCENT_RANK:
				enterOuterAlt(_localctx, 3);
				{
				setState(10855);
				_la = _input.LA(1);
				if ( !(_la==CUME_DIST || _la==PERCENT_RANK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10856);
				match(LR_BRACKET);
				setState(10857);
				match(RR_BRACKET);
				setState(10858);
				match(OVER);
				setState(10859);
				match(LR_BRACKET);
				setState(10863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(10860);
					match(PARTITION);
					setState(10861);
					match(BY);
					setState(10862);
					expression_list();
					}
				}

				setState(10865);
				order_by_clause();
				setState(10866);
				match(RR_BRACKET);
				}
				break;
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
				enterOuterAlt(_localctx, 4);
				{
				setState(10868);
				_la = _input.LA(1);
				if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10869);
				match(LR_BRACKET);
				setState(10870);
				expression(0);
				setState(10871);
				match(RR_BRACKET);
				setState(10872);
				match(WITHIN);
				setState(10873);
				match(GROUP);
				setState(10874);
				match(LR_BRACKET);
				setState(10875);
				match(ORDER);
				setState(10876);
				match(BY);
				setState(10877);
				expression(0);
				setState(10879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(10878);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(10881);
				match(RR_BRACKET);
				setState(10882);
				match(OVER);
				setState(10883);
				match(LR_BRACKET);
				setState(10887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(10884);
					match(PARTITION);
					setState(10885);
					match(BY);
					setState(10886);
					expression_list();
					}
				}

				setState(10889);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_distinct_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAll_distinct_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAll_distinct_expression(this);
		}
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(10893);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(10896);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(TSqlParser.OVER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOver_clause(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10898);
			match(OVER);
			setState(10899);
			match(LR_BRACKET);
			setState(10903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(10900);
				match(PARTITION);
				setState(10901);
				match(BY);
				setState(10902);
				expression_list();
				}
			}

			setState(10906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(10905);
				order_by_clause();
				}
			}

			setState(10909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(10908);
				row_or_range_clause();
				}
			}

			setState(10911);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRow_or_range_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRow_or_range_clause(this);
		}
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10913);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10914);
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(TSqlParser.BETWEEN, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_extent(this);
		}
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_window_frame_extent);
		try {
			setState(10922);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10916);
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10917);
				match(BETWEEN);
				setState(10918);
				window_frame_bound();
				setState(10919);
				match(AND);
				setState(10920);
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_bound(this);
		}
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_window_frame_bound);
		try {
			setState(10926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10924);
				window_frame_preceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10925);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(TSqlParser.PRECEDING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_preceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_preceding(this);
		}
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_window_frame_preceding);
		try {
			setState(10934);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(10928);
				match(UNBOUNDED);
				setState(10929);
				match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10930);
				match(DECIMAL);
				setState(10931);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(10932);
				match(CURRENT);
				setState(10933);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSqlParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_following(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_following(this);
		}
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_window_frame_following);
		try {
			setState(10940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(10936);
				match(UNBOUNDED);
				setState(10937);
				match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10938);
				match(DECIMAL);
				setState(10939);
				match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_optionContext extends ParserRuleContext {
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public List<Database_filestream_optionContext> database_filestream_option() {
			return getRuleContexts(Database_filestream_optionContext.class);
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return getRuleContext(Database_filestream_optionContext.class,i);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_database_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_database_option(this);
		}
	}

	public final Create_database_optionContext create_database_option() throws RecognitionException {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			setState(10976);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESTREAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(10942);
				match(FILESTREAM);
				{
				setState(10943);
				database_filestream_option();
				setState(10948);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1521,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(10944);
						match(COMMA);
						setState(10945);
						database_filestream_option();
						}
						} 
					}
					setState(10950);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1521,_ctx);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10951);
				match(DEFAULT_LANGUAGE);
				setState(10952);
				match(EQUAL);
				setState(10955);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(10953);
					id_();
					}
					break;
				case STRING:
					{
					setState(10954);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10957);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(10958);
				match(EQUAL);
				setState(10961);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(10959);
					id_();
					}
					break;
				case STRING:
					{
					setState(10960);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(10963);
				match(NESTED_TRIGGERS);
				setState(10964);
				match(EQUAL);
				setState(10965);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 5);
				{
				setState(10966);
				match(TRANSFORM_NOISE_WORDS);
				setState(10967);
				match(EQUAL);
				setState(10968);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 6);
				{
				setState(10969);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(10970);
				match(EQUAL);
				setState(10971);
				match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				enterOuterAlt(_localctx, 7);
				{
				setState(10972);
				match(DB_CHAINING);
				setState(10973);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 8);
				{
				setState(10974);
				match(TRUSTWORTHY);
				setState(10975);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_filestream_optionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_filestream_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_filestream_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_filestream_option(this);
		}
	}

	public final Database_filestream_optionContext database_filestream_option() throws RecognitionException {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_database_filestream_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10978);
			match(LR_BRACKET);
			setState(10985);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				setState(10979);
				match(NON_TRANSACTED_ACCESS);
				setState(10980);
				match(EQUAL);
				setState(10981);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				setState(10982);
				match(DIRECTORY_NAME);
				setState(10983);
				match(EQUAL);
				setState(10984);
				match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10987);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_file_specContext extends ParserRuleContext {
		public File_groupContext file_group() {
			return getRuleContext(File_groupContext.class,0);
		}
		public File_specContext file_spec() {
			return getRuleContext(File_specContext.class,0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_file_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_file_spec(this);
		}
	}

	public final Database_file_specContext database_file_spec() throws RecognitionException {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_database_file_spec);
		try {
			setState(10991);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILEGROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(10989);
				file_group();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(10990);
				file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_groupContext extends ParserRuleContext {
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<File_specContext> file_spec() {
			return getRuleContexts(File_specContext.class);
		}
		public File_specContext file_spec(int i) {
			return getRuleContext(File_specContext.class,i);
		}
		public List<TerminalNode> CONTAINS() { return getTokens(TSqlParser.CONTAINS); }
		public TerminalNode CONTAINS(int i) {
			return getToken(TSqlParser.CONTAINS, i);
		}
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_group(this);
		}
	}

	public final File_groupContext file_group() throws RecognitionException {
		File_groupContext _localctx = new File_groupContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_file_group);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10993);
			match(FILEGROUP);
			setState(10994);
			id_();
			setState(10997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1527,_ctx) ) {
			case 1:
				{
				setState(10995);
				match(CONTAINS);
				setState(10996);
				match(FILESTREAM);
				}
				break;
			}
			setState(11000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(10999);
				match(DEFAULT);
				}
			}

			setState(11004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(11002);
				match(CONTAINS);
				setState(11003);
				match(MEMORY_OPTIMIZED_DATA);
				}
			}

			setState(11006);
			file_spec();
			setState(11011);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1530,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(11007);
					match(COMMA);
					setState(11008);
					file_spec();
					}
					} 
				}
				setState(11013);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1530,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_specContext extends ParserRuleContext {
		public Token file;
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public List<File_sizeContext> file_size() {
			return getRuleContexts(File_sizeContext.class);
		}
		public File_sizeContext file_size(int i) {
			return getRuleContext(File_sizeContext.class,i);
		}
		public TerminalNode MAXSIZE() { return getToken(TSqlParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSqlParser.FILEGROWTH, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_spec(this);
		}
	}

	public final File_specContext file_spec() throws RecognitionException {
		File_specContext _localctx = new File_specContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_file_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11014);
			match(LR_BRACKET);
			setState(11015);
			match(NAME);
			setState(11016);
			match(EQUAL);
			setState(11019);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(11017);
				id_();
				}
				break;
			case STRING:
				{
				setState(11018);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(11022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(11021);
				match(COMMA);
				}
			}

			setState(11024);
			match(FILENAME);
			setState(11025);
			match(EQUAL);
			setState(11026);
			((File_specContext)_localctx).file = match(STRING);
			setState(11028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(11027);
				match(COMMA);
				}
			}

			setState(11036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(11030);
				match(SIZE);
				setState(11031);
				match(EQUAL);
				setState(11032);
				file_size();
				setState(11034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(11033);
					match(COMMA);
					}
				}

				}
			}

			setState(11047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAXSIZE) {
				{
				setState(11038);
				match(MAXSIZE);
				setState(11039);
				match(EQUAL);
				setState(11042);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(11040);
					file_size();
					}
					break;
				case UNLIMITED:
					{
					setState(11041);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(11045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(11044);
					match(COMMA);
					}
				}

				}
			}

			setState(11055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILEGROWTH) {
				{
				setState(11049);
				match(FILEGROWTH);
				setState(11050);
				match(EQUAL);
				setState(11051);
				file_size();
				setState(11053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(11052);
					match(COMMA);
					}
				}

				}
			}

			setState(11057);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_nameContext extends ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_name(this);
		}
	}

	public final Entity_nameContext entity_name() throws RecognitionException {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_entity_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1542,_ctx) ) {
			case 1:
				{
				setState(11059);
				((Entity_nameContext)_localctx).server = id_();
				setState(11060);
				match(DOT);
				setState(11061);
				((Entity_nameContext)_localctx).database = id_();
				setState(11062);
				match(DOT);
				setState(11063);
				((Entity_nameContext)_localctx).schema = id_();
				setState(11064);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(11066);
				((Entity_nameContext)_localctx).database = id_();
				setState(11067);
				match(DOT);
				setState(11069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11068);
					((Entity_nameContext)_localctx).schema = id_();
					}
				}

				setState(11071);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(11073);
				((Entity_nameContext)_localctx).schema = id_();
				setState(11074);
				match(DOT);
				}
				break;
			}
			setState(11078);
			((Entity_nameContext)_localctx).table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_azure_dwContext extends ParserRuleContext {
		public Id_Context schema;
		public Id_Context object_name;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_name_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_name_for_azure_dw(this);
		}
	}

	public final Entity_name_for_azure_dwContext entity_name_for_azure_dw() throws RecognitionException {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_entity_name_for_azure_dw);
		try {
			setState(11085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1543,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11080);
				((Entity_name_for_azure_dwContext)_localctx).schema = id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11081);
				((Entity_name_for_azure_dwContext)_localctx).schema = id_();
				setState(11082);
				match(DOT);
				setState(11083);
				((Entity_name_for_azure_dwContext)_localctx).object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_parallel_dwContext extends ParserRuleContext {
		public Id_Context schema_database;
		public Id_Context schema;
		public Id_Context object_name;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_name_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_name_for_parallel_dw(this);
		}
	}

	public final Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() throws RecognitionException {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_entity_name_for_parallel_dw);
		try {
			setState(11092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1544,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11087);
				((Entity_name_for_parallel_dwContext)_localctx).schema_database = id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11088);
				((Entity_name_for_parallel_dwContext)_localctx).schema = id_();
				setState(11089);
				match(DOT);
				setState(11090);
				((Entity_name_for_parallel_dwContext)_localctx).object_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_table_nameContext extends ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFull_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFull_table_name(this);
		}
	}

	public final Full_table_nameContext full_table_name() throws RecognitionException {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_full_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1546,_ctx) ) {
			case 1:
				{
				setState(11094);
				((Full_table_nameContext)_localctx).server = id_();
				setState(11095);
				match(DOT);
				setState(11096);
				((Full_table_nameContext)_localctx).database = id_();
				setState(11097);
				match(DOT);
				setState(11098);
				((Full_table_nameContext)_localctx).schema = id_();
				setState(11099);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(11101);
				((Full_table_nameContext)_localctx).database = id_();
				setState(11102);
				match(DOT);
				setState(11104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11103);
					((Full_table_nameContext)_localctx).schema = id_();
					}
				}

				setState(11106);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(11108);
				((Full_table_nameContext)_localctx).schema = id_();
				setState(11109);
				match(DOT);
				}
				break;
			}
			setState(11113);
			((Full_table_nameContext)_localctx).table = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context table;
		public Token blocking_hierarchy;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_name(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_table_name);
		int _la;
		try {
			setState(11141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1551,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1548,_ctx) ) {
				case 1:
					{
					setState(11115);
					((Table_nameContext)_localctx).database = id_();
					setState(11116);
					match(DOT);
					setState(11118);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
						{
						setState(11117);
						((Table_nameContext)_localctx).schema = id_();
						}
					}

					setState(11120);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(11122);
					((Table_nameContext)_localctx).schema = id_();
					setState(11123);
					match(DOT);
					}
					break;
				}
				setState(11127);
				((Table_nameContext)_localctx).table = id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1550,_ctx) ) {
				case 1:
					{
					setState(11128);
					((Table_nameContext)_localctx).database = id_();
					setState(11129);
					match(DOT);
					setState(11131);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
						{
						setState(11130);
						((Table_nameContext)_localctx).schema = id_();
						}
					}

					setState(11133);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(11135);
					((Table_nameContext)_localctx).schema = id_();
					setState(11136);
					match(DOT);
					}
					break;
				}
				setState(11140);
				((Table_nameContext)_localctx).blocking_hierarchy = match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_nameContext extends ParserRuleContext {
		public Id_Context schema;
		public Id_Context name;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSimple_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSimple_name(this);
		}
	}

	public final Simple_nameContext simple_name() throws RecognitionException {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_simple_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1552,_ctx) ) {
			case 1:
				{
				setState(11143);
				((Simple_nameContext)_localctx).schema = id_();
				setState(11144);
				match(DOT);
				}
				break;
			}
			setState(11148);
			((Simple_nameContext)_localctx).name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_schemaContext extends ParserRuleContext {
		public Id_Context schema;
		public Id_Context procedure;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_proc_name_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_proc_name_schema(this);
		}
	}

	public final Func_proc_name_schemaContext func_proc_name_schema() throws RecognitionException {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_func_proc_name_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1553,_ctx) ) {
			case 1:
				{
				{
				setState(11150);
				((Func_proc_name_schemaContext)_localctx).schema = id_();
				}
				setState(11151);
				match(DOT);
				}
				break;
			}
			setState(11155);
			((Func_proc_name_schemaContext)_localctx).procedure = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_database_schemaContext extends ParserRuleContext {
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_database_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_proc_name_database_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_proc_name_database_schema(this);
		}
	}

	public final Func_proc_name_database_schemaContext func_proc_name_database_schema() throws RecognitionException {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_func_proc_name_database_schema);
		int _la;
		try {
			setState(11167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11157);
					((Func_proc_name_database_schemaContext)_localctx).database = id_();
					}
				}

				setState(11160);
				match(DOT);
				setState(11162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11161);
					((Func_proc_name_database_schemaContext)_localctx).schema = id_();
					}
				}

				setState(11164);
				match(DOT);
				setState(11165);
				((Func_proc_name_database_schemaContext)_localctx).procedure = id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11166);
				func_proc_name_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_server_database_schemaContext extends ParserRuleContext {
		public Id_Context server;
		public Id_Context database;
		public Id_Context schema;
		public Id_Context procedure;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return getRuleContext(Func_proc_name_database_schemaContext.class,0);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_server_database_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_proc_name_server_database_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_proc_name_server_database_schema(this);
		}
	}

	public final Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() throws RecognitionException {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_func_proc_name_server_database_schema);
		int _la;
		try {
			setState(11183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1560,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11169);
					((Func_proc_name_server_database_schemaContext)_localctx).server = id_();
					}
				}

				setState(11172);
				match(DOT);
				setState(11174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11173);
					((Func_proc_name_server_database_schemaContext)_localctx).database = id_();
					}
				}

				setState(11176);
				match(DOT);
				setState(11178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11177);
					((Func_proc_name_server_database_schemaContext)_localctx).schema = id_();
					}
				}

				setState(11180);
				match(DOT);
				setState(11181);
				((Func_proc_name_server_database_schemaContext)_localctx).procedure = id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11182);
				func_proc_name_database_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_objectContext extends ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDdl_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDdl_object(this);
		}
	}

	public final Ddl_objectContext ddl_object() throws RecognitionException {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_ddl_object);
		try {
			setState(11187);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(11185);
				full_table_name();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(11186);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public Id_Context column_name;
		public Id_Context server;
		public Id_Context schema;
		public Id_Context tablename;
		public TerminalNode DELETED() { return getToken(TSqlParser.DELETED, 0); }
		public TerminalNode INSERTED() { return getToken(TSqlParser.INSERTED, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFull_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFull_column_name(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_full_column_name);
		int _la;
		try {
			setState(11220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11189);
				_la = _input.LA(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11190);
				match(DOT);
				setState(11191);
				((Full_column_nameContext)_localctx).column_name = id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11192);
					((Full_column_nameContext)_localctx).server = id_();
					}
				}

				setState(11195);
				match(DOT);
				setState(11197);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11196);
					((Full_column_nameContext)_localctx).schema = id_();
					}
				}

				setState(11199);
				match(DOT);
				setState(11201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11200);
					((Full_column_nameContext)_localctx).tablename = id_();
					}
				}

				setState(11203);
				match(DOT);
				setState(11204);
				((Full_column_nameContext)_localctx).column_name = id_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11205);
					((Full_column_nameContext)_localctx).schema = id_();
					}
				}

				setState(11208);
				match(DOT);
				setState(11210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11209);
					((Full_column_nameContext)_localctx).tablename = id_();
					}
				}

				setState(11212);
				match(DOT);
				setState(11213);
				((Full_column_nameContext)_localctx).column_name = id_();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11215);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(11214);
					((Full_column_nameContext)_localctx).tablename = id_();
					}
				}

				setState(11217);
				match(DOT);
				setState(11218);
				((Full_column_nameContext)_localctx).column_name = id_();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11219);
				((Full_column_nameContext)_localctx).column_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_with_orderContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> ASC() { return getTokens(TSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(TSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(TSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_with_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_name_list_with_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_name_list_with_order(this);
		}
	}

	public final Column_name_list_with_orderContext column_name_list_with_order() throws RecognitionException {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_column_name_list_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11222);
			id_();
			setState(11224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(11223);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(11233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11226);
				match(COMMA);
				setState(11227);
				id_();
				setState(11229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(11228);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(11235);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_name_listContext extends ParserRuleContext {
		public Insert_column_idContext insert_column_id;
		public List<Insert_column_idContext> col = new ArrayList<Insert_column_idContext>();
		public List<Insert_column_idContext> insert_column_id() {
			return getRuleContexts(Insert_column_idContext.class);
		}
		public Insert_column_idContext insert_column_id(int i) {
			return getRuleContext(Insert_column_idContext.class,i);
		}
		public Insert_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_column_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_column_name_list(this);
		}
	}

	public final Insert_column_name_listContext insert_column_name_list() throws RecognitionException {
		Insert_column_name_listContext _localctx = new Insert_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_insert_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11236);
			((Insert_column_name_listContext)_localctx).insert_column_id = insert_column_id();
			((Insert_column_name_listContext)_localctx).col.add(((Insert_column_name_listContext)_localctx).insert_column_id);
			setState(11241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11237);
				match(COMMA);
				setState(11238);
				((Insert_column_name_listContext)_localctx).insert_column_id = insert_column_id();
				((Insert_column_name_listContext)_localctx).col.add(((Insert_column_name_listContext)_localctx).insert_column_id);
				}
				}
				setState(11243);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_idContext extends ParserRuleContext {
		public Id_Context id_;
		public List<Id_Context> ignore = new ArrayList<Id_Context>();
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Insert_column_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_column_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_column_id(this);
		}
	}

	public final Insert_column_idContext insert_column_id() throws RecognitionException {
		Insert_column_idContext _localctx = new Insert_column_idContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_insert_column_id);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11250);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1574,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(11245);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
						{
						setState(11244);
						((Insert_column_idContext)_localctx).id_ = id_();
						((Insert_column_idContext)_localctx).ignore.add(((Insert_column_idContext)_localctx).id_);
						}
					}

					setState(11247);
					match(DOT);
					}
					} 
				}
				setState(11252);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1574,_ctx);
			}
			setState(11253);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public Id_Context id_;
		public List<Id_Context> col = new ArrayList<Id_Context>();
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_name_list(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11255);
			((Column_name_listContext)_localctx).id_ = id_();
			((Column_name_listContext)_localctx).col.add(((Column_name_listContext)_localctx).id_);
			setState(11260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11256);
				match(COMMA);
				setState(11257);
				((Column_name_listContext)_localctx).id_ = id_();
				((Column_name_listContext)_localctx).col.add(((Column_name_listContext)_localctx).id_);
				}
				}
				setState(11262);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCursor_name(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_cursor_name);
		try {
			setState(11265);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(11263);
				id_();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(11264);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_offContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOn_off(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOn_off(this);
		}
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11267);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(TSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClustered(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClustered(this);
		}
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11269);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNull_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNull_notnull(this);
		}
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(11271);
				match(NOT);
				}
			}

			setState(11274);
			match(NULL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_or_defaultContext extends ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNull_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNull_or_default(this);
		}
	}

	public final Null_or_defaultContext null_or_default() throws RecognitionException {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_null_or_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11287);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_:
				{
				setState(11276);
				null_notnull();
				}
				break;
			case DEFAULT:
				{
				setState(11277);
				match(DEFAULT);
				setState(11278);
				constant_expression();
				setState(11281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(11279);
					match(COLLATE);
					setState(11280);
					id_();
					}
				}

				setState(11285);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1579,_ctx) ) {
				case 1:
					{
					setState(11283);
					match(WITH);
					setState(11284);
					match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public TerminalNode RIGHT() { return getToken(TSqlParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(TSqlParser.LEFT, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterScalar_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitScalar_function_name(this);
		}
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_scalar_function_name);
		try {
			setState(11294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1581,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11289);
				func_proc_name_server_database_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11290);
				match(RIGHT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11291);
				match(LEFT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11292);
				match(BINARY_CHECKSUM);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11293);
				match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_timerContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode TIMER() { return getToken(TSqlParser.TIMER, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_timer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBegin_conversation_timer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBegin_conversation_timer(this);
		}
	}

	public final Begin_conversation_timerContext begin_conversation_timer() throws RecognitionException {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_begin_conversation_timer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11296);
			match(BEGIN);
			setState(11297);
			match(CONVERSATION);
			setState(11298);
			match(TIMER);
			setState(11299);
			match(LR_BRACKET);
			setState(11300);
			match(LOCAL_ID);
			setState(11301);
			match(RR_BRACKET);
			setState(11302);
			match(TIMEOUT);
			setState(11303);
			match(EQUAL);
			setState(11304);
			time();
			setState(11306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1582,_ctx) ) {
			case 1:
				{
				setState(11305);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_dialogContext extends ParserRuleContext {
		public Token dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public Token service_broker_guid;
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSqlParser.SERVICE, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public List<Service_nameContext> service_name() {
			return getRuleContexts(Service_nameContext.class);
		}
		public Service_nameContext service_name(int i) {
			return getRuleContext(Service_nameContext.class,i);
		}
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_dialog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBegin_conversation_dialog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBegin_conversation_dialog(this);
		}
	}

	public final Begin_conversation_dialogContext begin_conversation_dialog() throws RecognitionException {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_begin_conversation_dialog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11308);
			match(BEGIN);
			setState(11309);
			match(DIALOG);
			setState(11311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERSATION) {
				{
				setState(11310);
				match(CONVERSATION);
				}
			}

			setState(11313);
			((Begin_conversation_dialogContext)_localctx).dialog_handle = match(LOCAL_ID);
			setState(11314);
			match(FROM);
			setState(11315);
			match(SERVICE);
			setState(11316);
			((Begin_conversation_dialogContext)_localctx).initiator_service_name = service_name();
			setState(11317);
			match(TO);
			setState(11318);
			match(SERVICE);
			setState(11319);
			((Begin_conversation_dialogContext)_localctx).target_service_name = service_name();
			setState(11322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(11320);
				match(COMMA);
				setState(11321);
				((Begin_conversation_dialogContext)_localctx).service_broker_guid = match(STRING);
				}
			}

			setState(11324);
			match(ON);
			setState(11325);
			match(CONTRACT);
			setState(11326);
			contract_name();
			setState(11349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1590,_ctx) ) {
			case 1:
				{
				setState(11327);
				match(WITH);
				setState(11334);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1586,_ctx) ) {
				case 1:
					{
					setState(11328);
					_la = _input.LA(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(11329);
					match(EQUAL);
					setState(11330);
					match(LOCAL_ID);
					setState(11332);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(11331);
						match(COMMA);
						}
					}

					}
					break;
				}
				setState(11342);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1588,_ctx) ) {
				case 1:
					{
					setState(11336);
					match(LIFETIME);
					setState(11337);
					match(EQUAL);
					setState(11338);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(11340);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(11339);
						match(COMMA);
						}
					}

					}
					break;
				}
				setState(11347);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1589,_ctx) ) {
				case 1:
					{
					setState(11344);
					match(ENCRYPTION);
					setState(11345);
					match(EQUAL);
					setState(11346);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
			setState(11352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1591,_ctx) ) {
			case 1:
				{
				setState(11351);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contract_nameContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contract_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterContract_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitContract_name(this);
		}
	}

	public final Contract_nameContext contract_name() throws RecognitionException {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_contract_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1592,_ctx) ) {
			case 1:
				{
				setState(11354);
				id_();
				}
				break;
			case 2:
				{
				setState(11355);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_nameContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterService_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitService_name(this);
		}
	}

	public final Service_nameContext service_name() throws RecognitionException {
		Service_nameContext _localctx = new Service_nameContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_service_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1593,_ctx) ) {
			case 1:
				{
				setState(11358);
				id_();
				}
				break;
			case 2:
				{
				setState(11359);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public Token faliure_code;
		public Token failure_text;
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ERROR() { return getToken(TSqlParser.ERROR, 0); }
		public TerminalNode DESCRIPTION() { return getToken(TSqlParser.DESCRIPTION, 0); }
		public TerminalNode CLEANUP() { return getToken(TSqlParser.CLEANUP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEnd_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEnd_conversation(this);
		}
	}

	public final End_conversationContext end_conversation() throws RecognitionException {
		End_conversationContext _localctx = new End_conversationContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_end_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11362);
			match(END);
			setState(11363);
			match(CONVERSATION);
			setState(11364);
			((End_conversationContext)_localctx).conversation_handle = match(LOCAL_ID);
			setState(11366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1594,_ctx) ) {
			case 1:
				{
				setState(11365);
				match(SEMI);
				}
				break;
			}
			setState(11380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1597,_ctx) ) {
			case 1:
				{
				setState(11368);
				match(WITH);
				setState(11375);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1595,_ctx) ) {
				case 1:
					{
					setState(11369);
					match(ERROR);
					setState(11370);
					match(EQUAL);
					setState(11371);
					((End_conversationContext)_localctx).faliure_code = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).faliure_code = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(11372);
					match(DESCRIPTION);
					setState(11373);
					match(EQUAL);
					setState(11374);
					((End_conversationContext)_localctx).failure_text = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).failure_text = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(11378);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1596,_ctx) ) {
				case 1:
					{
					setState(11377);
					match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_conversationContext extends ParserRuleContext {
		public TimeContext timeout;
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public TerminalNode WAITFOR() { return getToken(TSqlParser.WAITFOR, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWaitfor_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWaitfor_conversation(this);
		}
	}

	public final Waitfor_conversationContext waitfor_conversation() throws RecognitionException {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_waitfor_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAITFOR) {
				{
				setState(11382);
				match(WAITFOR);
				}
			}

			setState(11385);
			match(LR_BRACKET);
			setState(11386);
			get_conversation();
			setState(11387);
			match(RR_BRACKET);
			setState(11393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1600,_ctx) ) {
			case 1:
				{
				setState(11389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(11388);
					match(COMMA);
					}
				}

				setState(11391);
				match(TIMEOUT);
				setState(11392);
				((Waitfor_conversationContext)_localctx).timeout = time();
				}
				break;
			}
			setState(11396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1601,_ctx) ) {
			case 1:
				{
				setState(11395);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_conversationContext extends ParserRuleContext {
		public Token conversation_group_id;
		public Queue_idContext queue;
		public TerminalNode GET() { return getToken(TSqlParser.GET, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return getRuleContext(Queue_idContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGet_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGet_conversation(this);
		}
	}

	public final Get_conversationContext get_conversation() throws RecognitionException {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_get_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11398);
			match(GET);
			setState(11399);
			match(CONVERSATION);
			setState(11400);
			match(GROUP);
			setState(11401);
			((Get_conversationContext)_localctx).conversation_group_id = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Get_conversationContext)_localctx).conversation_group_id = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(11402);
			match(FROM);
			setState(11403);
			((Get_conversationContext)_localctx).queue = queue_id();
			setState(11405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1602,_ctx) ) {
			case 1:
				{
				setState(11404);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_idContext extends ParserRuleContext {
		public Id_Context database_name;
		public Id_Context schema_name;
		public Id_Context name;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_id(this);
		}
	}

	public final Queue_idContext queue_id() throws RecognitionException {
		Queue_idContext _localctx = new Queue_idContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_queue_id);
		try {
			setState(11414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1603,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(11407);
				((Queue_idContext)_localctx).database_name = id_();
				setState(11408);
				match(DOT);
				setState(11409);
				((Queue_idContext)_localctx).schema_name = id_();
				setState(11410);
				match(DOT);
				setState(11411);
				((Queue_idContext)_localctx).name = id_();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11413);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Send_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public ExpressionContext message_type_name;
		public Token message_body_expression;
		public TerminalNode SEND() { return getToken(TSqlParser.SEND, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_send_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSend_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSend_conversation(this);
		}
	}

	public final Send_conversationContext send_conversation() throws RecognitionException {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_send_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11416);
			match(SEND);
			setState(11417);
			match(ON);
			setState(11418);
			match(CONVERSATION);
			setState(11419);
			((Send_conversationContext)_localctx).conversation_handle = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Send_conversationContext)_localctx).conversation_handle = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(11420);
			match(MESSAGE);
			setState(11421);
			match(TYPE);
			setState(11422);
			((Send_conversationContext)_localctx).message_type_name = expression(0);
			setState(11426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1604,_ctx) ) {
			case 1:
				{
				setState(11423);
				match(LR_BRACKET);
				setState(11424);
				((Send_conversationContext)_localctx).message_body_expression = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					((Send_conversationContext)_localctx).message_body_expression = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11425);
				match(RR_BRACKET);
				}
				break;
			}
			setState(11429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1605,_ctx) ) {
			case 1:
				{
				setState(11428);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public Token scaled;
		public Id_Context ext_type;
		public Token scale;
		public Token prec;
		public Token seed;
		public Token inc;
		public Token double_prec;
		public Id_Context unscaled_type;
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode VARCHAR() { return getToken(TSqlParser.VARCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(TSqlParser.NVARCHAR, 0); }
		public TerminalNode BINARY_KEYWORD() { return getToken(TSqlParser.BINARY_KEYWORD, 0); }
		public TerminalNode VARBINARY_KEYWORD() { return getToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode DOUBLE() { return getToken(TSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(TSqlParser.PRECISION, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitData_type(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_data_type);
		int _la;
		try {
			setState(11461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1608,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11431);
				((Data_typeContext)_localctx).scaled = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY_KEYWORD || _la==VARBINARY_KEYWORD || _la==VARCHAR || _la==NVARCHAR) ) {
					((Data_typeContext)_localctx).scaled = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11432);
				match(LR_BRACKET);
				setState(11433);
				match(MAX);
				setState(11434);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11435);
				((Data_typeContext)_localctx).ext_type = id_();
				setState(11436);
				match(LR_BRACKET);
				setState(11437);
				((Data_typeContext)_localctx).scale = match(DECIMAL);
				setState(11438);
				match(COMMA);
				setState(11439);
				((Data_typeContext)_localctx).prec = match(DECIMAL);
				setState(11440);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11442);
				((Data_typeContext)_localctx).ext_type = id_();
				setState(11443);
				match(LR_BRACKET);
				setState(11444);
				((Data_typeContext)_localctx).scale = match(DECIMAL);
				setState(11445);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11447);
				((Data_typeContext)_localctx).ext_type = id_();
				setState(11448);
				match(IDENTITY);
				setState(11454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1606,_ctx) ) {
				case 1:
					{
					setState(11449);
					match(LR_BRACKET);
					setState(11450);
					((Data_typeContext)_localctx).seed = match(DECIMAL);
					setState(11451);
					match(COMMA);
					setState(11452);
					((Data_typeContext)_localctx).inc = match(DECIMAL);
					setState(11453);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11456);
				((Data_typeContext)_localctx).double_prec = match(DOUBLE);
				setState(11458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1607,_ctx) ) {
				case 1:
					{
					setState(11457);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11460);
				((Data_typeContext)_localctx).unscaled_type = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode NULL_() { return getToken(TSqlParser.NULL_, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDefault_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDefault_value(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_default_value);
		try {
			setState(11466);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(11463);
				match(NULL_);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(11464);
				match(DEFAULT);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(11465);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(TSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_constant);
		int _la;
		try {
			setState(11483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1613,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11468);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11469);
				match(BINARY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(11470);
					sign();
					}
				}

				setState(11473);
				match(DECIMAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(11474);
					sign();
					}
				}

				setState(11477);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(11478);
					sign();
					}
				}

				setState(11481);
				((ConstantContext)_localctx).dollar = match(DOLLAR);
				setState(11482);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSign(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11485);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordContext extends ParserRuleContext {
		public TerminalNode ABSOLUTE() { return getToken(TSqlParser.ABSOLUTE, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(TSqlParser.ACTIVATION, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode ADDRESS() { return getToken(TSqlParser.ADDRESS, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(TSqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public TerminalNode ALLOWED() { return getToken(TSqlParser.ALLOWED, 0); }
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode APPLY() { return getToken(TSqlParser.APPLY, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode AT_KEYWORD() { return getToken(TSqlParser.AT_KEYWORD, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode AUDIT_GUID() { return getToken(TSqlParser.AUDIT_GUID, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode AUTO_CLEANUP() { return getToken(TSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode AUTO_CLOSE() { return getToken(TSqlParser.AUTO_CLOSE, 0); }
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(TSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode AVG() { return getToken(TSqlParser.AVG, 0); }
		public TerminalNode BACKUP_PRIORITY() { return getToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(TSqlParser.BEGIN_DIALOG, 0); }
		public TerminalNode BIGINT() { return getToken(TSqlParser.BIGINT, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(TSqlParser.BINARY_BASE64, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(TSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(TSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(TSqlParser.BULK_LOGGED, 0); }
		public TerminalNode CALLER() { return getToken(TSqlParser.CALLER, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode CAST() { return getToken(TSqlParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode CATCH() { return getToken(TSqlParser.CATCH, 0); }
		public TerminalNode CHANGE_RETENTION() { return getToken(TSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(TSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(TSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode CLEANUP() { return getToken(TSqlParser.CLEANUP, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public TerminalNode COMMITTED() { return getToken(TSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode CONCAT() { return getToken(TSqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public TerminalNode CONTROL() { return getToken(TSqlParser.CONTROL, 0); }
		public TerminalNode COOKIE() { return getToken(TSqlParser.COOKIE, 0); }
		public TerminalNode COUNT() { return getToken(TSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(TSqlParser.COUNT_BIG, 0); }
		public TerminalNode COUNTER() { return getToken(TSqlParser.COUNTER, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode CURSOR_DEFAULT() { return getToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public TerminalNode DATEADD() { return getToken(TSqlParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(TSqlParser.DATEDIFF, 0); }
		public TerminalNode DATENAME() { return getToken(TSqlParser.DATENAME, 0); }
		public TerminalNode DATEPART() { return getToken(TSqlParser.DATEPART, 0); }
		public TerminalNode DAYS() { return getToken(TSqlParser.DAYS, 0); }
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(TSqlParser.DB_FAILOVER, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode DELAY() { return getToken(TSqlParser.DELAY, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode DELETED() { return getToken(TSqlParser.DELETED, 0); }
		public TerminalNode DENSE_RANK() { return getToken(TSqlParser.DENSE_RANK, 0); }
		public TerminalNode DEPENDENTS() { return getToken(TSqlParser.DEPENDENTS, 0); }
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode DESCRIPTION() { return getToken(TSqlParser.DESCRIPTION, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode DHCP() { return getToken(TSqlParser.DHCP, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(TSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode DISABLED() { return getToken(TSqlParser.DISABLED, 0); }
		public TerminalNode DISK_DRIVE() { return getToken(TSqlParser.DISK_DRIVE, 0); }
		public TerminalNode DOCUMENT() { return getToken(TSqlParser.DOCUMENT, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSqlParser.DYNAMIC, 0); }
		public TerminalNode ELEMENTS() { return getToken(TSqlParser.ELEMENTS, 0); }
		public TerminalNode EMERGENCY() { return getToken(TSqlParser.EMERGENCY, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode ENABLE_BROKER() { return getToken(TSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode ENDPOINT_URL() { return getToken(TSqlParser.ENDPOINT_URL, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(TSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTABLE() { return getToken(TSqlParser.EXECUTABLE, 0); }
		public TerminalNode EXIST() { return getToken(TSqlParser.EXIST, 0); }
		public TerminalNode EXPAND() { return getToken(TSqlParser.EXPAND, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(TSqlParser.EXPIRY_DATE, 0); }
		public TerminalNode EXPLICIT() { return getToken(TSqlParser.EXPLICIT, 0); }
		public TerminalNode FAIL_OPERATION() { return getToken(TSqlParser.FAIL_OPERATION, 0); }
		public TerminalNode FAILOVER_MODE() { return getToken(TSqlParser.FAILOVER_MODE, 0); }
		public TerminalNode FAILURE() { return getToken(TSqlParser.FAILURE, 0); }
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode FAST() { return getToken(TSqlParser.FAST, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSqlParser.FAST_FORWARD, 0); }
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSqlParser.FILEGROWTH, 0); }
		public TerminalNode FILEPATH() { return getToken(TSqlParser.FILEPATH, 0); }
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public TerminalNode FILTER() { return getToken(TSqlParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(TSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public TerminalNode FORMAT() { return getToken(TSqlParser.FORMAT, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode FULLSCAN() { return getToken(TSqlParser.FULLSCAN, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode GETDATE() { return getToken(TSqlParser.GETDATE, 0); }
		public TerminalNode GETUTCDATE() { return getToken(TSqlParser.GETUTCDATE, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(TSqlParser.GO, 0); }
		public TerminalNode GO_BATCH() { return getToken(TSqlParser.GO_BATCH, 0); }
		public TerminalNode GROUP_MAX_REQUESTS() { return getToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		public TerminalNode GROUPING() { return getToken(TSqlParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(TSqlParser.GROUPING_ID, 0); }
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode HIGH() { return getToken(TSqlParser.HIGH, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public TerminalNode HOURS() { return getToken(TSqlParser.HOURS, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode IMMEDIATE() { return getToken(TSqlParser.IMMEDIATE, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSqlParser.IMPERSONATE, 0); }
		public TerminalNode IMPORTANCE() { return getToken(TSqlParser.IMPORTANCE, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode INITIATOR() { return getToken(TSqlParser.INITIATOR, 0); }
		public TerminalNode INPUT() { return getToken(TSqlParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(TSqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERTED() { return getToken(TSqlParser.INSERTED, 0); }
		public TerminalNode INT() { return getToken(TSqlParser.INT, 0); }
		public TerminalNode IP() { return getToken(TSqlParser.IP, 0); }
		public TerminalNode ISOLATION() { return getToken(TSqlParser.ISOLATION, 0); }
		public TerminalNode JOB() { return getToken(TSqlParser.JOB, 0); }
		public TerminalNode JSON() { return getToken(TSqlParser.JSON, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode KEEP() { return getToken(TSqlParser.KEEP, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSqlParser.KEEPFIXED, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode KEYS() { return getToken(TSqlParser.KEYS, 0); }
		public TerminalNode KEYSET() { return getToken(TSqlParser.KEYSET, 0); }
		public TerminalNode LAG() { return getToken(TSqlParser.LAG, 0); }
		public TerminalNode LAST() { return getToken(TSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(TSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(TSqlParser.LEAD, 0); }
		public TerminalNode LEVEL() { return getToken(TSqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode LISTENER() { return getToken(TSqlParser.LISTENER, 0); }
		public TerminalNode LISTENER_URL() { return getToken(TSqlParser.LISTENER_URL, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(TSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(TSqlParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(TSqlParser.LOCK, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(TSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode LOW() { return getToken(TSqlParser.LOW, 0); }
		public TerminalNode MANUAL() { return getToken(TSqlParser.MANUAL, 0); }
		public TerminalNode MARK() { return getToken(TSqlParser.MARK, 0); }
		public TerminalNode MATERIALIZED() { return getToken(TSqlParser.MATERIALIZED, 0); }
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode MAX_DOP() { return getToken(TSqlParser.MAX_DOP, 0); }
		public TerminalNode MAX_FILES() { return getToken(TSqlParser.MAX_FILES, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode MAX_QUEUE_READERS() { return getToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode MAX_ROLLOVER_FILES() { return getToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSqlParser.MAXRECURSION, 0); }
		public TerminalNode MAXSIZE() { return getToken(TSqlParser.MAXSIZE, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode MEDIUM() { return getToken(TSqlParser.MEDIUM, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode MIN() { return getToken(TSqlParser.MIN, 0); }
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode MIN_CPU_PERCENT() { return getToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode MODE() { return getToken(TSqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode MOVE() { return getToken(TSqlParser.MOVE, 0); }
		public TerminalNode MULTI_USER() { return getToken(TSqlParser.MULTI_USER, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(TSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_BROKER() { return getToken(TSqlParser.NEW_BROKER, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(TSqlParser.NEW_PASSWORD, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode NO_TRUNCATE() { return getToken(TSqlParser.NO_TRUNCATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(TSqlParser.NO_WAIT, 0); }
		public TerminalNode NOCOUNT() { return getToken(TSqlParser.NOCOUNT, 0); }
		public TerminalNode NODES() { return getToken(TSqlParser.NODES, 0); }
		public TerminalNode NOEXPAND() { return getToken(TSqlParser.NOEXPAND, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(TSqlParser.NORECOMPUTE, 0); }
		public TerminalNode NORECOVERY() { return getToken(TSqlParser.NORECOVERY, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public TerminalNode NTILE() { return getToken(TSqlParser.NTILE, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode NUMBER() { return getToken(TSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(TSqlParser.OFFSET, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(TSqlParser.OLD_ACCOUNT, 0); }
		public TerminalNode ONLINE() { return getToken(TSqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public TerminalNode OPENJSON() { return getToken(TSqlParser.OPENJSON, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSqlParser.OPTIMISTIC, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSqlParser.OPTIMIZE, 0); }
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode OVERRIDE() { return getToken(TSqlParser.OVERRIDE, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode PAGE_VERIFY() { return getToken(TSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(TSqlParser.PARTITIONS, 0); }
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode PORT() { return getToken(TSqlParser.PORT, 0); }
		public TerminalNode PRECEDING() { return getToken(TSqlParser.PRECEDING, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(TSqlParser.PRIMARY_ROLE, 0); }
		public TerminalNode PRIOR() { return getToken(TSqlParser.PRIOR, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(TSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(TSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE_NAME() { return getToken(TSqlParser.PROCEDURE_NAME, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode QUERY() { return getToken(TSqlParser.QUERY, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public TerminalNode QUEUE_DELAY() { return getToken(TSqlParser.QUEUE_DELAY, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(TSqlParser.RANK, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public TerminalNode READONLY() { return getToken(TSqlParser.READONLY, 0); }
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode RECEIVE() { return getToken(TSqlParser.RECEIVE, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public TerminalNode RECOVERY() { return getToken(TSqlParser.RECOVERY, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public TerminalNode RELATIVE() { return getToken(TSqlParser.RELATIVE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSqlParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(TSqlParser.REPLICA, 0); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC() { return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode RESERVE_DISK_SPACE() { return getToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode RESOURCE_MANAGER_LOCATION() { return getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(TSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode RETENTION() { return getToken(TSqlParser.RETENTION, 0); }
		public TerminalNode ROBUST() { return getToken(TSqlParser.ROBUST, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(TSqlParser.ROW_NUMBER, 0); }
		public TerminalNode ROWGUID() { return getToken(TSqlParser.ROWGUID, 0); }
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode SAMPLE() { return getToken(TSqlParser.SAMPLE, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode SCOPED() { return getToken(TSqlParser.SCOPED, 0); }
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode SECONDARY() { return getToken(TSqlParser.SECONDARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(TSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY_ROLE() { return getToken(TSqlParser.SECONDARY_ROLE, 0); }
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public TerminalNode SEEDING_MODE() { return getToken(TSqlParser.SEEDING_MODE, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode SEND() { return getToken(TSqlParser.SEND, 0); }
		public TerminalNode SENT() { return getToken(TSqlParser.SENT, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode SETERROR() { return getToken(TSqlParser.SETERROR, 0); }
		public TerminalNode SHARE() { return getToken(TSqlParser.SHARE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(TSqlParser.SHOWPLAN, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSqlParser.SIGNATURE, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode SINGLE_USER() { return getToken(TSqlParser.SINGLE_USER, 0); }
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public TerminalNode SMALLINT() { return getToken(TSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode STANDBY() { return getToken(TSqlParser.STANDBY, 0); }
		public TerminalNode START_DATE() { return getToken(TSqlParser.START_DATE, 0); }
		public TerminalNode STATIC() { return getToken(TSqlParser.STATIC, 0); }
		public TerminalNode STATS_STREAM() { return getToken(TSqlParser.STATS_STREAM, 0); }
		public TerminalNode STATUS() { return getToken(TSqlParser.STATUS, 0); }
		public TerminalNode STATUSONLY() { return getToken(TSqlParser.STATUSONLY, 0); }
		public TerminalNode STDEV() { return getToken(TSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(TSqlParser.STDEVP, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode STRING_AGG() { return getToken(TSqlParser.STRING_AGG, 0); }
		public TerminalNode STUFF() { return getToken(TSqlParser.STUFF, 0); }
		public TerminalNode SUBJECT() { return getToken(TSqlParser.SUBJECT, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(TSqlParser.SUBSCRIPTION, 0); }
		public TerminalNode SUM() { return getToken(TSqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode SYNCHRONOUS_COMMIT() { return getToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public TerminalNode SYSTEM() { return getToken(TSqlParser.SYSTEM, 0); }
		public TerminalNode TAKE() { return getToken(TSqlParser.TAKE, 0); }
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode TB() { return getToken(TSqlParser.TB, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode THROW() { return getToken(TSqlParser.THROW, 0); }
		public TerminalNode TIES() { return getToken(TSqlParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TerminalNode TIMER() { return getToken(TSqlParser.TIMER, 0); }
		public TerminalNode TINYINT() { return getToken(TSqlParser.TINYINT, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode TRY() { return getToken(TSqlParser.TRY, 0); }
		public TerminalNode TSQL() { return getToken(TSqlParser.TSQL, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSqlParser.TYPE_WARNING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSqlParser.UNLIMITED, 0); }
		public TerminalNode UOW() { return getToken(TSqlParser.UOW, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode VAR() { return getToken(TSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(TSqlParser.VARP, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSqlParser.VIEW_METADATA, 0); }
		public TerminalNode VIEWS() { return getToken(TSqlParser.VIEWS, 0); }
		public TerminalNode WAIT() { return getToken(TSqlParser.WAIT, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public TerminalNode WORK() { return getToken(TSqlParser.WORK, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode XMLDATA() { return getToken(TSqlParser.XMLDATA, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(TSqlParser.XMLSCHEMA, 0); }
		public TerminalNode XSINIL() { return getToken(TSqlParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(TSqlParser.ABSENT, 0); }
		public TerminalNode AES() { return getToken(TSqlParser.AES, 0); }
		public TerminalNode ALLOW_CONNECTIONS() { return getToken(TSqlParser.ALLOW_CONNECTIONS, 0); }
		public TerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_SINGLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode APPEND() { return getToken(TSqlParser.APPEND, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode ASYNCHRONOUS_COMMIT() { return getToken(TSqlParser.ASYNCHRONOUS_COMMIT, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(TSqlParser.AUTHENTICATION, 0); }
		public TerminalNode AUTOMATED_BACKUP_PREFERENCE() { return getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public TerminalNode AUTOMATIC() { return getToken(TSqlParser.AUTOMATIC, 0); }
		public TerminalNode AVAILABILITY_MODE() { return getToken(TSqlParser.AVAILABILITY_MODE, 0); }
		public TerminalNode BEFORE() { return getToken(TSqlParser.BEFORE, 0); }
		public TerminalNode BLOCK() { return getToken(TSqlParser.BLOCK, 0); }
		public TerminalNode BLOCKSIZE() { return getToken(TSqlParser.BLOCKSIZE, 0); }
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public TerminalNode BUFFER() { return getToken(TSqlParser.BUFFER, 0); }
		public TerminalNode BUFFERCOUNT() { return getToken(TSqlParser.BUFFERCOUNT, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode CALLED() { return getToken(TSqlParser.CALLED, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode CHANGETABLE() { return getToken(TSqlParser.CHANGETABLE, 0); }
		public TerminalNode CHANGES() { return getToken(TSqlParser.CHANGES, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CLASSIFIER_FUNCTION() { return getToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public TerminalNode CLUSTER() { return getToken(TSqlParser.CLUSTER, 0); }
		public TerminalNode COMPRESSION() { return getToken(TSqlParser.COMPRESSION, 0); }
		public TerminalNode CONFIGURATION() { return getToken(TSqlParser.CONFIGURATION, 0); }
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public TerminalNode CONTEXT() { return getToken(TSqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE_AFTER_ERROR() { return getToken(TSqlParser.CONTINUE_AFTER_ERROR, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public TerminalNode CONTRACT_NAME() { return getToken(TSqlParser.CONTRACT_NAME, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode COPY_ONLY() { return getToken(TSqlParser.COPY_ONLY, 0); }
		public TerminalNode CUME_DIST() { return getToken(TSqlParser.CUME_DIST, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(TSqlParser.DATA_COMPRESSION, 0); }
		public TerminalNode DATA_SOURCE() { return getToken(TSqlParser.DATA_SOURCE, 0); }
		public TerminalNode DATABASE_MIRRORING() { return getToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(TSqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIFFERENTIAL() { return getToken(TSqlParser.DIFFERENTIAL, 0); }
		public TerminalNode DTC_SUPPORT() { return getToken(TSqlParser.DTC_SUPPORT, 0); }
		public TerminalNode ENABLED() { return getToken(TSqlParser.ENABLED, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode ERROR() { return getToken(TSqlParser.ERROR, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode EVENTDATA() { return getToken(TSqlParser.EVENTDATA, 0); }
		public TerminalNode EVENT_RETENTION_MODE() { return getToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public TerminalNode EXECUTABLE_FILE() { return getToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public TerminalNode EXPIREDATE() { return getToken(TSqlParser.EXPIREDATE, 0); }
		public TerminalNode EXTENSION() { return getToken(TSqlParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FAILURECONDITIONLEVEL() { return getToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public TerminalNode FAN_IN() { return getToken(TSqlParser.FAN_IN, 0); }
		public TerminalNode FILE_SNAPSHOT() { return getToken(TSqlParser.FILE_SNAPSHOT, 0); }
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public TerminalNode FORCESEEK() { return getToken(TSqlParser.FORCESEEK, 0); }
		public TerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public TerminalNode GET() { return getToken(TSqlParser.GET, 0); }
		public TerminalNode GOVERNOR() { return getToken(TSqlParser.GOVERNOR, 0); }
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public TerminalNode HEALTHCHECKTIMEOUT() { return getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public TerminalNode IIF() { return getToken(TSqlParser.IIF, 0); }
		public TerminalNode IO() { return getToken(TSqlParser.IO, 0); }
		public TerminalNode INCLUDE() { return getToken(TSqlParser.INCLUDE, 0); }
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode INFINITE() { return getToken(TSqlParser.INFINITE, 0); }
		public TerminalNode INIT() { return getToken(TSqlParser.INIT, 0); }
		public TerminalNode INSTEAD() { return getToken(TSqlParser.INSTEAD, 0); }
		public TerminalNode ISNULL() { return getToken(TSqlParser.ISNULL, 0); }
		public TerminalNode KERBEROS() { return getToken(TSqlParser.KERBEROS, 0); }
		public TerminalNode KEY_PATH() { return getToken(TSqlParser.KEY_PATH, 0); }
		public TerminalNode KEY_STORE_PROVIDER_NAME() { return getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public TerminalNode LISTENER_IP() { return getToken(TSqlParser.LISTENER_IP, 0); }
		public TerminalNode LISTENER_PORT() { return getToken(TSqlParser.LISTENER_PORT, 0); }
		public TerminalNode LOCAL_SERVICE_NAME() { return getToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode MATCHED() { return getToken(TSqlParser.MATCHED, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(TSqlParser.MAX_MEMORY, 0); }
		public TerminalNode MAXTRANSFER() { return getToken(TSqlParser.MAXTRANSFER, 0); }
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode MAX_DISPATCH_LATENCY() { return getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public TerminalNode MAX_EVENT_SIZE() { return getToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(TSqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public TerminalNode MEDIADESCRIPTION() { return getToken(TSqlParser.MEDIADESCRIPTION, 0); }
		public TerminalNode MEDIANAME() { return getToken(TSqlParser.MEDIANAME, 0); }
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode MEMORY_PARTITION_MODE() { return getToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public TerminalNode MESSAGE_FORWARDING() { return getToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public TerminalNode MESSAGE_FORWARD_SIZE() { return getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public TerminalNode MIRROR() { return getToken(TSqlParser.MIRROR, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(TSqlParser.MUST_CHANGE, 0); }
		public TerminalNode NOFORMAT() { return getToken(TSqlParser.NOFORMAT, 0); }
		public TerminalNode NOINIT() { return getToken(TSqlParser.NOINIT, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode NOREWIND() { return getToken(TSqlParser.NOREWIND, 0); }
		public TerminalNode NOSKIP() { return getToken(TSqlParser.NOSKIP, 0); }
		public TerminalNode NOUNLOAD() { return getToken(TSqlParser.NOUNLOAD, 0); }
		public TerminalNode NO_CHECKSUM() { return getToken(TSqlParser.NO_CHECKSUM, 0); }
		public TerminalNode NO_COMPRESSION() { return getToken(TSqlParser.NO_COMPRESSION, 0); }
		public TerminalNode NO_EVENT_LOSS() { return getToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode NTLM() { return getToken(TSqlParser.NTLM, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ON_FAILURE() { return getToken(TSqlParser.ON_FAILURE, 0); }
		public TerminalNode PAGE() { return getToken(TSqlParser.PAGE, 0); }
		public TerminalNode PARAM_NODE() { return getToken(TSqlParser.PARAM_NODE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode PER_CPU() { return getToken(TSqlParser.PER_CPU, 0); }
		public TerminalNode PER_DB() { return getToken(TSqlParser.PER_DB, 0); }
		public TerminalNode PER_NODE() { return getToken(TSqlParser.PER_NODE, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(TSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(TSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(TSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERSISTED() { return getToken(TSqlParser.PERSISTED, 0); }
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public TerminalNode PREDICATE() { return getToken(TSqlParser.PREDICATE, 0); }
		public TerminalNode PROCESS() { return getToken(TSqlParser.PROCESS, 0); }
		public TerminalNode PROFILE() { return getToken(TSqlParser.PROFILE, 0); }
		public TerminalNode PYTHON() { return getToken(TSqlParser.PYTHON, 0); }
		public TerminalNode R() { return getToken(TSqlParser.R, 0); }
		public TerminalNode READ_WRITE_FILEGROUPS() { return getToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode REQUIRED() { return getToken(TSqlParser.REQUIRED, 0); }
		public TerminalNode RESET() { return getToken(TSqlParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode RETAINDAYS() { return getToken(TSqlParser.RETAINDAYS, 0); }
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode REWIND() { return getToken(TSqlParser.REWIND, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode RSA_512() { return getToken(TSqlParser.RSA_512, 0); }
		public TerminalNode RSA_1024() { return getToken(TSqlParser.RSA_1024, 0); }
		public TerminalNode RSA_2048() { return getToken(TSqlParser.RSA_2048, 0); }
		public TerminalNode RSA_3072() { return getToken(TSqlParser.RSA_3072, 0); }
		public TerminalNode RSA_4096() { return getToken(TSqlParser.RSA_4096, 0); }
		public TerminalNode SAFETY() { return getToken(TSqlParser.SAFETY, 0); }
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode SCHEDULER() { return getToken(TSqlParser.SCHEDULER, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode SERVICE_BROKER() { return getToken(TSqlParser.SERVICE_BROKER, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(TSqlParser.SERVICE_NAME, 0); }
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public TerminalNode SKIP_KEYWORD() { return getToken(TSqlParser.SKIP_KEYWORD, 0); }
		public TerminalNode SOFTNUMA() { return getToken(TSqlParser.SOFTNUMA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public TerminalNode SPLIT() { return getToken(TSqlParser.SPLIT, 0); }
		public TerminalNode SQLDUMPERFLAGS() { return getToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public TerminalNode SQLDUMPERPATH() { return getToken(TSqlParser.SQLDUMPERPATH, 0); }
		public TerminalNode SQLDUMPERTIMEOUT() { return getToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode STATS() { return getToken(TSqlParser.STATS, 0); }
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode STARTED() { return getToken(TSqlParser.STARTED, 0); }
		public TerminalNode STARTUP_STATE() { return getToken(TSqlParser.STARTUP_STATE, 0); }
		public TerminalNode STOP() { return getToken(TSqlParser.STOP, 0); }
		public TerminalNode STOPPED() { return getToken(TSqlParser.STOPPED, 0); }
		public TerminalNode STOP_ON_ERROR() { return getToken(TSqlParser.STOP_ON_ERROR, 0); }
		public TerminalNode SUPPORTED() { return getToken(TSqlParser.SUPPORTED, 0); }
		public TerminalNode TAPE() { return getToken(TSqlParser.TAPE, 0); }
		public TerminalNode TARGET() { return getToken(TSqlParser.TARGET, 0); }
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public TerminalNode TRACK_CAUSALITY() { return getToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public TerminalNode TRY_CAST() { return getToken(TSqlParser.TRY_CAST, 0); }
		public TerminalNode UNCHECKED() { return getToken(TSqlParser.UNCHECKED, 0); }
		public TerminalNode UNLOCK() { return getToken(TSqlParser.UNLOCK, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public TerminalNode URL() { return getToken(TSqlParser.URL, 0); }
		public TerminalNode USED() { return getToken(TSqlParser.USED, 0); }
		public TerminalNode VERBOSELOGGING() { return getToken(TSqlParser.VERBOSELOGGING, 0); }
		public TerminalNode VISIBILITY() { return getToken(TSqlParser.VISIBILITY, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public TerminalNode ZONE() { return getToken(TSqlParser.ZONE, 0); }
		public TerminalNode VARCHAR() { return getToken(TSqlParser.VARCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(TSqlParser.NVARCHAR, 0); }
		public TerminalNode BINARY_KEYWORD() { return getToken(TSqlParser.BINARY_KEYWORD, 0); }
		public TerminalNode VARBINARY_KEYWORD() { return getToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		public TerminalNode PRECISION() { return getToken(TSqlParser.PRECISION, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitKeyword(this);
		}
	}

	public final KeywordContext keyword() throws RecognitionException {
		KeywordContext _localctx = new KeywordContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11487);
			_la = _input.LA(1);
			if ( !(_la==OPENJSON || _la==PRECISION || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (ABSOLUTE - 191)) | (1L << (AT_KEYWORD - 191)) | (1L << (ACCENT_SENSITIVITY - 191)) | (1L << (ACTION - 191)) | (1L << (ACTIVATION - 191)) | (1L << (ACTIVE - 191)) | (1L << (ADDRESS - 191)) | (1L << (AES_128 - 191)) | (1L << (AES_192 - 191)) | (1L << (AES_256 - 191)) | (1L << (AFFINITY - 191)) | (1L << (AFTER - 191)) | (1L << (AGGREGATE - 191)) | (1L << (ALGORITHM - 191)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 191)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 191)) | (1L << (ALLOWED - 191)) | (1L << (ANSI_NULL_DEFAULT - 191)) | (1L << (ANSI_NULLS - 191)) | (1L << (ANSI_PADDING - 191)) | (1L << (ANSI_WARNINGS - 191)) | (1L << (APPLICATION_LOG - 191)) | (1L << (APPLY - 191)) | (1L << (ARITHABORT - 191)) | (1L << (ASSEMBLY - 191)) | (1L << (AUDIT - 191)) | (1L << (AUDIT_GUID - 191)) | (1L << (AUTO - 191)) | (1L << (AUTO_CLEANUP - 191)) | (1L << (AUTO_CLOSE - 191)) | (1L << (AUTO_CREATE_STATISTICS - 191)) | (1L << (AUTO_SHRINK - 191)) | (1L << (AUTO_UPDATE_STATISTICS - 191)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 191)) | (1L << (AVAILABILITY - 191)) | (1L << (AVG - 191)) | (1L << (BACKUP_PRIORITY - 191)) | (1L << (BEGIN_DIALOG - 191)) | (1L << (BIGINT - 191)) | (1L << (BINARY_KEYWORD - 191)) | (1L << (BINARY_BASE64 - 191)) | (1L << (BINARY_CHECKSUM - 191)) | (1L << (BINDING - 191)) | (1L << (BLOB_STORAGE - 191)) | (1L << (BROKER - 191)) | (1L << (BROKER_INSTANCE - 191)) | (1L << (BULK_LOGGED - 191)) | (1L << (CALLER - 191)) | (1L << (CAP_CPU_PERCENT - 191)) | (1L << (CAST - 191)) | (1L << (TRY_CAST - 191)) | (1L << (CATALOG - 191)) | (1L << (CATCH - 191)) | (1L << (CHANGE_RETENTION - 191)) | (1L << (CHANGE_TRACKING - 191)) | (1L << (CHECKSUM - 191)) | (1L << (CHECKSUM_AGG - 191)) | (1L << (CLEANUP - 191)) | (1L << (COLLECTION - 191)) | (1L << (COLUMN_MASTER_KEY - 191)) | (1L << (COMMITTED - 191)) | (1L << (COMPATIBILITY_LEVEL - 191)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (CONCAT - 255)) | (1L << (CONCAT_NULL_YIELDS_NULL - 255)) | (1L << (CONTENT - 255)) | (1L << (CONTROL - 255)) | (1L << (COOKIE - 255)) | (1L << (COUNT - 255)) | (1L << (COUNT_BIG - 255)) | (1L << (COUNTER - 255)) | (1L << (CPU - 255)) | (1L << (CREATE_NEW - 255)) | (1L << (CREATION_DISPOSITION - 255)) | (1L << (CREDENTIAL - 255)) | (1L << (CRYPTOGRAPHIC - 255)) | (1L << (CUME_DIST - 255)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 255)) | (1L << (CURSOR_DEFAULT - 255)) | (1L << (DATA - 255)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 255)) | (1L << (DATEADD - 255)) | (1L << (DATEDIFF - 255)) | (1L << (DATENAME - 255)) | (1L << (DATEPART - 255)) | (1L << (DAYS - 255)) | (1L << (DB_CHAINING - 255)) | (1L << (DB_FAILOVER - 255)) | (1L << (DECRYPTION - 255)) | (1L << (DEFAULT_DOUBLE_QUOTE - 255)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 255)) | (1L << (DEFAULT_LANGUAGE - 255)) | (1L << (DELAY - 255)) | (1L << (DELAYED_DURABILITY - 255)) | (1L << (DELETED - 255)) | (1L << (DENSE_RANK - 255)) | (1L << (DEPENDENTS - 255)) | (1L << (DES - 255)) | (1L << (DESCRIPTION - 255)) | (1L << (DESX - 255)) | (1L << (DHCP - 255)) | (1L << (DIALOG - 255)) | (1L << (DIRECTORY_NAME - 255)) | (1L << (DISABLE - 255)) | (1L << (DISABLE_BROKER - 255)) | (1L << (DISABLED - 255)) | (1L << (DISK_DRIVE - 255)) | (1L << (DOCUMENT - 255)) | (1L << (DYNAMIC - 255)) | (1L << (ELEMENTS - 255)) | (1L << (EMERGENCY - 255)) | (1L << (EMPTY - 255)) | (1L << (ENABLE - 255)) | (1L << (ENABLE_BROKER - 255)) | (1L << (ENCRYPTED_VALUE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENDPOINT_URL - 255)) | (1L << (ERROR_BROKER_CONVERSATIONS - 255)) | (1L << (EXCLUSIVE - 255)) | (1L << (EXECUTABLE - 255)) | (1L << (EXIST - 255)) | (1L << (EXPAND - 255)) | (1L << (EXPIRY_DATE - 255)) | (1L << (EXPLICIT - 255)) | (1L << (FAIL_OPERATION - 255)) | (1L << (FAILOVER_MODE - 255)) | (1L << (FAILURE - 255)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (FAILURE_CONDITION_LEVEL - 319)) | (1L << (FAST - 319)) | (1L << (FAST_FORWARD - 319)) | (1L << (FILEGROUP - 319)) | (1L << (FILEGROWTH - 319)) | (1L << (FILENAME - 319)) | (1L << (FILEPATH - 319)) | (1L << (FILESTREAM - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FIRST_VALUE - 319)) | (1L << (FOLLOWING - 319)) | (1L << (FORCE - 319)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 319)) | (1L << (FORCED - 319)) | (1L << (FORMAT - 319)) | (1L << (FORWARD_ONLY - 319)) | (1L << (FULLSCAN - 319)) | (1L << (FULLTEXT - 319)) | (1L << (GB - 319)) | (1L << (GETDATE - 319)) | (1L << (GETUTCDATE - 319)) | (1L << (GLOBAL - 319)) | (1L << (GO_BATCH - 319)) | (1L << (GO - 319)) | (1L << (GROUP_MAX_REQUESTS - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPING_ID - 319)) | (1L << (HADR - 319)) | (1L << (HASH - 319)) | (1L << (HEALTH_CHECK_TIMEOUT - 319)) | (1L << (HIGH - 319)) | (1L << (HONOR_BROKER_PRIORITY - 319)) | (1L << (HOURS - 319)) | (1L << (IDENTITY_VALUE - 319)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 319)) | (1L << (IMMEDIATE - 319)) | (1L << (IMPERSONATE - 319)) | (1L << (IMPORTANCE - 319)) | (1L << (INCLUDE_NULL_VALUES - 319)) | (1L << (INCREMENTAL - 319)) | (1L << (INITIATOR - 319)) | (1L << (INPUT - 319)) | (1L << (INSENSITIVE - 319)) | (1L << (INSERTED - 319)) | (1L << (INT - 319)) | (1L << (IP - 319)) | (1L << (ISOLATION - 319)) | (1L << (JOB - 319)) | (1L << (JSON - 319)) | (1L << (KB - 319)) | (1L << (KEEP - 319)) | (1L << (KEEPFIXED - 319)) | (1L << (KEY_SOURCE - 319)) | (1L << (KEYS - 319)) | (1L << (KEYSET - 319)) | (1L << (LAG - 319)) | (1L << (LAST - 319)) | (1L << (LAST_VALUE - 319)) | (1L << (LEAD - 319)) | (1L << (LEVEL - 319)) | (1L << (LIST - 319)) | (1L << (LISTENER - 319)) | (1L << (LISTENER_URL - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (LOB_COMPACTION - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOCK_ESCALATION - 383)) | (1L << (LOGIN - 383)) | (1L << (LOOP - 383)) | (1L << (LOW - 383)) | (1L << (MANUAL - 383)) | (1L << (MARK - 383)) | (1L << (MATERIALIZED - 383)) | (1L << (MAX - 383)) | (1L << (MAX_CPU_PERCENT - 383)) | (1L << (MAX_DOP - 383)) | (1L << (MAX_FILES - 383)) | (1L << (MAX_IOPS_PER_VOLUME - 383)) | (1L << (MAX_MEMORY_PERCENT - 383)) | (1L << (MAX_PROCESSES - 383)) | (1L << (MAX_QUEUE_READERS - 383)) | (1L << (MAX_ROLLOVER_FILES - 383)) | (1L << (MAXDOP - 383)) | (1L << (MAXRECURSION - 383)) | (1L << (MAXSIZE - 383)) | (1L << (MB - 383)) | (1L << (MEDIUM - 383)) | (1L << (MEMORY_OPTIMIZED_DATA - 383)) | (1L << (MESSAGE - 383)) | (1L << (MIN - 383)) | (1L << (MIN_ACTIVE_ROWVERSION - 383)) | (1L << (MIN_CPU_PERCENT - 383)) | (1L << (MIN_IOPS_PER_VOLUME - 383)) | (1L << (MIN_MEMORY_PERCENT - 383)) | (1L << (MINUTES - 383)) | (1L << (MIRROR_ADDRESS - 383)) | (1L << (MIXED_PAGE_ALLOCATION - 383)) | (1L << (MODE - 383)) | (1L << (MODIFY - 383)) | (1L << (MOVE - 383)) | (1L << (MULTI_USER - 383)) | (1L << (NAME - 383)) | (1L << (NESTED_TRIGGERS - 383)) | (1L << (NEW_ACCOUNT - 383)) | (1L << (NEW_BROKER - 383)) | (1L << (NEW_PASSWORD - 383)) | (1L << (NEXT - 383)) | (1L << (NO - 383)) | (1L << (NO_TRUNCATE - 383)) | (1L << (NO_WAIT - 383)) | (1L << (NOCOUNT - 383)) | (1L << (NODES - 383)) | (1L << (NOEXPAND - 383)) | (1L << (NON_TRANSACTED_ACCESS - 383)) | (1L << (NORECOMPUTE - 383)) | (1L << (NORECOVERY - 383)) | (1L << (NOWAIT - 383)) | (1L << (NTILE - 383)) | (1L << (NUMANODE - 383)) | (1L << (NUMBER - 383)) | (1L << (NUMERIC_ROUNDABORT - 383)) | (1L << (OBJECT - 383)) | (1L << (OFFLINE - 383)) | (1L << (OFFSET - 383)) | (1L << (OLD_ACCOUNT - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (ONLINE - 447)) | (1L << (ONLY - 447)) | (1L << (OPEN_EXISTING - 447)) | (1L << (OPTIMISTIC - 447)) | (1L << (OPTIMIZE - 447)) | (1L << (OUT - 447)) | (1L << (OUTPUT - 447)) | (1L << (OVERRIDE - 447)) | (1L << (OWNER - 447)) | (1L << (PAGE_VERIFY - 447)) | (1L << (PARAMETERIZATION - 447)) | (1L << (PARTITION - 447)) | (1L << (PARTITIONS - 447)) | (1L << (PARTNER - 447)) | (1L << (PATH - 447)) | (1L << (PERCENT_RANK - 447)) | (1L << (PERCENTILE_CONT - 447)) | (1L << (PERCENTILE_DISC - 447)) | (1L << (POISON_MESSAGE_HANDLING - 447)) | (1L << (POOL - 447)) | (1L << (PORT - 447)) | (1L << (PRECEDING - 447)) | (1L << (PRIMARY_ROLE - 447)) | (1L << (PRIOR - 447)) | (1L << (PRIORITY - 447)) | (1L << (PRIORITY_LEVEL - 447)) | (1L << (PRIVATE - 447)) | (1L << (PRIVATE_KEY - 447)) | (1L << (PRIVILEGES - 447)) | (1L << (PROCEDURE_NAME - 447)) | (1L << (PROPERTY - 447)) | (1L << (PROVIDER - 447)) | (1L << (PROVIDER_KEY_NAME - 447)) | (1L << (QUERY - 447)) | (1L << (QUEUE - 447)) | (1L << (QUEUE_DELAY - 447)) | (1L << (QUOTED_IDENTIFIER - 447)) | (1L << (RANGE - 447)) | (1L << (RANK - 447)) | (1L << (RC2 - 447)) | (1L << (RC4 - 447)) | (1L << (RC4_128 - 447)) | (1L << (READ_COMMITTED_SNAPSHOT - 447)) | (1L << (READ_ONLY - 447)) | (1L << (READ_ONLY_ROUTING_LIST - 447)) | (1L << (READ_WRITE - 447)) | (1L << (READONLY - 447)) | (1L << (REBUILD - 447)) | (1L << (RECEIVE - 447)) | (1L << (RECOMPILE - 447)) | (1L << (RECOVERY - 447)) | (1L << (RECURSIVE_TRIGGERS - 447)) | (1L << (RELATIVE - 447)) | (1L << (REMOTE - 447)) | (1L << (REMOTE_SERVICE_NAME - 447)) | (1L << (REMOVE - 447)) | (1L << (REORGANIZE - 447)) | (1L << (REPEATABLE - 447)) | (1L << (REPLICA - 447)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 447)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 447)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 447)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (RESERVE_DISK_SPACE - 511)) | (1L << (RESOURCE - 511)) | (1L << (RESOURCE_MANAGER_LOCATION - 511)) | (1L << (RESTRICTED_USER - 511)) | (1L << (RETENTION - 511)) | (1L << (ROBUST - 511)) | (1L << (ROOT - 511)) | (1L << (ROUTE - 511)) | (1L << (ROW - 511)) | (1L << (ROW_NUMBER - 511)) | (1L << (ROWGUID - 511)) | (1L << (ROWS - 511)) | (1L << (SAMPLE - 511)) | (1L << (SCHEMABINDING - 511)) | (1L << (SCOPED - 511)) | (1L << (SCROLL - 511)) | (1L << (SCROLL_LOCKS - 511)) | (1L << (SEARCH - 511)) | (1L << (SECONDARY - 511)) | (1L << (SECONDARY_ONLY - 511)) | (1L << (SECONDARY_ROLE - 511)) | (1L << (SECONDS - 511)) | (1L << (SECRET - 511)) | (1L << (SECURITY - 511)) | (1L << (SECURITY_LOG - 511)) | (1L << (SEEDING_MODE - 511)) | (1L << (SELF - 511)) | (1L << (SEMI_SENSITIVE - 511)) | (1L << (SEND - 511)) | (1L << (SENT - 511)) | (1L << (SEQUENCE - 511)) | (1L << (SERIALIZABLE - 511)) | (1L << (SESSION_TIMEOUT - 511)) | (1L << (SETERROR - 511)) | (1L << (SHARE - 511)) | (1L << (SHOWPLAN - 511)) | (1L << (SIGNATURE - 511)) | (1L << (SIMPLE - 511)) | (1L << (SINGLE_USER - 511)) | (1L << (SIZE - 511)) | (1L << (SMALLINT - 511)) | (1L << (SNAPSHOT - 511)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 511)) | (1L << (STANDBY - 511)) | (1L << (START_DATE - 511)) | (1L << (STATIC - 511)) | (1L << (STATS_STREAM - 511)) | (1L << (STATUS - 511)) | (1L << (STATUSONLY - 511)) | (1L << (STDEV - 511)) | (1L << (STDEVP - 511)) | (1L << (STOPLIST - 511)) | (1L << (STRING_AGG - 511)) | (1L << (STUFF - 511)) | (1L << (SUBJECT - 511)) | (1L << (SUBSCRIPTION - 511)) | (1L << (SUM - 511)) | (1L << (SUSPEND - 511)) | (1L << (SYMMETRIC - 511)) | (1L << (SYNCHRONOUS_COMMIT - 511)) | (1L << (SYNONYM - 511)) | (1L << (SYSTEM - 511)) | (1L << (TAKE - 511)) | (1L << (TARGET_RECOVERY_TIME - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (TB - 575)) | (1L << (TEXTIMAGE_ON - 575)) | (1L << (THROW - 575)) | (1L << (TIES - 575)) | (1L << (TIME - 575)) | (1L << (TIMEOUT - 575)) | (1L << (TIMER - 575)) | (1L << (TINYINT - 575)) | (1L << (TORN_PAGE_DETECTION - 575)) | (1L << (TRANSFORM_NOISE_WORDS - 575)) | (1L << (TRIPLE_DES - 575)) | (1L << (TRIPLE_DES_3KEY - 575)) | (1L << (TRUSTWORTHY - 575)) | (1L << (TRY - 575)) | (1L << (TSQL - 575)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 575)) | (1L << (TYPE - 575)) | (1L << (TYPE_WARNING - 575)) | (1L << (UNBOUNDED - 575)) | (1L << (UNCOMMITTED - 575)) | (1L << (UNKNOWN - 575)) | (1L << (UNLIMITED - 575)) | (1L << (UOW - 575)) | (1L << (USING - 575)) | (1L << (VALID_XML - 575)) | (1L << (VALIDATION - 575)) | (1L << (VALUE - 575)) | (1L << (VAR - 575)) | (1L << (VARBINARY_KEYWORD - 575)) | (1L << (VARP - 575)) | (1L << (VIEW_METADATA - 575)) | (1L << (VIEWS - 575)) | (1L << (WAIT - 575)) | (1L << (WELL_FORMED_XML - 575)) | (1L << (WITHOUT_ARRAY_WRAPPER - 575)) | (1L << (WORK - 575)) | (1L << (WORKLOAD - 575)) | (1L << (XML - 575)) | (1L << (XMLDATA - 575)) | (1L << (XMLNAMESPACES - 575)) | (1L << (XMLSCHEMA - 575)) | (1L << (XSINIL - 575)) | (1L << (ZONE - 575)) | (1L << (ABSENT - 575)) | (1L << (AES - 575)) | (1L << (ALLOW_CONNECTIONS - 575)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 575)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 575)) | (1L << (ANONYMOUS - 575)) | (1L << (APPEND - 575)) | (1L << (APPLICATION - 575)) | (1L << (ASYMMETRIC - 575)) | (1L << (ASYNCHRONOUS_COMMIT - 575)) | (1L << (AUTHENTICATION - 575)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 575)) | (1L << (AUTOMATIC - 575)) | (1L << (AVAILABILITY_MODE - 575)) | (1L << (BEFORE - 575)) | (1L << (BLOCK - 575)) | (1L << (BLOCKSIZE - 575)) | (1L << (BLOCKING_HIERARCHY - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (BUFFER - 639)) | (1L << (BUFFERCOUNT - 639)) | (1L << (CACHE - 639)) | (1L << (CALLED - 639)) | (1L << (CERTIFICATE - 639)) | (1L << (CHANGETABLE - 639)) | (1L << (CHANGES - 639)) | (1L << (CHECK_POLICY - 639)) | (1L << (CHECK_EXPIRATION - 639)) | (1L << (CLASSIFIER_FUNCTION - 639)) | (1L << (CLUSTER - 639)) | (1L << (COMPRESSION - 639)) | (1L << (CONFIGURATION - 639)) | (1L << (CONTAINMENT - 639)) | (1L << (CONTEXT - 639)) | (1L << (CONTINUE_AFTER_ERROR - 639)) | (1L << (CONTRACT - 639)) | (1L << (CONTRACT_NAME - 639)) | (1L << (CONVERSATION - 639)) | (1L << (COPY_ONLY - 639)) | (1L << (CYCLE - 639)) | (1L << (DATA_COMPRESSION - 639)) | (1L << (DATA_SOURCE - 639)) | (1L << (DATABASE_MIRRORING - 639)) | (1L << (DEFAULT_DATABASE - 639)) | (1L << (DEFAULT_SCHEMA - 639)) | (1L << (DIAGNOSTICS - 639)) | (1L << (DIFFERENTIAL - 639)) | (1L << (DTC_SUPPORT - 639)) | (1L << (ENABLED - 639)) | (1L << (ENDPOINT - 639)) | (1L << (ERROR - 639)) | (1L << (EVENT - 639)) | (1L << (EVENTDATA - 639)) | (1L << (EVENT_RETENTION_MODE - 639)) | (1L << (EXECUTABLE_FILE - 639)) | (1L << (EXPIREDATE - 639)) | (1L << (EXTENSION - 639)) | (1L << (EXTERNAL_ACCESS - 639)) | (1L << (FAILOVER - 639)) | (1L << (FAILURECONDITIONLEVEL - 639)) | (1L << (FAN_IN - 639)) | (1L << (FILE_SNAPSHOT - 639)) | (1L << (FORCESEEK - 639)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 639)) | (1L << (GET - 639)) | (1L << (GOVERNOR - 639)) | (1L << (HASHED - 639)) | (1L << (HEALTHCHECKTIMEOUT - 639)) | (1L << (IIF - 639)) | (1L << (IO - 639)) | (1L << (INCLUDE - 639)) | (1L << (INCREMENT - 639)) | (1L << (INFINITE - 639)) | (1L << (INIT - 639)) | (1L << (INSTEAD - 639)) | (1L << (ISNULL - 639)) | (1L << (KERBEROS - 639)) | (1L << (KEY_PATH - 639)) | (1L << (KEY_STORE_PROVIDER_NAME - 639)) | (1L << (LANGUAGE - 639)) | (1L << (LIBRARY - 639)) | (1L << (LIFETIME - 639)) | (1L << (LINUX - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (LISTENER_IP - 703)) | (1L << (LISTENER_PORT - 703)) | (1L << (LOCAL_SERVICE_NAME - 703)) | (1L << (LOG - 703)) | (1L << (MATCHED - 703)) | (1L << (MASTER - 703)) | (1L << (MAX_MEMORY - 703)) | (1L << (MAXTRANSFER - 703)) | (1L << (MAXVALUE - 703)) | (1L << (MAX_DISPATCH_LATENCY - 703)) | (1L << (MAX_EVENT_SIZE - 703)) | (1L << (MAX_SIZE - 703)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 703)) | (1L << (MEDIADESCRIPTION - 703)) | (1L << (MEDIANAME - 703)) | (1L << (MEMBER - 703)) | (1L << (MEMORY_PARTITION_MODE - 703)) | (1L << (MESSAGE_FORWARDING - 703)) | (1L << (MESSAGE_FORWARD_SIZE - 703)) | (1L << (MINVALUE - 703)) | (1L << (MIRROR - 703)) | (1L << (MUST_CHANGE - 703)) | (1L << (NOFORMAT - 703)) | (1L << (NOINIT - 703)) | (1L << (NONE - 703)) | (1L << (NOREWIND - 703)) | (1L << (NOSKIP - 703)) | (1L << (NOUNLOAD - 703)) | (1L << (NO_CHECKSUM - 703)) | (1L << (NO_COMPRESSION - 703)) | (1L << (NO_EVENT_LOSS - 703)) | (1L << (NOTIFICATION - 703)) | (1L << (NTLM - 703)) | (1L << (OLD_PASSWORD - 703)) | (1L << (ON_FAILURE - 703)) | (1L << (PAGE - 703)) | (1L << (PARAM_NODE - 703)) | (1L << (PARTIAL - 703)) | (1L << (PASSWORD - 703)) | (1L << (PERMISSION_SET - 703)) | (1L << (PER_CPU - 703)) | (1L << (PER_DB - 703)) | (1L << (PER_NODE - 703)) | (1L << (PERSISTED - 703)) | (1L << (PLATFORM - 703)) | (1L << (POLICY - 703)) | (1L << (PREDICATE - 703)) | (1L << (PROCESS - 703)) | (1L << (PROFILE - 703)) | (1L << (PYTHON - 703)) | (1L << (R - 703)) | (1L << (READ_WRITE_FILEGROUPS - 703)) | (1L << (REGENERATE - 703)) | (1L << (RELATED_CONVERSATION - 703)) | (1L << (RELATED_CONVERSATION_GROUP - 703)) | (1L << (REQUIRED - 703)) | (1L << (RESET - 703)) | (1L << (RESTART - 703)) | (1L << (RESUME - 703)) | (1L << (RETAINDAYS - 703)) | (1L << (RETURNS - 703)) | (1L << (REWIND - 703)) | (1L << (ROLE - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (RSA_512 - 767)) | (1L << (RSA_1024 - 767)) | (1L << (RSA_2048 - 767)) | (1L << (RSA_3072 - 767)) | (1L << (RSA_4096 - 767)) | (1L << (SAFETY - 767)) | (1L << (SAFE - 767)) | (1L << (SCHEDULER - 767)) | (1L << (SCHEME - 767)) | (1L << (SERVER - 767)) | (1L << (SERVICE - 767)) | (1L << (SERVICE_BROKER - 767)) | (1L << (SERVICE_NAME - 767)) | (1L << (SESSION - 767)) | (1L << (SID - 767)) | (1L << (SKIP_KEYWORD - 767)) | (1L << (SOFTNUMA - 767)) | (1L << (SOURCE - 767)) | (1L << (SPECIFICATION - 767)) | (1L << (SPLIT - 767)) | (1L << (SQLDUMPERFLAGS - 767)) | (1L << (SQLDUMPERPATH - 767)) | (1L << (SQLDUMPERTIMEOUT - 767)) | (1L << (STATE - 767)) | (1L << (STATS - 767)) | (1L << (START - 767)) | (1L << (STARTED - 767)) | (1L << (STARTUP_STATE - 767)) | (1L << (STOP - 767)) | (1L << (STOPPED - 767)) | (1L << (STOP_ON_ERROR - 767)) | (1L << (SUPPORTED - 767)) | (1L << (TAPE - 767)) | (1L << (TARGET - 767)) | (1L << (TCP - 767)) | (1L << (TRACK_CAUSALITY - 767)) | (1L << (TRANSFER - 767)) | (1L << (UNCHECKED - 767)) | (1L << (UNLOCK - 767)) | (1L << (UNSAFE - 767)) | (1L << (URL - 767)) | (1L << (USED - 767)) | (1L << (VERBOSELOGGING - 767)) | (1L << (VISIBILITY - 767)) | (1L << (WINDOWS - 767)) | (1L << (WITHOUT - 767)) | (1L << (WITNESS - 767)) | (1L << (VARCHAR - 767)) | (1L << (NVARCHAR - 767)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_Context extends ParserRuleContext {
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public Id_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterId_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitId_(this);
		}
	}

	public final Id_Context id_() throws RecognitionException {
		Id_Context _localctx = new Id_Context(_ctx, getState());
		enterRule(_localctx, 1052, RULE_id_);
		try {
			setState(11493);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(11489);
				match(ID);
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(11490);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(11491);
				match(SQUARE_BRACKET_ID);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				enterOuterAlt(_localctx, 4);
				{
				setState(11492);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSimple_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSimple_id(this);
		}
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_simple_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11495);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_or_stringContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Id_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_or_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterId_or_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitId_or_string(this);
		}
	}

	public final Id_or_stringContext id_or_string() throws RecognitionException {
		Id_or_stringContext _localctx = new Id_or_stringContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_id_or_string);
		try {
			setState(11499);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(11497);
				id_();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(11498);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitComparison_operator(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_comparison_operator);
		try {
			setState(11516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1616,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11501);
				match(EQUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11502);
				match(GREATER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11503);
				match(LESS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11504);
				match(LESS);
				setState(11505);
				match(EQUAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11506);
				match(GREATER);
				setState(11507);
				match(EQUAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11508);
				match(LESS);
				setState(11509);
				match(GREATER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11510);
				match(EXCLAMATION);
				setState(11511);
				match(EQUAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11512);
				match(EXCLAMATION);
				setState(11513);
				match(GREATER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(11514);
				match(EXCLAMATION);
				setState(11515);
				match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAssignment_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAssignment_operator(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11518);
			_la = _input.LA(1);
			if ( !(((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (PLUS_ASSIGN - 836)) | (1L << (MINUS_ASSIGN - 836)) | (1L << (MULT_ASSIGN - 836)) | (1L << (DIV_ASSIGN - 836)) | (1L << (MOD_ASSIGN - 836)) | (1L << (AND_ASSIGN - 836)) | (1L << (XOR_ASSIGN - 836)) | (1L << (OR_ASSIGN - 836)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_sizeContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode TB() { return getToken(TSqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_size(this);
		}
	}

	public final File_sizeContext file_size() throws RecognitionException {
		File_sizeContext _localctx = new File_sizeContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_file_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11520);
			match(DECIMAL);
			setState(11522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) {
				{
				setState(11521);
				_la = _input.LA(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46:
			return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);
		case 387:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 399:
			return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 5);
		case 2:
			return precpred(_ctx, 4);
		case 3:
			return precpred(_ctx, 11);
		case 4:
			return precpred(_ctx, 10);
		case 5:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 2);
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0372\u2d07\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\3\2\7\2\u042c\n\2\f\2\16\2\u042f\13\2\3\2\3\2\3\2\7\2\u0434\n\2\f\2\16"+
		"\2\u0437\13\2\3\2\3\2\5\2\u043b\n\2\3\3\3\3\5\3\u043f\n\3\3\3\3\3\6\3"+
		"\u0443\n\3\r\3\16\3\u0444\5\3\u0447\n\3\3\3\7\3\u044a\n\3\f\3\16\3\u044d"+
		"\13\3\3\3\3\3\7\3\u0451\n\3\f\3\16\3\u0454\13\3\3\3\5\3\u0457\n\3\3\4"+
		"\3\4\3\4\3\4\5\4\u045d\n\4\3\5\3\5\5\5\u0461\n\5\3\5\3\5\5\5\u0465\n\5"+
		"\3\5\3\5\5\5\u0469\n\5\3\5\3\5\5\5\u046d\n\5\3\5\3\5\5\5\u0471\n\5\3\5"+
		"\3\5\5\5\u0475\n\5\3\5\3\5\5\5\u0479\n\5\3\5\5\5\u047c\n\5\3\6\3\6\3\6"+
		"\3\6\3\6\5\6\u0483\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0523\n\7\3\b\3\b\3\b\3\b\3\b\5\b\u052a\n"+
		"\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0538\n\t\3\n\3"+
		"\n\5\n\u053c\n\n\3\n\7\n\u053f\n\n\f\n\16\n\u0542\13\n\3\n\3\n\5\n\u0546"+
		"\n\n\3\13\3\13\5\13\u054a\n\13\3\f\3\f\5\f\u054e\n\f\3\r\3\r\3\r\5\r\u0553"+
		"\n\r\3\r\3\r\3\r\5\r\u0558\n\r\5\r\u055a\n\r\3\16\3\16\5\16\u055e\n\16"+
		"\3\16\5\16\u0561\n\16\3\17\3\17\3\17\3\17\3\17\5\17\u0568\n\17\3\17\5"+
		"\17\u056b\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0574\n\20\3\20"+
		"\5\20\u0577\n\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\5\24\u0582"+
		"\n\24\3\24\6\24\u0585\n\24\r\24\16\24\u0586\3\24\3\24\3\24\5\24\u058c"+
		"\n\24\3\24\3\24\3\24\5\24\u0591\n\24\3\24\7\24\u0594\n\24\f\24\16\24\u0597"+
		"\13\24\3\24\3\24\3\24\5\24\u059c\n\24\3\25\3\25\5\25\u05a0\n\25\3\25\5"+
		"\25\u05a3\n\25\3\25\3\25\5\25\u05a7\n\25\3\25\5\25\u05aa\n\25\3\25\5\25"+
		"\u05ad\n\25\3\26\3\26\3\26\3\26\3\26\5\26\u05b4\n\26\3\26\3\26\5\26\u05b8"+
		"\n\26\5\26\u05ba\n\26\3\27\3\27\3\27\5\27\u05bf\n\27\3\27\3\27\7\27\u05c3"+
		"\n\27\f\27\16\27\u05c6\13\27\3\27\5\27\u05c9\n\27\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\3\30\7\30\u05d4\n\30\f\30\16\30\u05d7\13\30\3\30"+
		"\3\30\3\30\5\30\u05dc\n\30\3\30\5\30\u05df\n\30\3\30\3\30\3\30\3\30\3"+
		"\30\7\30\u05e6\n\30\f\30\16\30\u05e9\13\30\5\30\u05eb\n\30\3\31\3\31\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3"+
		"\32\3\32\5\32\u05ff\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0607\n\33"+
		"\3\33\3\33\3\33\5\33\u060c\n\33\3\33\5\33\u060f\n\33\3\33\3\33\3\33\5"+
		"\33\u0614\n\33\3\33\5\33\u0617\n\33\3\33\3\33\3\33\5\33\u061c\n\33\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\5\34\u0624\n\34\3\34\3\34\3\34\5\34\u0629\n"+
		"\34\3\34\5\34\u062c\n\34\3\34\3\34\3\34\5\34\u0631\n\34\3\35\3\35\3\35"+
		"\3\35\5\35\u0637\n\35\3\35\3\35\3\35\5\35\u063c\n\35\3\35\3\35\3\36\3"+
		"\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3!\5!\u064d\n!\3!\5!\u0650"+
		"\n!\3!\5!\u0653\n!\3!\5!\u0656\n!\3\"\3\"\3\"\5\"\u065b\n\"\3#\3#\3$\3"+
		"$\3$\3%\3%\5%\u0664\n%\3&\3&\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3)\5)\u0673"+
		"\n)\3*\3*\3+\3+\3+\3,\3,\3-\3-\3-\3.\3.\3/\3/\3/\5/\u0684\n/\3\60\3\60"+
		"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u068f\n\60\3\60\3\60\7\60\u0693"+
		"\n\60\f\60\16\60\u0696\13\60\3\61\3\61\3\61\3\61\3\62\3\62\3\63\3\63\3"+
		"\64\3\64\3\64\3\64\5\64\u06a4\n\64\3\65\3\65\3\66\3\66\3\66\3\67\3\67"+
		"\38\38\38\38\38\38\58\u06b3\n8\39\39\3:\3:\3:\3:\3:\5:\u06bc\n:\3:\3:"+
		"\5:\u06c0\n:\3:\6:\u06c3\n:\r:\16:\u06c4\3:\3:\3:\3:\5:\u06cb\n:\3;\3"+
		";\3;\3;\5;\u06d1\n;\3;\5;\u06d4\n;\3;\6;\u06d7\n;\r;\16;\u06d8\3;\3;\3"+
		";\5;\u06de\n;\3<\3<\3<\3<\3<\3<\5<\u06e6\n<\3=\3=\3=\3=\3>\3>\3>\3>\5"+
		">\u06f0\n>\3>\3>\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u0703"+
		"\n@\3A\3A\3A\3A\3A\3A\5A\u070b\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A"+
		"\u0718\nA\5A\u071a\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0726\nA\5A\u0728"+
		"\nA\3A\3A\3A\3A\3A\5A\u072f\nA\3B\3B\3B\3B\3B\3B\3B\5B\u0738\nB\3C\3C"+
		"\3C\3C\5C\u073e\nC\3C\3C\3C\3C\3D\3D\3D\5D\u0747\nD\3E\3E\3F\3F\3F\3G"+
		"\3G\3G\3G\3H\3H\3H\3H\5H\u0756\nH\3H\3H\3H\3H\3I\3I\3I\3I\5I\u0760\nI"+
		"\3I\3I\3I\3I\3J\3J\3J\3J\5J\u076a\nJ\3J\3J\3J\3J\3K\3K\3K\3K\3K\3K\3K"+
		"\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K"+
		"\3K\3K\3K\3K\5K\u0792\nK\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L"+
		"\3L\3L\3L\3L\3L\3L\5L\u07a9\nL\3M\3M\3N\3N\3O\3O\3O\3O\3O\3P\3P\3P\3Q"+
		"\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u07cd"+
		"\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u07df\nR\3R\5R"+
		"\u07e2\nR\3R\3R\3R\5R\u07e7\nR\3R\5R\u07ea\nR\3R\3R\3R\5R\u07ef\nR\3R"+
		"\5R\u07f2\nR\3R\3R\3R\5R\u07f7\nR\3R\5R\u07fa\nR\3R\3R\3R\5R\u07ff\nR"+
		"\3R\5R\u0802\nR\3R\3R\3R\3R\3R\3R\5R\u080a\nR\3R\5R\u080d\nR\3R\3R\3R"+
		"\3R\3R\3R\5R\u0815\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0822\nR\3R"+
		"\3R\3R\3R\3R\3R\3R\3R\3R\5R\u082d\nR\3R\7R\u0830\nR\fR\16R\u0833\13R\3"+
		"R\5R\u0836\nR\3R\3R\3R\3R\5R\u083c\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0853\nR\3R\3R\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\5R\u085f\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u086a\nR\3R\7R\u086d\n"+
		"R\fR\16R\u0870\13R\3R\5R\u0873\nR\3R\3R\3R\3R\5R\u0879\nR\5R\u087b\nR"+
		"\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0888\nR\3R\3R\3R\3R\3R\3R\3R\3R"+
		"\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\6R\u089d\nR\rR\16R\u089e\3R\3R\3R\3"+
		"R\3R\5R\u08a6\nR\3R\3R\3R\3R\3R\3R\3R\5R\u08af\nR\3R\3R\3R\5R\u08b4\n"+
		"R\3R\5R\u08b7\nR\3R\3R\3R\5R\u08bc\nR\3R\5R\u08bf\nR\3R\3R\3R\5R\u08c4"+
		"\nR\3R\6R\u08c7\nR\rR\16R\u08c8\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u08e5\nR\3R\3R\3R\3R\3R\3"+
		"R\5R\u08ed\nR\3R\3R\6R\u08f1\nR\rR\16R\u08f2\3R\3R\3R\3R\3R\5R\u08fa\n"+
		"R\5R\u08fc\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0909\nR\3R\3R\3R\3"+
		"R\3R\5R\u0910\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u091f\nR\3"+
		"S\3S\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0931\nU\3U\5U\u0934"+
		"\nU\5U\u0936\nU\3U\3U\3U\5U\u093b\nU\3U\3U\5U\u093f\nU\3U\5U\u0942\nU"+
		"\5U\u0944\nU\3U\3U\3U\3U\5U\u094a\nU\3U\5U\u094d\nU\5U\u094f\nU\3U\3U"+
		"\3U\3U\5U\u0955\nU\5U\u0957\nU\3U\3U\3V\3V\3V\3V\3V\3W\3W\3W\3W\3W\3W"+
		"\3W\3W\3W\3W\3W\3W\3W\5W\u096d\nW\3W\3W\3W\3W\3W\3W\5W\u0975\nW\3W\3W"+
		"\3W\3W\3W\3W\5W\u097d\nW\6W\u097f\nW\rW\16W\u0980\3W\3W\3W\3W\3W\3W\3"+
		"W\5W\u098a\nW\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3"+
		"X\5X\u099f\nX\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u09ac\nY\3Y\3Y\3Y\3"+
		"Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u09bb\nY\6Y\u09bd\nY\rY\16Y\u09be\3Z\3"+
		"Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3^\3^\3"+
		"^\3^\3_\3_\3_\3_\3_\3`\3`\3`\3`\5`\u09e2\n`\3`\5`\u09e5\n`\3`\6`\u09e8"+
		"\n`\r`\16`\u09e9\3a\3a\3a\3a\3a\3a\3b\3b\3b\3b\3b\3c\3c\3c\3c\3c\3c\3"+
		"d\3d\3d\3d\5d\u0a01\nd\3d\5d\u0a04\nd\3d\3d\3d\5d\u0a09\nd\3d\3d\3e\3"+
		"e\3e\3e\3f\3f\3f\3f\3f\3f\3g\3g\3g\3g\3g\3g\3h\3h\3h\3h\3h\3h\5h\u0a23"+
		"\nh\3i\3i\3i\3i\3i\3i\3j\3j\3j\3j\3j\3j\5j\u0a31\nj\3j\3j\3j\5j\u0a36"+
		"\nj\3j\3j\3k\3k\3k\3k\5k\u0a3e\nk\3k\6k\u0a41\nk\rk\16k\u0a42\3k\3k\3"+
		"k\3k\3k\5k\u0a4a\nk\3l\3l\3l\3l\3l\3l\3l\3m\3m\3m\3m\3m\3n\3n\3n\3n\3"+
		"n\3n\3n\5n\u0a5f\nn\3n\3n\3o\3o\3o\3o\3o\3p\3p\3p\3p\3q\3q\3q\3q\3r\3"+
		"r\3r\3r\3r\3s\3s\3s\3s\3s\3t\3t\3t\3t\3t\3u\3u\3u\3u\3u\5u\u0a84\nu\3"+
		"u\3u\3u\5u\u0a89\nu\3u\3u\3v\3v\3v\3v\3v\3v\3w\3w\3w\3w\3w\3x\3x\3x\3"+
		"x\5x\u0a9c\nx\3x\3x\3y\3y\3y\3y\3z\3z\3z\3z\5z\u0aa8\nz\3z\5z\u0aab\n"+
		"z\3z\3z\3z\5z\u0ab0\nz\3z\5z\u0ab3\nz\3{\3{\3{\3{\5{\u0ab9\n{\3{\3{\3"+
		"|\3|\3|\3|\3|\3|\3}\3}\3}\3}\3}\5}\u0ac8\n}\3}\3}\3}\5}\u0acd\n}\3}\3"+
		"}\3~\3~\3~\3~\5~\u0ad5\n~\3~\5~\u0ad8\n~\3~\3~\3~\5~\u0add\n~\3~\3~\3"+
		"~\5~\u0ae2\n~\3~\5~\u0ae5\n~\3\177\3\177\3\177\3\177\3\177\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083\5\u0083\u0afd\n\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0b04\n\u0083\3\u0083"+
		"\3\u0083\3\u0083\5\u0083\u0b09\n\u0083\3\u0083\3\u0083\3\u0083\5\u0083"+
		"\u0b0e\n\u0083\3\u0083\3\u0083\3\u0083\6\u0083\u0b13\n\u0083\r\u0083\16"+
		"\u0083\u0b14\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0b1c\n\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\5\u0085\u0b29\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\5\u0086\u0b2f\n\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0b34\n\u0086\3"+
		"\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0b3c\n\u0087\3"+
		"\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0b4c\n\u0089\3\u0089"+
		"\3\u0089\3\u008a\3\u008a\3\u008a\5\u008a\u0b53\n\u008a\3\u008a\3\u008a"+
		"\3\u008a\5\u008a\u0b58\n\u008a\3\u008a\6\u008a\u0b5b\n\u008a\r\u008a\16"+
		"\u008a\u0b5c\3\u008a\5\u008a\u0b60\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\5\u008a\u0b66\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0b6c\n"+
		"\u008a\3\u008b\3\u008b\3\u008b\5\u008b\u0b71\n\u008b\3\u008b\3\u008b\3"+
		"\u008b\5\u008b\u0b76\n\u008b\3\u008b\6\u008b\u0b79\n\u008b\r\u008b\16"+
		"\u008b\u0b7a\3\u008b\5\u008b\u0b7e\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\5\u008b\u0b84\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0b8a\n"+
		"\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\5\u008c\u0b95\n\u008c\3\u008c\5\u008c\u0b98\n\u008c\3\u008d\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0ba2\n"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0ba8\n\u008d\6\u008d\u0baa"+
		"\n\u008d\r\u008d\16\u008d\u0bab\3\u008d\3\u008d\5\u008d\u0bb0\n\u008d"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\5\u008f\u0bcd\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0bda\n\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\5\u0090\u0be0\n\u0090\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0bea\n\u0091\3\u0091"+
		"\5\u0091\u0bed\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\5\u0093\u0c01\n\u0093\3\u0093\3\u0093\5\u0093"+
		"\u0c05\n\u0093\3\u0093\3\u0093\5\u0093\u0c09\n\u0093\3\u0093\6\u0093\u0c0c"+
		"\n\u0093\r\u0093\16\u0093\u0c0d\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094"+
		"\u0c1d\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c24\n"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094"+
		"\u0c2d\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094\u0c33\n\u0094\f"+
		"\u0094\16\u0094\u0c36\13\u0094\5\u0094\u0c38\n\u0094\3\u0094\3\u0094\3"+
		"\u0094\5\u0094\u0c3d\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c42\n\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\6\u0094\u0c48\n\u0094\r\u0094\16\u0094"+
		"\u0c49\3\u0094\3\u0094\6\u0094\u0c4e\n\u0094\r\u0094\16\u0094\u0c4f\3"+
		"\u0094\3\u0094\5\u0094\u0c54\n\u0094\3\u0094\3\u0094\7\u0094\u0c58\n\u0094"+
		"\f\u0094\16\u0094\u0c5b\13\u0094\7\u0094\u0c5d\n\u0094\f\u0094\16\u0094"+
		"\u0c60\13\u0094\3\u0094\5\u0094\u0c63\n\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\5\u0094\u0c6a\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\7\u0094\u0c70\n\u0094\f\u0094\16\u0094\u0c73\13\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u0c7a\n\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c83\n\u0094\3\u0094\3\u0094"+
		"\3\u0094\5\u0094\u0c88\n\u0094\3\u0094\3\u0094\5\u0094\u0c8c\n\u0094\3"+
		"\u0094\5\u0094\u0c8f\n\u0094\6\u0094\u0c91\n\u0094\r\u0094\16\u0094\u0c92"+
		"\3\u0094\3\u0094\7\u0094\u0c97\n\u0094\f\u0094\16\u0094\u0c9a\13\u0094"+
		"\7\u0094\u0c9c\n\u0094\f\u0094\16\u0094\u0c9f\13\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u0ca6\n\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\7\u0094\u0cac\n\u0094\f\u0094\16\u0094\u0caf\13\u0094\3\u0094"+
		"\3\u0094\3\u0094\5\u0094\u0cb4\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0cba\n\u0094\3\u0094\5\u0094\u0cbd\n\u0094\3\u0094\3\u0094\3"+
		"\u0094\5\u0094\u0cc2\n\u0094\3\u0094\5\u0094\u0cc5\n\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u0ccc\n\u0094\5\u0094\u0cce\n\u0094\3"+
		"\u0094\5\u0094\u0cd1\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cd7"+
		"\n\u0094\3\u0094\5\u0094\u0cda\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094"+
		"\u0cdf\n\u0094\3\u0094\5\u0094\u0ce2\n\u0094\3\u0094\3\u0094\3\u0094\5"+
		"\u0094\u0ce7\n\u0094\3\u0094\5\u0094\u0cea\n\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0cef\n\u0094\3\u0094\5\u0094\u0cf2\n\u0094\3\u0094\3\u0094\3"+
		"\u0094\5\u0094\u0cf7\n\u0094\3\u0095\5\u0095\u0cfa\n\u0095\3\u0095\5\u0095"+
		"\u0cfd\n\u0095\3\u0095\5\u0095\u0d00\n\u0095\3\u0095\3\u0095\3\u0095\3"+
		"\u0095\3\u0095\5\u0095\u0d07\n\u0095\6\u0095\u0d09\n\u0095\r\u0095\16"+
		"\u0095\u0d0a\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0d12\n\u0096"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0d19\n\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\5\u0097\u0d1f\n\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0d2c\n\u0097\3\u0097\3\u0097\5\u0097\u0d30\n\u0097\3\u0097\3\u0097\3"+
		"\u0097\5\u0097\u0d35\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3"+
		"\u0097\3\u0097\3\u0097\5\u0097\u0d3f\n\u0097\3\u0097\3\u0097\3\u0097\3"+
		"\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0d48\n\u0097\3\u0097\3\u0097\5"+
		"\u0097\u0d4c\n\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3"+
		"\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d58\n\u0098\3\u0098\3\u0098\3"+
		"\u0098\3\u0098\5\u0098\u0d5e\n\u0098\3\u0098\3\u0098\3\u0098\6\u0098\u0d63"+
		"\n\u0098\r\u0098\16\u0098\u0d64\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d79\n\u0098\3\u0098\3\u0098"+
		"\5\u0098\u0d7d\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\5\u0099\u0d85\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\5\u0099\u0d8e\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099"+
		"\u0d94\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d9a\n\u0099\3"+
		"\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\6\u0099\u0da2\n\u0099\r"+
		"\u0099\16\u0099\u0da3\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\5\u009a\u0dae\n\u009a\3\u009a\3\u009a\5\u009a\u0db2\n"+
		"\u009a\3\u009a\5\u009a\u0db5\n\u009a\3\u009a\3\u009a\5\u009a\u0db9\n\u009a"+
		"\3\u009a\3\u009a\3\u009a\5\u009a\u0dbe\n\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\5\u009a\u0dc4\n\u009a\3\u009a\5\u009a\u0dc7\n\u009a\3\u009a\3"+
		"\u009a\5\u009a\u0dcb\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3"+
		"\u009a\6\u009a\u0dd3\n\u009a\r\u009a\16\u009a\u0dd4\3\u009a\5\u009a\u0dd8"+
		"\n\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0de0"+
		"\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0de8"+
		"\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0def\n\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\6\u009b\u0df6\n\u009b\r\u009b"+
		"\16\u009b\u0df7\5\u009b\u0dfa\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b"+
		"\u0dff\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0e05\n\u009b\3"+
		"\u009b\6\u009b\u0e08\n\u009b\r\u009b\16\u009b\u0e09\5\u009b\u0e0c\n\u009b"+
		"\3\u009b\5\u009b\u0e0f\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0e14\n"+
		"\u009b\3\u009b\5\u009b\u0e17\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0e1c"+
		"\n\u009b\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0e2b\n\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0e32\n\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\6\u009c\u0e39\n\u009c\r\u009c\16\u009c\u0e3a"+
		"\5\u009c\u0e3d\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0e42\n\u009c\3"+
		"\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0e48\n\u009c\3\u009c\6\u009c\u0e4b"+
		"\n\u009c\r\u009c\16\u009c\u0e4c\5\u009c\u0e4f\n\u009c\3\u009c\5\u009c"+
		"\u0e52\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0e57\n\u009c\3\u009c\5"+
		"\u009c\u0e5a\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0e5f\n\u009c\3\u009c"+
		"\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\5\u009d\u0e6c\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e71\n"+
		"\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0e7a\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e7f\n\u009e\3\u009e\3"+
		"\u009e\3\u009e\3\u009e\5\u009e\u0e85\n\u009e\3\u009e\3\u009e\5\u009e\u0e89"+
		"\n\u009e\3\u009e\3\u009e\5\u009e\u0e8d\n\u009e\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\5\u009f\u0e9e\n\u009f\5\u009f\u0ea0\n\u009f\3"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0"+
		"\u0eaa\n\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0eaf\n\u00a0\5\u00a0\u0eb1"+
		"\n\u00a0\3\u00a0\3\u00a0\5\u00a0\u0eb5\n\u00a0\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0ebb\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0ec3\n\u00a1\3\u00a1\7\u00a1\u0ec6\n\u00a1\f\u00a1\16"+
		"\u00a1\u0ec9\13\u00a1\5\u00a1\u0ecb\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\7\u00a1\u0ed1\n\u00a1\f\u00a1\16\u00a1\u0ed4\13\u00a1\5\u00a1\u0ed6"+
		"\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0edb\n\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0ee0\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ee5\n"+
		"\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0eea\n\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\5\u00a1\u0eef\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ef4\n\u00a1"+
		"\3\u00a1\3\u00a1\5\u00a1\u0ef8\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1"+
		"\u0efd\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\5\u00a2\u0f08\n\u00a2\3\u00a2\7\u00a2\u0f0b\n\u00a2\f"+
		"\u00a2\16\u00a2\u0f0e\13\u00a2\5\u00a2\u0f10\n\u00a2\3\u00a2\5\u00a2\u0f13"+
		"\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f18\n\u00a2\3\u00a2\5\u00a2"+
		"\u0f1b\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f20\n\u00a2\3\u00a2\5"+
		"\u00a2\u0f23\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f28\n\u00a2\3\u00a2"+
		"\5\u00a2\u0f2b\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f30\n\u00a2\3"+
		"\u00a2\5\u00a2\u0f33\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f38\n\u00a2"+
		"\3\u00a2\5\u00a2\u0f3b\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f40\n"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f46\n\u00a2\3\u00a2\3"+
		"\u00a2\3\u00a2\5\u00a2\u0f4b\n\u00a2\3\u00a2\5\u00a2\u0f4e\n\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\5\u00a2\u0f53\n\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\5\u00a2\u0f5a\n\u00a2\5\u00a2\u0f5c\n\u00a2\3\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\5\u00a3\u0f62\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\3\u00a3\5\u00a3\u0f6b\n\u00a3\3\u00a3\3\u00a3\3\u00a3\5"+
		"\u00a3\u0f70\n\u00a3\5\u00a3\u0f72\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f7e\n\u00a4"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0f84\n\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0f8e\n\u00a5"+
		"\f\u00a5\16\u00a5\u0f91\13\u00a5\5\u00a5\u0f93\n\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\5\u00a5\u0f98\n\u00a5\5\u00a5\u0f9a\n\u00a5\3\u00a6\3\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0fa4\n\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\5\u00a6\u0fa9\n\u00a6\5\u00a6\u0fab\n\u00a6\3\u00a6"+
		"\3\u00a6\5\u00a6\u0faf\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7"+
		"\u0fb5\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\5\u00a7\u0fc7\n\u00a7\5\u00a7\u0fc9\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3"+
		"\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\5\u00a9\u0fd8\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\5\u00a9\u0fea\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\5\u00a9\u0ff2\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0ffc\n\u00aa\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u100c\n\u00ab\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u1021"+
		"\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\5\u00ae\u102c\n\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae"+
		"\u1032\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\5\u00af\u103b\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\5\u00af\u1044\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af"+
		"\u104a\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\5\u00b0\u1053\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1058\n\u00b0\3"+
		"\u00b0\5\u00b0\u105b\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1060\n\u00b0"+
		"\3\u00b0\5\u00b0\u1063\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1068\n"+
		"\u00b0\3\u00b0\5\u00b0\u106b\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3"+
		"\u00b0\3\u00b0\5\u00b0\u1073\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5"+
		"\u00b0\u1079\n\u00b0\6\u00b0\u107b\n\u00b0\r\u00b0\16\u00b0\u107c\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1084\n\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\5\u00b0\u108a\n\u00b0\6\u00b0\u108c\n\u00b0\r\u00b0\16"+
		"\u00b0\u108d\3\u00b0\5\u00b0\u1091\n\u00b0\5\u00b0\u1093\n\u00b0\3\u00b0"+
		"\5\u00b0\u1096\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u109b\n\u00b0\3"+
		"\u00b0\5\u00b0\u109e\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u10a3\n\u00b0"+
		"\3\u00b0\5\u00b0\u10a6\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u10ab\n"+
		"\u00b0\3\u00b0\5\u00b0\u10ae\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u10b3"+
		"\n\u00b0\3\u00b0\5\u00b0\u10b6\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\5\u00b1\u10c5\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u10d0\n\u00b1\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u10dc"+
		"\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u10e3\n\u00b3"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u10ea\n\u00b4\3\u00b4"+
		"\3\u00b4\5\u00b4\u10ee\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u10f3\n"+
		"\u00b4\3\u00b4\5\u00b4\u10f6\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u10fb"+
		"\n\u00b4\3\u00b4\5\u00b4\u10fe\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u1103\n\u00b4\3\u00b4\5\u00b4\u1106\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u110f\n\u00b4\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\5\u00b5\u1116\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u1125\n\u00b6\3\u00b6\3\u00b6\5\u00b6\u1129\n\u00b6\3"+
		"\u00b6\3\u00b6\3\u00b6\5\u00b6\u112e\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1139\n\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7"+
		"\u1143\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u114f\n\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\7\u00b7\u1155\n\u00b7\f\u00b7\16\u00b7\u1158\13\u00b7\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u115f\n\u00b8\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1168\n\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\5\u00b9\u116d\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1178\n\u00ba\3\u00ba"+
		"\5\u00ba\u117b\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u117f\n\u00ba\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1187\n\u00bb\3\u00bb\3"+
		"\u00bb\5\u00bb\u118b\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u118f\n\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1197\n\u00bb\3\u00bb"+
		"\6\u00bb\u119a\n\u00bb\r\u00bb\16\u00bb\u119b\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11a4\n\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\5\u00bb\u11a9\n\u00bb\3\u00bb\3\u00bb\7\u00bb\u11ad\n\u00bb\f\u00bb\16"+
		"\u00bb\u11b0\13\u00bb\6\u00bb\u11b2\n\u00bb\r\u00bb\16\u00bb\u11b3\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11bd\n\u00bb"+
		"\3\u00bb\5\u00bb\u11c0\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11c5\n"+
		"\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u11cc\n\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u11d2\n\u00bc\5\u00bc\u11d4\n\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u11d9\n\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\5\u00bc\u11df\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc"+
		"\u11e5\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u11ea\n\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\5\u00bc\u11f0\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3"+
		"\u00bd\3\u00bd\5\u00bd\u11f7\n\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u11fc"+
		"\n\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u1201\n\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u1206\n\u00bd\3\u00bd\5\u00bd\u1209\n\u00bd\3\u00bd\3"+
		"\u00bd\5\u00bd\u120d\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u1211\n\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u1215\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u1219\n\u00bd\3"+
		"\u00bd\3\u00bd\3\u00bd\5\u00bd\u121e\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u1222"+
		"\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u1226\n\u00bd\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1230\n\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u1236\n\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\5\u00be\u123d\n\u00be\3\u00be\5\u00be\u1240\n\u00be\3"+
		"\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1246\n\u00be\3\u00be\3\u00be\3"+
		"\u00be\3\u00be\5\u00be\u124c\n\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u1251"+
		"\n\u00be\f\u00be\16\u00be\u1254\13\u00be\3\u00be\3\u00be\3\u00be\5\u00be"+
		"\u1259\n\u00be\5\u00be\u125b\n\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1260"+
		"\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1266\n\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u126c\n\u00be\3\u00be\3\u00be\3\u00be"+
		"\7\u00be\u1271\n\u00be\f\u00be\16\u00be\u1274\13\u00be\3\u00be\5\u00be"+
		"\u1277\n\u00be\3\u00be\3\u00be\5\u00be\u127b\n\u00be\3\u00be\5\u00be\u127e"+
		"\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u128c\n\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u1291\n\u00be\3\u00be\3\u00be\5\u00be\u1295\n\u00be\3"+
		"\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\5\u00be\u12a2\n\u00be\3\u00be\5\u00be\u12a5\n\u00be\5"+
		"\u00be\u12a7\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5"+
		"\u00be\u12af\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\5\u00bf\u12b9\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5"+
		"\u00bf\u12bf\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12c6"+
		"\n\u00bf\3\u00bf\5\u00bf\u12c9\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\5\u00bf\u12cf\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12d5\n"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u12da\n\u00bf\f\u00bf\16\u00bf"+
		"\u12dd\13\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12e2\n\u00bf\5\u00bf"+
		"\u12e4\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12e9\n\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\5\u00bf\u12ef\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\5\u00bf\u12f5\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12fb"+
		"\n\u00bf\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u1300\n\u00bf\f\u00bf\16\u00bf"+
		"\u1303\13\u00bf\3\u00bf\5\u00bf\u1306\n\u00bf\3\u00bf\3\u00bf\5\u00bf"+
		"\u130a\n\u00bf\3\u00bf\5\u00bf\u130d\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\5\u00bf\u131b\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1320\n\u00bf\3"+
		"\u00bf\3\u00bf\5\u00bf\u1324\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1331\n"+
		"\u00bf\3\u00bf\5\u00bf\u1334\n\u00bf\5\u00bf\u1336\n\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u133e\n\u00bf\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u1349"+
		"\n\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u1350\n\u00c0"+
		"\f\u00c0\16\u00c0\u1353\13\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\5\u00c0\u135b\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1366\n\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u136d\n\u00c1\f\u00c1\16\u00c1\u1370"+
		"\13\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1378"+
		"\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\5\u00c2\u1384\n\u00c2\3\u00c2\3\u00c2\5\u00c2\u1388\n"+
		"\u00c2\3\u00c2\3\u00c2\3\u00c2\6\u00c2\u138d\n\u00c2\r\u00c2\16\u00c2"+
		"\u138e\5\u00c2\u1391\n\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1396\n\u00c2"+
		"\3\u00c2\3\u00c2\5\u00c2\u139a\n\u00c2\3\u00c2\3\u00c2\3\u00c2\6\u00c2"+
		"\u139f\n\u00c2\r\u00c2\16\u00c2\u13a0\5\u00c2\u13a3\n\u00c2\3\u00c2\3"+
		"\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\5\u00c2\u13b1\n\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2"+
		"\u13b6\n\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u13cc\n\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\5\u00c2\u13e2\n\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u13e7\n\u00c2\3"+
		"\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\5\u00c3\u13f4\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\5\u00c4\u13fc\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u1410\n\u00c6\3\u00c6"+
		"\5\u00c6\u1413\n\u00c6\3\u00c6\3\u00c6\7\u00c6\u1417\n\u00c6\f\u00c6\16"+
		"\u00c6\u141a\13\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7"+
		"\u1421\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u1428\n"+
		"\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u142d\n\u00c7\3\u00c7\3\u00c7\5"+
		"\u00c7\u1431\n\u00c7\6\u00c7\u1433\n\u00c7\r\u00c7\16\u00c7\u1434\3\u00c7"+
		"\5\u00c7\u1438\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8"+
		"\u143f\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\5\u00c8\u1451\n\u00c8\5\u00c8\u1453\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1467\n\u00c9"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u146e\n\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1475\n\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\5\u00ca\u147a\n\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u147f\n"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1485\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\5\u00ca\u148a\n\u00ca\5\u00ca\u148c\n\u00ca\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u1493\n\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\5\u00cb\u1499\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u149f\n\u00cb\3\u00cb\5\u00cb\u14a2\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\5\u00cb\u14a8\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\6\u00cb\u14b0\n\u00cb\r\u00cb\16\u00cb\u14b1\3\u00cb\5\u00cb\u14b5"+
		"\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u14bc\n\u00cb"+
		"\3\u00cb\5\u00cb\u14bf\n\u00cb\3\u00cb\3\u00cb\3\u00cb\6\u00cb\u14c4\n"+
		"\u00cb\r\u00cb\16\u00cb\u14c5\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u14ce\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u14d2\n\u00cc\3"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u14d8\n\u00cc\3\u00cc\3\u00cc\3"+
		"\u00cc\7\u00cc\u14dd\n\u00cc\f\u00cc\16\u00cc\u14e0\13\u00cc\5\u00cc\u14e2"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u14e9\n\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u14ef\n\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u14f6\n\u00cc\3\u00cc\5\u00cc\u14f9\n"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u14ff\n\u00cc\3\u00cc\3"+
		"\u00cc\3\u00cc\7\u00cc\u1504\n\u00cc\f\u00cc\16\u00cc\u1507\13\u00cc\5"+
		"\u00cc\u1509\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5"+
		"\u00cc\u1511\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1517\n\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u151e\n\u00cc\3\u00cc"+
		"\5\u00cc\u1521\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1527\n"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u152c\n\u00cc\f\u00cc\16\u00cc"+
		"\u152f\13\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1536"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u153e"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1544\n\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\7\u00cc\u1549\n\u00cc\f\u00cc\16\u00cc\u154c\13\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1555"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u155a\n\u00cc\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1564\n\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u156a\n\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd"+
		"\u1576\n\u00cd\5\u00cd\u1578\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\5\u00ce\u157f\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1585"+
		"\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u158b\n\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1591\n\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\6\u00ce\u1596\n\u00ce\r\u00ce\16\u00ce\u1597\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\5\u00cf\u159f\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\5\u00cf\u15a7\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\5\u00cf\u15ad\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\6\u00cf\u15bb\n\u00cf"+
		"\r\u00cf\16\u00cf\u15bc\3\u00cf\5\u00cf\u15c0\n\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u15c5\n\u00cf\5\u00cf\u15c7\n\u00cf\3\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0"+
		"\u15d3\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u15d9\n\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\6\u00d0\u15e7\n\u00d0\r\u00d0\16\u00d0\u15e8"+
		"\3\u00d0\5\u00d0\u15ec\n\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u15f1\n"+
		"\u00d0\3\u00d0\5\u00d0\u15f4\n\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u15f9"+
		"\n\u00d0\5\u00d0\u15fb\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\5\u00d1\u1604\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\5\u00d1\u160b\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u1617\n\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1627\n\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\7\u00d3\u162e\n\u00d3\f\u00d3\16\u00d3\u1631"+
		"\13\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u1639"+
		"\n\u00d4\3\u00d4\5\u00d4\u163c\n\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4"+
		"\u1641\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1648\n"+
		"\u00d5\5\u00d5\u164a\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1650"+
		"\n\u00d5\5\u00d5\u1652\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\5\u00d5\u165a\n\u00d5\5\u00d5\u165c\n\u00d5\3\u00d5\3\u00d5\3"+
		"\u00d5\3\u00d5\5\u00d5\u1662\n\u00d5\5\u00d5\u1664\n\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\5\u00d5\u166a\n\u00d5\5\u00d5\u166c\n\u00d5\3\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1673\n\u00d5\3\u00d5\5\u00d5\u1676"+
		"\n\u00d5\5\u00d5\u1678\n\u00d5\3\u00d5\5\u00d5\u167b\n\u00d5\3\u00d5\3"+
		"\u00d5\5\u00d5\u167f\n\u00d5\5\u00d5\u1681\n\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u168a\n\u00d5\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\5\u00d6\u1690\n\u00d6\3\u00d6\3\u00d6\5\u00d6\u1694\n"+
		"\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u169c\n"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u16a3\n\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u16a9\n\u00d7\5\u00d7\u16ab\n\u00d7"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\5\u00d9\u16b6\n\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u16bb\n\u00d9\3"+
		"\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u16c1\n\u00d9\6\u00d9\u16c3\n\u00d9"+
		"\r\u00d9\16\u00d9\u16c4\3\u00d9\3\u00d9\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\5\u00da\u16cf\n\u00da\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\5\u00db\u16d7\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u16e3\n\u00db"+
		"\3\u00dc\5\u00dc\u16e6\n\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\5\u00dc\u16ee\n\u00dc\5\u00dc\u16f0\n\u00dc\3\u00dc\5\u00dc\u16f3"+
		"\n\u00dc\3\u00dc\3\u00dc\5\u00dc\u16f7\n\u00dc\3\u00dc\5\u00dc\u16fa\n"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\6\u00dc\u1701\n\u00dc\r"+
		"\u00dc\16\u00dc\u1702\3\u00dc\5\u00dc\u1706\n\u00dc\3\u00dc\5\u00dc\u1709"+
		"\n\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1711"+
		"\n\u00dd\3\u00dd\3\u00dd\6\u00dd\u1715\n\u00dd\r\u00dd\16\u00dd\u1716"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u171e\n\u00dd\3\u00dd"+
		"\3\u00dd\5\u00dd\u1722\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u172d\n\u00dd\3\u00dd\3\u00dd"+
		"\6\u00dd\u1731\n\u00dd\r\u00dd\16\u00dd\u1732\5\u00dd\u1735\n\u00dd\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u173c\n\u00de\f\u00de\16"+
		"\u00de\u173f\13\u00de\3\u00de\5\u00de\u1742\n\u00de\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\5\u00df\u1749\n\u00df\3\u00df\3\u00df\3\u00df\5"+
		"\u00df\u174e\n\u00df\3\u00e0\5\u00e0\u1751\n\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u1759\n\u00e0\3\u00e0\3\u00e0\5\u00e0"+
		"\u175d\n\u00e0\3\u00e0\5\u00e0\u1760\n\u00e0\3\u00e0\3\u00e0\5\u00e0\u1764"+
		"\n\u00e0\3\u00e0\5\u00e0\u1767\n\u00e0\3\u00e0\3\u00e0\5\u00e0\u176b\n"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u1772\n\u00e0\3"+
		"\u00e0\3\u00e0\5\u00e0\u1776\n\u00e0\5\u00e0\u1778\n\u00e0\5\u00e0\u177a"+
		"\n\u00e0\3\u00e0\5\u00e0\u177d\n\u00e0\3\u00e0\5\u00e0\u1780\n\u00e0\3"+
		"\u00e0\5\u00e0\u1783\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1789"+
		"\n\u00e1\3\u00e2\5\u00e2\u178c\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u1794\n\u00e2\5\u00e2\u1796\n\u00e2\3\u00e2\5"+
		"\u00e2\u1799\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u179d\n\u00e2\3\u00e2\5\u00e2"+
		"\u17a0\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u17a6\n\u00e2\3"+
		"\u00e2\5\u00e2\u17a9\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u17ad\n\u00e2\3\u00e2"+
		"\5\u00e2\u17b0\n\u00e2\3\u00e2\5\u00e2\u17b3\n\u00e2\3\u00e3\3\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e3\5\u00e3\u17ba\n\u00e3\3\u00e4\5\u00e4\u17bd\n\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u17c4\n\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u17ca\n\u00e4\7\u00e4\u17cc\n\u00e4\f"+
		"\u00e4\16\u00e4\u17cf\13\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\5\u00e4\u17d8\n\u00e4\3\u00e4\5\u00e4\u17db\n\u00e4\3"+
		"\u00e5\5\u00e5\u17de\n\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\5\u00e6\u17e4"+
		"\n\u00e6\3\u00e6\5\u00e6\u17e7\n\u00e6\3\u00e6\5\u00e6\u17ea\n\u00e6\3"+
		"\u00e6\5\u00e6\u17ed\n\u00e6\3\u00e7\3\u00e7\5\u00e7\u17f1\n\u00e7\3\u00e8"+
		"\5\u00e8\u17f4\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\5\u00e8\u17fc\n\u00e8\5\u00e8\u17fe\n\u00e8\3\u00e8\3\u00e8\5\u00e8\u1802"+
		"\n\u00e8\3\u00e8\5\u00e8\u1805\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\7\u00e8\u180b\n\u00e8\f\u00e8\16\u00e8\u180e\13\u00e8\3\u00e8\5\u00e8"+
		"\u1811\n\u00e8\3\u00e8\3\u00e8\5\u00e8\u1815\n\u00e8\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\5\u00e8\u181c\n\u00e8\3\u00e8\3\u00e8\5\u00e8\u1820"+
		"\n\u00e8\5\u00e8\u1822\n\u00e8\5\u00e8\u1824\n\u00e8\3\u00e8\5\u00e8\u1827"+
		"\n\u00e8\3\u00e8\5\u00e8\u182a\n\u00e8\3\u00e8\5\u00e8\u182d\n\u00e8\3"+
		"\u00e9\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u1833\n\u00e9\f\u00e9\16\u00e9"+
		"\u1836\13\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u183b\n\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u1841\n\u00e9\5\u00e9\u1843\n\u00e9\3"+
		"\u00ea\3\u00ea\5\u00ea\u1847\n\u00ea\3\u00ea\5\u00ea\u184a\n\u00ea\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u1852\n\u00eb\3\u00eb"+
		"\3\u00eb\5\u00eb\u1856\n\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u185b\n"+
		"\u00eb\f\u00eb\16\u00eb\u185e\13\u00eb\5\u00eb\u1860\n\u00eb\3\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u1867\n\u00eb\f\u00eb\16\u00eb"+
		"\u186a\13\u00eb\5\u00eb\u186c\n\u00eb\3\u00eb\3\u00eb\5\u00eb\u1870\n"+
		"\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u1876\n\u00eb\f\u00eb\16"+
		"\u00eb\u1879\13\u00eb\5\u00eb\u187b\n\u00eb\3\u00ec\3\u00ec\5\u00ec\u187f"+
		"\n\u00ec\3\u00ec\5\u00ec\u1882\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec"+
		"\u1890\n\u00ec\3\u00ec\3\u00ec\5\u00ec\u1894\n\u00ec\3\u00ec\5\u00ec\u1897"+
		"\n\u00ec\3\u00ec\3\u00ec\5\u00ec\u189b\n\u00ec\3\u00ec\5\u00ec\u189e\n"+
		"\u00ec\3\u00ed\3\u00ed\5\u00ed\u18a2\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\5\u00ed\u18b2\n\u00ed\5\u00ed\u18b4\n\u00ed\5\u00ed\u18b6"+
		"\n\u00ed\3\u00ed\5\u00ed\u18b9\n\u00ed\3\u00ed\5\u00ed\u18bc\n\u00ed\3"+
		"\u00ee\3\u00ee\3\u00ee\5\u00ee\u18c1\n\u00ee\3\u00ee\5\u00ee\u18c4\n\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u18ca\n\u00ee\3\u00ee\5\u00ee"+
		"\u18cd\n\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u18d2\n\u00ee\f\u00ee\16"+
		"\u00ee\u18d5\13\u00ee\3\u00ee\5\u00ee\u18d8\n\u00ee\5\u00ee\u18da\n\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u18e0\n\u00ee\f\u00ee\16\u00ee"+
		"\u18e3\13\u00ee\5\u00ee\u18e5\n\u00ee\3\u00ee\3\u00ee\5\u00ee\u18e9\n"+
		"\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u18ee\n\u00ee\f\u00ee\16\u00ee"+
		"\u18f1\13\u00ee\5\u00ee\u18f3\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\5\u00f0\u18ff\n\u00f0"+
		"\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1904\n\u00f1\3\u00f1\5\u00f1\u1907\n"+
		"\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\7\u00f1\u1911\n\u00f1\f\u00f1\16\u00f1\u1914\13\u00f1\5\u00f1\u1916\n"+
		"\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u191c\n\u00f1\3\u00f1\3"+
		"\u00f1\3\u00f1\7\u00f1\u1921\n\u00f1\f\u00f1\16\u00f1\u1924\13\u00f1\3"+
		"\u00f1\3\u00f1\5\u00f1\u1928\n\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u192d"+
		"\n\u00f1\3\u00f1\3\u00f1\6\u00f1\u1931\n\u00f1\r\u00f1\16\u00f1\u1932"+
		"\3\u00f2\3\u00f2\5\u00f2\u1937\n\u00f2\3\u00f3\3\u00f3\3\u00f4\3\u00f4"+
		"\3\u00f4\5\u00f4\u193e\n\u00f4\3\u00f4\5\u00f4\u1941\n\u00f4\3\u00f4\3"+
		"\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1949\n\u00f4\3\u00f4\3"+
		"\u00f4\3\u00f4\3\u00f4\7\u00f4\u194f\n\u00f4\f\u00f4\16\u00f4\u1952\13"+
		"\u00f4\5\u00f4\u1954\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u195a"+
		"\n\u00f4\f\u00f4\16\u00f4\u195d\13\u00f4\3\u00f4\3\u00f4\6\u00f4\u1961"+
		"\n\u00f4\r\u00f4\16\u00f4\u1962\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6"+
		"\5\u00f6\u196a\n\u00f6\3\u00f6\5\u00f6\u196d\n\u00f6\3\u00f6\3\u00f6\3"+
		"\u00f6\3\u00f6\3\u00f6\3\u00f6\7\u00f6\u1975\n\u00f6\f\u00f6\16\u00f6"+
		"\u1978\13\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u197e\n\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1983\n\u00f6\3\u00f6\5\u00f6\u1986\n"+
		"\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u198e\n"+
		"\u00f7\f\u00f7\16\u00f7\u1991\13\u00f7\5\u00f7\u1993\n\u00f7\3\u00f7\5"+
		"\u00f7\u1996\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5"+
		"\u00f7\u199e\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3"+
		"\u00f8\7\u00f8\u19a7\n\u00f8\f\u00f8\16\u00f8\u19aa\13\u00f8\5\u00f8\u19ac"+
		"\n\u00f8\3\u00f8\5\u00f8\u19af\n\u00f8\3\u00f8\3\u00f8\7\u00f8\u19b3\n"+
		"\u00f8\f\u00f8\16\u00f8\u19b6\13\u00f8\3\u00f8\3\u00f8\5\u00f8\u19ba\n"+
		"\u00f8\3\u00f8\3\u00f8\5\u00f8\u19be\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3"+
		"\u00f9\3\u00f9\3\u00f9\7\u00f9\u19c6\n\u00f9\f\u00f9\16\u00f9\u19c9\13"+
		"\u00f9\5\u00f9\u19cb\n\u00f9\3\u00f9\5\u00f9\u19ce\n\u00f9\3\u00f9\3\u00f9"+
		"\7\u00f9\u19d2\n\u00f9\f\u00f9\16\u00f9\u19d5\13\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\5\u00f9\u19da\n\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\5\u00fa"+
		"\u19e0\n\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u19e5\n\u00fa\3\u00fa\3"+
		"\u00fa\5\u00fa\u19e9\n\u00fa\3\u00fa\3\u00fa\5\u00fa\u19ed\n\u00fa\3\u00fa"+
		"\5\u00fa\u19f0\n\u00fa\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u19f5\n\u00fb\3"+
		"\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1a03\n\u00fc\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\5\u00fd\u1a13\n\u00fd\3\u00fd\3\u00fd\5\u00fd\u1a17\n"+
		"\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u1a1d\n\u00fd\5\u00fd\u1a1f"+
		"\n\u00fd\3\u00fd\5\u00fd\u1a22\n\u00fd\3\u00fe\3\u00fe\5\u00fe\u1a26\n"+
		"\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u1a2b\n\u00fe\3\u00fe\3\u00fe\3"+
		"\u00fe\5\u00fe\u1a30\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3"+
		"\u00ff\5\u00ff\u1a38\n\u00ff\3\u00ff\7\u00ff\u1a3b\n\u00ff\f\u00ff\16"+
		"\u00ff\u1a3e\13\u00ff\3\u00ff\5\u00ff\u1a41\n\u00ff\3\u00ff\3\u00ff\3"+
		"\u00ff\5\u00ff\u1a46\n\u00ff\3\u00ff\7\u00ff\u1a49\n\u00ff\f\u00ff\16"+
		"\u00ff\u1a4c\13\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a51\n\u00ff\3"+
		"\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a56\n\u00ff\3\u00ff\5\u00ff\u1a59\n\u00ff"+
		"\3\u0100\3\u0100\3\u0100\5\u0100\u1a5e\n\u0100\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\5\u0100\u1a64\n\u0100\3\u0100\3\u0100\5\u0100\u1a68\n\u0100\3"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\7\u0101\u1a6f\n\u0101\f\u0101\16"+
		"\u0101\u1a72\13\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\7\u0101"+
		"\u1a79\n\u0101\f\u0101\16\u0101\u1a7c\13\u0101\5\u0101\u1a7e\n\u0101\3"+
		"\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u1a87\n"+
		"\u0102\3\u0102\3\u0102\3\u0102\3\u0102\7\u0102\u1a8d\n\u0102\f\u0102\16"+
		"\u0102\u1a90\13\u0102\5\u0102\u1a92\n\u0102\3\u0102\3\u0102\3\u0102\3"+
		"\u0102\3\u0102\5\u0102\u1a99\n\u0102\3\u0102\5\u0102\u1a9c\n\u0102\3\u0103"+
		"\3\u0103\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\7\u0104\u1ab3\n\u0104\f\u0104\16\u0104\u1ab6\13\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1ad1"+
		"\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1ad7\n\u0104\3\u0104"+
		"\5\u0104\u1ada\n\u0104\3\u0105\5\u0105\u1add\n\u0105\3\u0105\5\u0105\u1ae0"+
		"\n\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u1ae6\n\u0105\3\u0105"+
		"\3\u0105\5\u0105\u1aea\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\5\u0106\u1af2\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u1afe\n\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\5\u0107\u1b0a\n\u0107\3\u0107\3\u0107\5\u0107\u1b0e\n\u0107\3\u0107\5"+
		"\u0107\u1b11\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\7\u0108\u1b18"+
		"\n\u0108\f\u0108\16\u0108\u1b1b\13\u0108\3\u0108\3\u0108\3\u0108\5\u0108"+
		"\u1b20\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\7\u0108"+
		"\u1b28\n\u0108\f\u0108\16\u0108\u1b2b\13\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\5\u0108\u1b33\n\u0108\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1b3d\n\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\5\u0109\u1b43\n\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\5\u0109\u1b49\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\5\u0109\u1b50\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1b56\n"+
		"\u0109\3\u0109\3\u0109\5\u0109\u1b5a\n\u0109\3\u0109\3\u0109\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1b65\n\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1b74\n\u010a\5\u010a\u1b76\n"+
		"\u010a\3\u010b\3\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c"+
		"\u1b91\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\5\u010d\u1b9c\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\5\u010d\u1ba4\n\u010d\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\7\u010e\u1bad\n\u010e\f\u010e\16\u010e\u1bb0"+
		"\13\u010e\7\u010e\u1bb2\n\u010e\f\u010e\16\u010e\u1bb5\13\u010e\5\u010e"+
		"\u1bb7\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f"+
		"\u1bbf\n\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111"+
		"\3\u0111\5\u0111\u1bc9\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\5\u0112\u1bd0\n\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112"+
		"\u1bd7\n\u0112\5\u0112\u1bd9\n\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3"+
		"\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u1be5\n\u0112\3"+
		"\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\5\u0112\u1bf0\n\u0112\3\u0112\3\u0112\5\u0112\u1bf4\n\u0112\3\u0112\3"+
		"\u0112\3\u0112\5\u0112\u1bf9\n\u0112\3\u0112\5\u0112\u1bfc\n\u0112\5\u0112"+
		"\u1bfe\n\u0112\3\u0112\5\u0112\u1c01\n\u0112\3\u0112\3\u0112\3\u0112\3"+
		"\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u1c0d\n"+
		"\u0112\5\u0112\u1c0f\n\u0112\5\u0112\u1c11\n\u0112\3\u0112\5\u0112\u1c14"+
		"\n\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u1c19\n\u0112\3\u0112\5\u0112"+
		"\u1c1c\n\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u1c21\n\u0112\3\u0112\3"+
		"\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u1c2b\n"+
		"\u0112\3\u0112\3\u0112\5\u0112\u1c2f\n\u0112\3\u0112\3\u0112\3\u0112\5"+
		"\u0112\u1c34\n\u0112\3\u0112\5\u0112\u1c37\n\u0112\5\u0112\u1c39\n\u0112"+
		"\3\u0112\5\u0112\u1c3c\n\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u1c48\n\u0112\5\u0112"+
		"\u1c4a\n\u0112\5\u0112\u1c4c\n\u0112\3\u0112\5\u0112\u1c4f\n\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\5\u0112\u1c55\n\u0112\3\u0113\3\u0113\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1c5f\n\u0114\3\u0115"+
		"\3\u0115\3\u0116\3\u0116\3\u0117\3\u0117\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118"+
		"\u1c73\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1c79\n\u0119\3"+
		"\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011e\3\u011e\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1c92\n\u011f\5\u011f"+
		"\u1c94\n\u011f\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0122"+
		"\3\u0122\3\u0123\3\u0123\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126"+
		"\u1cae\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1cb4\n\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\5\u0126\u1cbf\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\5\u0127\u1cc7\n\u0127\3\u0127\5\u0127\u1cca\n\u0127\3\u0128\3\u0128\3"+
		"\u0128\3\u0129\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\5\u012a\u1cd8\n\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\5\u012b\u1ce0\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\5\u012c\u1ce7\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1cfe\n\u012d"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\5\u012f\u1d0b\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\5\u0130\u1d11\n\u0130\3\u0130\3\u0130\3\u0130\7\u0130\u1d16\n\u0130\f"+
		"\u0130\16\u0130\u1d19\13\u0130\3\u0130\3\u0130\3\u0130\7\u0130\u1d1e\n"+
		"\u0130\f\u0130\16\u0130\u1d21\13\u0130\5\u0130\u1d23\n\u0130\3\u0130\5"+
		"\u0130\u1d26\n\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0132\3\u0132\3"+
		"\u0132\5\u0132\u1d2f\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0133\3"+
		"\u0133\3\u0133\3\u0133\5\u0133\u1d39\n\u0133\3\u0133\3\u0133\3\u0133\7"+
		"\u0133\u1d3e\n\u0133\f\u0133\16\u0133\u1d41\13\u0133\3\u0133\5\u0133\u1d44"+
		"\n\u0133\3\u0134\3\u0134\5\u0134\u1d48\n\u0134\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\5\u0135\u1d4e\n\u0135\3\u0135\3\u0135\3\u0135\7\u0135\u1d53\n"+
		"\u0135\f\u0135\16\u0135\u1d56\13\u0135\3\u0135\5\u0135\u1d59\n\u0135\3"+
		"\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1d5f\n\u0136\3\u0136\3\u0136\3"+
		"\u0136\7\u0136\u1d64\n\u0136\f\u0136\16\u0136\u1d67\13\u0136\3\u0136\3"+
		"\u0136\3\u0136\3\u0136\5\u0136\u1d6d\n\u0136\3\u0136\5\u0136\u1d70\n\u0136"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u1d76\n\u0137\3\u0137\3\u0137"+
		"\3\u0137\7\u0137\u1d7b\n\u0137\f\u0137\16\u0137\u1d7e\13\u0137\3\u0137"+
		"\5\u0137\u1d81\n\u0137\3\u0138\3\u0138\3\u0138\5\u0138\u1d86\n\u0138\3"+
		"\u0138\3\u0138\3\u0138\5\u0138\u1d8b\n\u0138\3\u0138\6\u0138\u1d8e\n\u0138"+
		"\r\u0138\16\u0138\u1d8f\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\5\u0139\u1d98\n\u0139\3\u0139\3\u0139\5\u0139\u1d9c\n\u0139\3\u013a\3"+
		"\u013a\3\u013a\3\u013a\5\u013a\u1da2\n\u013a\3\u013a\3\u013a\3\u013a\7"+
		"\u013a\u1da7\n\u013a\f\u013a\16\u013a\u1daa\13\u013a\3\u013a\5\u013a\u1dad"+
		"\n\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b"+
		"\u1db6\n\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b"+
		"\u1dbe\n\u013b\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1dc4\n\u013c\3"+
		"\u013c\3\u013c\3\u013d\3\u013d\5\u013d\u1dca\n\u013d\3\u013e\3\u013e\3"+
		"\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1ddb\n\u013f\3\u013f\3\u013f"+
		"\5\u013f\u1ddf\n\u013f\3\u013f\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140"+
		"\5\u0140\u1de7\n\u0140\3\u0140\3\u0140\5\u0140\u1deb\n\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\7\u0140\u1df1\n\u0140\f\u0140\16\u0140\u1df4\13"+
		"\u0140\3\u0140\5\u0140\u1df7\n\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1dfc"+
		"\n\u0140\3\u0140\3\u0140\5\u0140\u1e00\n\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\7\u0140\u1e08\n\u0140\f\u0140\16\u0140\u1e0b"+
		"\13\u0140\3\u0140\3\u0140\5\u0140\u1e0f\n\u0140\5\u0140\u1e11\n\u0140"+
		"\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u1e18\n\u0141\3\u0142"+
		"\3\u0142\5\u0142\u1e1c\n\u0142\3\u0142\3\u0142\5\u0142\u1e20\n\u0142\3"+
		"\u0142\3\u0142\5\u0142\u1e24\n\u0142\3\u0142\5\u0142\u1e27\n\u0142\3\u0142"+
		"\3\u0142\5\u0142\u1e2b\n\u0142\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142"+
		"\u1e31\n\u0142\3\u0142\3\u0142\5\u0142\u1e35\n\u0142\5\u0142\u1e37\n\u0142"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1e3e\n\u0143\3\u0143"+
		"\3\u0143\3\u0143\7\u0143\u1e43\n\u0143\f\u0143\16\u0143\u1e46\13\u0143"+
		"\5\u0143\u1e48\n\u0143\3\u0143\5\u0143\u1e4b\n\u0143\3\u0143\3\u0143\3"+
		"\u0143\7\u0143\u1e50\n\u0143\f\u0143\16\u0143\u1e53\13\u0143\3\u0143\3"+
		"\u0143\5\u0143\u1e57\n\u0143\3\u0143\6\u0143\u1e5a\n\u0143\r\u0143\16"+
		"\u0143\u1e5b\3\u0143\3\u0143\5\u0143\u1e60\n\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\5\u0143\u1e66\n\u0143\6\u0143\u1e68\n\u0143\r\u0143\16\u0143"+
		"\u1e69\5\u0143\u1e6c\n\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1e71\n\u0143"+
		"\3\u0143\6\u0143\u1e74\n\u0143\r\u0143\16\u0143\u1e75\6\u0143\u1e78\n"+
		"\u0143\r\u0143\16\u0143\u1e79\3\u0143\3\u0143\3\u0143\5\u0143\u1e7f\n"+
		"\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1e85\n\u0143\6\u0143\u1e87"+
		"\n\u0143\r\u0143\16\u0143\u1e88\6\u0143\u1e8b\n\u0143\r\u0143\16\u0143"+
		"\u1e8c\5\u0143\u1e8f\n\u0143\3\u0143\3\u0143\5\u0143\u1e93\n\u0143\3\u0143"+
		"\3\u0143\5\u0143\u1e97\n\u0143\3\u0143\3\u0143\5\u0143\u1e9b\n\u0143\3"+
		"\u0143\3\u0143\5\u0143\u1e9f\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5"+
		"\u0143\u1ea5\n\u0143\3\u0143\5\u0143\u1ea8\n\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\5\u0143\u1eae\n\u0143\3\u0143\3\u0143\5\u0143\u1eb2\n\u0143\3"+
		"\u0143\3\u0143\5\u0143\u1eb6\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5"+
		"\u0143\u1ebc\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1ec2\n\u0143"+
		"\5\u0143\u1ec4\n\u0143\3\u0143\5\u0143\u1ec7\n\u0143\3\u0143\3\u0143\5"+
		"\u0143\u1ecb\n\u0143\3\u0143\3\u0143\5\u0143\u1ecf\n\u0143\3\u0143\3\u0143"+
		"\5\u0143\u1ed3\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1ed9\n"+
		"\u0143\3\u0143\5\u0143\u1edc\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5"+
		"\u0143\u1ee2\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1ee8\n\u0143"+
		"\3\u0143\5\u0143\u1eeb\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143"+
		"\u1ef1\n\u0143\3\u0143\5\u0143\u1ef4\n\u0143\3\u0143\3\u0143\3\u0143\3"+
		"\u0143\5\u0143\u1efa\n\u0143\3\u0143\5\u0143\u1efd\n\u0143\3\u0143\3\u0143"+
		"\5\u0143\u1f01\n\u0143\3\u0143\3\u0143\5\u0143\u1f05\n\u0143\3\u0143\3"+
		"\u0143\5\u0143\u1f09\n\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1f0e\n\u0143"+
		"\3\u0143\5\u0143\u1f11\n\u0143\3\u0143\3\u0143\5\u0143\u1f15\n\u0143\3"+
		"\u0143\3\u0143\5\u0143\u1f19\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3"+
		"\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\5\u0143\u1f2a\n\u0143\7\u0143\u1f2c\n\u0143\f\u0143\16"+
		"\u0143\u1f2f\13\u0143\5\u0143\u1f31\n\u0143\3\u0144\3\u0144\3\u0144\3"+
		"\u0144\3\u0144\5\u0144\u1f38\n\u0144\3\u0144\6\u0144\u1f3b\n\u0144\r\u0144"+
		"\16\u0144\u1f3c\3\u0144\3\u0144\5\u0144\u1f41\n\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u1f47\n\u0144\6\u0144\u1f49\n\u0144\r\u0144\16"+
		"\u0144\u1f4a\5\u0144\u1f4d\n\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1f52"+
		"\n\u0144\3\u0144\6\u0144\u1f55\n\u0144\r\u0144\16\u0144\u1f56\6\u0144"+
		"\u1f59\n\u0144\r\u0144\16\u0144\u1f5a\3\u0144\3\u0144\3\u0144\5\u0144"+
		"\u1f60\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1f66\n\u0144\6"+
		"\u0144\u1f68\n\u0144\r\u0144\16\u0144\u1f69\6\u0144\u1f6c\n\u0144\r\u0144"+
		"\16\u0144\u1f6d\5\u0144\u1f70\n\u0144\3\u0144\3\u0144\5\u0144\u1f74\n"+
		"\u0144\3\u0144\3\u0144\5\u0144\u1f78\n\u0144\3\u0144\3\u0144\5\u0144\u1f7c"+
		"\n\u0144\3\u0144\3\u0144\5\u0144\u1f80\n\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\5\u0144\u1f86\n\u0144\3\u0144\5\u0144\u1f89\n\u0144\3\u0144\3"+
		"\u0144\3\u0144\3\u0144\5\u0144\u1f8f\n\u0144\3\u0144\3\u0144\5\u0144\u1f93"+
		"\n\u0144\3\u0144\3\u0144\5\u0144\u1f97\n\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\5\u0144\u1f9d\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144"+
		"\u1fa3\n\u0144\5\u0144\u1fa5\n\u0144\3\u0144\5\u0144\u1fa8\n\u0144\3\u0144"+
		"\3\u0144\5\u0144\u1fac\n\u0144\3\u0144\3\u0144\5\u0144\u1fb0\n\u0144\3"+
		"\u0144\3\u0144\5\u0144\u1fb4\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5"+
		"\u0144\u1fba\n\u0144\3\u0144\5\u0144\u1fbd\n\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\5\u0144\u1fc3\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144"+
		"\u1fc9\n\u0144\3\u0144\5\u0144\u1fcc\n\u0144\3\u0144\3\u0144\3\u0144\3"+
		"\u0144\5\u0144\u1fd2\n\u0144\3\u0144\5\u0144\u1fd5\n\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u1fdb\n\u0144\3\u0144\5\u0144\u1fde\n\u0144\3"+
		"\u0144\3\u0144\5\u0144\u1fe2\n\u0144\3\u0144\3\u0144\5\u0144\u1fe6\n\u0144"+
		"\3\u0144\3\u0144\5\u0144\u1fea\n\u0144\3\u0144\3\u0144\3\u0144\5\u0144"+
		"\u1fef\n\u0144\3\u0144\5\u0144\u1ff2\n\u0144\3\u0144\3\u0144\5\u0144\u1ff6"+
		"\n\u0144\3\u0144\3\u0144\5\u0144\u1ffa\n\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\5\u0144\u2000\n\u0144\3\u0144\5\u0144\u2003\n\u0144\3\u0144\3"+
		"\u0144\5\u0144\u2007\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3"+
		"\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\5\u0144\u2018\n\u0144\7\u0144\u201a\n\u0144\f\u0144\16\u0144"+
		"\u201d\13\u0144\5\u0144\u201f\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145"+
		"\u202d\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u2033\n\u0145\3"+
		"\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u203b\n\u0145\3"+
		"\u0145\3\u0145\3\u0145\3\u0145\3\u0145\6\u0145\u2042\n\u0145\r\u0145\16"+
		"\u0145\u2043\3\u0145\5\u0145\u2047\n\u0145\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\5\u0148\u2068\n\u0148\3\u0149\3\u0149\5\u0149\u206c\n\u0149\3\u0149\3"+
		"\u0149\5\u0149\u2070\n\u0149\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5"+
		"\u014a\u2077\n\u014a\3\u014b\3\u014b\3\u014b\3\u014b\3\u014c\3\u014c\3"+
		"\u014c\5\u014c\u2080\n\u014c\3\u014d\3\u014d\3\u014d\3\u014d\7\u014d\u2086"+
		"\n\u014d\f\u014d\16\u014d\u2089\13\u014d\5\u014d\u208b\n\u014d\3\u014d"+
		"\5\u014d\u208e\n\u014d\3\u014e\3\u014e\5\u014e\u2092\n\u014e\3\u014e\3"+
		"\u014e\5\u014e\u2096\n\u014e\3\u014e\5\u014e\u2099\n\u014e\3\u014e\3\u014e"+
		"\3\u014e\3\u014e\7\u014e\u209f\n\u014e\f\u014e\16\u014e\u20a2\13\u014e"+
		"\3\u014e\3\u014e\5\u014e\u20a6\n\u014e\3\u014e\3\u014e\3\u014e\5\u014e"+
		"\u20ab\n\u014e\5\u014e\u20ad\n\u014e\3\u014f\3\u014f\3\u014f\7\u014f\u20b2"+
		"\n\u014f\f\u014f\16\u014f\u20b5\13\u014f\3\u014f\3\u014f\3\u014f\7\u014f"+
		"\u20ba\n\u014f\f\u014f\16\u014f\u20bd\13\u014f\5\u014f\u20bf\n\u014f\3"+
		"\u0150\3\u0150\3\u0150\3\u0150\3\u0151\3\u0151\3\u0152\3\u0152\3\u0152"+
		"\5\u0152\u20ca\n\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u20cf\n\u0152\3"+
		"\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u20d5\n\u0154\3\u0154\3\u0154\3"+
		"\u0154\5\u0154\u20da\n\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\5"+
		"\u0154\u20e1\n\u0154\5\u0154\u20e3\n\u0154\3\u0154\3\u0154\5\u0154\u20e7"+
		"\n\u0154\3\u0154\3\u0154\3\u0154\3\u0154\7\u0154\u20ed\n\u0154\f\u0154"+
		"\16\u0154\u20f0\13\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u20f5\n\u0154"+
		"\3\u0154\3\u0154\5\u0154\u20f9\n\u0154\3\u0154\5\u0154\u20fc\n\u0154\3"+
		"\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u2105\n"+
		"\u0154\3\u0154\5\u0154\u2108\n\u0154\3\u0154\3\u0154\3\u0154\3\u0154\5"+
		"\u0154\u210e\n\u0154\3\u0155\3\u0155\3\u0155\5\u0155\u2113\n\u0155\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u211a\n\u0156\3\u0156\3\u0156"+
		"\3\u0156\5\u0156\u211f\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\5\u0156\u2127\n\u0156\3\u0157\3\u0157\3\u0157\5\u0157\u212c\n"+
		"\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\5\u0157\u2138\n\u0157\5\u0157\u213a\n\u0157\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158"+
		"\u2145\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u214c\n"+
		"\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\7\u0159\u2154\n"+
		"\u0159\f\u0159\16\u0159\u2157\13\u0159\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u216d"+
		"\n\u015b\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\3\u015c\5\u015c\u217a\n\u015c\3\u015d\3\u015d\3\u015d"+
		"\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d"+
		"\3\u015d\3\u015d\5\u015d\u218a\n\u015d\3\u015d\3\u015d\3\u015d\5\u015d"+
		"\u218f\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u2196\n"+
		"\u015d\3\u015d\5\u015d\u2199\n\u015d\6\u015d\u219b\n\u015d\r\u015d\16"+
		"\u015d\u219c\5\u015d\u219f\n\u015d\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\5\u015e\u21b0\n\u015e\3\u015f\3\u015f\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160"+
		"\u21bf\n\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161"+
		"\u21c7\n\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\5\u0161\u21d0\n\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\5\u0161\u21d8\n\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\5\u0162\u21e1\n\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u21ec\n\u0162\3\u0162\3\u0162"+
		"\5\u0162\u21f0\n\u0162\5\u0162\u21f2\n\u0162\5\u0162\u21f4\n\u0162\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\5\u0163\u21fa\n\u0163\3\u0163\3\u0163\3\u0163"+
		"\5\u0163\u21ff\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163"+
		"\u2206\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u2213\n\u0163\5\u0163\u2215\n"+
		"\u0163\5\u0163\u2217\n\u0163\3\u0163\5\u0163\u221a\n\u0163\3\u0163\5\u0163"+
		"\u221d\n\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u2224\n"+
		"\u0164\3\u0164\5\u0164\u2227\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5"+
		"\u0164\u222d\n\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u2232\n\u0164\5\u0164"+
		"\u2234\n\u0164\3\u0164\5\u0164\u2237\n\u0164\3\u0164\3\u0164\3\u0164\3"+
		"\u0164\5\u0164\u223d\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3"+
		"\u0164\5\u0164\u2245\n\u0164\5\u0164\u2247\n\u0164\3\u0164\5\u0164\u224a"+
		"\n\u0164\3\u0164\3\u0164\5\u0164\u224e\n\u0164\3\u0164\5\u0164\u2251\n"+
		"\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\5\u0164\u225b\n\u0164\3\u0164\5\u0164\u225e\n\u0164\3\u0164\3\u0164\5"+
		"\u0164\u2262\n\u0164\3\u0164\5\u0164\u2265\n\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\5\u0164\u226b\n\u0164\3\u0164\5\u0164\u226e\n\u0164\5\u0164\u2270"+
		"\n\u0164\3\u0165\3\u0165\5\u0165\u2274\n\u0165\3\u0166\3\u0166\5\u0166"+
		"\u2278\n\u0166\3\u0167\3\u0167\3\u0167\5\u0167\u227d\n\u0167\3\u0168\3"+
		"\u0168\5\u0168\u2281\n\u0168\3\u0169\3\u0169\3\u0169\5\u0169\u2286\n\u0169"+
		"\3\u016a\3\u016a\3\u016a\5\u016a\u228b\n\u016a\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u2295\n\u016b\3\u016b"+
		"\5\u016b\u2298\n\u016b\3\u016b\5\u016b\u229b\n\u016b\3\u016c\3\u016c\3"+
		"\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u22a3\n\u016c\3\u016c\3\u016c\5"+
		"\u016c\u22a7\n\u016c\3\u016c\5\u016c\u22aa\n\u016c\3\u016d\3\u016d\5\u016d"+
		"\u22ae\n\u016d\3\u016e\3\u016e\3\u016e\5\u016e\u22b3\n\u016e\3\u016f\3"+
		"\u016f\3\u016f\3\u016f\3\u0170\3\u0170\5\u0170\u22bb\n\u0170\3\u0170\3"+
		"\u0170\3\u0170\5\u0170\u22c0\n\u0170\3\u0171\3\u0171\3\u0171\3\u0171\5"+
		"\u0171\u22c6\n\u0171\3\u0171\7\u0171\u22c9\n\u0171\f\u0171\16\u0171\u22cc"+
		"\13\u0171\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u22d4"+
		"\n\u0172\3\u0172\5\u0172\u22d7\n\u0172\3\u0172\5\u0172\u22da\n\u0172\3"+
		"\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172"+
		"\5\u0172\u22e5\n\u0172\3\u0173\3\u0173\3\u0173\5\u0173\u22ea\n\u0173\3"+
		"\u0173\3\u0173\3\u0173\3\u0174\3\u0174\3\u0174\3\u0174\3\u0175\3\u0175"+
		"\5\u0175\u22f5\n\u0175\3\u0175\7\u0175\u22f8\n\u0175\f\u0175\16\u0175"+
		"\u22fb\13\u0175\3\u0176\3\u0176\3\u0176\5\u0176\u2300\n\u0176\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u2307\n\u0177\5\u0177\u2309\n"+
		"\u0177\3\u0177\3\u0177\5\u0177\u230d\n\u0177\3\u0177\5\u0177\u2310\n\u0177"+
		"\3\u0177\3\u0177\5\u0177\u2314\n\u0177\3\u0177\3\u0177\5\u0177\u2318\n"+
		"\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u2320\n"+
		"\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u2325\n\u0177\5\u0177\u2327\n\u0177"+
		"\3\u0177\5\u0177\u232a\n\u0177\3\u0177\7\u0177\u232d\n\u0177\f\u0177\16"+
		"\u0177\u2330\13\u0177\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\5\u0178\u2338\n\u0178\3\u0179\3\u0179\5\u0179\u233c\n\u0179\3\u0179\3"+
		"\u0179\3\u0179\5\u0179\u2341\n\u0179\3\u0179\5\u0179\u2344\n\u0179\3\u0179"+
		"\5\u0179\u2347\n\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u234d\n"+
		"\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u2355\n"+
		"\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u235d\n"+
		"\u0179\3\u0179\5\u0179\u2360\n\u0179\3\u0179\5\u0179\u2363\n\u0179\3\u017a"+
		"\3\u017a\5\u017a\u2367\n\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u236c\n"+
		"\u017a\3\u017a\5\u017a\u236f\n\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5"+
		"\u017a\u2375\n\u017a\3\u017a\3\u017a\5\u017a\u2379\n\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\5\u017a\u237f\n\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\5\u017a\u2387\n\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\6\u017a\u238d\n\u017a\r\u017a\16\u017a\u238e\3\u017a\5\u017a\u2392\n"+
		"\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u23a1\n\u017a\3\u017a"+
		"\5\u017a\u23a4\n\u017a\3\u017a\5\u017a\u23a7\n\u017a\5\u017a\u23a9\n\u017a"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\5\u017b\u23b4\n\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\5\u017c\u23bf\n\u017c\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\7\u017d\u23c6\n\u017d\f\u017d\16\u017d\u23c9\13\u017d"+
		"\3\u017d\3\u017d\3\u017e\3\u017e\5\u017e\u23cf\n\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\5\u017e\u23d6\n\u017e\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\5\u017f\u23e0\n\u017f\5\u017f"+
		"\u23e2\n\u017f\5\u017f\u23e4\n\u017f\3\u017f\5\u017f\u23e7\n\u017f\3\u017f"+
		"\5\u017f\u23ea\n\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\5\u017f\u23f5\n\u017f\5\u017f\u23f7\n\u017f\5"+
		"\u017f\u23f9\n\u017f\3\u017f\5\u017f\u23fc\n\u017f\3\u0180\7\u0180\u23ff"+
		"\n\u0180\f\u0180\16\u0180\u2402\13\u0180\3\u0180\3\u0180\3\u0180\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\5\u0181\u240c\n\u0181\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u2415\n\u0182\3\u0182"+
		"\5\u0182\u2418\n\u0182\3\u0182\5\u0182\u241b\n\u0182\3\u0182\3\u0182\3"+
		"\u0182\3\u0182\3\u0182\7\u0182\u2422\n\u0182\f\u0182\16\u0182\u2425\13"+
		"\u0182\5\u0182\u2427\n\u0182\3\u0182\5\u0182\u242a\n\u0182\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\5\u0183\u2431\n\u0183\3\u0183\5\u0183\u2434\n"+
		"\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u243b\n\u0183\3"+
		"\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u2441\n\u0183\3\u0183\3\u0183\3"+
		"\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\5\u0183\u2450\n\u0183\3\u0183\5\u0183\u2453\n\u0183\3"+
		"\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u245a\n\u0183\3\u0183\3"+
		"\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u2461\n\u0183\3\u0184\3\u0184\5"+
		"\u0184\u2465\n\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3"+
		"\u0185\3\u0185\3\u0185\5\u0185\u2470\n\u0185\3\u0185\3\u0185\3\u0185\3"+
		"\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\5\u0185\u247e\n\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\7\u0185"+
		"\u2485\n\u0185\f\u0185\16\u0185\u2488\13\u0185\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u2493\n\u0187"+
		"\3\u0188\3\u0188\3\u0188\6\u0188\u2498\n\u0188\r\u0188\16\u0188\u2499"+
		"\3\u0188\3\u0188\5\u0188\u249e\n\u0188\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\6\u0188\u24a4\n\u0188\r\u0188\16\u0188\u24a5\3\u0188\3\u0188\5\u0188"+
		"\u24aa\n\u0188\3\u0188\3\u0188\5\u0188\u24ae\n\u0188\3\u0189\3\u0189\3"+
		"\u0189\3\u0189\5\u0189\u24b4\n\u0189\3\u018a\3\u018a\3\u018a\3\u018a\3"+
		"\u018a\3\u018a\3\u018a\3\u018a\5\u018a\u24be\n\u018a\3\u018b\3\u018b\3"+
		"\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u24c8\n\u018b\3"+
		"\u018c\3\u018c\3\u018d\3\u018d\3\u018d\3\u018d\7\u018d\u24d0\n\u018d\f"+
		"\u018d\16\u018d\u24d3\13\u018d\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e"+
		"\5\u018e\u24da\n\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018f"+
		"\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u24e6\n\u018f\3\u018f\3\u018f"+
		"\3\u018f\3\u018f\5\u018f\u24ec\n\u018f\3\u018f\3\u018f\5\u018f\u24f0\n"+
		"\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f"+
		"\5\u018f\u24fa\n\u018f\3\u0190\3\u0190\5\u0190\u24fe\n\u0190\3\u0190\3"+
		"\u0190\5\u0190\u2502\n\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3"+
		"\u0190\3\u0190\3\u0190\5\u0190\u250c\n\u0190\3\u0191\3\u0191\7\u0191\u2510"+
		"\n\u0191\f\u0191\16\u0191\u2513\13\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\5\u0191\u251a\n\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\7\u0191\u2522\n\u0191\f\u0191\16\u0191\u2525\13\u0191\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\7\u0192\u253a\n\u0192\f\u0192\16\u0192\u253d\13\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\7\u0192\u2546\n\u0192\f\u0192"+
		"\16\u0192\u2549\13\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u254f"+
		"\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\7\u0192\u2555\n\u0192\f\u0192"+
		"\16\u0192\u2558\13\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u255e"+
		"\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u2564\n\u0192\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u256b\n\u0193\3\u0193\3\u0193"+
		"\5\u0193\u256f\n\u0193\3\u0193\6\u0193\u2572\n\u0193\r\u0193\16\u0193"+
		"\u2573\5\u0193\u2576\n\u0193\3\u0194\3\u0194\5\u0194\u257a\n\u0194\3\u0194"+
		"\3\u0194\5\u0194\u257e\n\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\5\u0194\u2585\n\u0194\3\u0195\3\u0195\5\u0195\u2589\n\u0195\3\u0195\5"+
		"\u0195\u258c\n\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u2591\n\u0195\3\u0195"+
		"\3\u0195\5\u0195\u2595\n\u0195\3\u0195\3\u0195\5\u0195\u2599\n\u0195\3"+
		"\u0195\3\u0195\3\u0195\5\u0195\u259e\n\u0195\3\u0195\3\u0195\3\u0195\7"+
		"\u0195\u25a3\n\u0195\f\u0195\16\u0195\u25a6\13\u0195\5\u0195\u25a8\n\u0195"+
		"\3\u0195\3\u0195\5\u0195\u25ac\n\u0195\3\u0196\3\u0196\3\u0196\5\u0196"+
		"\u25b1\n\u0196\3\u0196\3\u0196\5\u0196\u25b5\n\u0196\3\u0197\3\u0197\3"+
		"\u0197\3\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u25be\n\u0197\3\u0198\3"+
		"\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u25c5\n\u0198\3\u0199\3\u0199\3"+
		"\u0199\3\u0199\3\u0199\7\u0199\u25cc\n\u0199\f\u0199\16\u0199\u25cf\13"+
		"\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\5\u0199\u25da\n\u0199\5\u0199\u25dc\n\u0199\3\u019a\3\u019a\3"+
		"\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u25e6\n\u019a\3"+
		"\u019a\5\u019a\u25e9\n\u019a\3\u019a\7\u019a\u25ec\n\u019a\f\u019a\16"+
		"\u019a\u25ef\13\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\5\u019a\u25f7\n\u019a\5\u019a\u25f9\n\u019a\5\u019a\u25fb\n\u019a\3\u019a"+
		"\3\u019a\3\u019a\5\u019a\u2600\n\u019a\5\u019a\u2602\n\u019a\3\u019a\3"+
		"\u019a\3\u019a\3\u019a\7\u019a\u2608\n\u019a\f\u019a\16\u019a\u260b\13"+
		"\u019a\3\u019a\3\u019a\5\u019a\u260f\n\u019a\3\u019a\3\u019a\3\u019a\3"+
		"\u019a\3\u019a\3\u019a\5\u019a\u2617\n\u019a\3\u019a\7\u019a\u261a\n\u019a"+
		"\f\u019a\16\u019a\u261d\13\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u2622"+
		"\n\u019a\5\u019a\u2624\n\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\5\u019a\u262e\n\u019a\5\u019a\u2630\n\u019a\3"+
		"\u019a\3\u019a\5\u019a\u2634\n\u019a\3\u019a\3\u019a\5\u019a\u2638\n\u019a"+
		"\5\u019a\u263a\n\u019a\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\5\u019b\u2643\n\u019b\5\u019b\u2645\n\u019b\3\u019c\3\u019c\3"+
		"\u019c\5\u019c\u264a\n\u019c\3\u019d\3\u019d\3\u019e\3\u019e\3\u019e\3"+
		"\u019e\3\u019e\7\u019e\u2653\n\u019e\f\u019e\16\u019e\u2656\13\u019e\3"+
		"\u019e\3\u019e\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\7\u019f\u2675\n\u019f\f\u019f\16\u019f\u2678\13\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f\u2687\n\u019f\3\u01a0\3\u01a0"+
		"\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u268e\n\u01a0\5\u01a0\u2690\n\u01a0\3"+
		"\u01a1\3\u01a1\3\u01a1\7\u01a1\u2695\n\u01a1\f\u01a1\16\u01a1\u2698\13"+
		"\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\7\u01a2\u269e\n\u01a2\f\u01a2\16"+
		"\u01a2\u26a1\13\u01a2\3\u01a2\3\u01a2\3\u01a3\3\u01a3\3\u01a3\5\u01a3"+
		"\u26a8\n\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u26ae\n\u01a3\3"+
		"\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u26b6\n\u01a4\3"+
		"\u01a4\5\u01a4\u26b9\n\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5"+
		"\u01a5\u26c0\n\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u26c7"+
		"\n\u01a5\3\u01a5\5\u01a5\u26ca\n\u01a5\5\u01a5\u26cc\n\u01a5\3\u01a6\3"+
		"\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u26d4\n\u01a6\5\u01a6\u26d6"+
		"\n\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u26de"+
		"\n\u01a7\3\u01a7\3\u01a7\5\u01a7\u26e2\n\u01a7\3\u01a8\3\u01a8\3\u01a8"+
		"\7\u01a8\u26e7\n\u01a8\f\u01a8\16\u01a8\u26ea\13\u01a8\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u26f1\n\u01a9\3\u01aa\3\u01aa\7\u01aa"+
		"\u26f5\n\u01aa\f\u01aa\16\u01aa\u26f8\13\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01aa\7\u01aa\u26fe\n\u01aa\f\u01aa\16\u01aa\u2701\13\u01aa\5\u01aa"+
		"\u2703\n\u01aa\3\u01ab\3\u01ab\5\u01ab\u2707\n\u01ab\3\u01ab\3\u01ab\5"+
		"\u01ab\u270b\n\u01ab\3\u01ab\3\u01ab\5\u01ab\u270f\n\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u2716\n\u01ab\5\u01ab\u2718\n\u01ab\3"+
		"\u01ab\3\u01ab\5\u01ab\u271c\n\u01ab\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u2721"+
		"\n\u01ab\5\u01ab\u2723\n\u01ab\3\u01ab\3\u01ab\5\u01ab\u2727\n\u01ab\3"+
		"\u01ab\3\u01ab\3\u01ab\5\u01ab\u272c\n\u01ab\5\u01ab\u272e\n\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u2735\n\u01ab\5\u01ab\u2737\n"+
		"\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u273f\n"+
		"\u01ab\5\u01ab\u2741\n\u01ab\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3"+
		"\u01ac\3\u01ac\5\u01ac\u274a\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3"+
		"\u01ac\3\u01ac\5\u01ac\u2752\n\u01ac\3\u01ac\5\u01ac\u2755\n\u01ac\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u275c\n\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u2764\n\u01ad\3\u01ad\5\u01ad"+
		"\u2767\n\u01ad\3\u01ae\3\u01ae\3\u01ae\7\u01ae\u276c\n\u01ae\f\u01ae\16"+
		"\u01ae\u276f\13\u01ae\3\u01af\3\u01af\3\u01af\5\u01af\u2774\n\u01af\3"+
		"\u01b0\3\u01b0\3\u01b0\7\u01b0\u2779\n\u01b0\f\u01b0\16\u01b0\u277c\13"+
		"\u01b0\3\u01b1\3\u01b1\3\u01b1\5\u01b1\u2781\n\u01b1\3\u01b2\3\u01b2\5"+
		"\u01b2\u2785\n\u01b2\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3";
	private static final String _serializedATNSegment1 =
		"\u01b3\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5"+
		"\5\u01b5\u279e\n\u01b5\3\u01b6\5\u01b6\u27a1\n\u01b6\3\u01b6\3\u01b6\5"+
		"\u01b6\u27a5\n\u01b6\5\u01b6\u27a7\n\u01b6\3\u01b6\5\u01b6\u27aa\n\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bc\3\u01bc\3\u01bc\3\u01bd\3\u01bd\3\u01bd\7\u01bd\u27d6\n\u01bd"+
		"\f\u01bd\16\u01bd\u27d9\13\u01bd\3\u01be\3\u01be\5\u01be\u27dd\n\u01be"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\7\u01bf\u27ef"+
		"\n\u01bf\f\u01bf\16\u01bf\u27f2\13\u01bf\3\u01bf\5\u01bf\u27f5\n\u01bf"+
		"\3\u01bf\3\u01bf\5\u01bf\u27f9\n\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1"+
		"\3\u01c1\5\u01c1\u2809\n\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\5\u01c2\u2812\n\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\5\u01c2\u2818\n\u01c2\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u281d\n\u01c3\3"+
		"\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\7\u01c4\u282f"+
		"\n\u01c4\f\u01c4\16\u01c4\u2832\13\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4"+
		"\u2837\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u283e\n"+
		"\u01c4\3\u01c4\3\u01c4\5\u01c4\u2842\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3"+
		"\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\7\u01c4"+
		"\u284f\n\u01c4\f\u01c4\16\u01c4\u2852\13\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\5\u01c4\u2857\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\5\u01c4\u286a\n\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c5\3\u01c5\7\u01c5\u2873\n\u01c5\f\u01c5\16\u01c5\u2876"+
		"\13\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c5\5\u01c5\u2882\n\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\7\u01c5\u2891\n\u01c5\f\u01c5\16\u01c5\u2894\13\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\5\u01c5\u2899\n\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\5\u01c5\u28a0\n\u01c5\3\u01c5\3\u01c5\5\u01c5\u28a4\n\u01c5\3\u01c6\3"+
		"\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u28bf\n\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\5\u01c6\u28f9\n\u01c6\3\u01c6\3\u01c6\5\u01c6\u28fd\n"+
		"\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\5\u01c6\u2936\n\u01c6\5\u01c6\u2938\n\u01c6\3\u01c7\3"+
		"\u01c7\3\u01c7\3\u01c7\5\u01c7\u293e\n\u01c7\3\u01c8\3\u01c8\3\u01c8\3"+
		"\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u2948\n\u01c8\3\u01c8\3"+
		"\u01c8\3\u01c8\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9"+
		"\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\5\u01ca\u295b"+
		"\n\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb"+
		"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u296b\n\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u297b\n\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u298b\n\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d3\5\u01d3\u299e\n\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d4\5\u01d4\u29a3\n\u01d4\3\u01d4\3\u01d4\3\u01d5"+
		"\3\u01d5\5\u01d5\u29a9\n\u01d5\3\u01d6\5\u01d6\u29ac\n\u01d6\3\u01d6\3"+
		"\u01d6\3\u01d6\5\u01d6\u29b1\n\u01d6\3\u01d6\7\u01d6\u29b4\n\u01d6\f\u01d6"+
		"\16\u01d6\u29b7\13\u01d6\3\u01d6\3\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\5\u01d7\u29bf\n\u01d7\3\u01d7\7\u01d7\u29c2\n\u01d7\f\u01d7\16\u01d7"+
		"\u29c5\13\u01d7\3\u01d7\3\u01d7\3\u01d8\5\u01d8\u29ca\n\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\7\u01d8\u29d1\n\u01d8\f\u01d8\16\u01d8"+
		"\u29d4\13\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\7\u01d8\u29db"+
		"\n\u01d8\f\u01d8\16\u01d8\u29de\13\u01d8\5\u01d8\u29e0\n\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\7\u01d8\u29ec\n\u01d8\f\u01d8\16\u01d8\u29ef\13\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\5\u01d8\u29f4\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\5\u01d8\u29fd\n\u01d8\3\u01d9\3\u01d9\5\u01d9\u2a01\n"+
		"\u01d9\3\u01da\3\u01da\3\u01da\3\u01da\7\u01da\u2a07\n\u01da\f\u01da\16"+
		"\u01da\u2a0a\13\u01da\3\u01da\3\u01da\3\u01db\3\u01db\5\u01db\u2a10\n"+
		"\u01db\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc"+
		"\3\u01dc\7\u01dc\u2a1b\n\u01dc\f\u01dc\16\u01dc\u2a1e\13\u01dc\3\u01dd"+
		"\3\u01dd\3\u01dd\7\u01dd\u2a23\n\u01dd\f\u01dd\16\u01dd\u2a26\13\u01dd"+
		"\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de"+
		"\3\u01de\5\u01de\u2a32\n\u01de\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df"+
		"\5\u01df\u2a39\n\u01df\3\u01df\3\u01df\3\u01df\3\u01df\5\u01df\u2a3f\n"+
		"\u01df\3\u01df\3\u01df\5\u01df\u2a43\n\u01df\3\u01df\3\u01df\3\u01df\3"+
		"\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df"+
		"\3\u01df\3\u01df\3\u01df\5\u01df\u2a54\n\u01df\3\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e0\5\u01e0\u2a63\n\u01e0\5\u01e0\u2a65\n\u01e0\3\u01e0\3\u01e0\3"+
		"\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0"+
		"\5\u01e0\u2a72\n\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0"+
		"\u2a82\n\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0"+
		"\u2a8a\n\u01e0\3\u01e0\3\u01e0\5\u01e0\u2a8e\n\u01e0\3\u01e1\5\u01e1\u2a91"+
		"\n\u01e1\3\u01e1\3\u01e1\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\5\u01e2"+
		"\u2a9a\n\u01e2\3\u01e2\5\u01e2\u2a9d\n\u01e2\3\u01e2\5\u01e2\u2aa0\n\u01e2"+
		"\3\u01e2\3\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\5\u01e4\u2aad\n\u01e4\3\u01e5\3\u01e5\5\u01e5\u2ab1\n"+
		"\u01e5\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u2ab9\n"+
		"\u01e6\3\u01e7\3\u01e7\3\u01e7\3\u01e7\5\u01e7\u2abf\n\u01e7\3\u01e8\3"+
		"\u01e8\3\u01e8\3\u01e8\7\u01e8\u2ac5\n\u01e8\f\u01e8\16\u01e8\u2ac8\13"+
		"\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u2ace\n\u01e8\3\u01e8\3"+
		"\u01e8\3\u01e8\3\u01e8\5\u01e8\u2ad4\n\u01e8\3\u01e8\3\u01e8\3\u01e8\3"+
		"\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8"+
		"\3\u01e8\5\u01e8\u2ae3\n\u01e8\3\u01e9\3\u01e9\3\u01e9\3\u01e9\3\u01e9"+
		"\3\u01e9\3\u01e9\5\u01e9\u2aec\n\u01e9\3\u01e9\3\u01e9\3\u01ea\3\u01ea"+
		"\5\u01ea\u2af2\n\u01ea\3\u01eb\3\u01eb\3\u01eb\3\u01eb\5\u01eb\u2af8\n"+
		"\u01eb\3\u01eb\5\u01eb\u2afb\n\u01eb\3\u01eb\3\u01eb\5\u01eb\u2aff\n\u01eb"+
		"\3\u01eb\3\u01eb\3\u01eb\7\u01eb\u2b04\n\u01eb\f\u01eb\16\u01eb\u2b07"+
		"\13\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u2b0e\n\u01ec"+
		"\3\u01ec\5\u01ec\u2b11\n\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec"+
		"\u2b17\n\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u2b1d\n\u01ec\5"+
		"\u01ec\u2b1f\n\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u2b25\n\u01ec"+
		"\3\u01ec\5\u01ec\u2b28\n\u01ec\5\u01ec\u2b2a\n\u01ec\3\u01ec\3\u01ec\3"+
		"\u01ec\3\u01ec\5\u01ec\u2b30\n\u01ec\5\u01ec\u2b32\n\u01ec\3\u01ec\3\u01ec"+
		"\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed"+
		"\3\u01ed\5\u01ed\u2b40\n\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed"+
		"\5\u01ed\u2b47\n\u01ed\3\u01ed\3\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee"+
		"\3\u01ee\5\u01ee\u2b50\n\u01ee\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef"+
		"\5\u01ef\u2b57\n\u01ef\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0"+
		"\3\u01f0\3\u01f0\3\u01f0\3\u01f0\5\u01f0\u2b63\n\u01f0\3\u01f0\3\u01f0"+
		"\3\u01f0\3\u01f0\3\u01f0\5\u01f0\u2b6a\n\u01f0\3\u01f0\3\u01f0\3\u01f1"+
		"\3\u01f1\3\u01f1\5\u01f1\u2b71\n\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1"+
		"\3\u01f1\5\u01f1\u2b78\n\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1"+
		"\u2b7e\n\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u2b85\n"+
		"\u01f1\3\u01f1\5\u01f1\u2b88\n\u01f1\3\u01f2\3\u01f2\3\u01f2\5\u01f2\u2b8d"+
		"\n\u01f2\3\u01f2\3\u01f2\3\u01f3\3\u01f3\3\u01f3\5\u01f3\u2b94\n\u01f3"+
		"\3\u01f3\3\u01f3\3\u01f4\5\u01f4\u2b99\n\u01f4\3\u01f4\3\u01f4\5\u01f4"+
		"\u2b9d\n\u01f4\3\u01f4\3\u01f4\3\u01f4\5\u01f4\u2ba2\n\u01f4\3\u01f5\5"+
		"\u01f5\u2ba5\n\u01f5\3\u01f5\3\u01f5\5\u01f5\u2ba9\n\u01f5\3\u01f5\3\u01f5"+
		"\5\u01f5\u2bad\n\u01f5\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u2bb2\n\u01f5\3"+
		"\u01f6\3\u01f6\5\u01f6\u2bb6\n\u01f6\3\u01f7\3\u01f7\3\u01f7\3\u01f7\5"+
		"\u01f7\u2bbc\n\u01f7\3\u01f7\3\u01f7\5\u01f7\u2bc0\n\u01f7\3\u01f7\3\u01f7"+
		"\5\u01f7\u2bc4\n\u01f7\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u2bc9\n\u01f7\3"+
		"\u01f7\3\u01f7\5\u01f7\u2bcd\n\u01f7\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u2bd2"+
		"\n\u01f7\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u2bd7\n\u01f7\3\u01f8\3\u01f8"+
		"\5\u01f8\u2bdb\n\u01f8\3\u01f8\3\u01f8\3\u01f8\5\u01f8\u2be0\n\u01f8\7"+
		"\u01f8\u2be2\n\u01f8\f\u01f8\16\u01f8\u2be5\13\u01f8\3\u01f9\3\u01f9\3"+
		"\u01f9\7\u01f9\u2bea\n\u01f9\f\u01f9\16\u01f9\u2bed\13\u01f9\3\u01fa\5"+
		"\u01fa\u2bf0\n\u01fa\3\u01fa\7\u01fa\u2bf3\n\u01fa\f\u01fa\16\u01fa\u2bf6"+
		"\13\u01fa\3\u01fa\3\u01fa\3\u01fb\3\u01fb\3\u01fb\7\u01fb\u2bfd\n\u01fb"+
		"\f\u01fb\16\u01fb\u2c00\13\u01fb\3\u01fc\3\u01fc\5\u01fc\u2c04\n\u01fc"+
		"\3\u01fd\3\u01fd\3\u01fe\3\u01fe\3\u01ff\5\u01ff\u2c0b\n\u01ff\3\u01ff"+
		"\3\u01ff\3\u0200\3\u0200\3\u0200\3\u0200\3\u0200\5\u0200\u2c14\n\u0200"+
		"\3\u0200\3\u0200\5\u0200\u2c18\n\u0200\5\u0200\u2c1a\n\u0200\3\u0201\3"+
		"\u0201\3\u0201\3\u0201\3\u0201\5\u0201\u2c21\n\u0201\3\u0202\3\u0202\3"+
		"\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\5\u0202"+
		"\u2c2d\n\u0202\3\u0203\3\u0203\3\u0203\5\u0203\u2c32\n\u0203\3\u0203\3"+
		"\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\5\u0203"+
		"\u2c3d\n\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203"+
		"\3\u0203\5\u0203\u2c47\n\u0203\5\u0203\u2c49\n\u0203\3\u0203\3\u0203\3"+
		"\u0203\3\u0203\5\u0203\u2c4f\n\u0203\5\u0203\u2c51\n\u0203\3\u0203\3\u0203"+
		"\3\u0203\5\u0203\u2c56\n\u0203\5\u0203\u2c58\n\u0203\3\u0203\5\u0203\u2c5b"+
		"\n\u0203\3\u0204\3\u0204\5\u0204\u2c5f\n\u0204\3\u0205\3\u0205\5\u0205"+
		"\u2c63\n\u0205\3\u0206\3\u0206\3\u0206\3\u0206\5\u0206\u2c69\n\u0206\3"+
		"\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\5\u0206\u2c72\n"+
		"\u0206\3\u0206\5\u0206\u2c75\n\u0206\5\u0206\u2c77\n\u0206\3\u0207\5\u0207"+
		"\u2c7a\n\u0207\3\u0207\3\u0207\3\u0207\3\u0207\5\u0207\u2c80\n\u0207\3"+
		"\u0207\3\u0207\5\u0207\u2c84\n\u0207\3\u0207\5\u0207\u2c87\n\u0207\3\u0208"+
		"\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\5\u0208\u2c90\n\u0208"+
		"\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u2c99"+
		"\n\u0209\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a\3\u020a"+
		"\3\u020a\3\u020a\5\u020a\u2ca5\n\u020a\3\u020a\5\u020a\u2ca8\n\u020a\3"+
		"\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b"+
		"\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b"+
		"\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u2cc1\n\u020b\3\u020b"+
		"\3\u020b\5\u020b\u2cc5\n\u020b\3\u020b\5\u020b\u2cc8\n\u020b\3\u020c\3"+
		"\u020c\3\u020c\5\u020c\u2ccd\n\u020c\3\u020d\3\u020d\3\u020d\5\u020d\u2cd2"+
		"\n\u020d\3\u020d\3\u020d\5\u020d\u2cd6\n\u020d\3\u020d\3\u020d\5\u020d"+
		"\u2cda\n\u020d\3\u020d\3\u020d\5\u020d\u2cde\n\u020d\3\u020e\3\u020e\3"+
		"\u020f\3\u020f\3\u0210\3\u0210\3\u0210\3\u0210\5\u0210\u2ce8\n\u0210\3"+
		"\u0211\3\u0211\3\u0212\3\u0212\5\u0212\u2cee\n\u0212\3\u0213\3\u0213\3"+
		"\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213\3\u0213"+
		"\3\u0213\3\u0213\3\u0213\3\u0213\5\u0213\u2cff\n\u0213\3\u0214\3\u0214"+
		"\3\u0215\3\u0215\5\u0215\u2d05\n\u0215\3\u0215\2\5^\u0308\u0320\u0216"+
		"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFH"+
		"JLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164"+
		"\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c"+
		"\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194"+
		"\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac"+
		"\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc"+
		"\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4"+
		"\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c"+
		"\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224"+
		"\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c"+
		"\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254"+
		"\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c"+
		"\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284"+
		"\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c"+
		"\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4"+
		"\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc"+
		"\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4"+
		"\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc"+
		"\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314"+
		"\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c"+
		"\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344"+
		"\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c"+
		"\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374"+
		"\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c"+
		"\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4"+
		"\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc"+
		"\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4"+
		"\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec"+
		"\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404"+
		"\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c"+
		"\u041e\u0420\u0422\u0424\u0426\u0428\2\u0096\3\2\u033b\u033c\4\2\u033b"+
		"\u033b\u033e\u033e\4\2\u011e\u011e\u0245\u0246\4\2\u033b\u033c\u033e\u033e"+
		"\5\2\u01b8\u01b8\u0222\u0222\u02c4\u02c4\5\2\u0338\u0338\u033b\u033b\u033e"+
		"\u033e\5\2\u02a7\u02a7\u0307\u0307\u032a\u032a\4\2nnpp\3\2\u033e\u033f"+
		"\3\2\u0301\u0305\4\2\u010a\u010a\u01c3\u01c3\4\2\u0097\u0097\u01bd\u01bd"+
		"\5\2++\u0097\u0097\u01bd\u01bd\5\2\u0080\u0080\u0213\u0214\u02da\u02da"+
		"\4\2\u023c\u023c\u0277\u0277\4\2\u0189\u0189\u027a\u027a\4\2\4\4\u01ee"+
		"\u01ee\5\2\4\4\u01af\u01af\u01ec\u01ec\4\2\5\5##\4\2\3\399\4\2\u0138\u0138"+
		"\u0223\u0223\4\2\u0129\u0129\u0132\u0132\4\2\u033c\u033c\u033e\u033e\4"+
		"\2\u0173\u0173\u0198\u0198\4\2\u0271\u0272\u02e0\u02e0\5\2\u02da\u02da"+
		"\u02ea\u02ea\u02ec\u02ec\4\2\u031b\u031b\u031e\u031e\4\2\6\6xx\4\2\3\3"+
		"\u009e\u009e\4\2\u02c0\u02c0\u0330\u0330\3\2\u02f3\u02f4\4\2\u033c\u033c"+
		"\u033e\u033f\4\2\u02d7\u02d7\u0329\u0329\4\2ee\u0315\u0315\4\2\u0089\u0089"+
		"\u0129\u0129\4\2\61\61OO\6\2\60\60ZZ\u0099\u0099\u00b2\u00b2\4\2\u0149"+
		"\u0149\u027d\u027d\4\2ZZ\u00b2\u00b2\4\2\60\60\u00b2\u00b2\5\2\u0154\u0154"+
		"\u0198\u0198\u0241\u0241\4\2\u0256\u0256\u033c\u033c\5\2!!\u00a0\u00a0"+
		"\u013e\u013e\4\2//\u033e\u033e\4\2//\u033c\u033c\4\2\u0182\u0182\u033e"+
		"\u033e\5\2\u0154\u0154\u0173\u0173\u0198\u0198\4\2GGKK\5\2\u0160\u0160"+
		"\u0188\u0188\u0199\u0199\4\2aa\u0091\u0091\5\2\7\7\u016a\u016a\u0324\u0324"+
		"\4\2\u02da\u02da\u02e7\u02e7\5\2\u01cf\u01cf\u01df\u01df\u025b\u025b\3"+
		"\2\u0082\u0083\5\2\60\60ZZ\u00b2\u00b2\4\2GG\u00cc\u00cc\4\2\u01c6\u01c7"+
		"\u01ef\u01ef\4\2||\u020c\u020c\4\2\4\4XX\5\2\30\30ii\u00b0\u00b0\5\2\u0135"+
		"\u0135\u020e\u020e\u025f\u025f\5\2\u00a4\u00a4\u00dc\u00dc\u0129\u0129"+
		"\5\2\u021b\u021b\u027e\u027e\u02da\u02da\4\2\u01ec\u01ec\u01ee\u01f0\5"+
		"\2\u0117\u0117\u0162\u0162\u01a1\u01a1\4\2\u0157\u0157\u0182\u0182\5\2"+
		"\4\4\u033e\u033e\u0362\u0363\5\2gg\u02ba\u02ba\u02e2\u02e2\5\2\u012b\u012b"+
		"\u02f9\u02f9\u0321\u0321\4\2\u012b\u012b\u029e\u029e\5\2\4\4\u01ce\u01ce"+
		"\u0332\u0332\4\2LLnn\5\2\u0130\u0130\u01be\u01be\u01c1\u01c1\4\2\u01ec"+
		"\u01ec\u01ee\u01ee\5\2\u01a7\u01a7\u0204\u0204\u0227\u0227\5\2\u00d1\u00d1"+
		"\u012b\u012b\u014f\u014f\4\2\u023a\u023a\u02fc\u02fc\4\2\u014f\u014f\u0226"+
		"\u0226\5\2LL\u00f1\u00f1\u0226\u0226\5\2\u00fa\u00fa\u0249\u0249\u02da"+
		"\u02da\4\2\u01a1\u01a1\u0216\u0216\4\2EE\u0144\u0144\5\2\63\63\u0323\u0323"+
		"\u032b\u032b\4\2\u028c\u028c\u02df\u02df\4\2\u02b7\u02b7\u02d9\u02d9\4"+
		"\2\u02dc\u02dc\u0311\u0311\4\2\u0150\u0150\u02d8\u02d8\4\2\u00fa\u00fa"+
		"\u02de\u02de\4\2\u0290\u0290\u0320\u0320\4\2\u02db\u02db\u02ff\u02ff\4"+
		"\2dd\u02dd\u02dd\4\2\u00c8\u00ca\u024c\u024c\4\2\u00b5\u00b5\u0186\u0186"+
		"\3\2\u01c6\u01c7\4\2EE\u033f\u033f\4\2\u011a\u011a\u0135\u0135\4\2\u013c"+
		"\u013c\u022d\u022d\7\2\u00c8\u00ca\u0123\u0123\u0125\u0125\u01e8\u01ea"+
		"\u024b\u024c\4\2\u00a4\u00a4\u00b8\u00b8\3\2\u00aa\u00ab\6\2\u00f2\u00f2"+
		"\u01c9\u01c9\u021b\u021b\u033e\u033e\4\2\30\30ii\4\2\u0103\u0103\u012d"+
		"\u012d\4\2\b\b\35\35\4\2\u016c\u016c\u021c\u021c\4\2\u0151\u0151\u0210"+
		"\u0210\6\2\u012e\u012e\u0143\u0143\u0178\u0178\u022e\u022e\5\2\u01c4\u01c4"+
		"\u01ec\u01ec\u0211\u0211\4\2\u00c1\u00c1\u01f6\u01f6\6\2\u0245\u0245\u0266"+
		"\u0266\u02b3\u02b3\u02f2\u02f2\n\2\u00d3\u00d5\u00d8\u00d8\u0102\u0102"+
		"\u010f\u010f\u01b2\u01b2\u01bc\u01bc\u01e5\u01e5\u0364\u0371\3\2\u0359"+
		"\u035b\5\2\u034e\u034e\u035c\u035d\u035f\u0361\3\2\u035c\u035d\5\2\4\4"+
		"\7\7\u00a1\u00a1\4\2\4\4\64\64\4\2\u033c\u033c\u0340\u0341\4\2\u0209\u0209"+
		"\u020c\u020c\4\2\u014a\u014a\u01ae\u01ae\4\2\u026a\u026a\u026e\u026e\4"+
		"\2\u00dc\u00dc\u01cf\u01cf\4\2yy\u015e\u015e\5\2ee\u0101\u0101\u015e\u015e"+
		"\5\2ee\u015e\u015e\u0187\u0187\4\2\u0120\u0120\u016d\u016d\4\2kk\u033b"+
		"\u033c\5\2LLaa\u0091\u0091\6\2ee\u015e\u015e\u0187\u0187\u01f7\u01f7\4"+
		"\2$$zz\4\2  JJ\4\2\u009a\u009a\u009c\u009c\5\2\u0121\u0121\u01e7\u01e7"+
		"\u020a\u020a\t\2\u00e6\u00e6\u018c\u018c\u019c\u019c\u0232\u0233\u0239"+
		"\u0239\u025c\u025c\u025e\u025e\3\2\u0106\u0107\4\2\u014b\u014b\u017b\u017b"+
		"\4\2\u0179\u0179\u017c\u017c\4\2\u010e\u010e\u01d0\u01d0\3\2\u01d1\u01d2"+
		"\4\2\t\t\62\62\4\2\u01e6\u01e6\u020c\u020c\5\2LLnn\u01ec\u01ec\3\2\u02f7"+
		"\u02f8\5\2\u00ea\u00ea\u025d\u025d\u0333\u0334\3\2\u0340\u0341\4\2\u033c"+
		"\u033c\u0340\u0340\16\2uu\177\177\u00c1\u00e2\u00e5\u01ac\u01ae\u01ef"+
		"\u01f1\u026b\u026e\u027d\u027f\u02ca\u02cc\u030e\u0310\u0321\u0323\u032e"+
		"\u0330\u0334\3\2\u0346\u034d\7\2\u0154\u0154\u0173\u0173\u0198\u0198\u0241"+
		"\u0241\u035b\u035b\2\u3435\2\u043a\3\2\2\2\4\u0456\3\2\2\2\6\u045c\3\2"+
		"\2\2\b\u047b\3\2\2\2\n\u0482\3\2\2\2\f\u0522\3\2\2\2\16\u0529\3\2\2\2"+
		"\20\u0537\3\2\2\2\22\u0539\3\2\2\2\24\u0547\3\2\2\2\26\u054b\3\2\2\2\30"+
		"\u0559\3\2\2\2\32\u055b\3\2\2\2\34\u0562\3\2\2\2\36\u056c\3\2\2\2 \u0578"+
		"\3\2\2\2\"\u057a\3\2\2\2$\u057c\3\2\2\2&\u057e\3\2\2\2(\u059d\3\2\2\2"+
		"*\u05ae\3\2\2\2,\u05bb\3\2\2\2.\u05ea\3\2\2\2\60\u05ec\3\2\2\2\62\u05fe"+
		"\3\2\2\2\64\u0600\3\2\2\2\66\u061d\3\2\2\28\u0632\3\2\2\2:\u063f\3\2\2"+
		"\2<\u0644\3\2\2\2>\u0648\3\2\2\2@\u064c\3\2\2\2B\u0657\3\2\2\2D\u065c"+
		"\3\2\2\2F\u065e\3\2\2\2H\u0663\3\2\2\2J\u0665\3\2\2\2L\u0667\3\2\2\2N"+
		"\u066a\3\2\2\2P\u066e\3\2\2\2R\u0674\3\2\2\2T\u0676\3\2\2\2V\u0679\3\2"+
		"\2\2X\u067b\3\2\2\2Z\u067e\3\2\2\2\\\u0683\3\2\2\2^\u068e\3\2\2\2`\u0697"+
		"\3\2\2\2b\u069b\3\2\2\2d\u069d\3\2\2\2f\u06a3\3\2\2\2h\u06a5\3\2\2\2j"+
		"\u06a7\3\2\2\2l\u06aa\3\2\2\2n\u06b2\3\2\2\2p\u06b4\3\2\2\2r\u06b6\3\2"+
		"\2\2t\u06cc\3\2\2\2v\u06df\3\2\2\2x\u06e7\3\2\2\2z\u06eb\3\2\2\2|\u06f3"+
		"\3\2\2\2~\u0702\3\2\2\2\u0080\u0704\3\2\2\2\u0082\u0730\3\2\2\2\u0084"+
		"\u0739\3\2\2\2\u0086\u0746\3\2\2\2\u0088\u0748\3\2\2\2\u008a\u074a\3\2"+
		"\2\2\u008c\u074d\3\2\2\2\u008e\u0751\3\2\2\2\u0090\u075b\3\2\2\2\u0092"+
		"\u0765\3\2\2\2\u0094\u0791\3\2\2\2\u0096\u07a8\3\2\2\2\u0098\u07aa\3\2"+
		"\2\2\u009a\u07ac\3\2\2\2\u009c\u07ae\3\2\2\2\u009e\u07b3\3\2\2\2\u00a0"+
		"\u07b6\3\2\2\2\u00a2\u091e\3\2\2\2\u00a4\u0920\3\2\2\2\u00a6\u0922\3\2"+
		"\2\2\u00a8\u0924\3\2\2\2\u00aa\u095a\3\2\2\2\u00ac\u095f\3\2\2\2\u00ae"+
		"\u098b\3\2\2\2\u00b0\u09a2\3\2\2\2\u00b2\u09c0\3\2\2\2\u00b4\u09c4\3\2"+
		"\2\2\u00b6\u09ca\3\2\2\2\u00b8\u09d0\3\2\2\2\u00ba\u09d4\3\2\2\2\u00bc"+
		"\u09d8\3\2\2\2\u00be\u09dd\3\2\2\2\u00c0\u09eb\3\2\2\2\u00c2\u09f1\3\2"+
		"\2\2\u00c4\u09f6\3\2\2\2\u00c6\u09fc\3\2\2\2\u00c8\u0a0c\3\2\2\2\u00ca"+
		"\u0a10\3\2\2\2\u00cc\u0a16\3\2\2\2\u00ce\u0a1c\3\2\2\2\u00d0\u0a24\3\2"+
		"\2\2\u00d2\u0a2a\3\2\2\2\u00d4\u0a39\3\2\2\2\u00d6\u0a4b\3\2\2\2\u00d8"+
		"\u0a52\3\2\2\2\u00da\u0a57\3\2\2\2\u00dc\u0a62\3\2\2\2\u00de\u0a67\3\2"+
		"\2\2\u00e0\u0a6b\3\2\2\2\u00e2\u0a6f\3\2\2\2\u00e4\u0a74\3\2\2\2\u00e6"+
		"\u0a79\3\2\2\2\u00e8\u0a7e\3\2\2\2\u00ea\u0a8c\3\2\2\2\u00ec\u0a92\3\2"+
		"\2\2\u00ee\u0a97\3\2\2\2\u00f0\u0a9f\3\2\2\2\u00f2\u0aa3\3\2\2\2\u00f4"+
		"\u0ab4\3\2\2\2\u00f6\u0abc\3\2\2\2\u00f8\u0ac2\3\2\2\2\u00fa\u0ad0\3\2"+
		"\2\2\u00fc\u0ae6\3\2\2\2\u00fe\u0aeb\3\2\2\2\u0100\u0af1\3\2\2\2\u0102"+
		"\u0af6\3\2\2\2\u0104\u0afa\3\2\2\2\u0106\u0b16\3\2\2\2\u0108\u0b21\3\2"+
		"\2\2\u010a\u0b2a\3\2\2\2\u010c\u0b37\3\2\2\2\u010e\u0b3f\3\2\2\2\u0110"+
		"\u0b44\3\2\2\2\u0112\u0b4f\3\2\2\2\u0114\u0b6d\3\2\2\2\u0116\u0b8b\3\2"+
		"\2\2\u0118\u0b99\3\2\2\2\u011a\u0bb1\3\2\2\2\u011c\u0bc1\3\2\2\2\u011e"+
		"\u0bce\3\2\2\2\u0120\u0be1\3\2\2\2\u0122\u0bee\3\2\2\2\u0124\u0bf7\3\2"+
		"\2\2\u0126\u0c15\3\2\2\2\u0128\u0d08\3\2\2\2\u012a\u0d11\3\2\2\2\u012c"+
		"\u0d4b\3\2\2\2\u012e\u0d7c\3\2\2\2\u0130\u0d7e\3\2\2\2\u0132\u0da7\3\2"+
		"\2\2\u0134\u0dd9\3\2\2\2\u0136\u0e1f\3\2\2\2\u0138\u0e62\3\2\2\2\u013a"+
		"\u0e72\3\2\2\2\u013c\u0e8e\3\2\2\2\u013e\u0ea1\3\2\2\2\u0140\u0eb6\3\2"+
		"\2\2\u0142\u0efe\3\2\2\2\u0144\u0f5d\3\2\2\2\u0146\u0f73\3\2\2\2\u0148"+
		"\u0f7f\3\2\2\2\u014a\u0f9b\3\2\2\2\u014c\u0fb0\3\2\2\2\u014e\u0fca\3\2"+
		"\2\2\u0150\u0fd3\3\2\2\2\u0152\u0ff3\3\2\2\2\u0154\u0ffd\3\2\2\2\u0156"+
		"\u100d\3\2\2\2\u0158\u1019\3\2\2\2\u015a\u1022\3\2\2\2\u015c\u1033\3\2"+
		"\2\2\u015e\u104b\3\2\2\2\u0160\u10b7\3\2\2\2\u0162\u10d1\3\2\2\2\u0164"+
		"\u10dd\3\2\2\2\u0166\u10e4\3\2\2\2\u0168\u1110\3\2\2\2\u016a\u111b\3\2"+
		"\2\2\u016c\u112f\3\2\2\2\u016e\u1159\3\2\2\2\u0170\u1160\3\2\2\2\u0172"+
		"\u116e\3\2\2\2\u0174\u1180\3\2\2\2\u0176\u11c6\3\2\2\2\u0178\u11f1\3\2"+
		"\2\2\u017a\u1227\3\2\2\2\u017c\u12b0\3\2\2\2\u017e\u133f\3\2\2\2\u0180"+
		"\u135c\3\2\2\2\u0182\u1379\3\2\2\2\u0184\u13e8\3\2\2\2\u0186\u13f5\3\2"+
		"\2\2\u0188\u13fd\3\2\2\2\u018a\u1405\3\2\2\2\u018c\u141b\3\2\2\2\u018e"+
		"\u1439\3\2\2\2\u0190\u1454\3\2\2\2\u0192\u1468\3\2\2\2\u0194\u148d\3\2"+
		"\2\2\u0196\u1559\3\2\2\2\u0198\u1577\3\2\2\2\u019a\u1579\3\2\2\2\u019c"+
		"\u1599\3\2\2\2\u019e\u15c8\3\2\2\2\u01a0\u15fc\3\2\2\2\u01a2\u160c\3\2"+
		"\2\2\u01a4\u161e\3\2\2\2\u01a6\u1634\3\2\2\2\u01a8\u1642\3\2\2\2\u01aa"+
		"\u168b\3\2\2\2\u01ac\u16aa\3\2\2\2\u01ae\u16ac\3\2\2\2\u01b0\u16b0\3\2"+
		"\2\2\u01b2\u16ce\3\2\2\2\u01b4\u16d0\3\2\2\2\u01b6\u16e5\3\2\2\2\u01b8"+
		"\u1734\3\2\2\2\u01ba\u1741\3\2\2\2\u01bc\u1743\3\2\2\2\u01be\u1750\3\2"+
		"\2\2\u01c0\u1788\3\2\2\2\u01c2\u178b\3\2\2\2\u01c4\u17b9\3\2\2\2\u01c6"+
		"\u17bc\3\2\2\2\u01c8\u17dd\3\2\2\2\u01ca\u17e1\3\2\2\2\u01cc\u17f0\3\2"+
		"\2\2\u01ce\u17f3\3\2\2\2\u01d0\u182e\3\2\2\2\u01d2\u1846\3\2\2\2\u01d4"+
		"\u184b\3\2\2\2\u01d6\u187c\3\2\2\2\u01d8\u189f\3\2\2\2\u01da\u18c3\3\2"+
		"\2\2\u01dc\u18f4\3\2\2\2\u01de\u18fe\3\2\2\2\u01e0\u1906\3\2\2\2\u01e2"+
		"\u1936\3\2\2\2\u01e4\u1938\3\2\2\2\u01e6\u1940\3\2\2\2\u01e8\u1964\3\2"+
		"\2\2\u01ea\u196c\3\2\2\2\u01ec\u1987\3\2\2\2\u01ee\u199f\3\2\2\2\u01f0"+
		"\u19bf\3\2\2\2\u01f2\u19dd\3\2\2\2\u01f4\u19f4\3\2\2\2\u01f6\u1a02\3\2"+
		"\2\2\u01f8\u1a04\3\2\2\2\u01fa\u1a23\3\2\2\2\u01fc\u1a31\3\2\2\2\u01fe"+
		"\u1a5a\3\2\2\2\u0200\u1a69\3\2\2\2\u0202\u1a7f\3\2\2\2\u0204\u1a9d\3\2"+
		"\2\2\u0206\u1a9f\3\2\2\2\u0208\u1adf\3\2\2\2\u020a\u1aeb\3\2\2\2\u020c"+
		"\u1af9\3\2\2\2\u020e\u1b32\3\2\2\2\u0210\u1b34\3\2\2\2\u0212\u1b75\3\2"+
		"\2\2\u0214\u1b77\3\2\2\2\u0216\u1b90\3\2\2\2\u0218\u1ba3\3\2\2\2\u021a"+
		"\u1ba5\3\2\2\2\u021c\u1bbe\3\2\2\2\u021e\u1bc0\3\2\2\2\u0220\u1bc8\3\2"+
		"\2\2\u0222\u1bca\3\2\2\2\u0224\u1c56\3\2\2\2\u0226\u1c5e\3\2\2\2\u0228"+
		"\u1c60\3\2\2\2\u022a\u1c62\3\2\2\2\u022c\u1c64\3\2\2\2\u022e\u1c72\3\2"+
		"\2\2\u0230\u1c78\3\2\2\2\u0232\u1c7a\3\2\2\2\u0234\u1c7c\3\2\2\2\u0236"+
		"\u1c81\3\2\2\2\u0238\u1c83\3\2\2\2\u023a\u1c87\3\2\2\2\u023c\u1c93\3\2"+
		"\2\2\u023e\u1c95\3\2\2\2\u0240\u1c98\3\2\2\2\u0242\u1c9b\3\2\2\2\u0244"+
		"\u1c9d\3\2\2\2\u0246\u1c9f\3\2\2\2\u0248\u1ca1\3\2\2\2\u024a\u1cbe\3\2"+
		"\2\2\u024c\u1cc0\3\2\2\2\u024e\u1ccb\3\2\2\2\u0250\u1cce\3\2\2\2\u0252"+
		"\u1cd7\3\2\2\2\u0254\u1cdf\3\2\2\2\u0256\u1ce6\3\2\2\2\u0258\u1cfd\3\2"+
		"\2\2\u025a\u1cff\3\2\2\2\u025c\u1d0a\3\2\2\2\u025e\u1d0c\3\2\2\2\u0260"+
		"\u1d27\3\2\2\2\u0262\u1d2e\3\2\2\2\u0264\u1d34\3\2\2\2\u0266\u1d47\3\2"+
		"\2\2\u0268\u1d49\3\2\2\2\u026a\u1d5a\3\2\2\2\u026c\u1d71\3\2\2\2\u026e"+
		"\u1d82\3\2\2\2\u0270\u1d93\3\2\2\2\u0272\u1d9d\3\2\2\2\u0274\u1dae\3\2"+
		"\2\2\u0276\u1dbf\3\2\2\2\u0278\u1dc9\3\2\2\2\u027a\u1dcb\3\2\2\2\u027c"+
		"\u1dd2\3\2\2\2\u027e\u1e10\3\2\2\2\u0280\u1e17\3\2\2\2\u0282\u1e36\3\2"+
		"\2\2\u0284\u1e38\3\2\2\2\u0286\u1f32\3\2\2\2\u0288\u2020\3\2\2\2\u028a"+
		"\u2048\3\2\2\2\u028c\u2055\3\2\2\2\u028e\u2063\3\2\2\2\u0290\u206b\3\2"+
		"\2\2\u0292\u2071\3\2\2\2\u0294\u2078\3\2\2\2\u0296\u207c\3\2\2\2\u0298"+
		"\u2081\3\2\2\2\u029a\u20ac\3\2\2\2\u029c\u20be\3\2\2\2\u029e\u20c0\3\2"+
		"\2\2\u02a0\u20c4\3\2\2\2\u02a2\u20ce\3\2\2\2\u02a4\u20d0\3\2\2\2\u02a6"+
		"\u210d\3\2\2\2\u02a8\u2112\3\2\2\2\u02aa\u2114\3\2\2\2\u02ac\u2139\3\2"+
		"\2\2\u02ae\u213b\3\2\2\2\u02b0\u214b\3\2\2\2\u02b2\u2158\3\2\2\2\u02b4"+
		"\u216c\3\2\2\2\u02b6\u2179\3\2\2\2\u02b8\u219e\3\2\2\2\u02ba\u21af\3\2"+
		"\2\2\u02bc\u21b1\3\2\2\2\u02be\u21be\3\2\2\2\u02c0\u21d7\3\2\2\2\u02c2"+
		"\u21f3\3\2\2\2\u02c4\u221c\3\2\2\2\u02c6\u226f\3\2\2\2\u02c8\u2271\3\2"+
		"\2\2\u02ca\u2275\3\2\2\2\u02cc\u2279\3\2\2\2\u02ce\u227e\3\2\2\2\u02d0"+
		"\u2282\3\2\2\2\u02d2\u2287\3\2\2\2\u02d4\u228c\3\2\2\2\u02d6\u229c\3\2"+
		"\2\2\u02d8\u22ad\3\2\2\2\u02da\u22af\3\2\2\2\u02dc\u22b4\3\2\2\2\u02de"+
		"\u22b8\3\2\2\2\u02e0\u22c1\3\2\2\2\u02e2\u22e4\3\2\2\2\u02e4\u22e6\3\2"+
		"\2\2\u02e6\u22ee\3\2\2\2\u02e8\u22f2\3\2\2\2\u02ea\u22ff\3\2\2\2\u02ec"+
		"\u2301\3\2\2\2\u02ee\u2331\3\2\2\2\u02f0\u233b\3\2\2\2\u02f2\u2366\3\2"+
		"\2\2\u02f4\u23aa\3\2\2\2\u02f6\u23b5\3\2\2\2\u02f8\u23c0\3\2\2\2\u02fa"+
		"\u23ce\3\2\2\2\u02fc\u23d7\3\2\2\2\u02fe\u2400\3\2\2\2\u0300\u240b\3\2"+
		"\2\2\u0302\u240d\3\2\2\2\u0304\u2460\3\2\2\2\u0306\u2464\3\2\2\2\u0308"+
		"\u246f\3\2\2\2\u030a\u2489\3\2\2\2\u030c\u2492\3\2\2\2\u030e\u24ad\3\2"+
		"\2\2\u0310\u24b3\3\2\2\2\u0312\u24bd\3\2\2\2\u0314\u24c7\3\2\2\2\u0316"+
		"\u24c9\3\2\2\2\u0318\u24cb\3\2\2\2\u031a\u24d4\3\2\2\2\u031c\u24f9\3\2"+
		"\2\2\u031e\u250b\3\2\2\2\u0320\u250d\3\2\2\2\u0322\u2563\3\2\2\2\u0324"+
		"\u2575\3\2\2\2\u0326\u257d\3\2\2\2\u0328\u2586\3\2\2\2\u032a\u25ad\3\2"+
		"\2\2\u032c\u25bd\3\2\2\2\u032e\u25c4\3\2\2\2\u0330\u25c6\3\2\2\2\u0332"+
		"\u2639\3\2\2\2\u0334\u263b\3\2\2\2\u0336\u2646\3\2\2\2\u0338\u264b\3\2"+
		"\2\2\u033a\u264d\3\2\2\2\u033c\u2686\3\2\2\2\u033e\u2688\3\2\2\2\u0340"+
		"\u2691\3\2\2\2\u0342\u2699\3\2\2\2\u0344\u26ad\3\2\2\2\u0346\u26b5\3\2"+
		"\2\2\u0348\u26cb\3\2\2\2\u034a\u26d5\3\2\2\2\u034c\u26e1\3\2\2\2\u034e"+
		"\u26e3\3\2\2\2\u0350\u26f0\3\2\2\2\u0352\u2702\3\2\2\2\u0354\u2740\3\2"+
		"\2\2\u0356\u2742\3\2\2\2\u0358\u2756\3\2\2\2\u035a\u2768\3\2\2\2\u035c"+
		"\u2770\3\2\2\2\u035e\u2775\3\2\2\2\u0360\u277d\3\2\2\2\u0362\u2784\3\2"+
		"\2\2\u0364\u2786\3\2\2\2\u0366\u278e\3\2\2\2\u0368\u279d\3\2\2\2\u036a"+
		"\u27a6\3\2\2\2\u036c\u27b0\3\2\2\2\u036e\u27b4\3\2\2\2\u0370\u27b8\3\2"+
		"\2\2\u0372\u27bc\3\2\2\2\u0374\u27c0\3\2\2\2\u0376\u27c8\3\2\2\2\u0378"+
		"\u27d2\3\2\2\2\u037a\u27da\3\2\2\2\u037c\u27f8\3\2\2\2\u037e\u27fa\3\2"+
		"\2\2\u0380\u2808\3\2\2\2\u0382\u2817\3\2\2\2\u0384\u281c\3\2\2\2\u0386"+
		"\u2869\3\2\2\2\u0388\u28a3\3\2\2\2\u038a\u2937\3\2\2\2\u038c\u293d\3\2"+
		"\2\2\u038e\u2947\3\2\2\2\u0390\u294c\3\2\2\2\u0392\u295a\3\2\2\2\u0394"+
		"\u295f\3\2\2\2\u0396\u296a\3\2\2\2\u0398\u296f\3\2\2\2\u039a\u297a\3\2"+
		"\2\2\u039c\u297f\3\2\2\2\u039e\u298a\3\2\2\2\u03a0\u2992\3\2\2\2\u03a2"+
		"\u2997\3\2\2\2\u03a4\u299d\3\2\2\2\u03a6\u29a2\3\2\2\2\u03a8\u29a6\3\2"+
		"\2\2\u03aa\u29ab\3\2\2\2\u03ac\u29ba\3\2\2\2\u03ae\u29c9\3\2\2\2\u03b0"+
		"\u2a00\3\2\2\2\u03b2\u2a02\3\2\2\2\u03b4\u2a0f\3\2\2\2\u03b6\u2a11\3\2"+
		"\2\2\u03b8\u2a1f\3\2\2\2\u03ba\u2a31\3\2\2\2\u03bc\u2a53\3\2\2\2\u03be"+
		"\u2a8d\3\2\2\2\u03c0\u2a90\3\2\2\2\u03c2\u2a94\3\2\2\2\u03c4\u2aa3\3\2"+
		"\2\2\u03c6\u2aac\3\2\2\2\u03c8\u2ab0\3\2\2\2\u03ca\u2ab8\3\2\2\2\u03cc"+
		"\u2abe\3\2\2\2\u03ce\u2ae2\3\2\2\2\u03d0\u2ae4\3\2\2\2\u03d2\u2af1\3\2"+
		"\2\2\u03d4\u2af3\3\2\2\2\u03d6\u2b08\3\2\2\2\u03d8\u2b46\3\2\2\2\u03da"+
		"\u2b4f\3\2\2\2\u03dc\u2b56\3\2\2\2\u03de\u2b69\3\2\2\2\u03e0\u2b87\3\2"+
		"\2\2\u03e2\u2b8c\3\2\2\2\u03e4\u2b93\3\2\2\2\u03e6\u2ba1\3\2\2\2\u03e8"+
		"\u2bb1\3\2\2\2\u03ea\u2bb5\3\2\2\2\u03ec\u2bd6\3\2\2\2\u03ee\u2bd8\3\2"+
		"\2\2\u03f0\u2be6\3\2\2\2\u03f2\u2bf4\3\2\2\2\u03f4\u2bf9\3\2\2\2\u03f6"+
		"\u2c03\3\2\2\2\u03f8\u2c05\3\2\2\2\u03fa\u2c07\3\2\2\2\u03fc\u2c0a\3\2"+
		"\2\2\u03fe\u2c19\3\2\2\2\u0400\u2c20\3\2\2\2\u0402\u2c22\3\2\2\2\u0404"+
		"\u2c2e\3\2\2\2\u0406\u2c5e\3\2\2\2\u0408\u2c62\3\2\2\2\u040a\u2c64\3\2"+
		"\2\2\u040c\u2c79\3\2\2\2\u040e\u2c88\3\2\2\2\u0410\u2c98\3\2\2\2\u0412"+
		"\u2c9a\3\2\2\2\u0414\u2cc7\3\2\2\2\u0416\u2ccc\3\2\2\2\u0418\u2cdd\3\2"+
		"\2\2\u041a\u2cdf\3\2\2\2\u041c\u2ce1\3\2\2\2\u041e\u2ce7\3\2\2\2\u0420"+
		"\u2ce9\3\2\2\2\u0422\u2ced\3\2\2\2\u0424\u2cfe\3\2\2\2\u0426\u2d00\3\2"+
		"\2\2\u0428\u2d02\3\2\2\2\u042a\u042c\5\4\3\2\u042b\u042a\3\2\2\2\u042c"+
		"\u042f\3\2\2\2\u042d\u042b\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u0430\3\2"+
		"\2\2\u042f\u042d\3\2\2\2\u0430\u043b\7\2\2\3\u0431\u0435\5\u0298\u014d"+
		"\2\u0432\u0434\5\u02c8\u0165\2\u0433\u0432\3\2\2\2\u0434\u0437\3\2\2\2"+
		"\u0435\u0433\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0438\3\2\2\2\u0437\u0435"+
		"\3\2\2\2\u0438\u0439\7\2\2\3\u0439\u043b\3\2\2\2\u043a\u042d\3\2\2\2\u043a"+
		"\u0431\3\2\2\2\u043b\3\3\2\2\2\u043c\u0457\5\u02c8\u0165\2\u043d\u043f"+
		"\5\u0298\u014d\2\u043e\u043d\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0446\3"+
		"\2\2\2\u0440\u0447\5\u02c8\u0165\2\u0441\u0443\5\b\5\2\u0442\u0441\3\2"+
		"\2\2\u0443\u0444\3\2\2\2\u0444\u0442\3\2\2\2\u0444\u0445\3\2\2\2\u0445"+
		"\u0447\3\2\2\2\u0446\u0440\3\2\2\2\u0446\u0442\3\2\2\2\u0447\u044b\3\2"+
		"\2\2\u0448\u044a\5\u02ca\u0166\2\u0449\u0448\3\2\2\2\u044a\u044d\3\2\2"+
		"\2\u044b\u0449\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u0457\3\2\2\2\u044d\u044b"+
		"\3\2\2\2\u044e\u0452\5\6\4\2\u044f\u0451\5\u02ca\u0166\2\u0450\u044f\3"+
		"\2\2\2\u0451\u0454\3\2\2\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453"+
		"\u0457\3\2\2\2\u0454\u0452\3\2\2\2\u0455\u0457\5\u02ca\u0166\2\u0456\u043c"+
		"\3\2\2\2\u0456\u043e\3\2\2\2\u0456\u044e\3\2\2\2\u0456\u0455\3\2\2\2\u0457"+
		"\5\3\2\2\2\u0458\u045d\5\u01ea\u00f6\2\u0459\u045d\5\u01da\u00ee\2\u045a"+
		"\u045d\5\u01de\u00f0\2\u045b\u045d\5\u0202\u0102\2\u045c\u0458\3\2\2\2"+
		"\u045c\u0459\3\2\2\2\u045c\u045a\3\2\2\2\u045c\u045b\3\2\2\2\u045d\7\3"+
		"\2\2\2\u045e\u0460\5\n\6\2\u045f\u0461\7\u0357\2\2\u0460\u045f\3\2\2\2"+
		"\u0460\u0461\3\2\2\2\u0461\u047c\3\2\2\2\u0462\u0464\5\20\t\2\u0463\u0465"+
		"\7\u0357\2\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u047c\3\2\2"+
		"\2\u0466\u0468\5\62\32\2\u0467\u0469\7\u0357\2\2\u0468\u0467\3\2\2\2\u0468"+
		"\u0469\3\2\2\2\u0469\u047c\3\2\2\2\u046a\u046c\5\f\7\2\u046b\u046d\7\u0357"+
		"\2\2\u046c\u046b\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u047c\3\2\2\2\u046e"+
		"\u0470\5\u02d4\u016b\2\u046f\u0471\7\u0357\2\2\u0470\u046f\3\2\2\2\u0470"+
		"\u0471\3\2\2\2\u0471\u047c\3\2\2\2\u0472\u0474\5\u02d6\u016c\2\u0473\u0475"+
		"\7\u0357\2\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u047c\3\2\2"+
		"\2\u0476\u0478\5\16\b\2\u0477\u0479\7\u0357\2\2\u0478\u0477\3\2\2\2\u0478"+
		"\u0479\3\2\2\2\u0479\u047c\3\2\2\2\u047a\u047c\7\u0357\2\2\u047b\u045e"+
		"\3\2\2\2\u047b\u0462\3\2\2\2\u047b\u0466\3\2\2\2\u047b\u046a\3\2\2\2\u047b"+
		"\u046e\3\2\2\2\u047b\u0472\3\2\2\2\u047b\u0476\3\2\2\2\u047b\u047a\3\2"+
		"\2\2\u047c\t\3\2\2\2\u047d\u0483\5\u01b6\u00dc\2\u047e\u0483\5\u01be\u00e0"+
		"\2\u047f\u0483\5\u01c2\u00e2\2\u0480\u0483\5\u01c8\u00e5\2\u0481\u0483"+
		"\5\u01ce\u00e8\2\u0482\u047d\3\2\2\2\u0482\u047e\3\2\2\2\u0482\u047f\3"+
		"\2\2\2\u0482\u0480\3\2\2\2\u0482\u0481\3\2\2\2\u0483\13\3\2\2\2\u0484"+
		"\u0523\5\64\33\2\u0485\u0523\5<\37\2\u0486\u0523\5v<\2\u0487\u0523\5\u0084"+
		"C\2\u0488\u0523\5\u0090I\2\u0489\u0523\5\u0092J\2\u048a\u0523\5\u008e"+
		"H\2\u048b\u0523\5\u009eP\2\u048c\u0523\5\u00acW\2\u048d\u0523\5\u00ae"+
		"X\2\u048e\u0523\5\u011c\u008f\2\u048f\u0523\5\u0120\u0091\2\u0490\u0523"+
		"\5\u020c\u0107\2\u0491\u0523\5\u0162\u00b2\2\u0492\u0523\5\u0222\u0112"+
		"\2\u0493\u0523\5\u0126\u0094\2\u0494\u0523\5\u012e\u0098\2\u0495\u0523"+
		"\5\u0130\u0099\2\u0496\u0523\5\u0134\u009b\2\u0497\u0523\5\u0138\u009d"+
		"\2\u0498\u0523\5\u013c\u009f\2\u0499\u0523\5\u0144\u00a3\2\u049a\u0523"+
		"\5\u0148\u00a5\2\u049b\u0523\5\u0140\u00a1\2\u049c\u0523\5\u0150\u00a9"+
		"\2\u049d\u0523\5\u014c\u00a7\2\u049e\u0523\5\u0154\u00ab\2\u049f\u0523"+
		"\5\u0156\u00ac\2\u04a0\u0523\5\u0158\u00ad\2\u04a1\u0523\5\u015a\u00ae"+
		"\2\u04a2\u0523\5\u0160\u00b1\2\u04a3\u0523\5\u0170\u00b9\2\u04a4\u0523"+
		"\5\u016a\u00b6\2\u04a5\u0523\5\u0176\u00bc\2\u04a6\u0523\5\u017a\u00be"+
		"\2\u04a7\u0523\5\u017e\u00c0\2\u04a8\u0523\5\u0182\u00c2\2\u04a9\u0523"+
		"\5\u0184\u00c3\2\u04aa\u0523\5\u0188\u00c5\2\u04ab\u0523\5\u018a\u00c6"+
		"\2\u04ac\u0523\5\u018e\u00c8\2\u04ad\u0523\5\u0190\u00c9\2\u04ae\u0523"+
		"\5\u0206\u0104\2\u04af\u0523\5\u0194\u00cb\2\u04b0\u0523\5\u019a\u00ce"+
		"\2\u04b1\u0523\5\u019c\u00cf\2\u04b2\u0523\5\66\34\2\u04b3\u0523\5r:\2"+
		"\u04b4\u0523\5\u0080A\2\u04b5\u0523\5\u00b0Y\2\u04b6\u0523\5\u011a\u008e"+
		"\2\u04b7\u0523\5\u011e\u0090\2\u04b8\u0523\5\u0122\u0092\2\u04b9\u0523"+
		"\5\u01d4\u00eb\2\u04ba\u0523\5\u0164\u00b3\2\u04bb\u0523\5\u0124\u0093"+
		"\2\u04bc\u0523\5\u0132\u009a\2\u04bd\u0523\5\u0136\u009c\2\u04be\u0523"+
		"\5\u013a\u009e\2\u04bf\u0523\5\u013e\u00a0\2\u04c0\u0523\5\u01d6\u00ec"+
		"\2\u04c1\u0523\5\u0146\u00a4\2\u04c2\u0523\5\u014a\u00a6\2\u04c3\u0523"+
		"\5\u0142\u00a2\2\u04c4\u0523\5\u0152\u00aa\2\u04c5\u0523\5\u014e\u00a8"+
		"\2\u04c6\u0523\5\u00a8U\2\u04c7\u0523\5\u015c\u00af\2\u04c8\u0523\5\u015e"+
		"\u00b0\2\u04c9\u0523\5\u0166\u00b4\2\u04ca\u0523\5\u0168\u00b5\2\u04cb"+
		"\u0523\5\u016c\u00b7\2\u04cc\u0523\5\u016e\u00b8\2\u04cd\u0523\5\u0172"+
		"\u00ba\2\u04ce\u0523\5\u0174\u00bb\2\u04cf\u0523\5\u0178\u00bd\2\u04d0"+
		"\u0523\5\u017c\u00bf\2\u04d1\u0523\5\u0180\u00c1\2\u04d2\u0523\5\u0186"+
		"\u00c4\2\u04d3\u0523\5\u018c\u00c7\2\u04d4\u0523\5\u01f8\u00fd\2\u04d5"+
		"\u0523\5\u0192\u00ca\2\u04d6\u0523\5\u01fc\u00ff\2\u04d7\u0523\5\u0274"+
		"\u013b\2\u04d8\u0523\5\u0196\u00cc\2\u04d9\u0523\5\u0198\u00cd\2\u04da"+
		"\u0523\5\u019e\u00d0\2\u04db\u0523\5\u01d8\u00ed\2\u04dc\u0523\5\u01a0"+
		"\u00d1\2\u04dd\u0523\5\u01a2\u00d2\2\u04de\u0523\5\u01a4\u00d3\2\u04df"+
		"\u0523\58\35\2\u04e0\u0523\5:\36\2\u04e1\u0523\5t;\2\u04e2\u0523\5\u0082"+
		"B\2\u04e3\u0523\5\u009cO\2\u04e4\u0523\5\u00aaV\2\u04e5\u0523\5\u00b2"+
		"Z\2\u04e6\u0523\5\u00b4[\2\u04e7\u0523\5\u00b6\\\2\u04e8\u0523\5\u00b8"+
		"]\2\u04e9\u0523\5\u00ba^\2\u04ea\u0523\5\u00bc_\2\u04eb\u0523\5\u00be"+
		"`\2\u04ec\u0523\5\u00c0a\2\u04ed\u0523\5\u00c2b\2\u04ee\u0523\5\u00c4"+
		"c\2\u04ef\u0523\5\u00eex\2\u04f0\u0523\5\u00c6d\2\u04f1\u0523\5\u00c8"+
		"e\2\u04f2\u0523\5\u00d4k\2\u04f3\u0523\5\u00d6l\2\u04f4\u0523\5\u00ca"+
		"f\2\u04f5\u0523\5\u00ccg\2\u04f6\u0523\5\u00ceh\2\u04f7\u0523\5\u00d0"+
		"i\2\u04f8\u0523\5\u00d2j\2\u04f9\u0523\5\u00d8m\2\u04fa\u0523\5\u00da"+
		"n\2\u04fb\u0523\5\u00dco\2\u04fc\u0523\5\u026c\u0137\2\u04fd\u0523\5\u025e"+
		"\u0130\2\u04fe\u0523\5\u00dep\2\u04ff\u0523\5\u00e0q\2\u0500\u0523\5\u00e2"+
		"r\2\u0501\u0523\5\u00e4s\2\u0502\u0523\5\u00e6t\2\u0503\u0523\5\u0264"+
		"\u0133\2\u0504\u0523\5\u00e8u\2\u0505\u0523\5\u00eav\2\u0506\u0523\5\u00ec"+
		"w\2\u0507\u0523\5\u00f0y\2\u0508\u0523\5\u00f2z\2\u0509\u0523\5\u00f4"+
		"{\2\u050a\u0523\5\u00f6|\2\u050b\u0523\5\u00f8}\2\u050c\u0523\5\u00fa"+
		"~\2\u050d\u0523\5\u00fc\177\2\u050e\u0523\5\u00fe\u0080\2\u050f\u0523"+
		"\5\u0100\u0081\2\u0510\u0523\5\u0102\u0082\2\u0511\u0523\5\u0104\u0083"+
		"\2\u0512\u0523\5\u026e\u0138\2\u0513\u0523\5\u0106\u0084\2\u0514\u0523"+
		"\5\u0108\u0085\2\u0515\u0523\5\u010a\u0086\2\u0516\u0523\5\u0270\u0139"+
		"\2\u0517\u0523\5\u0266\u0134\2\u0518\u0523\5\u0276\u013c\2\u0519\u0523"+
		"\5\u010c\u0087\2\u051a\u0523\5\u0272\u013a\2\u051b\u0523\5\u010e\u0088"+
		"\2\u051c\u0523\5\u0110\u0089\2\u051d\u0523\5\u0112\u008a\2\u051e\u0523"+
		"\5\u0114\u008b\2\u051f\u0523\5\u0116\u008c\2\u0520\u0523\5\u0118\u008d"+
		"\2\u0521\u0523\5\u01fa\u00fe\2\u0522\u0484\3\2\2\2\u0522\u0485\3\2\2\2"+
		"\u0522\u0486\3\2\2\2\u0522\u0487\3\2\2\2\u0522\u0488\3\2\2\2\u0522\u0489"+
		"\3\2\2\2\u0522\u048a\3\2\2\2\u0522\u048b\3\2\2\2\u0522\u048c\3\2\2\2\u0522"+
		"\u048d\3\2\2\2\u0522\u048e\3\2\2\2\u0522\u048f\3\2\2\2\u0522\u0490\3\2"+
		"\2\2\u0522\u0491\3\2\2\2\u0522\u0492\3\2\2\2\u0522\u0493\3\2\2\2\u0522"+
		"\u0494\3\2\2\2\u0522\u0495\3\2\2\2\u0522\u0496\3\2\2\2\u0522\u0497\3\2"+
		"\2\2\u0522\u0498\3\2\2\2\u0522\u0499\3\2\2\2\u0522\u049a\3\2\2\2\u0522"+
		"\u049b\3\2\2\2\u0522\u049c\3\2\2\2\u0522\u049d\3\2\2\2\u0522\u049e\3\2"+
		"\2\2\u0522\u049f\3\2\2\2\u0522\u04a0\3\2\2\2\u0522\u04a1\3\2\2\2\u0522"+
		"\u04a2\3\2\2\2\u0522\u04a3\3\2\2\2\u0522\u04a4\3\2\2\2\u0522\u04a5\3\2"+
		"\2\2\u0522\u04a6\3\2\2\2\u0522\u04a7\3\2\2\2\u0522\u04a8\3\2\2\2\u0522"+
		"\u04a9\3\2\2\2\u0522\u04aa\3\2\2\2\u0522\u04ab\3\2\2\2\u0522\u04ac\3\2"+
		"\2\2\u0522\u04ad\3\2\2\2\u0522\u04ae\3\2\2\2\u0522\u04af\3\2\2\2\u0522"+
		"\u04b0\3\2\2\2\u0522\u04b1\3\2\2\2\u0522\u04b2\3\2\2\2\u0522\u04b3\3\2"+
		"\2\2\u0522\u04b4\3\2\2\2\u0522\u04b5\3\2\2\2\u0522\u04b6\3\2\2\2\u0522"+
		"\u04b7\3\2\2\2\u0522\u04b8\3\2\2\2\u0522\u04b9\3\2\2\2\u0522\u04ba\3\2"+
		"\2\2\u0522\u04bb\3\2\2\2\u0522\u04bc\3\2\2\2\u0522\u04bd\3\2\2\2\u0522"+
		"\u04be\3\2\2\2\u0522\u04bf\3\2\2\2\u0522\u04c0\3\2\2\2\u0522\u04c1\3\2"+
		"\2\2\u0522\u04c2\3\2\2\2\u0522\u04c3\3\2\2\2\u0522\u04c4\3\2\2\2\u0522"+
		"\u04c5\3\2\2\2\u0522\u04c6\3\2\2\2\u0522\u04c7\3\2\2\2\u0522\u04c8\3\2"+
		"\2\2\u0522\u04c9\3\2\2\2\u0522\u04ca\3\2\2\2\u0522\u04cb\3\2\2\2\u0522"+
		"\u04cc\3\2\2\2\u0522\u04cd\3\2\2\2\u0522\u04ce\3\2\2\2\u0522\u04cf\3\2"+
		"\2\2\u0522\u04d0\3\2\2\2\u0522\u04d1\3\2\2\2\u0522\u04d2\3\2\2\2\u0522"+
		"\u04d3\3\2\2\2\u0522\u04d4\3\2\2\2\u0522\u04d5\3\2\2\2\u0522\u04d6\3\2"+
		"\2\2\u0522\u04d7\3\2\2\2\u0522\u04d8\3\2\2\2\u0522\u04d9\3\2\2\2\u0522"+
		"\u04da\3\2\2\2\u0522\u04db\3\2\2\2\u0522\u04dc\3\2\2\2\u0522\u04dd\3\2"+
		"\2\2\u0522\u04de\3\2\2\2\u0522\u04df\3\2\2\2\u0522\u04e0\3\2\2\2\u0522"+
		"\u04e1\3\2\2\2\u0522\u04e2\3\2\2\2\u0522\u04e3\3\2\2\2\u0522\u04e4\3\2"+
		"\2\2\u0522\u04e5\3\2\2\2\u0522\u04e6\3\2\2\2\u0522\u04e7\3\2\2\2\u0522"+
		"\u04e8\3\2\2\2\u0522\u04e9\3\2\2\2\u0522\u04ea\3\2\2\2\u0522\u04eb\3\2"+
		"\2\2\u0522\u04ec\3\2\2\2\u0522\u04ed\3\2\2\2\u0522\u04ee\3\2\2\2\u0522"+
		"\u04ef\3\2\2\2\u0522\u04f0\3\2\2\2\u0522\u04f1\3\2\2\2\u0522\u04f2\3\2"+
		"\2\2\u0522\u04f3\3\2\2\2\u0522\u04f4\3\2\2\2\u0522\u04f5\3\2\2\2\u0522"+
		"\u04f6\3\2\2\2\u0522\u04f7\3\2\2\2\u0522\u04f8\3\2\2\2\u0522\u04f9\3\2"+
		"\2\2\u0522\u04fa\3\2\2\2\u0522\u04fb\3\2\2\2\u0522\u04fc\3\2\2\2\u0522"+
		"\u04fd\3\2\2\2\u0522\u04fe\3\2\2\2\u0522\u04ff\3\2\2\2\u0522\u0500\3\2"+
		"\2\2\u0522\u0501\3\2\2\2\u0522\u0502\3\2\2\2\u0522\u0503\3\2\2\2\u0522"+
		"\u0504\3\2\2\2\u0522\u0505\3\2\2\2\u0522\u0506\3\2\2\2\u0522\u0507\3\2"+
		"\2\2\u0522\u0508\3\2\2\2\u0522\u0509\3\2\2\2\u0522\u050a\3\2\2\2\u0522"+
		"\u050b\3\2\2\2\u0522\u050c\3\2\2\2\u0522\u050d\3\2\2\2\u0522\u050e\3\2"+
		"\2\2\u0522\u050f\3\2\2\2\u0522\u0510\3\2\2\2\u0522\u0511\3\2\2\2\u0522"+
		"\u0512\3\2\2\2\u0522\u0513\3\2\2\2\u0522\u0514\3\2\2\2\u0522\u0515\3\2"+
		"\2\2\u0522\u0516\3\2\2\2\u0522\u0517\3\2\2\2\u0522\u0518\3\2\2\2\u0522"+
		"\u0519\3\2\2\2\u0522\u051a\3\2\2\2\u0522\u051b\3\2\2\2\u0522\u051c\3\2"+
		"\2\2\u0522\u051d\3\2\2\2\u0522\u051e\3\2\2\2\u0522\u051f\3\2\2\2\u0522"+
		"\u0520\3\2\2\2\u0522\u0521\3\2\2\2\u0523\r\3\2\2\2\u0524\u052a\5\u0284"+
		"\u0143\2\u0525\u052a\5\u0286\u0144\2\u0526\u052a\5\u0288\u0145\2\u0527"+
		"\u052a\5\u028a\u0146\2\u0528\u052a\5\u028c\u0147\2\u0529\u0524\3\2\2\2"+
		"\u0529\u0525\3\2\2\2\u0529\u0526\3\2\2\2\u0529\u0527\3\2\2\2\u0529\u0528"+
		"\3\2\2\2\u052a\17\3\2\2\2\u052b\u0538\5\22\n\2\u052c\u0538\5\24\13\2\u052d"+
		"\u0538\5\26\f\2\u052e\u0538\5\30\r\2\u052f\u0538\5\34\17\2\u0530\u0538"+
		"\5\32\16\2\u0531\u0538\5\36\20\2\u0532\u0538\5&\24\2\u0533\u0538\5(\25"+
		"\2\u0534\u0538\5*\26\2\u0535\u0538\5,\27\2\u0536\u0538\5.\30\2\u0537\u052b"+
		"\3\2\2\2\u0537\u052c\3\2\2\2\u0537\u052d\3\2\2\2\u0537\u052e\3\2\2\2\u0537"+
		"\u052f\3\2\2\2\u0537\u0530\3\2\2\2\u0537\u0531\3\2\2\2\u0537\u0532\3\2"+
		"\2\2\u0537\u0533\3\2\2\2\u0537\u0534\3\2\2\2\u0537\u0535\3\2\2\2\u0537"+
		"\u0536\3\2\2\2\u0538\21\3\2\2\2\u0539\u053b\7\r\2\2\u053a\u053c\7\u0357"+
		"\2\2\u053b\u053a\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u0540\3\2\2\2\u053d"+
		"\u053f\5\b\5\2\u053e\u053d\3\2\2\2\u053f\u0542\3\2\2\2\u0540\u053e\3\2"+
		"\2\2\u0540\u0541\3\2\2\2\u0541\u0543\3\2\2\2\u0542\u0540\3\2\2\2\u0543"+
		"\u0545\7<\2\2\u0544\u0546\7\u0357\2\2\u0545\u0544\3\2\2\2\u0545\u0546"+
		"\3\2\2\2\u0546\23\3\2\2\2\u0547\u0549\7\17\2\2\u0548\u054a\7\u0357\2\2"+
		"\u0549\u0548\3\2\2\2\u0549\u054a\3\2\2\2\u054a\25\3\2\2\2\u054b\u054d"+
		"\7!\2\2\u054c\u054e\7\u0357\2\2\u054d\u054c\3\2\2\2\u054d\u054e\3\2\2"+
		"\2\u054e\27\3\2\2\2\u054f\u0550\7N\2\2\u0550\u0552\5\u041e\u0210\2\u0551"+
		"\u0553\7\u0357\2\2\u0552\u0551\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u055a"+
		"\3\2\2\2\u0554\u0555\5\u041e\u0210\2\u0555\u0557\7\u0358\2\2\u0556\u0558"+
		"\7\u0357\2\2\u0557\u0556\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u055a\3\2\2"+
		"\2\u0559\u054f\3\2\2\2\u0559\u0554\3\2\2\2\u055a\31\3\2\2\2\u055b\u055d"+
		"\7\u008e\2\2\u055c\u055e\5\u0308\u0185\2\u055d\u055c\3\2\2\2\u055d\u055e"+
		"\3\2\2\2\u055e\u0560\3\2\2\2\u055f\u0561\7\u0357\2\2\u0560\u055f\3\2\2"+
		"\2\u0560\u0561\3\2\2\2\u0561\33\3\2\2\2\u0562\u0563\7V\2\2\u0563\u0564"+
		"\5\u0320\u0191\2\u0564\u0567\5\b\5\2\u0565\u0566\7;\2\2\u0566\u0568\5"+
		"\b\5\2\u0567\u0565\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u056a\3\2\2\2\u0569"+
		"\u056b\7\u0357\2\2\u056a\u0569\3\2\2\2\u056a\u056b\3\2\2\2\u056b\35\3"+
		"\2\2\2\u056c\u0573\7\u0243\2\2\u056d\u056e\5 \21\2\u056e\u056f\7\u0356"+
		"\2\2\u056f\u0570\5\"\22\2\u0570\u0571\7\u0356\2\2\u0571\u0572\5$\23\2"+
		"\u0572\u0574\3\2\2\2\u0573\u056d\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0576"+
		"\3\2\2\2\u0575\u0577\7\u0357\2\2\u0576\u0575\3\2\2\2\u0576\u0577\3\2\2"+
		"\2\u0577\37\3\2\2\2\u0578\u0579\t\2\2\2\u0579!\3\2\2\2\u057a\u057b\t\3"+
		"\2\2\u057b#\3\2\2\2\u057c\u057d\t\2\2\2\u057d%\3\2\2\2\u057e\u057f\7\r"+
		"\2\2\u057f\u0581\7\u024e\2\2\u0580\u0582\7\u0357\2\2\u0581\u0580\3\2\2"+
		"\2\u0581\u0582\3\2\2\2\u0582\u0584\3\2\2\2\u0583\u0585\5\b\5\2\u0584\u0583"+
		"\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0584\3\2\2\2\u0586\u0587\3\2\2\2\u0587"+
		"\u0588\3\2\2\2\u0588\u0589\7<\2\2\u0589\u058b\7\u024e\2\2\u058a\u058c"+
		"\7\u0357\2\2\u058b\u058a\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058d\3\2\2"+
		"\2\u058d\u058e\7\r\2\2\u058e\u0590\7\u00f7\2\2\u058f\u0591\7\u0357\2\2"+
		"\u0590\u058f\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0595\3\2\2\2\u0592\u0594"+
		"\5\b\5\2\u0593\u0592\3\2\2\2\u0594\u0597\3\2\2\2\u0595\u0593\3\2\2\2\u0595"+
		"\u0596\3\2\2\2\u0596\u0598\3\2\2\2\u0597\u0595\3\2\2\2\u0598\u0599\7<"+
		"\2\2\u0599\u059b\7\u00f7\2\2\u059a\u059c\7\u0357\2\2\u059b\u059a\3\2\2"+
		"\2\u059b\u059c\3\2\2\2\u059c\'\3\2\2\2\u059d\u059f\7\u00b9\2\2\u059e\u05a0"+
		"\5\u01c6\u00e4\2\u059f\u059e\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a2\3"+
		"\2\2\2\u05a1\u05a3\7\u0356\2\2\u05a2\u05a1\3\2\2\2\u05a2\u05a3\3\2\2\2"+
		"\u05a3\u05a6\3\2\2\2\u05a4\u05a5\t\4\2\2\u05a5\u05a7\5\u01cc\u00e7\2\u05a6"+
		"\u05a4\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a9\3\2\2\2\u05a8\u05aa\5\u0308"+
		"\u0185\2\u05a9\u05a8\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05ac\3\2\2\2\u05ab"+
		"\u05ad\7\u0357\2\2\u05ac\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad)\3\2"+
		"\2\2\u05ae\u05af\7\u00bc\2\2\u05af\u05b9\5\u0320\u0191\2\u05b0\u05ba\5"+
		"\b\5\2\u05b1\u05b3\7\17\2\2\u05b2\u05b4\7\u0357\2\2\u05b3\u05b2\3\2\2"+
		"\2\u05b3\u05b4\3\2\2\2\u05b4\u05ba\3\2\2\2\u05b5\u05b7\7!\2\2\u05b6\u05b8"+
		"\7\u0357\2\2\u05b7\u05b6\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05ba\3\2\2"+
		"\2\u05b9\u05b0\3\2\2\2\u05b9\u05b1\3\2\2\2\u05b9\u05b5\3\2\2\2\u05ba+"+
		"\3\2\2\2\u05bb\u05be\7\u0081\2\2\u05bc\u05bf\5\u0308\u0185\2\u05bd\u05bf"+
		"\7\u0338\2\2\u05be\u05bc\3\2\2\2\u05be\u05bd\3\2\2\2\u05bf\u05c4\3\2\2"+
		"\2\u05c0\u05c1\7\u0356\2\2\u05c1\u05c3\7\u033b\2\2\u05c2\u05c0\3\2\2\2"+
		"\u05c3\u05c6\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c8"+
		"\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c7\u05c9\7\u0357\2\2\u05c8\u05c7\3\2\2"+
		"\2\u05c8\u05c9\3\2\2\2\u05c9-\3\2\2\2\u05ca\u05cb\7\u0085\2\2\u05cb\u05cc"+
		"\7\u0354\2\2\u05cc\u05cd\t\5\2\2\u05cd\u05ce\7\u0356\2\2\u05ce\u05cf\5"+
		"\u0306\u0184\2\u05cf\u05d0\7\u0356\2\2\u05d0\u05d5\5\u0306\u0184\2\u05d1"+
		"\u05d2\7\u0356\2\2\u05d2\u05d4\5\u0306\u0184\2\u05d3\u05d1\3\2\2\2\u05d4"+
		"\u05d7\3\2\2\2\u05d5\u05d3\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d8\3\2"+
		"\2\2\u05d7\u05d5\3\2\2\2\u05d8\u05db\7\u0355\2\2\u05d9\u05da\7\u00bd\2"+
		"\2\u05da\u05dc\t\6\2\2\u05db\u05d9\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05de"+
		"\3\2\2\2\u05dd\u05df\7\u0357\2\2\u05de\u05dd\3\2\2\2\u05de\u05df\3\2\2"+
		"\2\u05df\u05eb\3\2\2\2\u05e0\u05e1\7\u0085\2\2\u05e1\u05e2\7\u033c\2\2"+
		"\u05e2\u05e7\t\7\2\2\u05e3\u05e4\7\u0356\2\2\u05e4\u05e6\t\5\2\2\u05e5"+
		"\u05e3\3\2\2\2\u05e6\u05e9\3\2\2\2\u05e7\u05e5\3\2\2\2\u05e7\u05e8\3\2"+
		"\2\2\u05e8\u05eb\3\2\2\2\u05e9\u05e7\3\2\2\2\u05ea\u05ca\3\2\2\2\u05ea"+
		"\u05e0\3\2\2\2\u05eb/\3\2\2\2\u05ec\u05ed\7\u0357\2\2\u05ed\61\3\2\2\2"+
		"\u05ee\u05ff\5\u027e\u0140\2\u05ef\u05ff\5\u0296\u014c\2\u05f0\u05ff\5"+
		"\u0282\u0142\2\u05f1\u05ff\5\u01b2\u00da\2\u05f2\u05ff\5\u01b0\u00d9\2"+
		"\u05f3\u05ff\5\u01a6\u00d4\2\u05f4\u05ff\5\u01aa\u00d6\2\u05f5\u05ff\5"+
		"\u028e\u0148\2\u05f6\u05ff\5\u01b4\u00db\2\u05f7\u05ff\5\u02a6\u0154\2"+
		"\u05f8\u05ff\5\u02c4\u0163\2\u05f9\u05ff\5\u02c6\u0164\2\u05fa\u05ff\5"+
		"\u02cc\u0167\2\u05fb\u05ff\5\u02ce\u0168\2\u05fc\u05ff\5\u02d0\u0169\2"+
		"\u05fd\u05ff\5\u02d2\u016a\2\u05fe\u05ee\3\2\2\2\u05fe\u05ef\3\2\2\2\u05fe"+
		"\u05f0\3\2\2\2\u05fe\u05f1\3\2\2\2\u05fe\u05f2\3\2\2\2\u05fe\u05f3\3\2"+
		"\2\2\u05fe\u05f4\3\2\2\2\u05fe\u05f5\3\2\2\2\u05fe\u05f6\3\2\2\2\u05fe"+
		"\u05f7\3\2\2\2\u05fe\u05f8\3\2\2\2\u05fe\u05f9\3\2\2\2\u05fe\u05fa\3\2"+
		"\2\2\u05fe\u05fb\3\2\2\2\u05fe\u05fc\3\2\2\2\u05fe\u05fd\3\2\2\2\u05ff"+
		"\63\3\2\2\2\u0600\u0601\7\5\2\2\u0601\u0602\7\u0275\2\2\u0602\u0603\7"+
		"\u0300\2\2\u0603\u0604\5\u041e\u0210\2\u0604\u060b\7\u00bd\2\2\u0605\u0607"+
		"\7\u0356\2\2\u0606\u0605\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0608\3\2\2"+
		"\2\u0608\u0609\7\u01a8\2\2\u0609\u060a\7\u0342\2\2\u060a\u060c\5\u041e"+
		"\u0210\2\u060b\u0606\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u0613\3\2\2\2\u060d"+
		"\u060f\7\u0356\2\2\u060e\u060d\3\2\2\2\u060e\u060f\3\2\2\2\u060f\u0610"+
		"\3\2\2\2\u0610\u0611\7\u02e8\2\2\u0611\u0612\7\u0342\2\2\u0612\u0614\7"+
		"\u033e\2\2\u0613\u060e\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u061b\3\2\2\2"+
		"\u0615\u0617\7\u0356\2\2\u0616\u0615\3\2\2\2\u0616\u0617\3\2\2\2\u0617"+
		"\u0618\3\2\2\2\u0618\u0619\7\u029a\2\2\u0619\u061a\7\u0342\2\2\u061a\u061c"+
		"\5\u041e\u0210\2\u061b\u0616\3\2\2\2\u061b\u061c\3\2\2\2\u061c\65\3\2"+
		"\2\2\u061d\u061e\7#\2\2\u061e\u061f\7\u0275\2\2\u061f\u0620\7\u0300\2"+
		"\2\u0620\u0621\5\u041e\u0210\2\u0621\u0628\7\u00bd\2\2\u0622\u0624\7\u0356"+
		"\2\2\u0623\u0622\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0625\3\2\2\2\u0625"+
		"\u0626\7\u02e8\2\2\u0626\u0627\7\u0342\2\2\u0627\u0629\7\u033e\2\2\u0628"+
		"\u0623\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u0630\3\2\2\2\u062a\u062c\7\u0356"+
		"\2\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u062d\3\2\2\2\u062d"+
		"\u062e\7\u029a\2\2\u062e\u062f\7\u0342\2\2\u062f\u0631\5\u041e\u0210\2"+
		"\u0630\u062b\3\2\2\2\u0630\u0631\3\2\2\2\u0631\67\3\2\2\2\u0632\u0633"+
		"\79\2\2\u0633\u0636\7\u00cd\2\2\u0634\u0635\7V\2\2\u0635\u0637\7A\2\2"+
		"\u0636\u0634\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u063b\3\2\2\2\u0638\u0639"+
		"\5\u041e\u0210\2\u0639\u063a\7\u034f\2\2\u063a\u063c\3\2\2\2\u063b\u0638"+
		"\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063e\5\u041e\u0210"+
		"\2\u063e9\3\2\2\2\u063f\u0640\79\2\2\u0640\u0641\7\u0275\2\2\u0641\u0642"+
		"\7\u0300\2\2\u0642\u0643\5\u041e\u0210\2\u0643;\3\2\2\2\u0644\u0645\5"+
		"> \2\u0645\u0646\5\u041e\u0210\2\u0646\u0647\5@!\2\u0647=\3\2\2\2\u0648"+
		"\u0649\7\5\2\2\u0649\u064a\7\u00d9\2\2\u064a?\3\2\2\2\u064b\u064d\5B\""+
		"\2\u064c\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u0650"+
		"\5X-\2\u064f\u064e\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0652\3\2\2\2\u0651"+
		"\u0653\5F$\2\u0652\u0651\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u0655\3\2\2"+
		"\2\u0654\u0656\5L\'\2\u0655\u0654\3\2\2\2\u0655\u0656\3\2\2\2\u0656A\3"+
		"\2\2\2\u0657\u065a\5D#\2\u0658\u065b\5\\/\2\u0659\u065b\5T+\2\u065a\u0658"+
		"\3\2\2\2\u065a\u0659\3\2\2\2\u065bC\3\2\2\2\u065c\u065d\7K\2\2\u065dE"+
		"\3\2\2\2\u065e\u065f\5J&\2\u065f\u0660\5H%\2\u0660G\3\2\2\2\u0661\u0664"+
		"\7\4\2\2\u0662\u0664\5n8\2\u0663\u0661\3\2\2\2\u0663\u0662\3\2\2\2\u0664"+
		"I\3\2\2\2\u0665\u0666\79\2\2\u0666K\3\2\2\2\u0667\u0668\5N(\2\u0668\u0669"+
		"\5P)\2\u0669M\3\2\2\2\u066a\u066b\7\3\2\2\u066b\u066c\7E\2\2\u066c\u066d"+
		"\7K\2\2\u066dO\3\2\2\2\u066e\u0672\5R*\2\u066f\u0670\5V,\2\u0670\u0671"+
		"\5\u041e\u0210\2\u0671\u0673\3\2\2\2\u0672\u066f\3\2\2\2\u0672\u0673\3"+
		"\2\2\2\u0673Q\3\2\2\2\u0674\u0675\7\u033e\2\2\u0675S\3\2\2\2\u0676\u0677"+
		"\5V,\2\u0677\u0678\5\u041e\u0210\2\u0678U\3\2\2\2\u0679\u067a\7\b\2\2"+
		"\u067aW\3\2\2\2\u067b\u067c\5Z.\2\u067c\u067d\5^\60\2\u067dY\3\2\2\2\u067e"+
		"\u067f\7\u00bd\2\2\u067f[\3\2\2\2\u0680\u0684\5`\61\2\u0681\u0684\5j\66"+
		"\2\u0682\u0684\7\u033e\2\2\u0683\u0680\3\2\2\2\u0683\u0681\3\2\2\2\u0683"+
		"\u0682\3\2\2\2\u0684]\3\2\2\2\u0685\u0686\b\60\1\2\u0686\u0687\7\u02e9"+
		"\2\2\u0687\u0688\7\u0342\2\2\u0688\u068f\t\b\2\2\u0689\u068a\7\u032e\2"+
		"\2\u068a\u068b\7\u0342\2\2\u068b\u068f\t\t\2\2\u068c\u068d\7\u0328\2\2"+
		"\u068d\u068f\7\u0111\2\2\u068e\u0685\3\2\2\2\u068e\u0689\3\2\2\2\u068e"+
		"\u068c\3\2\2\2\u068f\u0694\3\2\2\2\u0690\u0691\f\3\2\2\u0691\u0693\7\u0356"+
		"\2\2\u0692\u0690\3\2\2\2\u0693\u0696\3\2\2\2\u0694\u0692\3\2\2\2\u0694"+
		"\u0695\3\2\2\2\u0695_\3\2\2\2\u0696\u0694\3\2\2\2\u0697\u0698\5d\63\2"+
		"\u0698\u0699\5b\62\2\u0699\u069a\5f\64\2\u069aa\3\2\2\2\u069b\u069c\5"+
		"\u041e\u0210\2\u069cc\3\2\2\2\u069d\u069e\7\67\2\2\u069ee\3\2\2\2\u069f"+
		"\u06a0\5h\65\2\u06a0\u06a1\5f\64\2\u06a1\u06a4\3\2\2\2\u06a2\u06a4\5\u041e"+
		"\u0210\2\u06a3\u069f\3\2\2\2\u06a3\u06a2\3\2\2\2\u06a4g\3\2\2\2\u06a5"+
		"\u06a6\7\13\2\2\u06a6i\3\2\2\2\u06a7\u06a8\5l\67\2\u06a8\u06a9\5f\64\2"+
		"\u06a9k\3\2\2\2\u06aa\u06ab\7\u012c\2\2\u06abm\3\2\2\2\u06ac\u06ad\5p"+
		"9\2\u06ad\u06ae\5j\66\2\u06ae\u06af\7\u0339\2\2\u06af\u06b0\7\u0356\2"+
		"\2\u06b0\u06b3\3\2\2\2\u06b1\u06b3\5j\66\2\u06b2\u06ac\3\2\2\2\u06b2\u06b1"+
		"\3\2\2\2\u06b3o\3\2\2\2\u06b4\u06b5\7\u0339\2\2\u06b5q\3\2\2\2\u06b6\u06b7"+
		"\7#\2\2\u06b7\u06b8\7\u00d9\2\2\u06b8\u06bb\5\u041e\u0210\2\u06b9\u06ba"+
		"\7\n\2\2\u06ba\u06bc\5\u041e\u0210\2\u06bb\u06b9\3\2\2\2\u06bb\u06bc\3"+
		"\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06c2\7K\2\2\u06be\u06c0\7\u0356\2\2"+
		"\u06bf\u06be\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c3"+
		"\t\n\2\2\u06c2\u06bf\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06c2\3\2\2\2\u06c4"+
		"\u06c5\3\2\2\2\u06c5\u06ca\3\2\2\2\u06c6\u06c7\7\u00bd\2\2\u06c7\u06c8"+
		"\7\u02e9\2\2\u06c8\u06c9\7\u0342\2\2\u06c9\u06cb\t\b\2\2\u06ca\u06c6\3"+
		"\2\2\2\u06ca\u06cb\3\2\2\2\u06cbs\3\2\2\2\u06cc\u06cd\79\2\2\u06cd\u06d0"+
		"\7\u00d9\2\2\u06ce\u06cf\7V\2\2\u06cf\u06d1\7A\2\2\u06d0\u06ce\3\2\2\2"+
		"\u06d0\u06d1\3\2\2\2\u06d1\u06d6\3\2\2\2\u06d2\u06d4\7\u0356\2\2\u06d3"+
		"\u06d2\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06d7\5\u041e"+
		"\u0210\2\u06d6\u06d3\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d6\3\2\2\2\u06d8"+
		"\u06d9\3\2\2\2\u06d9\u06dd\3\2\2\2\u06da\u06db\7\u00bd\2\2\u06db\u06dc"+
		"\7\u01af\2\2\u06dc\u06de\7\u0122\2\2\u06dd\u06da\3\2\2\2\u06dd\u06de\3"+
		"\2\2\2\u06deu\3\2\2\2\u06df\u06e0\5x=\2\u06e0\u06e5\5\u041e\u0210\2\u06e1"+
		"\u06e6\5z>\2\u06e2\u06e3\7\u01f9\2\2\u06e3\u06e4\7\u01db\2\2\u06e4\u06e6"+
		"\7_\2\2\u06e5\u06e1\3\2\2\2\u06e5\u06e2\3\2\2\2\u06e6w\3\2\2\2\u06e7\u06e8"+
		"\7\5\2\2\u06e8\u06e9\7\u0276\2\2\u06e9\u06ea\7_\2\2\u06eay\3\2\2\2\u06eb"+
		"\u06ec\5|?\2\u06ec\u06ef\5~@\2\u06ed\u06ee\7\u0356\2\2\u06ee\u06f0\5~"+
		"@\2\u06ef\u06ed\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1"+
		"\u06f2\7\u0355\2\2\u06f2{\3\2\2\2\u06f3\u06f4\7\u00bd\2\2\u06f4\u06f5"+
		"\7\u01db\2\2\u06f5\u06f6\7_\2\2\u06f6\u06f7\7\u0354\2\2\u06f7}\3\2\2\2"+
		"\u06f8\u06f9\7\u011a\2\2\u06f9\u06fa\7\22\2\2\u06fa\u06fb\7\u02e8\2\2"+
		"\u06fb\u06fc\7\u0342\2\2\u06fc\u0703\7\u033e\2\2\u06fd\u06fe\7\u0135\2"+
		"\2\u06fe\u06ff\7\22\2\2\u06ff\u0700\7\u02e8\2\2\u0700\u0701\7\u0342\2"+
		"\2\u0701\u0703\7\u033e\2\2\u0702\u06f8\3\2\2\2\u0702\u06fd\3\2\2\2\u0703"+
		"\177\3\2\2\2\u0704\u0705\7#\2\2\u0705\u0706\7\u0276\2\2\u0706\u0707\7"+
		"_\2\2\u0707\u070a\5\u041e\u0210\2\u0708\u0709\7\n\2\2\u0709\u070b\5\u041e"+
		"\u0210\2\u070a\u0708\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u0719\3\2\2\2\u070c"+
		"\u0717\7K\2\2\u070d\u070e\7E\2\2\u070e\u070f\7\u0342\2\2\u070f\u0718\7"+
		"\u033e\2\2\u0710\u0711\7\u02a4\2\2\u0711\u0712\7\u0342\2\2\u0712\u0718"+
		"\7\u033e\2\2\u0713\u0714\7\u00d9\2\2\u0714\u0718\5\u041e\u0210\2\u0715"+
		"\u0716\7\u01e0\2\2\u0716\u0718\5\u041e\u0210\2\u0717\u070d\3\2\2\2\u0717"+
		"\u0710\3\2\2\2\u0717\u0713\3\2\2\2\u0717\u0715\3\2\2\2\u0718\u071a\3\2"+
		"\2\2\u0719\u070c\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u0727\3\2\2\2\u071b"+
		"\u0725\7\u00bd\2\2\u071c\u071d\7\u00ce\2\2\u071d\u071e\7\u0342\2\2\u071e"+
		"\u0726\t\13\2\2\u071f\u0720\7\u01e1\2\2\u0720\u0721\7\u0342\2\2\u0721"+
		"\u0726\7\u033e\2\2\u0722\u0723\7\u010b\2\2\u0723\u0724\7\u0342\2\2\u0724"+
		"\u0726\t\f\2\2\u0725\u071c\3\2\2\2\u0725\u071f\3\2\2\2\u0725\u0722\3\2"+
		"\2\2\u0726\u0728\3\2\2\2\u0727\u071b\3\2\2\2\u0727\u0728\3\2\2\2\u0728"+
		"\u072e\3\2\2\2\u0729\u072a\7\u0135\2\2\u072a\u072b\7\22\2\2\u072b\u072c"+
		"\7\u02e8\2\2\u072c\u072d\7\u0342\2\2\u072d\u072f\7\u033e\2\2\u072e\u0729"+
		"\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0081\3\2\2\2\u0730\u0731\79\2\2\u0731"+
		"\u0732\7\u0276\2\2\u0732\u0733\7_\2\2\u0733\u0737\5\u041e\u0210\2\u0734"+
		"\u0735\7\u01f9\2\2\u0735\u0736\7\u01e0\2\2\u0736\u0738\7_\2\2\u0737\u0734"+
		"\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u0083\3\2\2\2\u0739\u073d\5\u008cG"+
		"\2\u073a\u073b\5\u0094K\2\u073b\u073c\5\u008aF\2\u073c\u073e\3\2\2\2\u073d"+
		"\u073a\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0740\5\u03d8"+
		"\u01ed\2\u0740\u0741\5\u0088E\2\u0741\u0742\5\u0086D\2\u0742\u0085\3\2"+
		"\2\2\u0743\u0747\5\u041e\u0210\2\u0744\u0745\7\u0097\2\2\u0745\u0747\7"+
		"\u01c9\2\2\u0746\u0743\3\2\2\2\u0746\u0744\3\2\2\2\u0747\u0087\3\2\2\2"+
		"\u0748\u0749\7\u00a8\2\2\u0749\u0089\3\2\2\2\u074a\u074b\7\u0358\2\2\u074b"+
		"\u074c\7\u0358\2\2\u074c\u008b\3\2\2\2\u074d\u074e\7\5\2\2\u074e\u074f"+
		"\7\n\2\2\u074f\u0750\7p\2\2\u0750\u008d\3\2\2\2\u0751\u0755\5\u008cG\2"+
		"\u0752\u0753\5\u0096L\2\u0753\u0754\5\u008aF\2\u0754\u0756\3\2\2\2\u0755"+
		"\u0752\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0757\3\2\2\2\u0757\u0758\5\u03d8"+
		"\u01ed\2\u0758\u0759\5\u0088E\2\u0759\u075a\5\u0086D\2\u075a\u008f\3\2"+
		"\2\2\u075b\u075f\5\u008cG\2\u075c\u075d\5\u0098M\2\u075d\u075e\5\u008a"+
		"F\2\u075e\u0760\3\2\2\2\u075f\u075c\3\2\2\2\u075f\u0760\3\2\2\2\u0760"+
		"\u0761\3\2\2\2\u0761\u0762\5\u03da\u01ee\2\u0762\u0763\5\u0088E\2\u0763"+
		"\u0764\5\u0086D\2\u0764\u0091\3\2\2\2\u0765\u0769\5\u008cG\2\u0766\u0767"+
		"\5\u009aN\2\u0767\u0768\5\u008aF\2\u0768\u076a\3\2\2\2\u0769\u0766\3\2"+
		"\2\2\u0769\u076a\3\2\2\2\u076a\u076b\3\2\2\2\u076b\u076c\5\u03dc\u01ef"+
		"\2\u076c\u076d\5\u0088E\2\u076d\u076e\5\u0086D\2\u076e\u0093\3\2\2\2\u076f"+
		"\u0792\7\u01bd\2\2\u0770\u0792\7\u00d9\2\2\u0771\u0772\7\u0276\2\2\u0772"+
		"\u0792\7_\2\2\u0773\u0774\7\u00e5\2\2\u0774\u0792\7P\2\2\u0775\u0792\7"+
		"\u0285\2\2\u0776\u0792\7\u0291\2\2\u0777\u0792\7\u0251\2\2\u0778\u0792"+
		"\7+\2\2\u0779\u0792\7\u029f\2\2\u077a\u077b\7\u0153\2\2\u077b\u0792\7"+
		"\u00f6\2\2\u077c\u077d\7\u0153\2\2\u077d\u0792\7\u0234\2\2\u077e\u077f"+
		"\7\u019b\2\2\u077f\u0792\7\u0251\2\2\u0780\u0781\7\u01f7\2\2\u0781\u0782"+
		"\7\u030b\2\2\u0782\u0792\7\u00ed\2\2\u0783\u0792\7\u0300\2\2\u0784\u0792"+
		"\7\u0208\2\2\u0785\u0792\7\u0097\2\2\u0786\u0787\7\u0212\2\2\u0787\u0788"+
		"\7\u01df\2\2\u0788\u0792\7\u017e\2\2\u0789\u078a\7\u030a\2\2\u078a\u0792"+
		"\7\u0300\2\2\u078b\u0792\7\u030b\2\2\u078c\u078d\7\u023b\2\2\u078d\u0792"+
		"\7_\2\2\u078e\u078f\7\u0266\2\2\u078f\u0790\7\u0097\2\2\u0790\u0792\7"+
		"\u00fd\2\2\u0791\u076f\3\2\2\2\u0791\u0770\3\2\2\2\u0791\u0771\3\2\2\2"+
		"\u0791\u0773\3\2\2\2\u0791\u0775\3\2\2\2\u0791\u0776\3\2\2\2\u0791\u0777"+
		"\3\2\2\2\u0791\u0778\3\2\2\2\u0791\u0779\3\2\2\2\u0791\u077a\3\2\2\2\u0791"+
		"\u077c\3\2\2\2\u0791\u077e\3\2\2\2\u0791\u0780\3\2\2\2\u0791\u0783\3\2"+
		"\2\2\u0791\u0784\3\2\2\2\u0791\u0785\3\2\2\2\u0791\u0786\3\2\2\2\u0791"+
		"\u0789\3\2\2\2\u0791\u078b\3\2\2\2\u0791\u078c\3\2\2\2\u0791\u078e\3\2"+
		"\2\2\u0792\u0095\3\2\2\2\u0793\u07a9\7\u01bd\2\2\u0794\u07a9\7\u00d9\2"+
		"\2\u0795\u0796\7\u0276\2\2\u0796\u07a9\7_\2\2\u0797\u07a9\7\u0285\2\2"+
		"\u0798\u07a9\7\u0251\2\2\u0799\u07a9\7+\2\2\u079a\u079b\7\u0153\2\2\u079b"+
		"\u07a9\7\u00f6\2\2\u079c\u079d\7\u0153\2\2\u079d\u07a9\7\u0234\2\2\u079e"+
		"\u07a9\7\u0300\2\2\u079f\u07a9\7\u0097\2\2\u07a0\u07a1\7\u0212\2\2\u07a1"+
		"\u07a2\7\u01df\2\2\u07a2\u07a9\7\u017e\2\2\u07a3\u07a4\7\u023b\2\2\u07a4"+
		"\u07a9\7_\2\2\u07a5\u07a6\7\u0266\2\2\u07a6\u07a7\7\u0097\2\2\u07a7\u07a9"+
		"\7\u00fd\2\2\u07a8\u0793\3\2\2\2\u07a8\u0794\3\2\2\2\u07a8\u0795\3\2\2"+
		"\2\u07a8\u0797\3\2\2\2\u07a8\u0798\3\2\2\2\u07a8\u0799\3\2\2\2\u07a8\u079a"+
		"\3\2\2\2\u07a8\u079c\3\2\2\2\u07a8\u079e\3\2\2\2\u07a8\u079f\3\2\2\2\u07a8"+
		"\u07a0\3\2\2\2\u07a8\u07a3\3\2\2\2\u07a8\u07a5\3\2\2\2\u07a9\u0097\3\2"+
		"\2\2\u07aa\u07ab\t\r\2\2\u07ab\u0099\3\2\2\2\u07ac\u07ad\t\16\2\2\u07ad"+
		"\u009b\3\2\2\2\u07ae\u07af\79\2\2\u07af\u07b0\7\u00e5\2\2\u07b0\u07b1"+
		"\7P\2\2\u07b1\u07b2\5\u041e\u0210\2\u07b2\u009d\3\2\2\2\u07b3\u07b4\5"+
		"\u00a0Q\2\u07b4\u07b5\5\u00a2R\2\u07b5\u009f\3\2\2\2\u07b6\u07b7\7\5\2"+
		"\2\u07b7\u07b8\7\u00e5\2\2\u07b8\u07b9\7P\2\2\u07b9\u07ba\5\u041e\u0210"+
		"\2\u07ba\u00a1\3\2\2\2\u07bb\u07bc\7\u009e\2\2\u07bc\u07cc\7\u0354\2\2"+
		"\u07bd\u07be\7\u0279\2\2\u07be\u07bf\7\u0342\2\2\u07bf\u07cd\t\17\2\2"+
		"\u07c0\u07c1\7\u0141\2\2\u07c1\u07c2\7\u0342\2\2\u07c2\u07cd\7\u033c\2"+
		"\2\u07c3\u07c4\7\u015f\2\2\u07c4\u07c5\7\u0342\2\2\u07c5\u07cd\7\u033c"+
		"\2\2\u07c6\u07c7\7\u0119\2\2\u07c7\u07c8\7\u0342\2\2\u07c8\u07cd\t\t\2"+
		"\2\u07c9\u07ca\7\u0200\2\2\u07ca\u07cb\7\u0342\2\2\u07cb\u07cd\7\u033c"+
		"\2\2\u07cc\u07bd\3\2\2\2\u07cc\u07c0\3\2\2\2\u07cc\u07c3\3\2\2\2\u07cc"+
		"\u07c6\3\2\2\2\u07cc\u07c9\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u091f\7\u0355"+
		"\2\2\u07cf\u07d0\7\3\2\2\u07d0\u07d1\7+\2\2\u07d1\u091f\5\u041e\u0210"+
		"\2\u07d2\u07d3\7\u01f9\2\2\u07d3\u07d4\7+\2\2\u07d4\u091f\5\u041e\u0210"+
		"\2\u07d5\u07d6\7\3\2\2\u07d6\u07d7\7\u01fc\2\2\u07d7\u07d8\7p\2\2\u07d8"+
		"\u07d9\7\u033e\2\2\u07d9\u07da\7\u00bd\2\2\u07da\u07de\7\u0354\2\2\u07db"+
		"\u07dc\7\u0136\2\2\u07dc\u07dd\7\u0342\2\2\u07dd\u07df\7\u033e\2\2\u07de"+
		"\u07db\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e6\3\2\2\2\u07e0\u07e2\7\u0356"+
		"\2\2\u07e1\u07e0\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3"+
		"\u07e4\7\u027b\2\2\u07e4\u07e5\7\u0342\2\2\u07e5\u07e7\t\20\2\2\u07e6"+
		"\u07e1\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u07ee\3\2\2\2\u07e8\u07ea\7\u0356"+
		"\2\2\u07e9\u07e8\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb"+
		"\u07ec\7\u013f\2\2\u07ec\u07ed\7\u0342\2\2\u07ed\u07ef\t\21\2\2\u07ee"+
		"\u07e9\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u07f6\3\2\2\2\u07f0\u07f2\7\u0356"+
		"\2\2\u07f1\u07f0\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3"+
		"\u07f4\7\u021a\2\2\u07f4\u07f5\7\u0342\2\2\u07f5\u07f7\t\21\2\2\u07f6"+
		"\u07f1\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07fe\3\2\2\2\u07f8\u07fa\7\u0356"+
		"\2\2\u07f9\u07f8\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb"+
		"\u07fc\7\u00e7\2\2\u07fc\u07fd\7\u0342\2\2\u07fd\u07ff\7\u033c\2\2\u07fe"+
		"\u07f9\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0809\3\2\2\2\u0800\u0802\7\u0356"+
		"\2\2\u0801\u0800\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0803\3\2\2\2\u0803"+
		"\u0804\7\u01d7\2\2\u0804\u0805\7\u0354\2\2\u0805\u0806\7\u0270\2\2\u0806"+
		"\u0807\7\u0342\2\2\u0807\u0808\t\22\2\2\u0808\u080a\7\u0355\2\2\u0809"+
		"\u0801\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u0814\3\2\2\2\u080b\u080d\7\u0356"+
		"\2\2\u080c\u080b\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080e\3\2\2\2\u080e"+
		"\u080f\7\u0215\2\2\u080f\u0810\7\u0354\2\2\u0810\u0811\7\u0270\2\2\u0811"+
		"\u0812\7\u0342\2\2\u0812\u0813\7\u01ec\2\2\u0813\u0815\7\u0355\2\2\u0814"+
		"\u080c\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0816\3\2\2\2\u0816\u091f\7\u0355"+
		"\2\2\u0817\u0818\7\u0215\2\2\u0818\u0821\7\u0354\2\2\u0819\u081a\7\u0270"+
		"\2\2\u081a\u081b\7\u0342\2\2\u081b\u0822\t\23\2\2\u081c\u081d\7\u01ed"+
		"\2\2\u081d\u081e\7\u0342\2\2\u081e\u081f\7\u0354\2\2\u081f\u0820\7\u033e"+
		"\2\2\u0820\u0822\7\u0355\2\2\u0821\u0819\3\2\2\2\u0821\u081c\3\2\2\2\u0822"+
		"\u091f\3\2\2\2\u0823\u0824\7\u01d7\2\2\u0824\u083b\7\u0354\2\2\u0825\u0826"+
		"\7\u0270\2\2\u0826\u0827\7\u0342\2\2\u0827\u083c\t\23\2\2\u0828\u0829"+
		"\7\u01ed\2\2\u0829\u082a\7\u0342\2\2\u082a\u0835\7\u0354\2\2\u082b\u082d"+
		"\7\u0356\2\2\u082c\u082b\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082e\3\2\2"+
		"\2\u082e\u0830\7\u033e\2\2\u082f\u082c\3\2\2\2\u0830\u0833\3\2\2\2\u0831"+
		"\u082f\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0836\3\2\2\2\u0833\u0831\3\2"+
		"\2\2\u0834\u0836\7\u02da\2\2\u0835\u0831\3\2\2\2\u0835\u0834\3\2\2\2\u0836"+
		"\u0837\3\2\2\2\u0837\u083c\7\u0355\2\2\u0838\u0839\7\u0221\2\2\u0839\u083a"+
		"\7\u0342\2\2\u083a\u083c\7\u033c\2\2\u083b\u0825\3\2\2\2\u083b\u0828\3"+
		"\2\2\2\u083b\u0838\3\2\2\2\u083c\u091f\3\2\2\2\u083d\u083e\7\u01a5\2\2"+
		"\u083e\u083f\7\u01fc\2\2\u083f\u0840\7p\2\2\u0840\u087a\7\u033e\2\2\u0841"+
		"\u0842\7\u00bd\2\2\u0842\u0852\7\u0354\2\2\u0843\u0844\7\u0136\2\2\u0844"+
		"\u0845\7\u0342\2\2\u0845\u0853\7\u033e\2\2\u0846\u0847\7\u027b\2\2\u0847"+
		"\u0848\7\u0342\2\2\u0848\u0853\t\20\2\2\u0849\u084a\7\u013f\2\2\u084a"+
		"\u084b\7\u0342\2\2\u084b\u0853\t\21\2\2\u084c\u084d\7\u021a\2\2\u084d"+
		"\u084e\7\u0342\2\2\u084e\u0853\t\21\2\2\u084f\u0850\7\u00e7\2\2\u0850"+
		"\u0851\7\u0342\2\2\u0851\u0853\7\u033c\2\2\u0852\u0843\3\2\2\2\u0852\u0846"+
		"\3\2\2\2\u0852\u0849\3\2\2\2\u0852\u084c\3\2\2\2\u0852\u084f\3\2\2\2\u0853"+
		"\u087b\3\2\2\2\u0854\u0855\7\u0215\2\2\u0855\u085e\7\u0354\2\2\u0856\u0857"+
		"\7\u0270\2\2\u0857\u0858\7\u0342\2\2\u0858\u085f\t\23\2\2\u0859\u085a"+
		"\7\u01ed\2\2\u085a\u085b\7\u0342\2\2\u085b\u085c\7\u0354\2\2\u085c\u085d"+
		"\7\u033e\2\2\u085d\u085f\7\u0355\2\2\u085e\u0856\3\2\2\2\u085e\u0859\3"+
		"\2\2\2\u085f\u087b\3\2\2\2\u0860\u0861\7\u01d7\2\2\u0861\u0878\7\u0354"+
		"\2\2\u0862\u0863\7\u0270\2\2\u0863\u0864\7\u0342\2\2\u0864\u0879\t\23"+
		"\2\2\u0865\u0866\7\u01ed\2\2\u0866\u0867\7\u0342\2\2\u0867\u0872\7\u0354"+
		"\2\2\u0868\u086a\7\u0356\2\2\u0869\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086a"+
		"\u086b\3\2\2\2\u086b\u086d\7\u033e\2\2\u086c\u0869\3\2\2\2\u086d\u0870"+
		"\3\2\2\2\u086e\u086c\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u0873\3\2\2\2\u0870"+
		"\u086e\3\2\2\2\u0871\u0873\7\u02da\2\2\u0872\u086e\3\2\2\2\u0872\u0871"+
		"\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0879\7\u0355\2\2\u0875\u0876\7\u0221"+
		"\2\2\u0876\u0877\7\u0342\2\2\u0877\u0879\7\u033c\2\2\u0878\u0862\3\2\2"+
		"\2\u0878\u0865\3\2\2\2\u0878\u0875\3\2\2\2\u0879\u087b\3\2\2\2\u087a\u0841"+
		"\3\2\2\2\u087a\u0854\3\2\2\2\u087a\u0860\3\2\2\2\u087b\u087c\3\2\2\2\u087c"+
		"\u091f\7\u0355\2\2\u087d\u087e\7\u01f9\2\2\u087e\u087f\7\u01fc\2\2\u087f"+
		"\u0880\7p\2\2\u0880\u091f\7\u033e\2\2\u0881\u091f\7^\2\2\u0882\u0883\7"+
		"^\2\2\u0883\u0884\7\u00e5\2\2\u0884\u0885\7P\2\2\u0885\u089c\7p\2\2\u0886"+
		"\u0888\7\u0356\2\2\u0887\u0886\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u0889"+
		"\3\2\2\2\u0889\u088a\7\u033e\2\2\u088a\u088b\7\u00bd\2\2\u088b\u088c\7"+
		"\u0354\2\2\u088c\u088d\7\u0180\2\2\u088d\u088e\7\u0342\2\2\u088e\u088f"+
		"\7\u033e\2\2\u088f\u0890\7\u0356\2\2\u0890\u0891\7\u027b\2\2\u0891\u0892"+
		"\7\u0342\2\2\u0892\u0893\t\20\2\2\u0893\u0894\7\u0356\2\2\u0894\u0895"+
		"\7\u013f\2\2\u0895\u0896\7\u0342\2\2\u0896\u0897\7\u0189\2\2\u0897\u0898"+
		"\7\u0356\2\2\u0898\u0899\7\u021a\2\2\u0899\u089a\7\u0342\2\2\u089a\u089b"+
		"\t\21\2\2\u089b\u089d\7\u0355\2\2\u089c\u0887\3\2\2\2\u089d\u089e\3\2"+
		"\2\2\u089e\u089c\3\2\2\2\u089e\u089f\3\2\2\2\u089f\u091f\3\2\2\2\u08a0"+
		"\u08a1\7\u01a5\2\2\u08a1\u08a2\7\u00e5\2\2\u08a2\u08a3\7P\2\2\u08a3\u08c6"+
		"\7p\2\2\u08a4\u08a6\7\u0356\2\2\u08a5\u08a4\3\2\2\2\u08a5\u08a6\3\2\2"+
		"\2\u08a6\u08a7\3\2\2\2\u08a7\u08a8\7\u033e\2\2\u08a8\u08a9\7\u00bd\2\2"+
		"\u08a9\u08aa\7\u0354\2\2\u08aa\u08ab\7\u0180\2\2\u08ab\u08ac\7\u0342\2"+
		"\2\u08ac\u08b3\7\u033e\2\2\u08ad\u08af\7\u0356\2\2\u08ae\u08ad\3\2\2\2"+
		"\u08ae\u08af\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08b1\7\u027b\2\2\u08b1"+
		"\u08b2\7\u0342\2\2\u08b2\u08b4\t\20\2\2\u08b3\u08ae\3\2\2\2\u08b3\u08b4"+
		"\3\2\2\2\u08b4\u08bb\3\2\2\2\u08b5\u08b7\7\u0356\2\2\u08b6\u08b5\3\2\2"+
		"\2\u08b6\u08b7\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08b9\7\u013f\2\2\u08b9"+
		"\u08ba\7\u0342\2\2\u08ba\u08bc\7\u0189\2\2\u08bb\u08b6\3\2\2\2\u08bb\u08bc"+
		"\3\2\2\2\u08bc\u08c3\3\2\2\2\u08bd\u08bf\7\u0356\2\2\u08be\u08bd\3\2\2"+
		"\2\u08be\u08bf\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0\u08c1\7\u021a\2\2\u08c1"+
		"\u08c2\7\u0342\2\2\u08c2\u08c4\t\21\2\2\u08c3\u08be\3\2\2\2\u08c3\u08c4"+
		"\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c7\7\u0355\2\2\u08c6\u08a5\3\2\2"+
		"\2\u08c7\u08c8\3\2\2\2\u08c8\u08c6\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9\u091f"+
		"\3\2\2\2\u08ca\u08cb\7O\2\2\u08cb\u08cc\7#\2\2\u08cc\u08cd\7\7\2\2\u08cd"+
		"\u091f\7+\2\2\u08ce\u08cf\7\61\2\2\u08cf\u08d0\7#\2\2\u08d0\u08d1\7\7"+
		"\2\2\u08d1\u091f\7+\2\2\u08d2\u091f\7\u02a8\2\2\u08d3\u091f\7\u014e\2"+
		"\2\u08d4\u08d5\7\3\2\2\u08d5\u08d6\7\u017f\2\2\u08d6\u08d7\7\u033e\2\2"+
		"\u08d7\u08fb\7\u0354\2\2\u08d8\u08d9\7\u00bd\2\2\u08d9\u08da\7\u0126\2"+
		"\2\u08da\u08db\7p\2\2\u08db\u08dc\7\u0354\2\2\u08dc\u08dd\5\u00a4S\2\u08dd"+
		"\u08de\5\u00a4S\2\u08de\u08df\7\u0355\2\2\u08df\u08fc\3\2\2\2\u08e0\u08e1"+
		"\7\u00bd\2\2\u08e1\u08e2\7\u016f\2\2\u08e2\u08f0\7\u0354\2\2\u08e3\u08e5"+
		"\7\u0356\2\2\u08e4\u08e3\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e6\3\2\2"+
		"\2\u08e6\u08ec\7\u0354\2\2\u08e7\u08e8\5\u00a4S\2\u08e8\u08e9\7\u0356"+
		"\2\2\u08e9\u08ea\5\u00a4S\2\u08ea\u08ed\3\2\2\2\u08eb\u08ed\5\u00a6T\2"+
		"\u08ec\u08e7\3\2\2\2\u08ec\u08eb\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u08ef"+
		"\7\u0355\2\2\u08ef\u08f1\3\2\2\2\u08f0\u08e4\3\2\2\2\u08f1\u08f2\3\2\2"+
		"\2\u08f2\u08f0\3\2\2\2\u08f2\u08f3\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u08f9"+
		"\7\u0355\2\2\u08f5\u08f6\7\u0356\2\2\u08f6\u08f7\7\u01d5\2\2\u08f7\u08f8"+
		"\7\u0342\2\2\u08f8\u08fa\7\u033c\2\2\u08f9\u08f5\3\2\2\2\u08f9\u08fa\3"+
		"\2\2\2\u08fa\u08fc\3\2\2\2\u08fb\u08d8\3\2\2\2\u08fb\u08e0\3\2\2\2\u08fc"+
		"\u08fd\3\2\2\2\u08fd\u08fe\7\u0355\2\2\u08fe\u091f\3\2\2\2\u08ff\u0900"+
		"\7\u01a5\2\2\u0900\u090f\7\u017f\2\2\u0901\u0902\7\3\2\2\u0902\u0903\7"+
		"\u016f\2\2\u0903\u0908\7\u0354\2\2\u0904\u0905\5\u00a4S\2\u0905\u0906"+
		"\5\u00a4S\2\u0906\u0909\3\2\2\2\u0907\u0909\5\u00a6T\2\u0908\u0904\3\2"+
		"\2\2\u0908\u0907\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u090b\7\u0355\2\2\u090b"+
		"\u0910\3\2\2\2\u090c\u090d\7\u01d5\2\2\u090d\u090e\7\u0342\2\2\u090e\u0910"+
		"\7\u033c\2\2\u090f\u0901\3\2\2\2\u090f\u090c\3\2\2\2\u0910\u091f\3\2\2"+
		"\2\u0911\u0912\7\u02fb\2\2\u0912\u0913\7\u017f\2\2\u0913\u091f\7\u033e"+
		"\2\2\u0914\u0915\7\u01f9\2\2\u0915\u0916\7\u017f\2\2\u0916\u091f\7\u033e"+
		"\2\2\u0917\u091f\7\u01be\2\2\u0918\u0919\7\u00bd\2\2\u0919\u091a\7\u0354"+
		"\2\2\u091a\u091b\7\u029d\2\2\u091b\u091c\7\u0342\2\2\u091c\u091d\7\u02eb"+
		"\2\2\u091d\u091f\7\u0355\2\2\u091e\u07bb\3\2\2\2\u091e\u07cf\3\2\2\2\u091e"+
		"\u07d2\3\2\2\2\u091e\u07d5\3\2\2\2\u091e\u0817\3\2\2\2\u091e\u0823\3\2"+
		"\2\2\u091e\u083d\3\2\2\2\u091e\u087d\3\2\2\2\u091e\u0881\3\2\2\2\u091e"+
		"\u0882\3\2\2\2\u091e\u08a0\3\2\2\2\u091e\u08ca\3\2\2\2\u091e\u08ce\3\2"+
		"\2\2\u091e\u08d2\3\2\2\2\u091e\u08d3\3\2\2\2\u091e\u08d4\3\2\2\2\u091e"+
		"\u08ff\3\2\2\2\u091e\u0911\3\2\2\2\u091e\u0914\3\2\2\2\u091e\u0917\3\2"+
		"\2\2\u091e\u0918\3\2\2\2\u091f\u00a3\3\2\2\2\u0920\u0921\7\u033e\2\2\u0921"+
		"\u00a5\3\2\2\2\u0922\u0923\7\u033e\2\2\u0923\u00a7\3\2\2\2\u0924\u0925"+
		"\t\24\2\2\u0925\u0926\7\u00ef\2\2\u0926\u0927\7\u01d9\2\2\u0927\u0928"+
		"\5\u041e\u0210\2\u0928\u0929\7G\2\2\u0929\u092a\7\u0293\2\2\u092a\u092b"+
		"\7\u009e\2\2\u092b\u0935\7\u0354\2\2\u092c\u092d\7\u0292\2\2\u092d\u0930"+
		"\7\u0342\2\2\u092e\u0931\5\u041e\u0210\2\u092f\u0931\7\7\2\2\u0930\u092e"+
		"\3\2\2\2\u0930\u092f\3\2\2\2\u0931\u0933\3\2\2\2\u0932\u0934\7\u0356\2"+
		"\2\u0933\u0932\3\2\2\2\u0933\u0934\3\2\2\2\u0934\u0936\3\2\2\2\u0935\u092c"+
		"\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0943\3\2\2\2\u0937\u0938\7\u02c3\2"+
		"\2\u0938\u093e\7\u0342\2\2\u0939\u093b\78\2\2\u093a\u0939\3\2\2\2\u093a"+
		"\u093b\3\2\2\2\u093b\u093c\3\2\2\2\u093c\u093f\5\u041e\u0210\2\u093d\u093f"+
		"\7\7\2\2\u093e\u093a\3\2\2\2\u093e\u093d\3\2\2\2\u093f\u0941\3\2\2\2\u0940"+
		"\u0942\7\u0356\2\2\u0941\u0940\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0944"+
		"\3\2\2\2\u0943\u0937\3\2\2\2\u0943\u0944\3\2\2\2\u0944\u094e\3\2\2\2\u0945"+
		"\u0946\7\u01f8\2\2\u0946\u0949\7\u0342\2\2\u0947\u094a\7\u033e\2\2\u0948"+
		"\u094a\7\7\2\2\u0949\u0947\3\2\2\2\u0949\u0948\3\2\2\2\u094a\u094c\3\2"+
		"\2\2\u094b\u094d\7\u0356\2\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2\2\2\u094d"+
		"\u094f\3\2\2\2\u094e\u0945\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u0956\3\2"+
		"\2\2\u0950\u0951\7\u01da\2\2\u0951\u0954\7\u0342\2\2\u0952\u0955\7\u033c"+
		"\2\2\u0953\u0955\7/\2\2\u0954\u0952\3\2\2\2\u0954\u0953\3\2\2\2\u0955"+
		"\u0957\3\2\2\2\u0956\u0950\3\2\2\2\u0956\u0957\3\2\2\2\u0957\u0958\3\2"+
		"\2\2\u0958\u0959\7\u0355\2\2\u0959\u00a9\3\2\2\2\u095a\u095b\79\2\2\u095b"+
		"\u095c\7\u00ef\2\2\u095c\u095d\7\u01d9\2\2\u095d\u095e\5\u041e\u0210\2"+
		"\u095e\u00ab\3\2\2\2\u095f\u0960\7\5\2\2\u0960\u0961\7\u0285\2\2\u0961"+
		"\u0989\5\u041e\u0210\2\u0962\u0963\7\u01f9\2\2\u0963\u098a\7\u01dc\2\2"+
		"\u0964\u0965\7\u00bd\2\2\u0965\u0966\7\u01db\2\2\u0966\u0967\7_\2\2\u0967"+
		"\u097e\7\u0354\2\2\u0968\u0969\7E\2\2\u0969\u096a\7\u0342\2\2\u096a\u096c"+
		"\7\u033e\2\2\u096b\u096d\7\u0356\2\2\u096c\u096b\3\2\2\2\u096c\u096d\3"+
		"\2\2\2\u096d\u097f\3\2\2\2\u096e\u096f\7\u011a\2\2\u096f\u0970\7\22\2"+
		"\2\u0970\u0971\7\u02e8\2\2\u0971\u0972\7\u0342\2\2\u0972\u0974\7\u033e"+
		"\2\2\u0973\u0975\7\u0356\2\2\u0974\u0973\3\2\2\2\u0974\u0975\3\2\2\2\u0975"+
		"\u097f\3\2\2\2\u0976\u0977\7\u0135\2\2\u0977\u0978\7\22\2\2\u0978\u0979"+
		"\7\u02e8\2\2\u0979\u097a\7\u0342\2\2\u097a\u097c\7\u033e\2\2\u097b\u097d"+
		"\7\u0356\2\2\u097c\u097b\3\2\2\2\u097c\u097d\3\2\2\2\u097d\u097f\3\2\2"+
		"\2\u097e\u0968\3\2\2\2\u097e\u096e\3\2\2\2\u097e\u0976\3\2\2\2\u097f\u0980"+
		"\3\2\2\2\u0980\u097e\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u0982\3\2\2\2\u0982"+
		"\u098a\7\u0355\2\2\u0983\u0984\7\u00bd\2\2\u0984\u0985\7\u00c6\2\2\u0985"+
		"\u0986\7G\2\2\u0986\u0987\7\u00e8\2\2\u0987\u0988\7\u0342\2\2\u0988\u098a"+
		"\t\t\2\2\u0989\u0962\3\2\2\2\u0989\u0964\3\2\2\2\u0989\u0983\3\2\2\2\u098a"+
		"\u00ad\3\2\2\2\u098b\u098c\7\5\2\2\u098c\u098d\7\33\2\2\u098d\u098e\7"+
		"\u0135\2\2\u098e\u098f\7_\2\2\u098f\u0990\5\u041e\u0210\2\u0990\u0991"+
		"\t\25\2\2\u0991\u0992\7\u025b\2\2\u0992\u0993\7\u0354\2\2\u0993\u0994"+
		"\7\u00fe\2\2\u0994\u0995\7\u0342\2\2\u0995\u099e\5\u041e\u0210\2\u0996"+
		"\u0997\7\u0356\2\2\u0997\u0998\7\u00ce\2\2\u0998\u0999\7\u0342\2\2\u0999"+
		"\u099a\7\u033e\2\2\u099a\u099b\7\u0356\2\2\u099b\u099c\7\u0134\2\2\u099c"+
		"\u099d\7\u0342\2\2\u099d\u099f\7\u033f\2\2\u099e\u0996\3\2\2\2\u099e\u099f"+
		"\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0\u09a1\7\u0355\2\2\u09a1\u00af\3\2\2"+
		"\2\u09a2\u09a3\7#\2\2\u09a3\u09a4\7\33\2\2\u09a4\u09a5\7\u0135\2\2\u09a5"+
		"\u09a6\7_\2\2\u09a6\u09a7\5\u041e\u0210\2\u09a7\u09a8\7\u00bd\2\2\u09a8"+
		"\u09bc\7\u00b6\2\2\u09a9\u09ab\7\u0354\2\2\u09aa\u09ac\7\u0356\2\2\u09ab"+
		"\u09aa\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09ae\7\u00fe"+
		"\2\2\u09ae\u09af\7\u0342\2\2\u09af\u09b0\5\u041e\u0210\2\u09b0\u09b1\7"+
		"\u0356\2\2\u09b1\u09b2\7\u00ce\2\2\u09b2\u09b3\7\u0342\2\2\u09b3\u09b4"+
		"\7\u033e\2\2\u09b4\u09b5\7\u0356\2\2\u09b5\u09b6\7\u0134\2\2\u09b6\u09b7"+
		"\7\u0342\2\2\u09b7\u09b8\7\u033f\2\2\u09b8\u09ba\7\u0355\2\2\u09b9\u09bb"+
		"\7\u0356\2\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09bd\3\2\2"+
		"\2\u09bc\u09a9\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u09bc\3\2\2\2\u09be\u09bf"+
		"\3\2\2\2\u09bf\u00b1\3\2\2\2\u09c0\u09c1\79\2\2\u09c1\u09c2\7\u0285\2"+
		"\2\u09c2\u09c3\5\u041e\u0210\2\u09c3\u00b3\3\2\2\2\u09c4\u09c5\79\2\2"+
		"\u09c5\u09c6\7\33\2\2\u09c6\u09c7\7\u0135\2\2\u09c7\u09c8\7_\2\2\u09c8"+
		"\u09c9\5\u041e\u0210\2\u09c9\u00b5\3\2\2\2\u09ca\u09cb\79\2\2\u09cb\u09cc"+
		"\7\33\2\2\u09cc\u09cd\7\u02c6\2\2\u09cd\u09ce\7_\2\2\u09ce\u09cf\5\u041e"+
		"\u0210\2\u09cf\u00b7\3\2\2\2\u09d0\u09d1\79\2\2\u09d1\u09d2\7\u0291\2"+
		"\2\u09d2\u09d3\5\u041e\u0210\2\u09d3\u00b9\3\2\2\2\u09d4\u09d5\79\2\2"+
		"\u09d5\u09d6\7\u010c\2\2\u09d6\u09d7\5\u041e\u0210\2\u09d7\u00bb\3\2\2"+
		"\2\u09d8\u09d9\79\2\2\u09d9\u09da\7\u010d\2\2\u09da\u09db\7\u01e0\2\2"+
		"\u09db\u09dc\5\u041e\u0210\2\u09dc\u00bd\3\2\2\2\u09dd\u09de\79\2\2\u09de"+
		"\u09e1\7+\2\2\u09df\u09e0\7V\2\2\u09e0\u09e2\7A\2\2\u09e1\u09df\3\2\2"+
		"\2\u09e1\u09e2\3\2\2\2\u09e2\u09e7\3\2\2\2\u09e3\u09e5\7\u0356\2\2\u09e4"+
		"\u09e3\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09e8\5\u041e"+
		"\u0210\2\u09e7\u09e4\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09e7\3\2\2\2\u09e9"+
		"\u09ea\3\2\2\2\u09ea\u00bf\3\2\2\2\u09eb\u09ec\79\2\2\u09ec\u09ed\7+\2"+
		"\2\u09ed\u09ee\7\u00da\2\2\u09ee\u09ef\7\u0314\2\2\u09ef\u09f0\5\u041e"+
		"\u0210\2\u09f0\u00c1\3\2\2\2\u09f1\u09f2\79\2\2\u09f2\u09f3\7+\2\2\u09f3"+
		"\u09f4\7\u0135\2\2\u09f4\u09f5\7_\2\2\u09f5\u00c3\3\2\2\2\u09f6\u09f7"+
		"\79\2\2\u09f7\u09f8\7+\2\2\u09f8\u09f9\7\u020f\2\2\u09f9\u09fa\7\u010c"+
		"\2\2\u09fa\u09fb\5\u041e\u0210\2\u09fb\u00c5\3\2\2\2\u09fc\u09fd\79\2"+
		"\2\u09fd\u0a00\7/\2\2\u09fe\u09ff\7V\2\2\u09ff\u0a01\7A\2\2\u0a00\u09fe"+
		"\3\2\2\2\u0a00\u0a01\3\2\2\2\u0a01\u0a03\3\2\2\2\u0a02\u0a04\7\u0356\2"+
		"\2\u0a03\u0a02\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u0a08\3\2\2\2\u0a05\u0a06"+
		"\5\u041e\u0210\2\u0a06\u0a07\7\u034f\2\2\u0a07\u0a09\3\2\2\2\u0a08\u0a05"+
		"\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0b\5\u041e\u0210"+
		"\2\u0a0b\u00c7\3\2\2\2\u0a0c\u0a0d\79\2\2\u0a0d\u0a0e\7\u029f\2\2\u0a0e"+
		"\u0a0f\5\u041e\u0210\2\u0a0f\u00c9\3\2\2\2\u0a10\u0a11\79\2\2\u0a11\u0a12"+
		"\7C\2\2\u0a12\u0a13\7\u0111\2\2\u0a13\u0a14\7\u0313\2\2\u0a14\u0a15\5"+
		"\u041e\u0210\2\u0a15\u00cb\3\2\2\2\u0a16\u0a17\79\2\2\u0a17\u0a18\7C\2"+
		"\2\u0a18\u0a19\7E\2\2\u0a19\u0a1a\7\u0150\2\2\u0a1a\u0a1b\5\u041e\u0210"+
		"\2\u0a1b\u00cd\3\2\2\2\u0a1c\u0a1d\79\2\2\u0a1d\u0a1e\7C\2\2\u0a1e\u0a1f"+
		"\7\u02be\2\2\u0a1f\u0a22\5\u041e\u0210\2\u0a20\u0a21\7\n\2\2\u0a21\u0a23"+
		"\5\u041e\u0210\2\u0a22\u0a20\3\2\2\2\u0a22\u0a23\3\2\2\2\u0a23\u00cf\3"+
		"\2\2\2\u0a24\u0a25\79\2\2\u0a25\u0a26\7C\2\2\u0a26\u0a27\7\u0202\2\2\u0a27"+
		"\u0a28\7\u01d4\2\2\u0a28\u0a29\5\u041e\u0210\2\u0a29\u00d1\3\2\2\2\u0a2a"+
		"\u0a2b\79\2\2\u0a2b\u0a2c\7C\2\2\u0a2c\u0a30\7\u00a4\2\2\u0a2d\u0a2e\5"+
		"\u041e\u0210\2\u0a2e\u0a2f\7\u034f\2\2\u0a2f\u0a31\3\2\2\2\u0a30\u0a2d"+
		"\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a35\3\2\2\2\u0a32\u0a33\5\u041e\u0210"+
		"\2\u0a33\u0a34\7\u034f\2\2\u0a34\u0a36\3\2\2\2\u0a35\u0a32\3\2\2\2\u0a35"+
		"\u0a36\3\2\2\2\u0a36\u0a37\3\2\2\2\u0a37\u0a38\5\u041e\u0210\2\u0a38\u00d3"+
		"\3\2\2\2\u0a39\u0a3a\79\2\2\u0a3a\u0a3b\7\u02a1\2\2\u0a3b\u0a40\7\u02e1"+
		"\2\2\u0a3c\u0a3e\7\u0356\2\2\u0a3d\u0a3c\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e"+
		"\u0a3f\3\2\2\2\u0a3f\u0a41\5\u041e\u0210\2\u0a40\u0a3d\3\2\2\2\u0a41\u0a42"+
		"\3\2\2\2\u0a42\u0a40\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44"+
		"\u0a49\7p\2\2\u0a45\u0a4a\7\u030a\2\2\u0a46\u0a4a\7+\2\2\u0a47\u0a48\7"+
		"\u01e3\2\2\u0a48\u0a4a\5\u041e\u0210\2\u0a49\u0a45\3\2\2\2\u0a49\u0a46"+
		"\3\2\2\2\u0a49\u0a47\3\2\2\2\u0a4a\u00d5\3\2\2\2\u0a4b\u0a4c\79\2\2\u0a4c"+
		"\u0a4d\7\u02a1\2\2\u0a4d\u0a4e\7\u030e\2\2\u0a4e\u0a4f\5\u041e\u0210\2"+
		"\u0a4f\u0a50\7p\2\2\u0a50\u0a51\7\u030a\2\2\u0a51\u00d7\3\2\2\2\u0a52"+
		"\u0a53\79\2\2\u0a53\u0a54\7\u0153\2\2\u0a54\u0a55\7\u00f6\2\2\u0a55\u0a56"+
		"\5\u041e\u0210\2\u0a56\u00d9\3\2\2\2\u0a57\u0a58\79\2\2\u0a58\u0a59\7"+
		"\u0153\2\2\u0a59\u0a5a\7X\2\2\u0a5a\u0a5e\7p\2\2\u0a5b\u0a5c\5\u041e\u0210"+
		"\2\u0a5c\u0a5d\7\u034f\2\2\u0a5d\u0a5f\3\2\2\2\u0a5e\u0a5b\3\2\2\2\u0a5e"+
		"\u0a5f\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a61\5\u041e\u0210\2\u0a61\u00db"+
		"\3\2\2\2\u0a62\u0a63\79\2\2\u0a63\u0a64\7\u0153\2\2\u0a64\u0a65\7\u0234"+
		"\2\2\u0a65\u0a66\5\u041e\u0210\2\u0a66\u00dd\3\2\2\2\u0a67\u0a68\79\2"+
		"\2\u0a68\u0a69\7\u0186\2\2\u0a69\u0a6a\5\u041e\u0210\2\u0a6a\u00df\3\2"+
		"\2\2\u0a6b\u0a6c\79\2\2\u0a6c\u0a6d\7\u02c6\2\2\u0a6d\u0a6e\7_\2\2\u0a6e"+
		"\u00e1\3\2\2\2\u0a6f\u0a70\79\2\2\u0a70\u0a71\7\u019b\2\2\u0a71\u0a72"+
		"\7\u0251\2\2\u0a72\u0a73\5\u041e\u0210\2\u0a73\u00e3\3\2\2\2\u0a74\u0a75"+
		"\79\2\2\u0a75\u0a76\7\u01cc\2\2\u0a76\u0a77\7M\2\2\u0a77\u0a78\5\u041e"+
		"\u0210\2\u0a78\u00e5\3\2\2\2\u0a79\u0a7a\79\2\2\u0a7a\u0a7b\7\u01cc\2"+
		"\2\u0a7b\u0a7c\7\u0309\2\2\u0a7c\u0a7d\5\u041e\u0210\2\u0a7d\u00e7\3\2"+
		"\2\2\u0a7e\u0a7f\79\2\2\u0a7f\u0a83\7\u01e3\2\2\u0a80\u0a81\5\u041e\u0210"+
		"\2\u0a81\u0a82\7\u034f\2\2\u0a82\u0a84\3\2\2\2\u0a83\u0a80\3\2\2\2\u0a83"+
		"\u0a84\3\2\2\2\u0a84\u0a88\3\2\2\2\u0a85\u0a86\5\u041e\u0210\2\u0a86\u0a87"+
		"\7\u034f\2\2\u0a87\u0a89\3\2\2\2\u0a88\u0a85\3\2\2\2\u0a88\u0a89\3\2\2"+
		"\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0a8b\5\u041e\u0210\2\u0a8b\u00e9\3\2\2\2"+
		"\u0a8c\u0a8d\79\2\2\u0a8d\u0a8e\7\u01f7\2\2\u0a8e\u0a8f\7\u030b\2\2\u0a8f"+
		"\u0a90\7\u00ed\2\2\u0a90\u0a91\5\u041e\u0210\2\u0a91\u00eb\3\2\2\2\u0a92"+
		"\u0a93\79\2\2\u0a93\u0a94\7\u0202\2\2\u0a94\u0a95\7\u01d4\2\2\u0a95\u0a96"+
		"\5\u041e\u0210\2\u0a96\u00ed\3\2\2\2\u0a97\u0a98\79\2\2\u0a98\u0a9b\7"+
		"\u0300\2\2\u0a99\u0a9a\7V\2\2\u0a9a\u0a9c\7A\2\2\u0a9b\u0a99\3\2\2\2\u0a9b"+
		"\u0a9c\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d\u0a9e\5\u041e\u0210\2\u0a9e\u00ef"+
		"\3\2\2\2\u0a9f\u0aa0\79\2\2\u0aa0\u0aa1\7\u0208\2\2\u0aa1\u0aa2\5\u041e"+
		"\u0210\2\u0aa2\u00f1\3\2\2\2\u0aa3\u0aa4\79\2\2\u0aa4\u0aa7\7\u0095\2"+
		"\2\u0aa5\u0aa6\7V\2\2\u0aa6\u0aa8\7A\2\2\u0aa7\u0aa5\3\2\2\2\u0aa7\u0aa8"+
		"\3\2\2\2\u0aa8\u0ab2\3\2\2\2\u0aa9\u0aab\7\u0356\2\2\u0aaa\u0aa9\3\2\2"+
		"\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aaf\3\2\2\2\u0aac\u0aad\5\u041e\u0210\2"+
		"\u0aad\u0aae\7\u034f\2\2\u0aae\u0ab0\3\2\2\2\u0aaf\u0aac\3\2\2\2\u0aaf"+
		"\u0ab0\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1\u0ab3\5\u041e\u0210\2\u0ab2\u0aaa"+
		"\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u00f3\3\2\2\2\u0ab4\u0ab5\79\2\2\u0ab5"+
		"\u0ab8\7\u0097\2\2\u0ab6\u0ab7\7V\2\2\u0ab7\u0ab9\7A\2\2\u0ab8\u0ab6\3"+
		"\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u0abb\5\u041e\u0210"+
		"\2\u0abb\u00f5\3\2\2\2\u0abc\u0abd\79\2\2\u0abd\u0abe\7\u0212\2\2\u0abe"+
		"\u0abf\7\u01df\2\2\u0abf\u0ac0\7\u017e\2\2\u0ac0\u0ac1\5\u041e\u0210\2"+
		"\u0ac1\u00f7\3\2\2\2\u0ac2\u0ac3\79\2\2\u0ac3\u0ac4\7\u0218\2\2\u0ac4"+
		"\u0ac7\7\u02ef\2\2\u0ac5\u0ac6\7V\2\2\u0ac6\u0ac8\7A\2\2\u0ac7\u0ac5\3"+
		"\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0acc\3\2\2\2\u0ac9\u0aca\5\u041e\u0210"+
		"\2\u0aca\u0acb\7\u034f\2\2\u0acb\u0acd\3\2\2\2\u0acc\u0ac9\3\2\2\2\u0acc"+
		"\u0acd\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0acf\5\u041e\u0210\2\u0acf\u00f9"+
		"\3\2\2\2\u0ad0\u0ad1\79\2\2\u0ad1\u0ad4\7\u021f\2\2\u0ad2\u0ad3\7V\2\2"+
		"\u0ad3\u0ad5\7A\2\2\u0ad4\u0ad2\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u0ae4"+
		"\3\2\2\2\u0ad6\u0ad8\7\u0356\2\2\u0ad7\u0ad6\3\2\2\2\u0ad7\u0ad8\3\2\2"+
		"\2\u0ad8\u0adc\3\2\2\2\u0ad9\u0ada\5\u041e\u0210\2\u0ada\u0adb\7\u034f"+
		"\2\2\u0adb\u0add\3\2\2\2\u0adc\u0ad9\3\2\2\2\u0adc\u0add\3\2\2\2\u0add"+
		"\u0ae1\3\2\2\2\u0ade\u0adf\5\u041e\u0210\2\u0adf\u0ae0\7\u034f\2\2\u0ae0"+
		"\u0ae2\3\2\2\2\u0ae1\u0ade\3\2\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u0ae3\3\2"+
		"\2\2\u0ae3\u0ae5\5\u041e\u0210\2\u0ae4\u0ad7\3\2\2\2\u0ae4\u0ae5\3\2\2"+
		"\2\u0ae5\u00fb\3\2\2\2\u0ae6\u0ae7\79\2\2\u0ae7\u0ae8\7\u030a\2\2\u0ae8"+
		"\u0ae9\7\u00da\2\2\u0ae9\u0aea\5\u041e\u0210\2\u0aea\u00fd\3\2\2\2\u0aeb"+
		"\u0aec\79\2\2\u0aec\u0aed\7\u030a\2\2\u0aed\u0aee\7\u00da\2\2\u0aee\u0aef"+
		"\7\u0314\2\2\u0aef\u0af0\5\u041e\u0210\2\u0af0\u00ff\3\2\2\2\u0af1\u0af2"+
		"\79\2\2\u0af2\u0af3\7\u030a\2\2\u0af3\u0af4\7\u0300\2\2\u0af4\u0af5\5"+
		"\u041e\u0210\2\u0af5\u0101\3\2\2\2\u0af6\u0af7\79\2\2\u0af7\u0af8\7\u030b"+
		"\2\2\u0af8\u0af9\5\u041e\u0210\2\u0af9\u0103\3\2\2\2\u0afa\u0afc\79\2"+
		"\2\u0afb\u0afd\7\u0108\2\2\u0afc\u0afb\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd"+
		"\u0afe\3\2\2\2\u0afe\u0aff\7\u0225\2\2\u0aff\u0b03\7K\2\2\u0b00\u0b01"+
		"\5\u041e\u0210\2\u0b01\u0b02\7\u034f\2\2\u0b02\u0b04\3\2\2\2\u0b03\u0b00"+
		"\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05\u0b06\5\u041e\u0210"+
		"\2\u0b06\u0b12\7\22\2\2\u0b07\u0b09\7\u0356\2\2\u0b08\u0b07\3\2\2\2\u0b08"+
		"\u0b09\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a\u0b0b\7\u0285\2\2\u0b0b\u0b13"+
		"\5\u041e\u0210\2\u0b0c\u0b0e\7\u0356\2\2\u0b0d\u0b0c\3\2\2\2\u0b0d\u0b0e"+
		"\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b10\7\u0276\2\2\u0b10\u0b11\7_\2"+
		"\2\u0b11\u0b13\5\u041e\u0210\2\u0b12\u0b08\3\2\2\2\u0b12\u0b0d\3\2\2\2"+
		"\u0b13\u0b14\3\2\2\2\u0b14\u0b12\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0105"+
		"\3\2\2\2\u0b16\u0b17\79\2\2\u0b17\u0b1b\7\u00a2\2\2\u0b18\u0b19\5\u041e"+
		"\u0210\2\u0b19\u0b1a\7\u034f\2\2\u0b1a\u0b1c\3\2\2\2\u0b1b\u0b18\3\2\2"+
		"\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b1e\5\u041e\u0210\2"+
		"\u0b1e\u0b1f\7\u034f\2\2\u0b1f\u0b20\5\u041e\u0210\2\u0b20\u0107\3\2\2"+
		"\2\u0b21\u0b22\79\2\2\u0b22\u0b23\7\u023b\2\2\u0b23\u0b24\7_\2\2\u0b24"+
		"\u0b28\5\u041e\u0210\2\u0b25\u0b26\7\u01f9\2\2\u0b26\u0b27\7\u01e0\2\2"+
		"\u0b27\u0b29\7_\2\2\u0b28\u0b25\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0109"+
		"\3\2\2\2\u0b2a\u0b2b\79\2\2\u0b2b\u0b2e\7\u023d\2\2\u0b2c\u0b2d\7V\2\2"+
		"\u0b2d\u0b2f\7A\2\2\u0b2e\u0b2c\3\2\2\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b33"+
		"\3\2\2\2\u0b30\u0b31\5\u041e\u0210\2\u0b31\u0b32\7\u034f\2\2\u0b32\u0b34"+
		"\3\2\2\2\u0b33\u0b30\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b35\3\2\2\2\u0b35"+
		"\u0b36\5\u041e\u0210\2\u0b36\u010b\3\2\2\2\u0b37\u0b38\79\2\2\u0b38\u0b3b"+
		"\7\u00b5\2\2\u0b39\u0b3a\7V\2\2\u0b3a\u0b3c\7A\2\2\u0b3b\u0b39\3\2\2\2"+
		"\u0b3b\u0b3c\3\2\2\2\u0b3c\u0b3d\3\2\2\2\u0b3d\u0b3e\5\u041e\u0210\2\u0b3e"+
		"\u010d\3\2\2\2\u0b3f\u0b40\79\2\2\u0b40\u0b41\7\u0265\2\2\u0b41\u0b42"+
		"\7P\2\2\u0b42\u0b43\5\u041e\u0210\2\u0b43\u010f\3\2\2\2\u0b44\u0b45\7"+
		"9\2\2\u0b45\u0b46\7\u0266\2\2\u0b46\u0b47\7\u0097\2\2\u0b47\u0b4b\7\u00fd"+
		"\2\2\u0b48\u0b49\5\u041e\u0210\2\u0b49\u0b4a\7\u034f\2\2\u0b4a\u0b4c\3"+
		"\2\2\2\u0b4b\u0b48\3\2\2\2\u0b4b\u0b4c\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d"+
		"\u0b4e\5\u041e\u0210\2\u0b4e\u0111\3\2\2\2\u0b4f\u0b50\7\u0129\2\2\u0b50"+
		"\u0b5f\7\u00ac\2\2\u0b51\u0b53\7\u0356\2\2\u0b52\u0b51\3\2\2\2\u0b52\u0b53"+
		"\3\2\2\2\u0b53\u0b57\3\2\2\2\u0b54\u0b55\5\u041e\u0210\2\u0b55\u0b56\7"+
		"\u034f\2\2\u0b56\u0b58\3\2\2\2\u0b57\u0b54\3\2\2\2\u0b57\u0b58\3\2\2\2"+
		"\u0b58\u0b59\3\2\2\2\u0b59\u0b5b\5\u041e\u0210\2\u0b5a\u0b52\3\2\2\2\u0b5b"+
		"\u0b5c\3\2\2\2\u0b5c\u0b5a\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b60\3\2"+
		"\2\2\u0b5e\u0b60\7\4\2\2\u0b5f\u0b5a\3\2\2\2\u0b5f\u0b5e\3\2\2\2\u0b60"+
		"\u0b61\3\2\2\2\u0b61\u0b6b\7p\2\2\u0b62\u0b63\5\u041e\u0210\2\u0b63\u0b64"+
		"\7\u034f\2\2\u0b64\u0b66\3\2\2\2\u0b65\u0b62\3\2\2\2\u0b65\u0b66\3\2\2"+
		"\2\u0b66\u0b67\3\2\2\2\u0b67\u0b6c\5\u041e\u0210\2\u0b68\u0b6c\7+\2\2"+
		"\u0b69\u0b6a\7\4\2\2\u0b6a\u0b6c\7\u030a\2\2\u0b6b\u0b65\3\2\2\2\u0b6b"+
		"\u0b68\3\2\2\2\u0b6b\u0b69\3\2\2\2\u0b6c\u0113\3\2\2\2\u0b6d\u0b6e\7\u0132"+
		"\2\2\u0b6e\u0b7d\7\u00ac\2\2\u0b6f\u0b71\7\u0356\2\2\u0b70\u0b6f\3\2\2"+
		"\2\u0b70\u0b71\3\2\2\2\u0b71\u0b75\3\2\2\2\u0b72\u0b73\5\u041e\u0210\2";
	private static final String _serializedATNSegment2 =
		"\u0b73\u0b74\7\u034f\2\2\u0b74\u0b76\3\2\2\2\u0b75\u0b72\3\2\2\2\u0b75"+
		"\u0b76\3\2\2\2\u0b76\u0b77\3\2\2\2\u0b77\u0b79\5\u041e\u0210\2\u0b78\u0b70"+
		"\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b78\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b"+
		"\u0b7e\3\2\2\2\u0b7c\u0b7e\7\4\2\2\u0b7d\u0b78\3\2\2\2\u0b7d\u0b7c\3\2"+
		"\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b89\7p\2\2\u0b80\u0b81\5\u041e\u0210"+
		"\2\u0b81\u0b82\7\u034f\2\2\u0b82\u0b84\3\2\2\2\u0b83\u0b80\3\2\2\2\u0b83"+
		"\u0b84\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0b8a\5\u041e\u0210\2\u0b86\u0b8a"+
		"\7+\2\2\u0b87\u0b88\7\4\2\2\u0b88\u0b8a\7\u030a\2\2\u0b89\u0b83\3\2\2"+
		"\2\u0b89\u0b86\3\2\2\2\u0b89\u0b87\3\2\2\2\u0b8a\u0115\3\2\2\2\u0b8b\u0b8c"+
		"\7\u0184\2\2\u0b8c\u0b8d\7\u00a4\2\2\u0b8d\u0b8e\5\u03e0\u01f1\2\u0b8e"+
		"\u0b8f\7W\2\2\u0b8f\u0b90\t\26\2\2\u0b90\u0b94\7\u01a4\2\2\u0b91\u0b92"+
		"\7\u0261\2\2\u0b92\u0b95\7\u033c\2\2\u0b93\u0b95\7\u01b8\2\2\u0b94\u0b91"+
		"\3\2\2\2\u0b94\u0b93\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b97\3\2\2\2\u0b96"+
		"\u0b98\7\u0357\2\2\u0b97\u0b96\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0117"+
		"\3\2\2\2\u0b99\u0b9a\7\u00ad\2\2\u0b9a\u0b9b\7\u00a4\2\2\u0b9b\u0baf\5"+
		"\u03e0\u01f1\2\u0b9c\u0b9d\7\u00bd\2\2\u0b9d\u0b9e\7\u0354\2\2\u0b9e\u0b9f"+
		"\7\u01cd\2\2\u0b9f\u0ba9\7\u0354\2\2\u0ba0\u0ba2\7\u0356\2\2\u0ba1\u0ba0"+
		"\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0ba7\3\2\2\2\u0ba3\u0ba8\7\u033c\2"+
		"\2\u0ba4\u0ba5\7\u033c\2\2\u0ba5\u0ba6\7\u00a8\2\2\u0ba6\u0ba8\7\u033c"+
		"\2\2\u0ba7\u0ba3\3\2\2\2\u0ba7\u0ba4\3\2\2\2\u0ba8\u0baa\3\2\2\2\u0ba9"+
		"\u0ba1\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0ba9\3\2\2\2\u0bab\u0bac\3\2"+
		"\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bae\7\u0355\2\2\u0bae\u0bb0\7\u0355\2"+
		"\2\u0baf\u0b9c\3\2\2\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0119\3\2\2\2\u0bb1\u0bb2"+
		"\7#\2\2\u0bb2\u0bb3\7\33\2\2\u0bb3\u0bb4\7\u02c6\2\2\u0bb4\u0bb5\7_\2"+
		"\2\u0bb5\u0bb6\5\u041e\u0210\2\u0bb6\u0bb7\7\u00bd\2\2\u0bb7\u0bb8\7\u0354"+
		"\2\2\u0bb8\u0bb9\7\u02bc\2\2\u0bb9\u0bba\7\u0342\2\2\u0bba\u0bbb\7\u033e"+
		"\2\2\u0bbb\u0bbc\7\u0356\2\2\u0bbc\u0bbd\7\u02bb\2\2\u0bbd\u0bbe\7\u0342"+
		"\2\2\u0bbe\u0bbf\7\u033e\2\2\u0bbf\u0bc0\7\u0355\2\2\u0bc0\u011b\3\2\2"+
		"\2\u0bc1\u0bc2\7\5\2\2\u0bc2\u0bc3\7\u010c\2\2\u0bc3\u0bc4\5\u041e\u0210"+
		"\2\u0bc4\u0bc5\7\u00bd\2\2\u0bc5\u0bc6\7S\2\2\u0bc6\u0bc7\7\u0342\2\2"+
		"\u0bc7\u0bcc\7\u033e\2\2\u0bc8\u0bc9\7\u0356\2\2\u0bc9\u0bca\7\u0217\2"+
		"\2\u0bca\u0bcb\7\u0342\2\2\u0bcb\u0bcd\7\u033e\2\2\u0bcc\u0bc8\3\2\2\2"+
		"\u0bcc\u0bcd\3\2\2\2\u0bcd\u011d\3\2\2\2\u0bce\u0bcf\7#\2\2\u0bcf\u0bd0"+
		"\7\u010c\2\2\u0bd0\u0bd1\5\u041e\u0210\2\u0bd1\u0bd2\7\u00bd\2\2\u0bd2"+
		"\u0bd3\7S\2\2\u0bd3\u0bd4\7\u0342\2\2\u0bd4\u0bd9\7\u033e\2\2\u0bd5\u0bd6"+
		"\7\u0356\2\2\u0bd6\u0bd7\7\u0217\2\2\u0bd7\u0bd8\7\u0342\2\2\u0bd8\u0bda"+
		"\7\u033e\2\2\u0bd9\u0bd5\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda\u0bdf\3\2\2"+
		"\2\u0bdb\u0bdc\7G\2\2\u0bdc\u0bdd\7\u010d\2\2\u0bdd\u0bde\7\u01e0\2\2"+
		"\u0bde\u0be0\5\u041e\u0210\2\u0bdf\u0bdb\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0"+
		"\u011f\3\2\2\2\u0be1\u0be2\7\5\2\2\u0be2\u0be3\7\u010d\2\2\u0be3\u0be4"+
		"\7\u01e0\2\2\u0be4\u0be9\5\u041e\u0210\2\u0be5\u0be6\7K\2\2\u0be6\u0be7"+
		"\7E\2\2\u0be7\u0be8\7\u0342\2\2\u0be8\u0bea\7\u033e\2\2\u0be9\u0be5\3"+
		"\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0bec\3\2\2\2\u0beb\u0bed\t\27\2\2\u0bec"+
		"\u0beb\3\2\2\2\u0bec\u0bed\3\2\2\2\u0bed\u0121\3\2\2\2\u0bee\u0bef\7#"+
		"\2\2\u0bef\u0bf0\7\u010d\2\2\u0bf0\u0bf1\7\u01e0\2\2\u0bf1\u0bf2\5\u041e"+
		"\u0210\2\u0bf2\u0bf3\7K\2\2\u0bf3\u0bf4\7E\2\2\u0bf4\u0bf5\7\u0342\2\2"+
		"\u0bf5\u0bf6\7\u033e\2\2\u0bf6\u0123\3\2\2\2\u0bf7\u0bf8\7#\2\2\u0bf8"+
		"\u0bf9\7\u02a1\2\2\u0bf9\u0bfa\7\u02e1\2\2\u0bfa\u0bfb\5\u041e\u0210\2"+
		"\u0bfb\u0c00\7p\2\2\u0bfc\u0c01\7\u030a\2\2\u0bfd\u0c01\7+\2\2\u0bfe\u0bff"+
		"\7\u01e3\2\2\u0bff\u0c01\5\u041e\u0210\2\u0c00\u0bfc\3\2\2\2\u0c00\u0bfd"+
		"\3\2\2\2\u0c00\u0bfe\3\2\2\2\u0c01\u0c04\3\2\2\2\u0c02\u0c03\7\u00bd\2"+
		"\2\u0c03\u0c05\7\u02aa\2\2\u0c04\u0c02\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05"+
		"\u0c06\3\2\2\2\u0c06\u0c0b\7G\2\2\u0c07\u0c09\7\u0356\2\2\u0c08\u0c07"+
		"\3\2\2\2\u0c08\u0c09\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c0c\5\u041e\u0210"+
		"\2\u0c0b\u0c08\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0b\3\2\2\2\u0c0d\u0c0e"+
		"\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f\u0c10\7\u00a8\2\2\u0c10\u0c11\7\u030b"+
		"\2\2\u0c11\u0c12\7\u033e\2\2\u0c12\u0c13\7\u0356\2\2\u0c13\u0c14\7\u033e"+
		"\2\2\u0c14\u0125\3\2\2\2\u0c15\u0c16\t\24\2\2\u0c16\u0c17\7\u02a1\2\2"+
		"\u0c17\u0c18\7\u030e\2\2\u0c18\u0c19\5\u041e\u0210\2\u0c19\u0c1a\7p\2"+
		"\2\u0c1a\u0c5e\7\u030a\2\2\u0c1b\u0c1d\7\u0356\2\2\u0c1c\u0c1b\3\2\2\2"+
		"\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u0c1f\7\3\2\2\u0c1f\u0c23"+
		"\7\u02a1\2\2\u0c20\u0c21\5\u041e\u0210\2\u0c21\u0c22\7\u034f\2\2\u0c22"+
		"\u0c24\3\2\2\2\u0c23\u0c20\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c25\3\2"+
		"\2\2\u0c25\u0c26\5\u041e\u0210\2\u0c26\u0c27\7\u034f\2\2\u0c27\u0c28\5"+
		"\u041e\u0210\2\u0c28\u0c59\3\2\2\2\u0c29\u0c37\7\u0354\2\2\u0c2a\u0c34"+
		"\7\u009e\2\2\u0c2b\u0c2d\7\u0356\2\2\u0c2c\u0c2b\3\2\2\2\u0c2c\u0c2d\3"+
		"\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u0c2f\5\u041e\u0210\2\u0c2f\u0c30\7\u0342"+
		"\2\2\u0c30\u0c31\t\30\2\2\u0c31\u0c33\3\2\2\2\u0c32\u0c2c\3\2\2\2\u0c33"+
		"\u0c36\3\2\2\2\u0c34\u0c32\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35\u0c38\3\2"+
		"\2\2\u0c36\u0c34\3\2\2\2\u0c37\u0c2a\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38"+
		"\u0c4d\3\2\2\2\u0c39\u0c3a\7\u00c4\2\2\u0c3a\u0c47\7\u0354\2\2\u0c3b\u0c3d"+
		"\7\u0356\2\2\u0c3c\u0c3b\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c41\3\2\2"+
		"\2\u0c3e\u0c3f\5\u041e\u0210\2\u0c3f\u0c40\7\u034f\2\2\u0c40\u0c42\3\2"+
		"\2\2\u0c41\u0c3e\3\2\2\2\u0c41\u0c42\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43"+
		"\u0c44\5\u041e\u0210\2\u0c44\u0c45\7\u034f\2\2\u0c45\u0c46\5\u041e\u0210"+
		"\2\u0c46\u0c48\3\2\2\2\u0c47\u0c3c\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49\u0c47"+
		"\3\2\2\2\u0c49\u0c4a\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4c\7\u0355\2"+
		"\2\u0c4c\u0c4e\3\2\2\2\u0c4d\u0c39\3\2\2\2\u0c4e\u0c4f\3\2\2\2\u0c4f\u0c4d"+
		"\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c53\3\2\2\2\u0c51\u0c52\7\u00bb\2"+
		"\2\u0c52\u0c54\5\u0128\u0095\2\u0c53\u0c51\3\2\2\2\u0c53\u0c54\3\2\2\2"+
		"\u0c54\u0c55\3\2\2\2\u0c55\u0c56\7\u0355\2\2\u0c56\u0c58\3\2\2\2\u0c57"+
		"\u0c29\3\2\2\2\u0c58\u0c5b\3\2\2\2\u0c59\u0c57\3\2\2\2\u0c59\u0c5a\3\2"+
		"\2\2\u0c5a\u0c5d\3\2\2\2\u0c5b\u0c59\3\2\2\2\u0c5c\u0c1c\3\2\2\2\u0c5d"+
		"\u0c60\3\2\2\2\u0c5e\u0c5c\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f\u0c71\3\2"+
		"\2\2\u0c60\u0c5e\3\2\2\2\u0c61\u0c63\7\u0356\2\2\u0c62\u0c61\3\2\2\2\u0c62"+
		"\u0c63\3\2\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c65\79\2\2\u0c65\u0c69\7\u02a1"+
		"\2\2\u0c66\u0c67\5\u041e\u0210\2\u0c67\u0c68\7\u034f\2\2\u0c68\u0c6a\3"+
		"\2\2\2\u0c69\u0c66\3\2\2\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c6b\3\2\2\2\u0c6b"+
		"\u0c6c\5\u041e\u0210\2\u0c6c\u0c6d\7\u034f\2\2\u0c6d\u0c6e\5\u041e\u0210"+
		"\2\u0c6e\u0c70\3\2\2\2\u0c6f\u0c62\3\2\2\2\u0c70\u0c73\3\2\2\2\u0c71\u0c6f"+
		"\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72\u0c9d\3\2\2\2\u0c73\u0c71\3\2\2\2\u0c74"+
		"\u0c75\7\3\2\2\u0c75\u0c79\7\u0324\2\2\u0c76\u0c77\5\u041e\u0210\2\u0c77"+
		"\u0c78\7\u034f\2\2\u0c78\u0c7a\3\2\2\2\u0c79\u0c76\3\2\2\2\u0c79\u0c7a"+
		"\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0c7c\5\u041e\u0210\2\u0c7c\u0c7d\7"+
		"\u034f\2\2\u0c7d\u0c7e\5\u041e\u0210\2\u0c7e\u0c98\3\2\2\2\u0c7f\u0c80"+
		"\7\u0354\2\2\u0c80\u0c90\7\u009e\2\2\u0c81\u0c83\7\u0356\2\2\u0c82\u0c81"+
		"\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c84\3\2\2\2\u0c84\u0c85\5\u041e\u0210"+
		"\2\u0c85\u0c8e\7\u0342\2\2\u0c86\u0c88\7\u0354\2\2\u0c87\u0c86\3\2\2\2"+
		"\u0c87\u0c88\3\2\2\2\u0c88\u0c89\3\2\2\2\u0c89\u0c8b\7\u033c\2\2\u0c8a"+
		"\u0c8c\7\u0355\2\2\u0c8b\u0c8a\3\2\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c\u0c8f"+
		"\3\2\2\2\u0c8d\u0c8f\7\u033e\2\2\u0c8e\u0c87\3\2\2\2\u0c8e\u0c8d\3\2\2"+
		"\2\u0c8f\u0c91\3\2\2\2\u0c90\u0c82\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92\u0c90"+
		"\3\2\2\2\u0c92\u0c93\3\2\2\2\u0c93\u0c94\3\2\2\2\u0c94\u0c95\7\u0355\2"+
		"\2\u0c95\u0c97\3\2\2\2\u0c96\u0c7f\3\2\2\2\u0c97\u0c9a\3\2\2\2\u0c98\u0c96"+
		"\3\2\2\2\u0c98\u0c99\3\2\2\2\u0c99\u0c9c\3\2\2\2\u0c9a\u0c98\3\2\2\2\u0c9b"+
		"\u0c74\3\2\2\2\u0c9c\u0c9f\3\2\2\2\u0c9d\u0c9b\3\2\2\2\u0c9d\u0c9e\3\2"+
		"\2\2\u0c9e\u0cad\3\2\2\2\u0c9f\u0c9d\3\2\2\2\u0ca0\u0ca1\79\2\2\u0ca1"+
		"\u0ca5\7\u0324\2\2\u0ca2\u0ca3\5\u041e\u0210\2\u0ca3\u0ca4\7\u034f\2\2"+
		"\u0ca4\u0ca6\3\2\2\2\u0ca5\u0ca2\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0ca7"+
		"\3\2\2\2\u0ca7\u0ca8\5\u041e\u0210\2\u0ca8\u0ca9\7\u034f\2\2\u0ca9\u0caa"+
		"\5\u041e\u0210\2\u0caa\u0cac\3\2\2\2\u0cab\u0ca0\3\2\2\2\u0cac\u0caf\3"+
		"\2\2\2\u0cad\u0cab\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0cf1\3\2\2\2\u0caf"+
		"\u0cad\3\2\2\2\u0cb0\u0cb1\7\u00bd\2\2\u0cb1\u0cb9\7\u0354\2\2\u0cb2\u0cb4"+
		"\7\u0356\2\2\u0cb3\u0cb2\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb5\3\2\2"+
		"\2\u0cb5\u0cb6\7\u02c7\2\2\u0cb6\u0cb7\7\u0342\2\2\u0cb7\u0cb8\7\u033c"+
		"\2\2\u0cb8\u0cba\t\31\2\2\u0cb9\u0cb3\3\2\2\2\u0cb9\u0cba\3\2\2\2\u0cba"+
		"\u0cc1\3\2\2\2\u0cbb\u0cbd\7\u0356\2\2\u0cbc\u0cbb\3\2\2\2\u0cbc\u0cbd"+
		"\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0cbf\7\u02a3\2\2\u0cbf\u0cc0\7\u0342"+
		"\2\2\u0cc0\u0cc2\t\32\2\2\u0cc1\u0cbc\3\2\2\2\u0cc1\u0cc2\3\2\2\2\u0cc2"+
		"\u0ccd\3\2\2\2\u0cc3\u0cc5\7\u0356\2\2\u0cc4\u0cc3\3\2\2\2\u0cc4\u0cc5"+
		"\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc7\7\u02ca\2\2\u0cc7\u0ccb\7\u0342"+
		"\2\2\u0cc8\u0cc9\7\u033c\2\2\u0cc9\u0ccc\7\u0216\2\2\u0cca\u0ccc\7\u02b6"+
		"\2\2\u0ccb\u0cc8\3\2\2\2\u0ccb\u0cca\3\2\2\2\u0ccc\u0cce\3\2\2\2\u0ccd"+
		"\u0cc4\3\2\2\2\u0ccd\u0cce\3\2\2\2\u0cce\u0cd6\3\2\2\2\u0ccf\u0cd1\7\u0356"+
		"\2\2\u0cd0\u0ccf\3\2\2\2\u0cd0\u0cd1\3\2\2\2\u0cd1\u0cd2\3\2\2\2\u0cd2"+
		"\u0cd3\7\u02cc\2\2\u0cd3\u0cd4\7\u0342\2\2\u0cd4\u0cd5\7\u033c\2\2\u0cd5"+
		"\u0cd7\t\31\2\2\u0cd6\u0cd0\3\2\2\2\u0cd6\u0cd7\3\2\2\2\u0cd7\u0cde\3"+
		"\2\2\2\u0cd8\u0cda\7\u0356\2\2\u0cd9\u0cd8\3\2\2\2\u0cd9\u0cda\3\2\2\2"+
		"\u0cda\u0cdb\3\2\2\2\u0cdb\u0cdc\7\u02d2\2\2\u0cdc\u0cdd\7\u0342\2\2\u0cdd"+
		"\u0cdf\t\33\2\2\u0cde\u0cd9\3\2\2\2\u0cde\u0cdf\3\2\2\2\u0cdf\u0ce6\3"+
		"\2\2\2\u0ce0\u0ce2\7\u0356\2\2\u0ce1\u0ce0\3\2\2\2\u0ce1\u0ce2\3\2\2\2"+
		"\u0ce2\u0ce3\3\2\2\2\u0ce3\u0ce4\7\u0326\2\2\u0ce4\u0ce5\7\u0342\2\2\u0ce5"+
		"\u0ce7\t\t\2\2\u0ce6\u0ce1\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0cee\3\2"+
		"\2\2\u0ce8\u0cea\7\u0356\2\2\u0ce9\u0ce8\3\2\2\2\u0ce9\u0cea\3\2\2\2\u0cea"+
		"\u0ceb\3\2\2\2\u0ceb\u0cec\7\u031d\2\2\u0cec\u0ced\7\u0342\2\2\u0ced\u0cef"+
		"\t\t\2\2\u0cee\u0ce9\3\2\2\2\u0cee\u0cef\3\2\2\2\u0cef\u0cf0\3\2\2\2\u0cf0"+
		"\u0cf2\7\u0355\2\2\u0cf1\u0cb0\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf6"+
		"\3\2\2\2\u0cf3\u0cf4\7\u0319\2\2\u0cf4\u0cf5\7\u0342\2\2\u0cf5\u0cf7\t"+
		"\34\2\2\u0cf6\u0cf3\3\2\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7\u0127\3\2\2\2\u0cf8"+
		"\u0cfa\7\u0356\2\2\u0cf9\u0cf8\3\2\2\2\u0cf9\u0cfa\3\2\2\2\u0cfa\u0cfc"+
		"\3\2\2\2\u0cfb\u0cfd\t\35\2\2\u0cfc\u0cfb\3\2\2\2\u0cfc\u0cfd\3\2\2\2"+
		"\u0cfd\u0cff\3\2\2\2\u0cfe\u0d00\7j\2\2\u0cff\u0cfe\3\2\2\2\u0cff\u0d00"+
		"\3\2\2\2\u0d00\u0d06\3\2\2\2\u0d01\u0d07\5\u012a\u0096\2\u0d02\u0d03\7"+
		"\u0354\2\2\u0d03\u0d04\5\u0128\u0095\2\u0d04\u0d05\7\u0355\2\2\u0d05\u0d07"+
		"\3\2\2\2\u0d06\u0d01\3\2\2\2\u0d06\u0d02\3\2\2\2\u0d07\u0d09\3\2\2\2\u0d08"+
		"\u0cf9\3\2\2\2\u0d09\u0d0a\3\2\2\2\u0d0a\u0d08\3\2\2\2\u0d0a\u0d0b\3\2"+
		"\2\2\u0d0b\u0129\3\2\2\2\u0d0c\u0d12\5\u012c\u0097\2\u0d0d\u0d0e\7\u0354"+
		"\2\2\u0d0e\u0d0f\5\u0128\u0095\2\u0d0f\u0d10\7\u0355\2\2\u0d10\u0d12\3"+
		"\2\2\2\u0d11\u0d0c\3\2\2\2\u0d11\u0d0d\3\2\2\2\u0d12\u012b\3\2\2\2\u0d13"+
		"\u0d30\5\u041e\u0210\2\u0d14\u0d1f\5\u041e\u0210\2\u0d15\u0d16\5\u041e"+
		"\u0210\2\u0d16\u0d17\7\u034f\2\2\u0d17\u0d19\3\2\2\2\u0d18\u0d15\3\2\2"+
		"\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u0d1b\5\u041e\u0210\2"+
		"\u0d1b\u0d1c\7\u034f\2\2\u0d1c\u0d1d\5\u041e\u0210\2\u0d1d\u0d1f\3\2\2"+
		"\2\u0d1e\u0d14\3\2\2\2\u0d1e\u0d18\3\2\2\2\u0d1f\u0d2b\3\2\2\2\u0d20\u0d2c"+
		"\7\u0342\2\2\u0d21\u0d22\7\u0344\2\2\u0d22\u0d2c\7\u0343\2\2\u0d23\u0d24"+
		"\7\u0345\2\2\u0d24\u0d2c\7\u0342\2\2\u0d25\u0d2c\7\u0343\2\2\u0d26\u0d27"+
		"\7\u0343\2\2\u0d27\u0d2c\7\u0342\2\2\u0d28\u0d2c\7\u0344\2\2\u0d29\u0d2a"+
		"\7\u0344\2\2\u0d2a\u0d2c\7\u0342\2\2\u0d2b\u0d20\3\2\2\2\u0d2b\u0d21\3"+
		"\2\2\2\u0d2b\u0d23\3\2\2\2\u0d2b\u0d25\3\2\2\2\u0d2b\u0d26\3\2\2\2\u0d2b"+
		"\u0d28\3\2\2\2\u0d2b\u0d29\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d2e\t\30"+
		"\2\2\u0d2e\u0d30\3\2\2\2\u0d2f\u0d13\3\2\2\2\u0d2f\u0d1e\3\2\2\2\u0d30"+
		"\u0d4c\3\2\2\2\u0d31\u0d32\5\u041e\u0210\2\u0d32\u0d33\7\u034f\2\2\u0d33"+
		"\u0d35\3\2\2\2\u0d34\u0d31\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d36\3\2"+
		"\2\2\u0d36\u0d37\5\u041e\u0210\2\u0d37\u0d38\7\u034f\2\2\u0d38\u0d39\5"+
		"\u041e\u0210\2\u0d39\u0d47\7\u0354\2\2\u0d3a\u0d48\5\u041e\u0210\2\u0d3b"+
		"\u0d3c\5\u041e\u0210\2\u0d3c\u0d3d\7\u034f\2\2\u0d3d\u0d3f\3\2\2\2\u0d3e"+
		"\u0d3b\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u0d40\3\2\2\2\u0d40\u0d41\5\u041e"+
		"\u0210\2\u0d41\u0d42\7\u034f\2\2\u0d42\u0d43\5\u041e\u0210\2\u0d43\u0d44"+
		"\3\2\2\2\u0d44\u0d45\7\u0356\2\2\u0d45\u0d46\t\30\2\2\u0d46\u0d48\3\2"+
		"\2\2\u0d47\u0d3a\3\2\2\2\u0d47\u0d3e\3\2\2\2\u0d48\u0d49\3\2\2\2\u0d49"+
		"\u0d4a\7\u0355\2\2\u0d4a\u0d4c\3\2\2\2\u0d4b\u0d2f\3\2\2\2\u0d4b\u0d34"+
		"\3\2\2\2\u0d4c\u012d\3\2\2\2\u0d4d\u0d4e\7\5\2\2\u0d4e\u0d4f\7C\2\2\u0d4f"+
		"\u0d50\7\u0111\2\2\u0d50\u0d51\7\u0313\2\2\u0d51\u0d52\5\u041e\u0210\2"+
		"\u0d52\u0d62\7\u009e\2\2\u0d53\u0d54\7\u0183\2\2\u0d54\u0d55\7\u0342\2"+
		"\2\u0d55\u0d57\7\u033e\2\2\u0d56\u0d58\7\u0356\2\2\u0d57\u0d56\3\2\2\2"+
		"\u0d57\u0d58\3\2\2\2\u0d58\u0d63\3\2\2\2\u0d59\u0d5a\7\u0203\2\2\u0d5a"+
		"\u0d5b\7\u0342\2\2\u0d5b\u0d5d\7\u033e\2\2\u0d5c\u0d5e\7\u0356\2\2\u0d5d"+
		"\u0d5c\3\2\2\2\u0d5d\u0d5e\3\2\2\2\u0d5e\u0d63\3\2\2\2\u0d5f\u0d60\7\u010c"+
		"\2\2\u0d60\u0d61\7\u0342\2\2\u0d61\u0d63\5\u041e\u0210\2\u0d62\u0d53\3"+
		"\2\2\2\u0d62\u0d59\3\2\2\2\u0d62\u0d5f\3\2\2\2\u0d63\u0d64\3\2\2\2\u0d64"+
		"\u0d62\3\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d7d\3\2\2\2\u0d66\u0d67\7\5"+
		"\2\2\u0d67\u0d68\7C\2\2\u0d68\u0d69\7\u0111\2\2\u0d69\u0d6a\7\u0313\2"+
		"\2\u0d6a\u0d6b\5\u041e\u0210\2\u0d6b\u0d6c\7\u00bd\2\2\u0d6c\u0d6d\7\u0354"+
		"\2\2\u0d6d\u0d6e\7\u0251\2\2\u0d6e\u0d6f\7\u0342\2\2\u0d6f\u0d70\7\u00ee"+
		"\2\2\u0d70\u0d71\7\u0356\2\2\u0d71\u0d72\7\u0183\2\2\u0d72\u0d73\7\u0342"+
		"\2\2\u0d73\u0d78\7\u033e\2\2\u0d74\u0d75\7\u0356\2\2\u0d75\u0d76\7\u010c"+
		"\2\2\u0d76\u0d77\7\u0342\2\2\u0d77\u0d79\5\u041e\u0210\2\u0d78\u0d74\3"+
		"\2\2\2\u0d78\u0d79\3\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a\u0d7b\7\u0355\2\2"+
		"\u0d7b\u0d7d\3\2\2\2\u0d7c\u0d4d\3\2\2\2\u0d7c\u0d66\3\2\2\2\u0d7d\u012f"+
		"\3\2\2\2\u0d7e\u0d7f\7\5\2\2\u0d7f\u0d80\7C\2\2\u0d80\u0d81\7\u02be\2"+
		"\2\u0d81\u0d84\5\u041e\u0210\2\u0d82\u0d83\7\n\2\2\u0d83\u0d85\5\u041e"+
		"\u0210\2\u0d84\u0d82\3\2\2\2\u0d84\u0d85\3\2\2\2\u0d85\u0d86\3\2\2\2\u0d86"+
		"\u0d87\t\36\2\2\u0d87\u0d88\7\u0354\2\2\u0d88\u0d89\7\u0103\2\2\u0d89"+
		"\u0d8d\7\u0342\2\2\u0d8a\u0d8e\7\u033e\2\2\u0d8b\u0d8e\7\u033f\2\2\u0d8c"+
		"\u0d8e\7\u02da\2\2\u0d8d\u0d8a\3\2\2\2\u0d8d\u0d8b\3\2\2\2\u0d8d\u0d8c"+
		"\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0d90\7\u0356\2\2\u0d90\u0d91\7\u02ee"+
		"\2\2\u0d91\u0d93\7\u0342\2\2\u0d92\u0d94\t\37\2\2\u0d93\u0d92\3\2\2\2"+
		"\u0d93\u0d94\3\2\2\2\u0d94\u0d95\3\2\2\2\u0d95\u0d96\7\u0355\2\2\u0d96"+
		"\u0d97\3\2\2\2\u0d97\u0da1\7\u00bd\2\2\u0d98\u0d9a\7\u0356\2\2\u0d99\u0d98"+
		"\3\2\2\2\u0d99\u0d9a\3\2\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0d9c\7\u02bd\2"+
		"\2\u0d9c\u0d9d\7\u0342\2\2\u0d9d\u0da2\t \2\2\u0d9e\u0d9f\7\u0297\2\2"+
		"\u0d9f\u0da0\7\u0342\2\2\u0da0\u0da2\5\u041e\u0210\2\u0da1\u0d99\3\2\2"+
		"\2\u0da1\u0d9e\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da1\3\2\2\2\u0da3\u0da4"+
		"\3\2\2\2\u0da4\u0da5\3\2\2\2\u0da5\u0da6\7\u0355\2\2\u0da6\u0131\3\2\2"+
		"\2\u0da7\u0da8\7#\2\2\u0da8\u0da9\7C\2\2\u0da9\u0daa\7\u02be\2\2\u0daa"+
		"\u0dad\5\u041e\u0210\2\u0dab\u0dac\7\n\2\2\u0dac\u0dae\5\u041e\u0210\2"+
		"\u0dad\u0dab\3\2\2\2\u0dad\u0dae\3\2\2\2\u0dae\u0daf\3\2\2\2\u0daf\u0db1"+
		"\7K\2\2\u0db0\u0db2\7\u0356\2\2\u0db1\u0db0\3\2\2\2\u0db1\u0db2\3\2\2"+
		"\2\u0db2\u0db4\3\2\2\2\u0db3\u0db5\7\u0354\2\2\u0db4\u0db3\3\2\2\2\u0db4"+
		"\u0db5\3\2\2\2\u0db5\u0db8\3\2\2\2\u0db6\u0db7\7\u0103\2\2\u0db7\u0db9"+
		"\7\u0342\2\2\u0db8\u0db6\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dbd\3\2\2"+
		"\2\u0dba\u0dbe\7\u033e\2\2\u0dbb\u0dbe\7\u033f\2\2\u0dbc\u0dbe\7\u02da"+
		"\2\2\u0dbd\u0dba\3\2\2\2\u0dbd\u0dbb\3\2\2\2\u0dbd\u0dbc\3\2\2\2\u0dbe"+
		"\u0dc6\3\2\2\2\u0dbf\u0dc0\7\u0356\2\2\u0dc0\u0dc1\7\u02ee\2\2\u0dc1\u0dc3"+
		"\7\u0342\2\2\u0dc2\u0dc4\t\37\2\2\u0dc3\u0dc2\3\2\2\2\u0dc3\u0dc4\3\2"+
		"\2\2\u0dc4\u0dc5\3\2\2\2\u0dc5\u0dc7\7\u0355\2\2\u0dc6\u0dbf\3\2\2\2\u0dc6"+
		"\u0dc7\3\2\2\2\u0dc7\u0dd7\3\2\2\2\u0dc8\u0dd2\7\u00bd\2\2\u0dc9\u0dcb"+
		"\7\u0356\2\2\u0dca\u0dc9\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u0dcc\3\2\2"+
		"\2\u0dcc\u0dcd\7\u02bd\2\2\u0dcd\u0dce\7\u0342\2\2\u0dce\u0dd3\t \2\2"+
		"\u0dcf\u0dd0\7\u0297\2\2\u0dd0\u0dd1\7\u0342\2\2\u0dd1\u0dd3\5\u041e\u0210"+
		"\2\u0dd2\u0dca\3\2\2\2\u0dd2\u0dcf\3\2\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4\u0dd2"+
		"\3\2\2\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd8\7\u0355\2"+
		"\2\u0dd7\u0dc8\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0133\3\2\2\2\u0dd9\u0dda"+
		"\7\5\2\2\u0dda\u0ddb\7C\2\2\u0ddb\u0ddc\7\u0202\2\2\u0ddc\u0ddf\7\u01d4"+
		"\2\2\u0ddd\u0de0\5\u041e\u0210\2\u0dde\u0de0\7\u011b\2\2\u0ddf\u0ddd\3"+
		"\2\2\2\u0ddf\u0dde\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de2\7\u00bd\2\2"+
		"\u0de2\u0de3\7\u0354\2\2\u0de3\u0de4\7\u018d\2\2\u0de4\u0de5\7\u0342\2"+
		"\2\u0de5\u0e0b\7\u033c\2\2\u0de6\u0de8\7\u0356\2\2\u0de7\u0de6\3\2\2\2"+
		"\u0de7\u0de8\3\2\2\2\u0de8\u0de9\3\2\2\2\u0de9\u0dea\7\u00cb\2\2\u0dea"+
		"\u0deb\7\u0109\2\2\u0deb\u0df9\7\u0342\2\2\u0dec\u0dfa\7\u00dc\2\2\u0ded"+
		"\u0def\7\u0356\2\2\u0dee\u0ded\3\2\2\2\u0dee\u0def\3\2\2\2\u0def\u0df0"+
		"\3\2\2\2\u0df0\u0df1\7\u033c\2\2\u0df1\u0df2\7\u00a8\2\2\u0df2\u0df6\7"+
		"\u033c\2\2\u0df3\u0df4\7\u0356\2\2\u0df4\u0df6\7\u033c\2\2\u0df5\u0dee"+
		"\3\2\2\2\u0df5\u0df3\3\2\2\2\u0df6\u0df7\3\2\2\2\u0df7\u0df5\3\2\2\2\u0df7"+
		"\u0df8\3\2\2\2\u0df8\u0dfa\3\2\2\2\u0df9\u0dec\3\2\2\2\u0df9\u0df5\3\2"+
		"\2\2\u0dfa\u0e0c\3\2\2\2\u0dfb\u0dfc\7\u01ba\2\2\u0dfc\u0e07\7\u0342\2"+
		"\2\u0dfd\u0dff\7\u0356\2\2\u0dfe\u0dfd\3\2\2\2\u0dfe\u0dff\3\2\2\2\u0dff"+
		"\u0e00\3\2\2\2\u0e00\u0e01\7\u033c\2\2\u0e01\u0e02\7\u00a8\2\2\u0e02\u0e08"+
		"\7\u033c\2\2\u0e03\u0e05\7\u0356\2\2\u0e04\u0e03\3\2\2\2\u0e04\u0e05\3"+
		"\2\2\2\u0e05\u0e06\3\2\2\2\u0e06\u0e08\7\u033c\2\2\u0e07\u0dfe\3\2\2\2"+
		"\u0e07\u0e04\3\2\2\2\u0e08\u0e09\3\2\2\2\u0e09\u0e07\3\2\2\2\u0e09\u0e0a"+
		"\3\2\2\2\u0e0a\u0e0c\3\2\2\2\u0e0b\u0de7\3\2\2\2\u0e0b\u0dfb\3\2\2\2\u0e0c"+
		"\u0e13\3\2\2\2\u0e0d\u0e0f\7\u0356\2\2\u0e0e\u0e0d\3\2\2\2\u0e0e\u0e0f"+
		"\3\2\2\2\u0e0f\u0e10\3\2\2\2\u0e10\u0e11\7\u0191\2\2\u0e11\u0e12\7\u0342"+
		"\2\2\u0e12\u0e14\7\u033c\2\2\u0e13\u0e0e\3\2\2\2\u0e13\u0e14\3\2\2\2\u0e14"+
		"\u0e1b\3\2\2\2\u0e15\u0e17\7\u0356\2\2\u0e16\u0e15\3\2\2\2\u0e16\u0e17"+
		"\3\2\2\2\u0e17\u0e18\3\2\2\2\u0e18\u0e19\7\u0192\2\2\u0e19\u0e1a\7\u0342"+
		"\2\2\u0e1a\u0e1c\7\u033c\2\2\u0e1b\u0e16\3\2\2\2\u0e1b\u0e1c\3\2\2\2\u0e1c"+
		"\u0e1d\3\2\2\2\u0e1d\u0e1e\7\u0355\2\2\u0e1e\u0135\3\2\2\2\u0e1f\u0e20"+
		"\7#\2\2\u0e20\u0e21\7C\2\2\u0e21\u0e22\7\u0202\2\2\u0e22\u0e23\7\u01d4"+
		"\2\2\u0e23\u0e24\5\u041e\u0210\2\u0e24\u0e25\7\u00bd\2\2\u0e25\u0e26\7"+
		"\u0354\2\2\u0e26\u0e27\7\u018d\2\2\u0e27\u0e28\7\u0342\2\2\u0e28\u0e4e"+
		"\7\u033c\2\2\u0e29\u0e2b\7\u0356\2\2\u0e2a\u0e29\3\2\2\2\u0e2a\u0e2b\3"+
		"\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2d\7\u00cb\2\2\u0e2d\u0e2e\7\u0109"+
		"\2\2\u0e2e\u0e3c\7\u0342\2\2\u0e2f\u0e3d\7\u00dc\2\2\u0e30\u0e32\7\u0356"+
		"\2\2\u0e31\u0e30\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32\u0e33\3\2\2\2\u0e33"+
		"\u0e34\7\u033c\2\2\u0e34\u0e35\7\u00a8\2\2\u0e35\u0e39\7\u033c\2\2\u0e36"+
		"\u0e37\7\u0356\2\2\u0e37\u0e39\7\u033c\2\2\u0e38\u0e31\3\2\2\2\u0e38\u0e36"+
		"\3\2\2\2\u0e39\u0e3a\3\2\2\2\u0e3a\u0e38\3\2\2\2\u0e3a\u0e3b\3\2\2\2\u0e3b"+
		"\u0e3d\3\2\2\2\u0e3c\u0e2f\3\2\2\2\u0e3c\u0e38\3\2\2\2\u0e3d\u0e4f\3\2"+
		"\2\2\u0e3e\u0e3f\7\u01ba\2\2\u0e3f\u0e4a\7\u0342\2\2\u0e40\u0e42\7\u0356"+
		"\2\2\u0e41\u0e40\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43"+
		"\u0e44\7\u033c\2\2\u0e44\u0e45\7\u00a8\2\2\u0e45\u0e4b\7\u033c\2\2\u0e46"+
		"\u0e48\7\u0356\2\2\u0e47\u0e46\3\2\2\2\u0e47\u0e48\3\2\2\2\u0e48\u0e49"+
		"\3\2\2\2\u0e49\u0e4b\7\u033c\2\2\u0e4a\u0e41\3\2\2\2\u0e4a\u0e47\3\2\2"+
		"\2\u0e4b\u0e4c\3\2\2\2\u0e4c\u0e4a\3\2\2\2\u0e4c\u0e4d\3\2\2\2\u0e4d\u0e4f"+
		"\3\2\2\2\u0e4e\u0e2a\3\2\2\2\u0e4e\u0e3e\3\2\2\2\u0e4f\u0e56\3\2\2\2\u0e50"+
		"\u0e52\7\u0356\2\2\u0e51\u0e50\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e53"+
		"\3\2\2\2\u0e53\u0e54\7\u0191\2\2\u0e54\u0e55\7\u0342\2\2\u0e55\u0e57\7"+
		"\u033c\2\2\u0e56\u0e51\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e5e\3\2\2\2"+
		"\u0e58\u0e5a\7\u0356\2\2\u0e59\u0e58\3\2\2\2\u0e59\u0e5a\3\2\2\2\u0e5a"+
		"\u0e5b\3\2\2\2\u0e5b\u0e5c\7\u0192\2\2\u0e5c\u0e5d\7\u0342\2\2\u0e5d\u0e5f"+
		"\7\u033c\2\2\u0e5e\u0e59\3\2\2\2\u0e5e\u0e5f\3\2\2\2\u0e5f\u0e60\3\2\2"+
		"\2\u0e60\u0e61\7\u0355\2\2\u0e61\u0137\3\2\2\2\u0e62\u0e63\7\5\2\2\u0e63"+
		"\u0e64\7\u0153\2\2\u0e64\u0e65\7\u00f6\2\2\u0e65\u0e70\5\u041e\u0210\2"+
		"\u0e66\u0e6b\7\u01f1\2\2\u0e67\u0e68\7\u00bd\2\2\u0e68\u0e69\7\u00c3\2"+
		"\2\u0e69\u0e6a\7\u0342\2\2\u0e6a\u0e6c\t\t\2\2\u0e6b\u0e67\3\2\2\2\u0e6b"+
		"\u0e6c\3\2\2\2\u0e6c\u0e71\3\2\2\2\u0e6d\u0e71\7\u01fa\2\2\u0e6e\u0e6f"+
		"\7\b\2\2\u0e6f\u0e71\7/\2\2\u0e70\u0e66\3\2\2\2\u0e70\u0e6d\3\2\2\2\u0e70"+
		"\u0e6e\3\2\2\2\u0e71\u0139\3\2\2\2\u0e72\u0e73\7#\2\2\u0e73\u0e74\7\u0153"+
		"\2\2\u0e74\u0e75\7\u00f6\2\2\u0e75\u0e79\5\u041e\u0210\2\u0e76\u0e77\7"+
		"p\2\2\u0e77\u0e78\7\u0144\2\2\u0e78\u0e7a\5\u041e\u0210\2\u0e79\u0e76"+
		"\3\2\2\2\u0e79\u0e7a\3\2\2\2\u0e7a\u0e7e\3\2\2\2\u0e7b\u0e7c\7W\2\2\u0e7c"+
		"\u0e7d\7\u01cf\2\2\u0e7d\u0e7f\7\u033e\2\2\u0e7e\u0e7b\3\2\2\2\u0e7e\u0e7f"+
		"\3\2\2\2\u0e7f\u0e84\3\2\2\2\u0e80\u0e81\7\u00bd\2\2\u0e81\u0e82\7\u00c3"+
		"\2\2\u0e82\u0e83\7\u0342\2\2\u0e83\u0e85\t\t\2\2\u0e84\u0e80\3\2\2\2\u0e84"+
		"\u0e85\3\2\2\2\u0e85\u0e88\3\2\2\2\u0e86\u0e87\7\b\2\2\u0e87\u0e89\7/"+
		"\2\2\u0e88\u0e86\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89\u0e8c\3\2\2\2\u0e8a"+
		"\u0e8b\7\n\2\2\u0e8b\u0e8d\5\u041e\u0210\2\u0e8c\u0e8a\3\2\2\2\u0e8c\u0e8d"+
		"\3\2\2\2\u0e8d\u013b\3\2\2\2\u0e8e\u0e8f\7\5\2\2\u0e8f\u0e90\7\u0153\2"+
		"\2\u0e90\u0e91\7\u0234\2\2\u0e91\u0e9f\5\u041e\u0210\2\u0e92\u0e93\7\3"+
		"\2\2\u0e93\u0e94\7\u033e\2\2\u0e94\u0e95\7\u02bd\2\2\u0e95\u0ea0\t!\2"+
		"\2\u0e96\u0e9d\79\2\2\u0e97\u0e98\7\u033e\2\2\u0e98\u0e99\7\u02bd\2\2"+
		"\u0e99\u0e9e\t!\2\2\u0e9a\u0e9b\7\4\2\2\u0e9b\u0e9e\t!\2\2\u0e9c\u0e9e"+
		"\7\4\2\2\u0e9d\u0e97\3\2\2\2\u0e9d\u0e9a\3\2\2\2\u0e9d\u0e9c\3\2\2\2\u0e9e"+
		"\u0ea0\3\2\2\2\u0e9f\u0e92\3\2\2\2\u0e9f\u0e96\3\2\2\2\u0ea0\u013d\3\2"+
		"\2\2\u0ea1\u0ea2\7#\2\2\u0ea2\u0ea3\7\u0153\2\2\u0ea3\u0ea4\7\u0234\2"+
		"\2\u0ea4\u0eb0\5\u041e\u0210\2\u0ea5\u0eae\7K\2\2\u0ea6\u0ea7\5\u041e"+
		"\u0210\2\u0ea7\u0ea8\7\u034f\2\2\u0ea8\u0eaa\3\2\2\2\u0ea9\u0ea6\3\2\2"+
		"\2\u0ea9\u0eaa\3\2\2\2\u0eaa\u0eab\3\2\2\2\u0eab\u0eaf\5\u041e\u0210\2"+
		"\u0eac\u0ead\7\u023e\2\2\u0ead\u0eaf\7\u0234\2\2\u0eae\u0ea9\3\2\2\2\u0eae"+
		"\u0eac\3\2\2\2\u0eaf\u0eb1\3\2\2\2\u0eb0\u0ea5\3\2\2\2\u0eb0\u0eb1\3\2"+
		"\2\2\u0eb1\u0eb4\3\2\2\2\u0eb2\u0eb3\7\n\2\2\u0eb3\u0eb5\5\u041e\u0210"+
		"\2\u0eb4\u0eb2\3\2\2\2\u0eb4\u0eb5\3\2\2\2\u0eb5\u013f\3\2\2\2\u0eb6\u0eb7"+
		"\7\5\2\2\u0eb7\u0eb8\7\u0186\2\2\u0eb8\u0efc\5\u041e\u0210\2\u0eb9\u0ebb"+
		"\t\27\2\2\u0eba\u0eb9\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u0efd\3\2\2\2"+
		"\u0ebc\u0eca\7\u00bd\2\2\u0ebd\u0ebe\7\u02e8\2\2\u0ebe\u0ec2\7\u0342\2"+
		"\2\u0ebf\u0ec3\7\u033e\2\2\u0ec0\u0ec1\7\u033f\2\2\u0ec1\u0ec3\7\u02b0"+
		"\2\2\u0ec2\u0ebf\3\2\2\2\u0ec2\u0ec0\3\2\2\2\u0ec3\u0ec7\3\2\2\2\u0ec4"+
		"\u0ec6\t\"\2\2\u0ec5\u0ec4\3\2\2\2\u0ec6\u0ec9\3\2\2\2\u0ec7\u0ec5\3\2"+
		"\2\2\u0ec7\u0ec8\3\2\2\2\u0ec8\u0ecb\3\2\2\2\u0ec9\u0ec7\3\2\2\2\u0eca"+
		"\u0ebd\3\2\2\2\u0eca\u0ecb\3\2\2\2\u0ecb\u0ed5\3\2\2\2\u0ecc\u0ecd\7\u02e3"+
		"\2\2\u0ecd\u0ece\7\u0342\2\2\u0ece\u0ed2\7\u033e\2\2\u0ecf\u0ed1\t\"\2"+
		"\2\u0ed0\u0ecf\3\2\2\2\u0ed1\u0ed4\3\2\2\2\u0ed2\u0ed0\3\2\2\2\u0ed2\u0ed3"+
		"\3\2\2\2\u0ed3\u0ed6\3\2\2\2\u0ed4\u0ed2\3\2\2\2\u0ed5\u0ecc\3\2\2\2\u0ed5"+
		"\u0ed6\3\2\2\2\u0ed6\u0eda\3\2\2\2\u0ed7\u0ed8\7\u0299\2\2\u0ed8\u0ed9"+
		"\7\u0342\2\2\u0ed9\u0edb\5\u041e\u0210\2\u0eda\u0ed7\3\2\2\2\u0eda\u0edb"+
		"\3\2\2\2\u0edb\u0edf\3\2\2\2\u0edc\u0edd\7\u011d\2\2\u0edd\u0ede\7\u0342"+
		"\2\2\u0ede\u0ee0\5\u041e\u0210\2\u0edf\u0edc\3\2\2\2\u0edf\u0ee0\3\2\2"+
		"\2\u0ee0\u0ee4\3\2\2\2\u0ee1\u0ee2\7\u01a8\2\2\u0ee2\u0ee3\7\u0342\2\2"+
		"\u0ee3\u0ee5\5\u041e\u0210\2\u0ee4\u0ee1\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5"+
		"\u0ee9\3\2\2\2\u0ee6\u0ee7\7\u0288\2\2\u0ee7\u0ee8\7\u0342\2\2\u0ee8\u0eea"+
		"\t\t\2\2\u0ee9\u0ee6\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0eee\3\2\2\2\u0eeb"+
		"\u0eec\7\u0289\2\2\u0eec\u0eed\7\u0342\2\2\u0eed\u0eef\t\t\2\2\u0eee\u0eeb"+
		"\3\2\2\2\u0eee\u0eef\3\2\2\2\u0eef\u0ef3\3\2\2\2\u0ef0\u0ef1\7\u010c\2"+
		"\2\u0ef1\u0ef2\7\u0342\2\2\u0ef2\u0ef4\5\u041e\u0210\2\u0ef3\u0ef0\3\2"+
		"\2\2\u0ef3\u0ef4\3\2\2\2\u0ef4\u0ef7\3\2\2\2\u0ef5\u0ef6\7\u01af\2\2\u0ef6"+
		"\u0ef8\7\u010c\2\2\u0ef7\u0ef5\3\2\2\2\u0ef7\u0ef8\3\2\2\2\u0ef8\u0efd"+
		"\3\2\2\2\u0ef9\u0efa\t\25\2\2\u0efa\u0efb\7\u010c\2\2\u0efb\u0efd\5\u041e"+
		"\u0210\2\u0efc\u0eba\3\2\2\2\u0efc\u0ebc\3\2\2\2\u0efc\u0ef9\3\2\2\2\u0efd"+
		"\u0141\3\2\2\2\u0efe\u0eff\7#\2\2\u0eff\u0f00\7\u0186\2\2\u0f00\u0f5b"+
		"\5\u041e\u0210\2\u0f01\u0f0f\7\u00bd\2\2\u0f02\u0f03\7\u02e8\2\2\u0f03"+
		"\u0f07\7\u0342\2\2\u0f04\u0f08\7\u033e\2\2\u0f05\u0f06\7\u033f\2\2\u0f06"+
		"\u0f08\7\u02b0\2\2\u0f07\u0f04\3\2\2\2\u0f07\u0f05\3\2\2\2\u0f08\u0f0c"+
		"\3\2\2\2\u0f09\u0f0b\t\"\2\2\u0f0a\u0f09\3\2\2\2\u0f0b\u0f0e\3\2\2\2\u0f0c"+
		"\u0f0a\3\2\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u0f10\3\2\2\2\u0f0e\u0f0c\3\2"+
		"\2\2\u0f0f\u0f02\3\2\2\2\u0f0f\u0f10\3\2\2\2\u0f10\u0f17\3\2\2\2\u0f11"+
		"\u0f13\7\u0356\2\2\u0f12\u0f11\3\2\2\2\u0f12\u0f13\3\2\2\2\u0f13\u0f14"+
		"\3\2\2\2\u0f14\u0f15\7\u0310\2\2\u0f15\u0f16\7\u0342\2\2\u0f16\u0f18\7"+
		"\u033f\2\2\u0f17\u0f12\3\2\2\2\u0f17\u0f18\3\2\2\2\u0f18\u0f1f\3\2\2\2"+
		"\u0f19\u0f1b\7\u0356\2\2\u0f1a\u0f19\3\2\2\2\u0f1a\u0f1b\3\2\2\2\u0f1b"+
		"\u0f1c\3\2\2\2\u0f1c\u0f1d\7\u0299\2\2\u0f1d\u0f1e\7\u0342\2\2\u0f1e\u0f20"+
		"\5\u041e\u0210\2\u0f1f\u0f1a\3\2\2\2\u0f1f\u0f20\3\2\2\2\u0f20\u0f27\3"+
		"\2\2\2\u0f21\u0f23\7\u0356\2\2\u0f22\u0f21\3\2\2\2\u0f22\u0f23\3\2\2\2"+
		"\u0f23\u0f24\3\2\2\2\u0f24\u0f25\7\u011d\2\2\u0f25\u0f26\7\u0342\2\2\u0f26"+
		"\u0f28\5\u041e\u0210\2\u0f27\u0f22\3\2\2\2\u0f27\u0f28\3\2\2\2\u0f28\u0f2f"+
		"\3\2\2\2\u0f29\u0f2b\7\u0356\2\2\u0f2a\u0f29\3\2\2\2\u0f2a\u0f2b\3\2\2"+
		"\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u0f2d\7\u0289\2\2\u0f2d\u0f2e\7\u0342\2\2"+
		"\u0f2e\u0f30\t\t\2\2\u0f2f\u0f2a\3\2\2\2\u0f2f\u0f30\3\2\2\2\u0f30\u0f37"+
		"\3\2\2\2\u0f31\u0f33\7\u0356\2\2\u0f32\u0f31\3\2\2\2\u0f32\u0f33\3\2\2"+
		"\2\u0f33\u0f34\3\2\2\2\u0f34\u0f35\7\u0288\2\2\u0f35\u0f36\7\u0342\2\2"+
		"\u0f36\u0f38\t\t\2\2\u0f37\u0f32\3\2\2\2\u0f37\u0f38\3\2\2\2\u0f38\u0f3f"+
		"\3\2\2\2\u0f39\u0f3b\7\u0356\2\2\u0f3a\u0f39\3\2\2\2\u0f3a\u0f3b\3\2\2"+
		"\2\u0f3b\u0f3c\3\2\2\2\u0f3c\u0f3d\7\u010c\2\2\u0f3d\u0f3e\7\u0342\2\2"+
		"\u0f3e\u0f40\5\u041e\u0210\2\u0f3f\u0f3a\3\2\2\2\u0f3f\u0f40\3\2\2\2\u0f40"+
		"\u0f5c\3\2\2\2\u0f41\u0f59\7K\2\2\u0f42\u0f43\7\u0330\2\2\u0f43\u0f4a"+
		"\7\u00bd\2\2\u0f44\u0f46\7\u0356\2\2\u0f45\u0f44\3\2\2\2\u0f45\u0f46\3"+
		"\2\2\2\u0f46\u0f47\3\2\2\2\u0f47\u0f48\7\u0299\2\2\u0f48\u0f49\7\u0342"+
		"\2\2\u0f49\u0f4b\5\u041e\u0210\2\u0f4a\u0f45\3\2\2\2\u0f4a\u0f4b\3\2\2"+
		"\2\u0f4b\u0f52\3\2\2\2\u0f4c\u0f4e\7\u0356\2\2\u0f4d\u0f4c\3\2\2\2\u0f4d"+
		"\u0f4e\3\2\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f\u0f50\7\u011d\2\2\u0f50\u0f51"+
		"\7\u0342\2\2\u0f51\u0f53\7\u033e\2\2\u0f52\u0f4d\3\2\2\2\u0f52\u0f53\3"+
		"\2\2\2\u0f53\u0f5a\3\2\2\2\u0f54\u0f55\7\u0285\2\2\u0f55\u0f5a\5\u041e"+
		"\u0210\2\u0f56\u0f57\7\u0276\2\2\u0f57\u0f58\7_\2\2\u0f58\u0f5a\5\u041e"+
		"\u0210\2\u0f59\u0f42\3\2\2\2\u0f59\u0f54\3\2\2\2\u0f59\u0f56\3\2\2\2\u0f5a"+
		"\u0f5c\3\2\2\2\u0f5b\u0f01\3\2\2\2\u0f5b\u0f41\3\2\2\2\u0f5c\u0143\3\2"+
		"\2\2\u0f5d\u0f5e\7\5\2\2\u0f5e\u0f5f\7\u0186\2\2\u0f5f\u0f71\5\u041e\u0210"+
		"\2\u0f60\u0f62\t\27\2\2\u0f61\u0f60\3\2\2\2\u0f61\u0f62\3\2\2\2\u0f62"+
		"\u0f72\3\2\2\2\u0f63\u0f6f\7\u00bd\2\2\u0f64\u0f65\7\u02e8\2\2\u0f65\u0f66"+
		"\7\u0342\2\2\u0f66\u0f6a\7\u033e\2\2\u0f67\u0f68\7\u02e3\2\2\u0f68\u0f69"+
		"\7\u0342\2\2\u0f69\u0f6b\7\u033e\2\2\u0f6a\u0f67\3\2\2\2\u0f6a\u0f6b\3"+
		"\2\2\2\u0f6b\u0f70\3\2\2\2\u0f6c\u0f6d\7\u01a8\2\2\u0f6d\u0f6e\7\u0342"+
		"\2\2\u0f6e\u0f70\5\u041e\u0210\2\u0f6f\u0f64\3\2\2\2\u0f6f\u0f6c\3\2\2"+
		"\2\u0f70\u0f72\3\2\2\2\u0f71\u0f61\3\2\2\2\u0f71\u0f63\3\2\2\2\u0f72\u0145"+
		"\3\2\2\2\u0f73\u0f74\7#\2\2\u0f74\u0f75\7\u0186\2\2\u0f75\u0f76\5\u041e"+
		"\u0210\2\u0f76\u0f77\7\u00bd\2\2\u0f77\u0f78\7\u02e8\2\2\u0f78\u0f79\7"+
		"\u0342\2\2\u0f79\u0f7d\7\u033e\2\2\u0f7a\u0f7b\7\u0310\2\2\u0f7b\u0f7c"+
		"\7\u0342\2\2\u0f7c\u0f7e\7\u033f\2\2\u0f7d\u0f7a\3\2\2\2\u0f7d\u0f7e\3"+
		"\2\2\2\u0f7e\u0147\3\2\2\2\u0f7f\u0f80\7\5\2\2\u0f80\u0f81\7\u0186\2\2"+
		"\u0f81\u0f99\5\u041e\u0210\2\u0f82\u0f84\t\27\2\2\u0f83\u0f82\3\2\2\2"+
		"\u0f83\u0f84\3\2\2\2\u0f84\u0f9a\3\2\2\2\u0f85\u0f97\7\u00bd\2\2\u0f86"+
		"\u0f87\7\u02e8\2\2\u0f87\u0f88\7\u0342\2\2\u0f88\u0f92\7\u033e\2\2\u0f89"+
		"\u0f8a\7\u02e3\2\2\u0f8a\u0f8b\7\u0342\2\2\u0f8b\u0f8f\7\u033e\2\2\u0f8c"+
		"\u0f8e\t\"\2\2\u0f8d\u0f8c\3\2\2\2\u0f8e\u0f91\3\2\2\2\u0f8f\u0f8d\3\2"+
		"\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0f93\3\2\2\2\u0f91\u0f8f\3\2\2\2\u0f92"+
		"\u0f89\3\2\2\2\u0f92\u0f93\3\2\2\2\u0f93\u0f98\3\2\2\2\u0f94\u0f95\7\u01a8"+
		"\2\2\u0f95\u0f96\7\u0342\2\2\u0f96\u0f98\5\u041e\u0210\2\u0f97\u0f86\3"+
		"\2\2\2\u0f97\u0f94\3\2\2\2\u0f98\u0f9a\3\2\2\2\u0f99\u0f83\3\2\2\2\u0f99"+
		"\u0f85\3\2\2\2\u0f9a\u0149\3\2\2\2\u0f9b\u0f9c\7#\2\2\u0f9c\u0f9d\7\u0186"+
		"\2\2\u0f9d\u0fae\5\u041e\u0210\2\u0f9e\u0f9f\7\u00bd\2\2\u0f9f\u0fa0\7"+
		"\u02e8\2\2\u0fa0\u0fa1\7\u0342\2\2\u0fa1\u0fa3\7\u033e\2\2\u0fa2\u0fa4"+
		"\7\u02d7\2\2\u0fa3\u0fa2\3\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4\u0faa\3\2\2"+
		"\2\u0fa5\u0fa6\7\u0288\2\2\u0fa6\u0fa8\7\u0342\2\2\u0fa7\u0fa9\t\t\2\2"+
		"\u0fa8\u0fa7\3\2\2\2\u0fa8\u0fa9\3\2\2\2\u0fa9\u0fab\3\2\2\2\u0faa\u0fa5"+
		"\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u0faf\3\2\2\2\u0fac\u0fad\7K\2\2\u0fad"+
		"\u0faf\7\u0330\2\2\u0fae\u0f9e\3\2\2\2\u0fae\u0fac\3\2\2\2\u0faf\u014b"+
		"\3\2\2\2\u0fb0\u0fb1\7\5\2\2\u0fb1\u0fb2\7\u02c6\2\2\u0fb2\u0fc8\7_\2"+
		"\2\u0fb3\u0fb5\7\u014d\2\2\u0fb4\u0fb3\3\2\2\2\u0fb4\u0fb5\3\2\2\2\u0fb5"+
		"\u0fb6\3\2\2\2\u0fb6\u0fb7\7\u02f6\2\2\u0fb7\u0fb8\7\u00bd\2\2\u0fb8\u0fb9"+
		"\7\u0135\2\2\u0fb9\u0fba\7\22\2\2\u0fba\u0fbb\7\u02e8\2\2\u0fbb\u0fbc"+
		"\7\u0342\2\2\u0fbc\u0fc9\7\u033e\2\2\u0fbd\u0fbe\t\25\2\2\u0fbe\u0fbf"+
		"\7\u0135\2\2\u0fbf\u0fc6\7\22\2\2\u0fc0\u0fc1\7\u030b\2\2\u0fc1\u0fc2"+
		"\7\u02c6\2\2\u0fc2\u0fc7\7_\2\2\u0fc3\u0fc4\7\u02e8\2\2\u0fc4\u0fc5\7"+
		"\u0342\2\2\u0fc5\u0fc7\7\u033e\2\2\u0fc6\u0fc0\3\2\2\2\u0fc6\u0fc3\3\2"+
		"\2\2\u0fc7\u0fc9\3\2\2\2\u0fc8\u0fb4\3\2\2\2\u0fc8\u0fbd\3\2\2\2\u0fc9"+
		"\u014d\3\2\2\2\u0fca\u0fcb\7#\2\2\u0fcb\u0fcc\7\u02c6\2\2\u0fcc\u0fcd"+
		"\7_\2\2\u0fcd\u0fce\7\u0135\2\2\u0fce\u0fcf\7\22\2\2\u0fcf\u0fd0\7\u02e8"+
		"\2\2\u0fd0\u0fd1\7\u0342\2\2\u0fd1\u0fd2\7\u033e\2\2\u0fd2\u014f\3\2\2"+
		"\2\u0fd3\u0fd4\7\5\2\2\u0fd4\u0fd5\7\u02c6\2\2\u0fd5\u0ff1\7_\2\2\u0fd6"+
		"\u0fd8\7\u014d\2\2\u0fd7\u0fd6\3\2\2\2\u0fd7\u0fd8\3\2\2\2\u0fd8\u0fd9"+
		"\3\2\2\2\u0fd9\u0fda\7\u02f6\2\2\u0fda\u0fdb\7\u00bd\2\2\u0fdb\u0fdc\7"+
		"\u0135\2\2\u0fdc\u0fdd\7\22\2\2\u0fdd\u0fde\7\u02e8\2\2\u0fde\u0fdf\7"+
		"\u0342\2\2\u0fdf\u0ff2\7\u033e\2\2\u0fe0\u0fe1\7\3\2\2\u0fe1\u0fe2\7\u0135"+
		"\2\2\u0fe2\u0fe9\7\22\2\2\u0fe3\u0fe4\7\u030b\2\2\u0fe4\u0fe5\7\u02c6"+
		"\2\2\u0fe5\u0fea\7_\2\2\u0fe6\u0fe7\7\u02e8\2\2\u0fe7\u0fe8\7\u0342\2"+
		"\2\u0fe8\u0fea\7\u033e\2\2\u0fe9\u0fe3\3\2\2\2\u0fe9\u0fe6\3\2\2\2\u0fea"+
		"\u0ff2\3\2\2\2\u0feb\u0fec\79\2\2\u0fec\u0fed\7\u0135\2\2\u0fed\u0fee"+
		"\7\22\2\2\u0fee\u0fef\7\u02e8\2\2\u0fef\u0ff0\7\u0342\2\2\u0ff0\u0ff2"+
		"\7\u033e\2\2\u0ff1\u0fd7\3\2\2\2\u0ff1\u0fe0\3\2\2\2\u0ff1\u0feb\3\2\2"+
		"\2\u0ff2\u0151\3\2\2\2\u0ff3\u0ff4\7#\2\2\u0ff4\u0ff5\7\u02c6\2\2\u0ff5"+
		"\u0ffb\7_\2\2\u0ff6\u0ff7\7\u0135\2\2\u0ff7\u0ff8\7\22\2\2\u0ff8\u0ff9"+
		"\7\u02e8\2\2\u0ff9\u0ffa\7\u0342\2\2\u0ffa\u0ffc\7\u033e\2\2\u0ffb\u0ff6"+
		"\3\2\2\2\u0ffb\u0ffc\3\2\2\2\u0ffc\u0153\3\2\2\2\u0ffd\u0ffe\7\5\2\2\u0ffe"+
		"\u0fff\7\u019b\2\2\u0fff\u1000\7\u0251\2\2\u1000\u1001\5\u041e\u0210\2"+
		"\u1001\u1002\7\u025a\2\2\u1002\u100b\7\u0342\2\2\u1003\u100c\7\u02da\2"+
		"\2\u1004\u100c\7\u0131\2\2\u1005\u100c\7\u0262\2\2\u1006\u1007\7\u0259"+
		"\2\2\u1007\u1008\7\u00bd\2\2\u1008\u1009\7\u0097\2\2\u1009\u100a\7\u00fd"+
		"\2\2\u100a\u100c\5\u041e\u0210\2\u100b\u1003\3\2\2\2\u100b\u1004\3\2\2"+
		"\2\u100b\u1005\3\2\2\2\u100b\u1006\3\2\2\2\u100c\u0155\3\2\2\2\u100d\u100e"+
		"\7\5\2\2\u100e\u100f\7\u01cc\2\2\u100f\u1010\7M\2\2\u1010\u1011\5\u041e"+
		"\u0210\2\u1011\u1012\7\u0354\2\2\u1012\u1013\7\u0355\2\2\u1013\u1014\t"+
		"#\2\2\u1014\u1015\7\u01e6\2\2\u1015\u1016\7\u0354\2\2\u1016\u1017\7\u033c"+
		"\2\2\u1017\u1018\7\u0355\2\2\u1018\u0157\3\2\2\2\u1019\u101a\7\5\2\2\u101a"+
		"\u101b\7\u01cc\2\2\u101b\u101c\7\u0309\2\2\u101c\u101d\5\u041e\u0210\2"+
		"\u101d\u101e\7\u01ae\2\2\u101e\u1020\7\u032c\2\2\u101f\u1021\5\u041e\u0210"+
		"\2\u1020\u101f\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u0159\3\2\2\2\u1022\u1023"+
		"\7\5\2\2\u1023\u1024\7\u01f7\2\2\u1024\u1025\7\u030b\2\2\u1025\u1026\7"+
		"\u00ed\2\2\u1026\u1027\5\u041e\u0210\2\u1027\u102b\7\u00bd\2\2\u1028\u1029"+
		"\7\u00b5\2\2\u1029\u102a\7\u0342\2\2\u102a\u102c\5\u041e\u0210\2\u102b"+
		"\u1028\3\2\2\2\u102b\u102c\3\2\2\2\u102c\u1031\3\2\2\2\u102d\u102e\7\u0356"+
		"\2\2\u102e\u102f\7\u0273\2\2\u102f\u1030\7\u0342\2\2\u1030\u1032\t\t\2"+
		"\2\u1031\u102d\3\2\2\2\u1031\u1032\3\2\2\2\u1032\u015b\3\2\2\2\u1033\u1034"+
		"\7#\2\2\u1034\u1035\7\u01f7\2\2\u1035\u1036\7\u030b\2\2\u1036\u1037\7"+
		"\u00ed\2\2\u1037\u103a\5\u041e\u0210\2\u1038\u1039\7\n\2\2\u1039\u103b"+
		"\5\u041e\u0210\2\u103a\u1038\3\2\2\2\u103a\u103b\3\2\2\2\u103b\u103c\3"+
		"\2\2\2\u103c\u103d\7\u00a8\2\2\u103d\u103e\7\u030b\2\2\u103e\u103f\7\u033e"+
		"\2\2\u103f\u1043\7\u00bd\2\2\u1040\u1041\7\u00b5\2\2\u1041\u1042\7\u0342"+
		"\2\2\u1042\u1044\5\u041e\u0210\2\u1043\u1040\3\2\2\2\u1043\u1044\3\2\2"+
		"\2\u1044\u1049\3\2\2\2\u1045\u1046\7\u0356\2\2\u1046\u1047\7\u0273\2\2"+
		"\u1047\u1048\7\u0342\2\2\u1048\u104a\t\t\2\2\u1049\u1045\3\2\2\2\u1049"+
		"\u104a\3\2\2\2\u104a\u015d\3\2\2\2\u104b\u104c\7#\2\2\u104c\u104d\7\u0202"+
		"\2\2\u104d\u104e\7\u01d4\2\2\u104e\u10b5\5\u041e\u0210\2\u104f\u1050\7"+
		"\u00bd\2\2\u1050\u1057\7\u0354\2\2\u1051\u1053\7\u0356\2\2\u1052\u1051"+
		"\3\2\2\2\u1052\u1053\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1055\7\u019e\2"+
		"\2\u1055\u1056\7\u0342\2\2\u1056\u1058\7\u033c\2\2\u1057\u1052\3\2\2\2"+
		"\u1057\u1058\3\2\2\2\u1058\u105f\3\2\2\2\u1059\u105b\7\u0356\2\2\u105a"+
		"\u1059\3\2\2\2\u105a\u105b\3\2\2\2\u105b\u105c\3\2\2\2\u105c\u105d\7\u018d"+
		"\2\2\u105d\u105e\7\u0342\2\2\u105e\u1060\7\u033c\2\2\u105f\u105a\3\2\2"+
		"\2\u105f\u1060\3\2\2\2\u1060\u1067\3\2\2\2\u1061\u1063\7\u0356\2\2\u1062"+
		"\u1061\3\2\2\2\u1062\u1063\3\2\2\2\u1063\u1064\3\2\2\2\u1064\u1065\7\u00f3"+
		"\2\2\u1065\u1066\7\u0342\2\2\u1066\u1068\7\u033c\2\2\u1067\u1062\3\2\2"+
		"\2\u1067\u1068\3\2\2\2\u1068\u1092\3\2\2\2\u1069\u106b\7\u0356\2\2\u106a"+
		"\u1069\3\2\2\2\u106a\u106b\3\2\2\2\u106b\u106c\3\2\2\2\u106c\u106d\7\u00cb"+
		"\2\2\u106d\u106e\7\u0308\2\2\u106e\u1090\7\u0342\2\2\u106f\u1091\7\u00dc"+
		"\2\2\u1070\u107a\7\u0354\2\2\u1071\u1073\7\u0356\2\2\u1072\u1071\3\2\2"+
		"\2\u1072\u1073\3\2\2\2\u1073\u1078\3\2\2\2\u1074\u1079\7\u033c\2\2\u1075"+
		"\u1076\7\u033c\2\2\u1076\u1077\7\u00a8\2\2\u1077\u1079\7\u033c\2\2\u1078"+
		"\u1074\3\2\2\2\u1078\u1075\3\2\2\2\u1079\u107b\3\2\2\2\u107a\u1072\3\2"+
		"\2\2\u107b\u107c\3\2\2\2\u107c\u107a\3\2\2\2\u107c\u107d\3\2\2\2\u107d"+
		"\u107e\3\2\2\2\u107e\u1091\7\u0355\2\2\u107f\u1080\7\u01ba\2\2\u1080\u1081"+
		"\7\u0342\2\2\u1081\u108b\7\u0354\2\2\u1082\u1084\7\u0356\2\2\u1083\u1082"+
		"\3\2\2\2\u1083\u1084\3\2\2\2\u1084\u1089\3\2\2\2\u1085\u108a\7\u033c\2"+
		"\2\u1086\u1087\7\u033c\2\2\u1087\u1088\7\u00a8\2\2\u1088\u108a\7\u033c"+
		"\2\2\u1089\u1085\3\2\2\2\u1089\u1086\3\2\2\2\u108a\u108c\3\2\2\2\u108b"+
		"\u1083\3\2\2\2\u108c\u108d\3\2\2\2\u108d\u108b\3\2\2\2\u108d\u108e\3\2"+
		"\2\2\u108e\u108f\3\2\2\2\u108f\u1091\7\u0355\2\2\u1090\u106f\3\2\2\2\u1090"+
		"\u1070\3\2\2\2\u1090\u107f\3\2\2\2\u1091\u1093\3\2\2\2\u1092\u106a\3\2"+
		"\2\2\u1092\u1093\3\2\2\2\u1093\u109a\3\2\2\2\u1094\u1096\7\u0356\2\2\u1095"+
		"\u1094\3\2\2\2\u1095\u1096\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u1098\7\u01a0"+
		"\2\2\u1098\u1099\7\u0342\2\2\u1099\u109b\7\u033c\2\2\u109a\u1095\3\2\2"+
		"\2\u109a\u109b\3\2\2\2\u109b\u10a2\3\2\2\2\u109c\u109e\7\u0356\2\2\u109d"+
		"\u109c\3\2\2\2\u109d\u109e\3\2\2\2\u109e\u109f\3\2\2\2\u109f\u10a0\7\u0191"+
		"\2\2\u10a0\u10a1\7\u0342\2\2\u10a1\u10a3\7\u033c\2\2\u10a2\u109d\3\2\2"+
		"\2\u10a2\u10a3\3\2\2\2\u10a3\u10aa\3\2\2\2\u10a4\u10a6\7\u0356\2\2\u10a5"+
		"\u10a4\3\2\2\2\u10a5\u10a6\3\2\2\2\u10a6\u10a7\3\2\2\2\u10a7\u10a8\7\u019f"+
		"\2\2\u10a8\u10a9\7\u0342\2\2\u10a9\u10ab\7\u033c\2\2\u10aa\u10a5\3\2\2"+
		"\2\u10aa\u10ab\3\2\2\2\u10ab\u10b2\3\2\2\2\u10ac\u10ae\7\u0356\2\2\u10ad"+
		"\u10ac\3\2\2\2\u10ad\u10ae\3\2\2\2\u10ae\u10af\3\2\2\2\u10af\u10b0\7\u0190"+
		"\2\2\u10b0\u10b1\7\u0342\2\2\u10b1\u10b3\7\u033c\2\2\u10b2\u10ad\3\2\2"+
		"\2\u10b2\u10b3\3\2\2\2\u10b3\u10b4\3\2\2\2\u10b4\u10b6\7\u0355\2\2\u10b5"+
		"\u104f\3\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u015f\3\2\2\2\u10b7\u10b8\7\5"+
		"\2\2\u10b8\u10b9\7\u0202\2\2\u10b9\u10cf\7\u02af\2\2\u10ba\u10d0\t$\2"+
		"\2\u10bb\u10bc\7\u00bd\2\2\u10bc\u10bd\7\u0354\2\2\u10bd\u10be\7\u028a"+
		"\2\2\u10be\u10c4\7\u0342\2\2\u10bf\u10c0\5\u041e\u0210\2\u10c0\u10c1\7"+
		"\u034f\2\2\u10c1\u10c2\5\u041e\u0210\2\u10c2\u10c5\3\2\2\2\u10c3\u10c5"+
		"\7k\2\2\u10c4\u10bf\3\2\2\2\u10c4\u10c3\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6"+
		"\u10d0\7\u0355\2\2\u10c7\u10c8\7\u02fa\2\2\u10c8\u10d0\7\u00a2\2\2\u10c9"+
		"\u10ca\7\u00bd\2\2\u10ca\u10cb\7\u0354\2\2\u10cb\u10cc\7\u02ce\2\2\u10cc"+
		"\u10cd\7\u0342\2\2\u10cd\u10ce\7\u033c\2\2\u10ce\u10d0\7\u0355\2\2\u10cf"+
		"\u10ba\3\2\2\2\u10cf\u10bb\3\2\2\2\u10cf\u10c7\3\2\2\2\u10cf\u10c9\3\2"+
		"\2\2\u10d0\u0161\3\2\2\2\u10d1\u10d2\7\5\2\2\u10d2\u10d3\7\u0300\2\2\u10d3"+
		"\u10db\5\u041e\u0210\2\u10d4\u10d5\t\25\2\2\u10d5\u10d6\7\u02d1\2\2\u10d6"+
		"\u10dc\5\u041e\u0210\2\u10d7\u10d8\7\u00bd\2\2\u10d8\u10d9\7\u01a8\2\2"+
		"\u10d9\u10da\7\u0342\2\2\u10da\u10dc\5\u041e\u0210\2\u10db\u10d4\3\2\2"+
		"\2\u10db\u10d7\3\2\2\2\u10dc\u0163\3\2\2\2\u10dd\u10de\7#\2\2\u10de\u10df"+
		"\7\u0300\2\2\u10df\u10e2\5\u041e\u0210\2\u10e0\u10e1\7\n\2\2\u10e1\u10e3"+
		"\5\u041e\u0210\2\u10e2\u10e0\3\2\2\2\u10e2\u10e3\3\2\2\2\u10e3\u0165\3"+
		"\2\2\2\u10e4\u10e5\7#\2\2\u10e5\u10e6\7\u0208\2\2\u10e6\u10e9\5\u041e"+
		"\u0210\2\u10e7\u10e8\7\n\2\2\u10e8\u10ea\5\u041e\u0210\2\u10e9\u10e7\3"+
		"\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u10eb\3\2\2\2\u10eb\u10f2\7\u00bd\2\2"+
		"\u10ec\u10ee\7\u0356\2\2\u10ed\u10ec\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee"+
		"\u10ef\3\2\2\2\u10ef\u10f0\7\u030d\2\2\u10f0\u10f1\7\u0342\2\2\u10f1\u10f3"+
		"\7\u033e\2\2\u10f2\u10ed\3\2\2\2\u10f2\u10f3\3\2\2\2\u10f3\u10fa\3\2\2"+
		"\2\u10f4\u10f6\7\u0356\2\2\u10f5\u10f4\3\2\2\2\u10f5\u10f6\3\2\2\2\u10f6"+
		"\u10f7\3\2\2\2\u10f7\u10f8\7\u00f0\2\2\u10f8\u10f9\7\u0342\2\2\u10f9\u10fb"+
		"\7\u033e\2\2\u10fa\u10f5\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u1102\3\2\2"+
		"\2\u10fc\u10fe\7\u0356\2\2\u10fd\u10fc\3\2\2\2\u10fd\u10fe\3\2\2\2\u10fe"+
		"\u10ff\3\2\2\2\u10ff\u1100\7\u02bf\2\2\u1100\u1101\7\u0342\2\2\u1101\u1103"+
		"\7\u033c\2\2\u1102\u10fd\3\2\2\2\u1102\u1103\3\2\2\2\u1103\u1105\3\2\2"+
		"\2\u1104\u1106\7\u0356\2\2\u1105\u1104\3\2\2\2\u1105\u1106\3\2\2\2\u1106"+
		"\u1107\3\2\2\2\u1107\u1108\7\u00c7\2\2\u1108\u1109\7\u0342\2\2\u1109\u110e"+
		"\7\u033e\2\2\u110a\u110b\7\u0356\2\2\u110b\u110c\7\u01a2\2\2\u110c\u110d"+
		"\7\u0342\2\2\u110d\u110f\7\u033e\2\2\u110e\u110a\3\2\2\2\u110e\u110f\3"+
		"\2\2\2\u110f\u0167\3\2\2\2\u1110\u1111\7#\2\2\u1111\u1115\7\u0095\2\2"+
		"\u1112\u1113\5\u041e\u0210\2\u1113\u1114\7\u034f\2\2\u1114\u1116\3\2\2"+
		"\2\u1115\u1112\3\2\2\2\u1115\u1116\3\2\2\2\u1116\u1117\3\2\2\2\u1117\u1118"+
		"\5\u041e\u0210\2\u1118\u1119\7\b\2\2\u1119\u111a\5\u0320\u0191\2\u111a"+
		"\u0169\3\2\2\2\u111b\u111c\7\5\2\2\u111c\u111d\7\u0097\2\2\u111d\u111e"+
		"\5\u041e\u0210\2\u111e\u1128\7\u0327\2\2\u111f\u1125\7\u01bd\2\2\u1120"+
		"\u1125\7\u0251\2\2\u1121\u1122\7\u0266\2\2\u1122\u1123\7\u0097\2\2\u1123"+
		"\u1125\7\u00fd\2\2\u1124\u111f\3\2\2\2\u1124\u1120\3\2\2\2\u1124\u1121"+
		"\3\2\2\2\u1125\u1126\3\2\2\2\u1126\u1127\7\u0358\2\2\u1127\u1129\7\u0358"+
		"\2\2\u1128\u1124\3\2\2\2\u1128\u1129\3\2\2\2\u1129\u112a\3\2\2\2\u112a"+
		"\u112d\5\u041e\u0210\2\u112b\u112c\7\u034f\2\2\u112c\u112e\5\u041e\u0210"+
		"\2\u112d\u112b\3\2\2\2\u112d\u112e\3\2\2\2\u112e\u016b\3\2\2\2\u112f\u1130"+
		"\7#\2\2\u1130\u1138\7\u0097\2\2\u1131\u1139\5\u041e\u0210\2\u1132\u1133"+
		"\7\n\2\2\u1133\u1139\5\u041e\u0210\2\u1134\u1135\5\u041e\u0210\2\u1135"+
		"\u1136\7\n\2\2\u1136\u1137\5\u041e\u0210\2\u1137\u1139\3\2\2\2\u1138\u1131"+
		"\3\2\2\2\u1138\u1132\3\2\2\2\u1138\u1134\3\2\2\2\u1139\u1156\3\2\2\2\u113a"+
		"\u1155\5\u01fc\u00ff\2\u113b\u1155\5\u0202\u0102\2\u113c\u113d\t%\2\2"+
		"\u113d\u113e\t&\2\2\u113e\u1142\7p\2\2\u113f\u1140\7\u0097\2\2\u1140\u1141"+
		"\7\u0358\2\2\u1141\u1143\7\u0358\2\2\u1142\u113f\3\2\2\2\u1142\u1143\3"+
		"\2\2\2\u1143\u1144\3\2\2\2\u1144\u1145\5\u041e\u0210\2\u1145\u1146\7\u00a8"+
		"\2\2\u1146\u1147\5\u041e\u0210\2\u1147\u1155\3\2\2\2\u1148\u1149\7\u0090"+
		"\2\2\u1149\u114a\t&\2\2\u114a\u114e\7p\2\2\u114b\u114c\7\u0097\2\2\u114c"+
		"\u114d\7\u0358\2\2\u114d\u114f\7\u0358\2\2\u114e\u114b\3\2\2\2\u114e\u114f"+
		"\3\2\2\2\u114f\u1150\3\2\2\2\u1150\u1151\5\u041e\u0210\2\u1151\u1152\7"+
		"K\2\2\u1152\u1153\5\u041e\u0210\2\u1153\u1155\3\2\2\2\u1154\u113a\3\2"+
		"\2\2\u1154\u113b\3\2\2\2\u1154\u113c\3\2\2\2\u1154\u1148\3\2\2\2\u1155"+
		"\u1158\3\2\2\2\u1156\u1154\3\2\2\2\u1156\u1157\3\2\2\2\u1157\u016d\3\2"+
		"\2\2\u1158\u1156\3\2\2\2\u1159\u115a\7#\2\2\u115a\u115b\7\u0097\2\2\u115b"+
		"\u115e\5\u041e\u0210\2\u115c\u115d\7\n\2\2\u115d\u115f\5\u041e\u0210\2"+
		"\u115e\u115c\3\2\2\2\u115e\u115f\3\2\2\2\u115f\u016f\3\2\2\2\u1160\u1161"+
		"\7\5\2\2\u1161\u1162\7\u0097\2\2\u1162\u1163\5\u041e\u0210\2\u1163\u1167"+
		"\7\u0327\2\2\u1164\u1165\7\u01bd\2\2\u1165\u1166\7\u0358\2\2\u1166\u1168"+
		"\7\u0358\2\2\u1167\u1164\3\2\2\2\u1167\u1168\3\2\2\2\u1168\u1169\3\2\2"+
		"\2\u1169\u116c\5\u041e\u0210\2\u116a\u116b\7\u034f\2\2\u116b\u116d\7\u033d"+
		"\2\2\u116c\u116a\3\2\2\2\u116c\u116d\3\2\2\2\u116d\u0171\3\2\2\2\u116e"+
		"\u116f\7#\2\2\u116f\u1170\7\u0212\2\2\u1170\u1171\7\u01df\2\2\u1171\u1172"+
		"\7\u017e\2\2\u1172\u117a\5\u041e\u0210\2\u1173\u1177\7K\2\2\u1174\u1175"+
		"\5\u041e\u0210\2\u1175\u1176\7\u034f\2\2\u1176\u1178\3\2\2\2\u1177\u1174"+
		"\3\2\2\2\u1177\u1178\3\2\2\2\u1178\u1179\3\2\2\2\u1179\u117b\5\u041e\u0210"+
		"\2\u117a\u1173\3\2\2\2\u117a\u117b\3\2\2\2\u117b\u117e\3\2\2\2\u117c\u117d"+
		"\7\n\2\2\u117d\u117f\5\u041e\u0210\2\u117e\u117c\3\2\2\2\u117e\u117f\3"+
		"\2\2\2\u117f\u0173\3\2\2\2\u1180\u1181\7#\2\2\u1181\u1182\7\u0218\2\2"+
		"\u1182\u1186\7\u02ef\2\2\u1183\u1184\5\u041e\u0210\2\u1184\u1185\7\u034f"+
		"\2\2\u1185\u1187\3\2\2\2\u1186\u1183\3\2\2\2\u1186\u1187\3\2\2\2\u1187"+
		"\u1188\3\2\2\2\u1188\u11b1\5\u041e\u0210\2\u1189\u118b\7\u0356\2\2\u118a"+
		"\u1189\3\2\2\2\u118a\u118b\3\2\2\2\u118b\u118c\3\2\2\2\u118c\u118e\7\3"+
		"\2\2\u118d\u118f\t\'\2\2\u118e\u118d\3\2\2\2\u118e\u118f\3\2\2\2\u118f"+
		"\u1190\3\2\2\2\u1190\u1191\7\u02f0\2\2\u1191\u1192\5\u041e\u0210\2\u1192"+
		"\u1193\7\u034f\2\2\u1193\u1194\5\u041e\u0210\2\u1194\u1199\7\u0354\2\2"+
		"\u1195\u1197\7\u0356\2\2\u1196\u1195\3\2\2\2\u1196\u1197\3\2\2\2\u1197"+
		"\u1198\3\2\2\2\u1198\u119a\5\u041e\u0210\2\u1199\u1196\3\2\2\2\u119a\u119b"+
		"\3\2\2\2\u119b\u1199\3\2\2\2\u119b\u119c\3\2\2\2\u119c\u119d\3\2\2\2\u119d"+
		"\u119e\7\u0355\2\2\u119e\u119f\7p\2\2\u119f\u11a0\5\u041e\u0210\2\u11a0"+
		"\u11a1\7\u034f\2\2\u11a1\u11ae\5\u041e\u0210\2\u11a2\u11a4\7\u0356\2\2"+
		"\u11a3\u11a2\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u11a5\3\2\2\2\u11a5\u11a6"+
		"\7\u00cc\2\2\u11a6\u11ad\t(\2\2\u11a7\u11a9\7\u0356\2\2\u11a8\u11a7\3"+
		"\2\2\2\u11a8\u11a9\3\2\2\2\u11a9\u11aa\3\2\2\2\u11aa\u11ab\7\u027c\2\2"+
		"\u11ab\u11ad\t)\2\2\u11ac\u11a3\3\2\2\2\u11ac\u11a8\3\2\2\2\u11ad\u11b0"+
		"\3\2\2\2\u11ae\u11ac\3\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11b2\3\2\2\2\u11b0"+
		"\u11ae\3\2\2\2\u11b1\u118a\3\2\2\2\u11b2\u11b3\3\2\2\2\u11b3\u11b1\3\2"+
		"\2\2\u11b3\u11b4\3\2\2\2\u11b4\u11bf\3\2\2\2\u11b5\u11b6\7\u00bd\2\2\u11b6"+
		"\u11b7\7\u0354\2\2\u11b7\u11b8\7\u0319\2\2\u11b8\u11b9\7\u0342\2\2\u11b9"+
		"\u11bc\t\t\2\2\u11ba\u11bb\7\u020e\2\2\u11bb\u11bd\t\t\2\2\u11bc\u11ba"+
		"\3\2\2\2\u11bc\u11bd\3\2\2\2\u11bd\u11be\3\2\2\2\u11be\u11c0\7\u0355\2"+
		"\2\u11bf\u11b5\3\2\2\2\u11bf\u11c0\3\2\2\2\u11c0\u11c4\3\2\2\2\u11c1\u11c2"+
		"\7j\2\2\u11c2\u11c3\7G\2\2\u11c3\u11c5\7\u008b\2\2\u11c4\u11c1\3\2\2\2"+
		"\u11c4\u11c5\3\2\2\2\u11c5\u0175\3\2\2\2\u11c6\u11c7\7\5\2\2\u11c7\u11cb"+
		"\7\u021f\2\2\u11c8\u11c9\5\u041e\u0210\2\u11c9\u11ca\7\u034f\2\2\u11ca"+
		"\u11cc\3\2\2\2\u11cb\u11c8\3\2\2\2\u11cb\u11cc\3\2\2\2\u11cc\u11cd\3\2"+
		"\2\2\u11cd\u11d3\5\u041e\u0210\2\u11ce\u11d1\7\u02fb\2\2\u11cf\u11d0\7"+
		"\u00bd\2\2\u11d0\u11d2\7\u033c\2\2\u11d1\u11cf\3\2\2\2\u11d1\u11d2\3\2"+
		"\2\2\u11d2\u11d4\3\2\2\2\u11d3\u11ce\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4"+
		"\u11d8\3\2\2\2\u11d5\u11d6\7\u02b5\2\2\u11d6\u11d7\7\22\2\2\u11d7\u11d9"+
		"\7\u033c\2\2\u11d8\u11d5\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11de\3\2\2"+
		"\2\u11da\u11db\7\u02d5\2\2\u11db\u11df\7\u033c\2\2\u11dc\u11dd\7\u01af"+
		"\2\2\u11dd\u11df\7\u02d5\2\2\u11de\u11da\3\2\2\2\u11de\u11dc\3\2\2\2\u11de"+
		"\u11df\3\2\2\2\u11df\u11e4\3\2\2\2\u11e0\u11e1\7\u02c9\2\2\u11e1\u11e5"+
		"\7\u033c\2\2\u11e2\u11e3\7\u01af\2\2\u11e3\u11e5\7\u02c9\2\2\u11e4\u11e0"+
		"\3\2\2\2\u11e4\u11e2\3\2\2\2\u11e4\u11e5\3\2\2\2\u11e5\u11e9\3\2\2\2\u11e6"+
		"\u11ea\7\u0295\2\2\u11e7\u11e8\7\u01af\2\2\u11e8\u11ea\7\u0295\2\2\u11e9"+
		"\u11e6\3\2\2\2\u11e9\u11e7\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u11ef\3\2"+
		"\2\2\u11eb\u11ec\7\u0283\2\2\u11ec\u11f0\7\u033c\2\2\u11ed\u11ee\7\u01af"+
		"\2\2\u11ee\u11f0\7\u0283\2\2\u11ef\u11eb\3\2\2\2\u11ef\u11ed\3\2\2\2\u11ef"+
		"\u11f0\3\2\2\2\u11f0\u0177\3\2\2\2\u11f1\u11f2\7#\2\2\u11f2\u11f6\7\u021f"+
		"\2\2\u11f3\u11f4\5\u041e\u0210\2\u11f4\u11f5\7\u034f\2\2\u11f5\u11f7\3"+
		"\2\2\2\u11f6\u11f3\3\2\2\2\u11f6\u11f7\3\2\2\2\u11f7\u11f8\3\2\2\2\u11f8"+
		"\u11fb\5\u041e\u0210\2\u11f9\u11fa\7\b\2\2\u11fa\u11fc\5\u0414\u020b\2"+
		"\u11fb\u11f9\3\2\2\2\u11fb\u11fc\3\2\2\2\u11fc\u1200\3\2\2\2\u11fd\u11fe"+
		"\7\u031b\2\2\u11fe\u11ff\7\u00bd\2\2\u11ff\u1201\7\u033c\2\2\u1200\u11fd"+
		"\3\2\2\2\u1200\u1201\3\2\2\2\u1201\u1208\3\2\2\2\u1202\u1203\7\u02b5\2"+
		"\2\u1203\u1205\7\22\2\2\u1204\u1206\7\u035d\2\2\u1205\u1204\3\2\2\2\u1205"+
		"\u1206\3\2\2\2\u1206\u1207\3\2\2\2\u1207\u1209\7\u033c\2\2\u1208\u1202"+
		"\3\2\2\2\u1208\u1209\3\2\2\2\u1209\u1210\3\2\2\2\u120a\u120c\7\u02d5\2"+
		"\2\u120b\u120d\7\u033c\2\2\u120c\u120b\3\2\2\2\u120c\u120d\3\2\2\2\u120d"+
		"\u1211\3\2\2\2\u120e\u120f\7\u01af\2\2\u120f\u1211\7\u02d5\2\2\u1210\u120a"+
		"\3\2\2\2\u1210\u120e\3\2\2\2\u1210\u1211\3\2\2\2\u1211\u1218\3\2\2\2\u1212"+
		"\u1214\7\u02c9\2\2\u1213\u1215\7\u033c\2\2\u1214\u1213\3\2\2\2\u1214\u1215"+
		"\3\2\2\2\u1215\u1219\3\2\2\2\u1216\u1217\7\u01af\2\2\u1217\u1219\7\u02c9"+
		"\2\2\u1218\u1212\3\2\2\2\u1218\u1216\3\2\2\2\u1218\u1219\3\2\2\2\u1219"+
		"\u121d\3\2\2\2\u121a\u121e\7\u0295\2\2\u121b\u121c\7\u01af\2\2\u121c\u121e"+
		"\7\u0295\2\2\u121d\u121a\3\2\2\2\u121d\u121b\3\2\2\2\u121d\u121e\3\2\2"+
		"\2\u121e\u1225\3\2\2\2\u121f\u1221\7\u0283\2\2\u1220\u1222\7\u033c\2\2"+
		"\u1221\u1220\3\2\2\2\u1221\u1222\3\2\2\2\u1222\u1226\3\2\2\2\u1223\u1224"+
		"\7\u01af\2\2\u1224\u1226\7\u0283\2\2\u1225\u121f\3\2\2\2\u1225\u1223\3"+
		"\2\2\2\u1225\u1226\3\2\2\2\u1226\u0179\3\2\2\2\u1227\u1228\7\5\2\2\u1228"+
		"\u1229\7\u030a\2\2\u1229\u122a\7\u00da\2\2\u122a\u12ae\5\u041e\u0210\2"+
		"\u122b\u1258\7\u00a8\2\2\u122c\u122d\7E\2\2\u122d\u1252\7\u0354\2\2\u122e"+
		"\u1230\7\u0356\2\2\u122f\u122e\3\2\2\2\u122f\u1230\3\2\2\2\u1230\u1231"+
		"\3\2\2\2\u1231\u1232\7\u0147\2\2\u1232\u1233\7\u0342\2\2\u1233\u1251\7"+
		"\u033e\2\2\u1234\u1236\7\u0356\2\2\u1235\u1234\3\2\2\2\u1235\u1236\3\2"+
		"\2\2\u1236\u1237\3\2\2\2\u1237\u1238\7\u0197\2\2\u1238\u123c\7\u0342\2"+
		"\2\u1239\u123a\7\u033c\2\2\u123a\u123d\t*\2\2\u123b\u123d\7\u0256\2\2"+
		"\u123c\u1239\3\2\2\2\u123c\u123b\3\2\2\2\u123d\u1251\3\2\2\2\u123e\u1240"+
		"\7\u0356\2\2\u123f\u123e\3\2\2\2\u123f\u1240\3\2\2\2\u1240\u1241\3\2\2"+
		"\2\u1241\u1242\7\u0194\2\2\u1242\u1243\7\u0342\2\2\u1243\u1251\t+\2\2"+
		"\u1244\u1246\7\u0356\2\2\u1245\u1244\3\2\2\2\u1245\u1246\3\2\2\2\u1246"+
		"\u1247\3\2\2\2\u1247\u1248\7\u018f\2\2\u1248\u1249\7\u0342\2\2\u1249\u1251"+
		"\7\u033c\2\2\u124a\u124c\7\u0356\2\2\u124b\u124a\3\2\2\2\u124b\u124c\3"+
		"\2\2\2\u124c\u124d\3\2\2\2\u124d\u124e\7\u0201\2\2\u124e\u124f\7\u0342"+
		"\2\2\u124f\u1251\t\t\2\2\u1250\u122f\3\2\2\2\u1250\u1235\3\2\2\2\u1250"+
		"\u123f\3\2\2\2\u1250\u1245\3\2\2\2\u1250\u124b\3\2\2\2\u1251\u1254\3\2"+
		"\2\2\u1252\u1250\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u1255\3\2\2\2\u1254"+
		"\u1252\3\2\2\2\u1255\u1259\7\u0355\2\2\u1256\u1259\7\u00d6\2\2\u1257\u1259"+
		"\7\u0219\2\2\u1258\u122c\3\2\2\2\u1258\u1256\3\2\2\2\u1258\u1257\3\2\2"+
		"\2\u1259\u125b\3\2\2\2\u125a\u122b\3\2\2\2\u125a\u125b\3\2\2\2\u125b\u1276"+
		"\3\2\2\2\u125c\u125d\7\u00bd\2\2\u125d\u1272\7\u0354\2\2\u125e\u1260\7"+
		"\u0356\2\2\u125f\u125e\3\2\2\2\u125f\u1260\3\2\2\2\u1260\u1261\3\2\2\2"+
		"\u1261\u1262\7\u01e4\2\2\u1262\u1263\7\u0342\2\2\u1263\u1271\7\u033c\2"+
		"\2\u1264\u1266\7\u0356\2\2\u1265\u1264\3\2\2\2\u1265\u1266\3\2\2\2\u1266"+
		"\u1267\3\2\2\2\u1267\u1268\7\u02e4\2\2\u1268\u1269\7\u0342\2\2\u1269\u1271"+
		"\t,\2\2\u126a\u126c\7\u0356\2\2\u126b\u126a\3\2\2\2\u126b\u126c\3\2\2"+
		"\2\u126c\u126d\3\2\2\2\u126d\u126e\7\u0319\2\2\u126e\u126f\7\u0342\2\2"+
		"\u126f\u1271\t\t\2\2\u1270\u125f\3\2\2\2\u1270\u1265\3\2\2\2\u1270\u126b"+
		"\3\2\2\2\u1271\u1274\3\2\2\2\u1272\u1270\3\2\2\2\u1272\u1273\3\2\2\2\u1273"+
		"\u1275\3\2\2\2\u1274\u1272\3\2\2\2\u1275\u1277\7\u0355\2\2\u1276\u125c"+
		"\3\2\2\2\u1276\u1277\3\2\2\2\u1277\u12a6\3\2\2\2\u1278\u12a4\7\u00bb\2"+
		"\2\u1279\u127b\7\u0356\2\2\u127a\u1279\3\2\2\2\u127a\u127b\3\2\2\2\u127b"+
		"\u127d\3\2\2\2\u127c\u127e\7j\2\2\u127d\u127c\3\2\2\2\u127d\u127e\3\2"+
		"\2\2\u127e\u127f\3\2\2\2\u127f\u128b\5\u041e\u0210\2\u1280\u128c\7\u0342"+
		"\2\2\u1281\u1282\7\u0344\2\2\u1282\u128c\7\u0343\2\2\u1283\u1284\7\u0345"+
		"\2\2\u1284\u128c\7\u0342\2\2\u1285\u128c\7\u0343\2\2\u1286\u1287\7\u0343"+
		"\2\2\u1287\u128c\7\u0342\2\2\u1288\u128c\7\u0344\2\2\u1289\u128a\7\u0344"+
		"\2\2\u128a\u128c\7\u0342\2\2\u128b\u1280\3\2\2\2\u128b\u1281\3\2\2\2\u128b"+
		"\u1283\3\2\2\2\u128b\u1285\3\2\2\2\u128b\u1286\3\2\2\2\u128b\u1288\3\2"+
		"\2\2\u128b\u1289\3\2\2\2\u128c\u128d\3\2\2\2\u128d\u128e\t\30\2\2\u128e"+
		"\u12a5\3\2\2\2\u128f\u1291\7\u0356\2\2\u1290\u128f\3\2\2\2\u1290\u1291"+
		"\3\2\2\2\u1291\u1292\3\2\2\2\u1292\u1294\t\35\2\2\u1293\u1295\7j\2\2\u1294"+
		"\u1293\3\2\2\2\u1294\u1295\3\2\2\2\u1295\u12a1\3\2\2\2\u1296\u12a2\7\u0342"+
		"\2\2\u1297\u1298\7\u0344\2\2\u1298\u12a2\7\u0343\2\2\u1299\u129a\7\u0345"+
		"\2\2\u129a\u12a2\7\u0342\2\2\u129b\u12a2\7\u0343\2\2\u129c\u129d\7\u0343"+
		"\2\2\u129d\u12a2\7\u0342\2\2\u129e\u12a2\7\u0344\2\2\u129f\u12a0\7\u0344"+
		"\2\2\u12a0\u12a2\7\u0342\2\2\u12a1\u1296\3\2\2\2\u12a1\u1297\3\2\2\2\u12a1"+
		"\u1299\3\2\2\2\u12a1\u129b\3\2\2\2\u12a1\u129c\3\2\2\2\u12a1\u129e\3\2"+
		"\2\2\u12a1\u129f\3\2\2\2\u12a2\u12a3\3\2\2\2\u12a3\u12a5\t\30\2\2\u12a4"+
		"\u127a\3\2\2\2\u12a4\u1290\3\2\2\2\u12a5\u12a7\3\2\2\2\u12a6\u1278\3\2"+
		"\2\2\u12a6\u12a7\3\2\2\2\u12a7\u12af\3\2\2\2\u12a8\u12a9\7\u01f9\2\2\u12a9"+
		"\u12af\7\u00bb\2\2\u12aa\u12ab\7\u01a5\2\2\u12ab\u12ac\7\u01a8\2\2\u12ac"+
		"\u12ad\7\u0342\2\2\u12ad\u12af\5\u041e\u0210\2\u12ae\u125a\3\2\2\2\u12ae"+
		"\u12a8\3\2\2\2\u12ae\u12aa\3\2\2\2\u12af\u017b\3\2\2\2\u12b0\u12b1\7#"+
		"\2\2\u12b1\u12b2\7\u030a\2\2\u12b2\u12b3\7\u00da\2\2\u12b3\u133d\5\u041e"+
		"\u0210\2\u12b4\u12e1\7\u00a8\2\2\u12b5\u12b6\7E\2\2\u12b6\u12db\7\u0354"+
		"\2\2\u12b7\u12b9\7\u0356\2\2\u12b8\u12b7\3\2\2\2\u12b8\u12b9\3\2\2\2\u12b9"+
		"\u12ba\3\2\2\2\u12ba\u12bb\7\u0147\2\2\u12bb\u12bc\7\u0342\2\2\u12bc\u12da"+
		"\7\u033e\2\2\u12bd\u12bf\7\u0356\2\2\u12be\u12bd\3\2\2\2\u12be\u12bf\3"+
		"\2\2\2\u12bf\u12c0\3\2\2\2\u12c0\u12c1\7\u0197\2\2\u12c1\u12c5\7\u0342"+
		"\2\2\u12c2\u12c3\7\u033c\2\2\u12c3\u12c6\t*\2\2\u12c4\u12c6\7\u0256\2"+
		"\2\u12c5\u12c2\3\2\2\2\u12c5\u12c4\3\2\2\2\u12c6\u12da\3\2\2\2\u12c7\u12c9"+
		"\7\u0356\2\2\u12c8\u12c7\3\2\2\2\u12c8\u12c9\3\2\2\2\u12c9\u12ca\3\2\2"+
		"\2\u12ca\u12cb\7\u0194\2\2\u12cb\u12cc\7\u0342\2\2\u12cc\u12da\t+\2\2"+
		"\u12cd\u12cf\7\u0356\2\2\u12ce\u12cd\3\2\2\2\u12ce\u12cf\3\2\2\2\u12cf"+
		"\u12d0\3\2\2\2\u12d0\u12d1\7\u018f\2\2\u12d1\u12d2\7\u0342\2\2\u12d2\u12da"+
		"\7\u033c\2\2\u12d3\u12d5\7\u0356\2\2\u12d4\u12d3\3\2\2\2\u12d4\u12d5\3"+
		"\2\2\2\u12d5\u12d6\3\2\2\2\u12d6\u12d7\7\u0201\2\2\u12d7\u12d8\7\u0342"+
		"\2\2\u12d8\u12da\t\t\2\2\u12d9\u12b8\3\2\2\2\u12d9\u12be\3\2\2\2\u12d9"+
		"\u12c8\3\2\2\2\u12d9\u12ce\3\2\2\2\u12d9\u12d4\3\2\2\2\u12da\u12dd\3\2"+
		"\2\2\u12db\u12d9\3\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u12de\3\2\2\2\u12dd"+
		"\u12db\3\2\2\2\u12de\u12e2\7\u0355\2\2\u12df\u12e2\7\u00d6\2\2\u12e0\u12e2"+
		"\7\u0219\2\2\u12e1\u12b5\3\2\2\2\u12e1\u12df\3\2\2\2\u12e1\u12e0\3\2\2"+
		"\2\u12e2\u12e4\3\2\2\2\u12e3\u12b4\3\2\2\2\u12e3\u12e4\3\2\2\2\u12e4\u1305"+
		"\3\2\2\2\u12e5\u12e6\7\u00bd\2\2\u12e6\u1301\7\u0354\2\2\u12e7\u12e9\7"+
		"\u0356\2\2\u12e8\u12e7\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u12ea\3\2\2\2"+
		"\u12ea\u12eb\7\u01e4\2\2\u12eb\u12ec\7\u0342\2\2\u12ec\u1300\7\u033c\2"+
		"\2\u12ed\u12ef\7\u0356\2\2\u12ee\u12ed\3\2\2\2\u12ee\u12ef\3\2\2\2\u12ef"+
		"\u12f0\3\2\2\2\u12f0\u12f1\7\u02e4\2\2\u12f1\u12f2\7\u0342\2\2\u12f2\u1300"+
		"\t,\2\2\u12f3\u12f5\7\u0356\2\2\u12f4\u12f3\3\2\2\2\u12f4\u12f5\3\2\2"+
		"\2\u12f5\u12f6\3\2\2\2\u12f6\u12f7\7\u0319\2\2\u12f7\u12f8\7\u0342\2\2"+
		"\u12f8\u1300\t\t\2\2\u12f9\u12fb\7\u0356\2\2\u12fa\u12f9\3\2\2\2\u12fa"+
		"\u12fb\3\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u12fd\7\u00db\2\2\u12fd\u12fe"+
		"\7\u0342\2\2\u12fe\u1300\5\u041e\u0210\2\u12ff\u12e8\3\2\2\2\u12ff\u12ee"+
		"\3\2\2\2\u12ff\u12f4\3\2\2\2\u12ff\u12fa\3\2\2\2\u1300\u1303\3\2\2\2\u1301"+
		"\u12ff\3\2\2\2\u1301\u1302\3\2\2\2\u1302\u1304\3\2\2\2\u1303\u1301\3\2"+
		"\2\2\u1304\u1306\7\u0355\2\2\u1305\u12e5\3\2\2\2\u1305\u1306\3\2\2\2\u1306"+
		"\u1335\3\2\2\2\u1307\u1333\7\u00bb\2\2\u1308\u130a\7\u0356\2\2\u1309\u1308"+
		"\3\2\2\2\u1309\u130a\3\2\2\2\u130a\u130c\3\2\2\2\u130b\u130d\7j\2\2\u130c"+
		"\u130b\3\2\2\2\u130c\u130d\3\2\2\2\u130d\u130e\3\2\2\2\u130e\u131a\5\u041e"+
		"\u0210\2\u130f\u131b\7\u0342\2\2\u1310\u1311\7\u0344\2\2\u1311\u131b\7"+
		"\u0343\2\2\u1312\u1313\7\u0345\2\2\u1313\u131b\7\u0342\2\2\u1314\u131b"+
		"\7\u0343\2\2\u1315\u1316\7\u0343\2\2\u1316\u131b\7\u0342\2\2\u1317\u131b"+
		"\7\u0344\2\2\u1318\u1319\7\u0344\2\2\u1319\u131b\7\u0342\2\2\u131a\u130f"+
		"\3\2\2\2\u131a\u1310\3\2\2\2\u131a\u1312\3\2\2\2\u131a\u1314\3\2\2\2\u131a"+
		"\u1315\3\2\2\2\u131a\u1317\3\2\2\2\u131a\u1318\3\2\2\2\u131b\u131c\3\2"+
		"\2\2\u131c\u131d\t\30\2\2\u131d\u1334\3\2\2\2\u131e\u1320\7\u0356\2\2"+
		"\u131f\u131e\3\2\2\2\u131f\u1320\3\2\2\2\u1320\u1321\3\2\2\2\u1321\u1323"+
		"\t\35\2\2\u1322\u1324\7j\2\2\u1323\u1322\3\2\2\2\u1323\u1324\3\2\2\2\u1324"+
		"\u1330\3\2\2\2\u1325\u1331\7\u0342\2\2\u1326\u1327\7\u0344\2\2\u1327\u1331"+
		"\7\u0343\2\2\u1328\u1329\7\u0345\2\2\u1329\u1331\7\u0342\2\2\u132a\u1331"+
		"\7\u0343\2\2\u132b\u132c\7\u0343\2\2\u132c\u1331\7\u0342\2\2\u132d\u1331"+
		"\7\u0344\2\2\u132e\u132f\7\u0344\2\2\u132f\u1331\7\u0342\2\2\u1330\u1325"+
		"\3\2\2\2\u1330\u1326\3\2\2\2\u1330\u1328\3\2\2\2\u1330\u132a\3\2\2\2\u1330"+
		"\u132b\3\2\2\2\u1330\u132d\3\2\2\2\u1330\u132e\3\2\2\2\u1331\u1332\3\2"+
		"\2\2\u1332\u1334\t\30\2\2\u1333\u1309\3\2\2\2\u1333\u131f\3\2\2\2\u1334"+
		"\u1336\3\2\2\2\u1335\u1307\3\2\2\2\u1335\u1336\3\2\2\2\u1336\u133e\3\2"+
		"\2\2\u1337\u1338\7\u01f9\2\2\u1338\u133e\7\u00bb\2\2\u1339\u133a\7\u01a5"+
		"\2\2\u133a\u133b\7\u01a8\2\2\u133b\u133c\7\u0342\2\2\u133c\u133e\5\u041e"+
		"\u0210\2\u133d\u12e3\3\2\2\2\u133d\u1337\3\2\2\2\u133d\u1339\3\2\2\2\u133e"+
		"\u017d\3\2\2\2\u133f\u1340\7\5\2\2\u1340\u1341\7\u030a\2\2\u1341\u1342"+
		"\7\u00da\2\2\u1342\u1343\7\u0314\2\2\u1343\u1348\5\u041e\u0210\2\u1344"+
		"\u1345\7G\2\2\u1345\u1346\7\u030a\2\2\u1346\u1347\7\u00da\2\2\u1347\u1349"+
		"\5\u041e\u0210\2\u1348\u1344\3\2\2\2\u1348\u1349\3\2\2\2\u1349\u1351\3"+
		"\2\2\2\u134a\u134b\t\25\2\2\u134b\u134c\7\u0354\2\2\u134c\u134d\5\u041e"+
		"\u0210\2\u134d\u134e\7\u0355\2\2\u134e\u1350\3\2\2\2\u134f\u134a\3\2\2"+
		"\2\u1350\u1353\3\2\2\2\u1351\u134f\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u135a"+
		"\3\2\2\2\u1353\u1351\3\2\2\2\u1354\u1355\7\u00bd\2\2\u1355\u1356\7\u0354"+
		"\2\2\u1356\u1357\7\u0319\2\2\u1357\u1358\7\u0342\2\2\u1358\u1359\t\t\2"+
		"\2\u1359\u135b\7\u0355\2\2\u135a\u1354\3\2\2\2\u135a\u135b\3\2\2\2\u135b"+
		"\u017f\3\2\2\2\u135c\u135d\7#\2\2\u135d\u135e\7\u030a\2\2\u135e\u135f"+
		"\7\u00da\2\2\u135f\u1360\7\u0314\2\2\u1360\u1365\5\u041e\u0210\2\u1361"+
		"\u1362\7G\2\2\u1362\u1363\7\u030a\2\2\u1363\u1364\7\u00da\2\2\u1364\u1366"+
		"\5\u041e\u0210\2\u1365\u1361\3\2\2\2\u1365\u1366\3\2\2\2\u1366\u136e\3"+
		"\2\2\2\u1367\u1368\7\3\2\2\u1368\u1369\7\u0354\2\2\u1369\u136a\5\u041e"+
		"\u0210\2\u136a\u136b\7\u0355\2\2\u136b\u136d\3\2\2\2\u136c\u1367\3\2\2"+
		"\2\u136d\u1370\3\2\2\2\u136e\u136c\3\2\2\2\u136e\u136f\3\2\2\2\u136f\u1377"+
		"\3\2\2\2\u1370\u136e\3\2\2\2\u1371\u1372\7\u00bd\2\2\u1372\u1373\7\u0354"+
		"\2\2\u1373\u1374\7\u0319\2\2\u1374\u1375\7\u0342\2\2\u1375\u1376\t\t\2"+
		"\2\u1376\u1378\7\u0355\2\2\u1377\u1371\3\2\2\2\u1377\u1378\3\2\2\2\u1378"+
		"\u0181\3\2\2\2\u1379\u137a\7\5\2\2\u137a\u137b\7\u030a\2\2\u137b\u137c"+
		"\7\u028d\2\2\u137c\u13e6\7\u009e\2\2\u137d\u137e\7\u02f1\2\2\u137e\u13a2"+
		"\7\u00cb\2\2\u137f\u1380\7\u0109\2\2\u1380\u1390\7\u0342\2\2\u1381\u1391"+
		"\7\u00dc\2\2\u1382\u1384\7\u0356\2\2\u1383\u1382\3\2\2\2\u1383\u1384\3"+
		"\2\2\2\u1384\u1385\3\2\2\2\u1385\u138d\7\u033c\2\2\u1386\u1388\7\u0356"+
		"\2\2\u1387\u1386\3\2\2\2\u1387\u1388\3\2\2\2\u1388\u1389\3\2\2\2\u1389"+
		"\u138a\7\u033c\2\2\u138a\u138b\7\u00a8\2\2\u138b\u138d\7\u033c\2\2\u138c"+
		"\u1383\3\2\2\2\u138c\u1387\3\2\2\2\u138d\u138e\3\2\2\2\u138e\u138c\3\2"+
		"\2\2\u138e\u138f\3\2\2\2\u138f\u1391\3\2\2\2\u1390\u1381\3\2\2\2\u1390"+
		"\u138c\3\2\2\2\u1391\u13a3\3\2\2\2\u1392\u1393\7\u01ba\2\2\u1393\u139e"+
		"\7\u0342\2\2\u1394\u1396\7\u0356\2\2\u1395\u1394\3\2\2\2\u1395\u1396\3"+
		"\2\2\2\u1396\u1397\3\2\2\2\u1397\u139f\7\u033c\2\2\u1398\u139a\7\u0356"+
		"\2\2\u1399\u1398\3\2\2\2\u1399\u139a\3\2\2\2\u139a\u139b\3\2\2\2\u139b"+
		"\u139c\7\u033c\2\2\u139c\u139d\7\u00a8\2\2\u139d\u139f\7\u033c\2\2\u139e"+
		"\u1395\3\2\2\2\u139e\u1399\3\2\2\2\u139f\u13a0\3\2\2\2\u13a0\u139e\3\2"+
		"\2\2\u13a0\u13a1\3\2\2\2\u13a1\u13a3\3\2\2\2\u13a2\u137f\3\2\2\2\u13a2"+
		"\u1392\3\2\2\2\u13a3\u13e7\3\2\2\2\u13a4\u13a5\7\u029b\2\2\u13a5\u13b5"+
		"\7\u02c4\2\2\u13a6\u13b6\7p\2\2\u13a7\u13b6\7n\2\2\u13a8\u13a9\7\u01cf"+
		"\2\2\u13a9\u13aa\7\u0342\2\2\u13aa\u13b6\t-\2\2\u13ab\u13ac\7\u02cd\2"+
		"\2\u13ac\u13b0\7\u0342\2\2\u13ad\u13ae\7\u033c\2\2\u13ae\u13b1\7\u0198"+
		"\2\2\u13af\u13b1\7/\2\2\u13b0\u13ad\3\2\2\2\u13b0\u13af\3\2\2\2\u13b1"+
		"\u13b6\3\2\2\2\u13b2\u13b3\7\u018f\2\2\u13b3\u13b4\7\u0342\2\2\u13b4\u13b6"+
		"\t.\2\2\u13b5\u13a6\3\2\2\2\u13b5\u13a7\3\2\2\2\u13b5\u13a8\3\2\2\2\u13b5"+
		"\u13ab\3\2\2\2\u13b5\u13b2\3\2\2\2\u13b6\u13e7\3\2\2\2\u13b7\u13b8\7\u02a8"+
		"\2\2\u13b8\u13b9\7\u028b\2\2\u13b9\u13cb\7\u01df\2\2\u13ba\u13bb\7\u032d"+
		"\2\2\u13bb\u13bc\7\u0342\2\2\u13bc\u13cc\t-\2\2\u13bd\u13be\7\u0316\2"+
		"\2\u13be\u13bf\7\u0342\2\2\u13bf\u13cc\t-\2\2\u13c0\u13c1\7\u0317\2\2"+
		"\u13c1\u13c2\7\u0342\2\2\u13c2\u13cc\t-\2\2\u13c3\u13c4\7\u0318\2\2\u13c4"+
		"\u13cc\t-\2\2\u13c5\u13c6\7\u02a9\2\2\u13c6\u13c7\7\u0342\2\2\u13c7\u13cc"+
		"\t-\2\2\u13c8\u13c9\7\u02b1\2\2\u13c9\u13ca\7\u0342\2\2\u13ca\u13cc\t"+
		".\2\2\u13cb\u13ba\3\2\2\2\u13cb\u13bd\3\2\2\2\u13cb\u13c0\3\2\2\2\u13cb"+
		"\u13c3\3\2\2\2\u13cb\u13c5\3\2\2\2\u13cb\u13c8\3\2\2\2\u13cc\u13e7\3\2"+
		"\2\2\u13cd\u13ce\7\u015d\2\2\u13ce\u13cf\7\u028b\2\2\u13cf\u13d0\7\u028f"+
		"\2\2\u13d0\u13d1\7\u0342\2\2\u13d1\u13e7\t/\2\2\u13d2\u13d3\7\u0281\2"+
		"\2\u13d3\u13d4\7\u01d4\2\2\u13d4\u13e1\7\u02a6\2\2\u13d5\u13d6\7p\2\2"+
		"\u13d6\u13d7\7\u0354\2\2\u13d7\u13d8\7\u0146\2\2\u13d8\u13d9\7\u0342\2"+
		"\2\u13d9\u13da\7\u033e\2\2\u13da\u13db\7\u0356\2\2\u13db\u13dc\7\u0228"+
		"\2\2\u13dc\u13dd\7\u0342\2\2\u13dd\u13de\7\u033c\2\2\u13de\u13df\t\60"+
		"\2\2\u13df\u13e2\7\u0355\2\2\u13e0\u13e2\7n\2\2\u13e1\u13d5\3\2\2\2\u13e1"+
		"\u13e0\3\2\2\2\u13e2\u13e7\3\2\2\2\u13e3\u13e4\7\u009e\2\2\u13e4\u13e5"+
		"\7\u0312\2\2\u13e5\u13e7\t\t\2\2\u13e6\u137d\3\2\2\2\u13e6\u13a4\3\2\2"+
		"\2\u13e6\u13b7\3\2\2\2\u13e6\u13cd\3\2\2\2\u13e6\u13d2\3\2\2\2\u13e6\u13e3"+
		"\3\2\2\2\u13e7\u0183\3\2\2\2\u13e8\u13e9\7\5\2\2\u13e9\u13ea\7\u030a\2"+
		"\2\u13ea\u13eb\7\u0300\2\2\u13eb\u13f3\5\u041e\u0210\2\u13ec\u13ed\t\25"+
		"\2\2\u13ed\u13ee\7\u02d1\2\2\u13ee\u13f4\5\u041e\u0210\2\u13ef\u13f0\7"+
		"\u00bd\2\2\u13f0\u13f1\7\u01a8\2\2\u13f1\u13f2\7\u0342\2\2\u13f2\u13f4"+
		"\5\u041e\u0210\2\u13f3\u13ec\3\2\2\2\u13f3\u13ef\3\2\2\2\u13f4\u0185\3"+
		"\2\2\2\u13f5\u13f6\7#\2\2\u13f6\u13f7\7\u030a\2\2\u13f7\u13f8\7\u0300"+
		"\2\2\u13f8\u13fb\5\u041e\u0210\2\u13f9\u13fa\7\n\2\2\u13fa\u13fc\5\u041e"+
		"\u0210\2\u13fb\u13f9\3\2\2\2\u13fb\u13fc\3\2\2\2\u13fc\u0187\3\2\2\2\u13fd"+
		"\u13fe\7\5\2\2\u13fe\u13ff\7\u030a\2\2\u13ff\u1400\7\u0300\2\2\u1400\u1401"+
		"\5\u041e\u0210\2\u1401\u1402\t\25\2\2\u1402\u1403\7\u02d1\2\2\u1403\u1404"+
		"\5\u041e\u0210\2\u1404\u0189\3\2\2\2\u1405\u1406\7\5\2\2\u1406\u1407\7"+
		"\u030b\2\2\u1407\u140f\5\u041e\u0210\2\u1408\u1409\7p\2\2\u1409\u140a"+
		"\7\u01e3\2\2\u140a\u140b\5\u041e\u0210\2\u140b\u140c\7\u034f\2\2\u140c"+
		"\u140d\3\2\2\2\u140d\u140e\5\u041e\u0210\2\u140e\u1410\3\2\2\2\u140f\u1408"+
		"\3\2\2\2\u140f\u1410\3\2\2\2\u1410\u1418\3\2\2\2\u1411\u1413\7\u0356\2"+
		"\2\u1412\u1411\3\2\2\2\u1412\u1413\3\2\2\2\u1413\u1414\3\2\2\2\u1414\u1415"+
		"\t\25\2\2\u1415\u1417\5\u041e\u0210\2\u1416\u1412\3\2\2\2\u1417\u141a"+
		"\3\2\2\2\u1418\u1416\3\2\2\2\u1418\u1419\3\2\2\2\u1419\u018b\3\2\2\2\u141a"+
		"\u1418\3\2\2\2\u141b\u141c\7#\2\2\u141c\u141d\7\u030b\2\2\u141d\u1420"+
		"\5\u041e\u0210\2\u141e\u141f\7\n\2\2\u141f\u1421\5\u041e\u0210\2\u1420"+
		"\u141e\3\2\2\2\u1420\u1421\3\2\2\2\u1421\u1422\3\2\2\2\u1422\u1423\7p"+
		"\2\2\u1423\u1427\7\u01e3\2\2\u1424\u1425\5\u041e\u0210\2\u1425\u1426\7"+
		"\u034f\2\2\u1426\u1428\3\2\2\2\u1427\u1424\3\2\2\2\u1427\u1428\3\2\2\2"+
		"\u1428\u1429\3\2\2\2\u1429\u1437\5\u041e\u0210\2\u142a\u1432\7\u0354\2"+
		"\2\u142b\u142d\7\u0356\2\2\u142c\u142b\3\2\2\2\u142c\u142d\3\2\2\2\u142d"+
		"\u1430\3\2\2\2\u142e\u1431\5\u041e\u0210\2\u142f\u1431\7/\2\2\u1430\u142e"+
		"\3\2\2\2\u1430\u142f\3\2\2\2\u1431\u1433\3\2\2\2\u1432\u142c\3\2\2\2\u1433"+
		"\u1434\3\2\2\2\u1434\u1432\3\2\2\2\u1434\u1435\3\2\2\2\u1435\u1436\3\2"+
		"\2\2\u1436\u1438\7\u0355\2\2\u1437\u142a\3\2\2\2\u1437\u1438\3\2\2\2\u1438"+
		"\u018d\3\2\2\2\u1439\u143a\7\5\2\2\u143a\u143b\7\u030b\2\2\u143b\u143c"+
		"\7\u02c6\2\2\u143c\u1452\7_\2\2\u143d\u143f\7\u014d\2\2\u143e\u143d\3"+
		"\2\2\2\u143e\u143f\3\2\2\2\u143f\u1440\3\2\2\2\u1440\u1453\7\u02f6\2\2"+
		"\u1441\u1450\7\u00bd\2\2\u1442\u1443\7\u01c0\2\2\u1443\u1444\7\u0342\2"+
		"\2\u1444\u1445\7\u033e\2\2\u1445\u1446\7\u0356\2\2\u1446\u1447\7\u02e3"+
		"\2\2\u1447\u1448\7\u0342\2\2\u1448\u1451\7\u033e\2\2\u1449\u144a\7\u01aa"+
		"\2\2\u144a\u144b\7\u0342\2\2\u144b\u144c\7\u033e\2\2\u144c\u144d\7\u0356"+
		"\2\2\u144d\u144e\7\u01ac\2\2\u144e\u144f\7\u0342\2\2\u144f\u1451\7\u033e"+
		"\2\2\u1450\u1442\3\2\2\2\u1450\u1449\3\2\2\2\u1450\u1451\3\2\2\2\u1451"+
		"\u1453\3\2\2\2\u1452\u143e\3\2\2\2\u1452\u1441\3\2\2\2\u1453\u018f\3\2"+
		"\2\2\u1454\u1455\7\5\2\2\u1455\u1456\7\u023b\2\2\u1456\u1457\7_\2\2\u1457"+
		"\u1458\5\u041e\u0210\2\u1458\u1459\t\25\2\2\u1459\u145a\7\u0135\2\2\u145a"+
		"\u1466\7\22\2\2\u145b\u145c\7\u0285\2\2\u145c\u1467\5\u041e\u0210\2\u145d"+
		"\u145e\7\u02e8\2\2\u145e\u145f\7\u0342\2\2\u145f\u1467\7\u033e\2\2\u1460"+
		"\u1461\7\u023b\2\2\u1461\u1462\7_\2\2\u1462\u1467\5\u041e\u0210\2\u1463"+
		"\u1464\7\u0276\2\2\u1464\u1465\7_\2\2\u1465\u1467\5\u041e\u0210\2\u1466"+
		"\u145b\3\2\2\2\u1466\u145d\3\2\2\2\u1466\u1460\3\2\2\2\u1466\u1463\3\2"+
		"\2\2\u1467\u0191\3\2\2\2\u1468\u1469\7#\2\2\u1469\u146d\7\u023d\2\2\u146a"+
		"\u146b\5\u041e\u0210\2\u146b\u146c\7\u034f\2\2\u146c\u146e\3\2\2\2\u146d"+
		"\u146a\3\2\2\2\u146d\u146e\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u1470\5\u041e"+
		"\u0210\2\u1470\u148b\7G\2\2\u1471\u1472\5\u041e\u0210\2\u1472\u1473\7"+
		"\u034f\2\2\u1473\u1475\3\2\2\2\u1474\u1471\3\2\2\2\u1474\u1475\3\2\2\2"+
		"\u1475\u1479\3\2\2\2\u1476\u1477\5\u041e\u0210\2\u1477\u1478\7\u034f\2"+
		"\2\u1478\u147a\3\2\2\2\u1479\u1476\3\2\2\2\u1479\u147a\3\2\2\2\u147a\u147e"+
		"\3\2\2\2\u147b\u147c\5\u041e\u0210\2\u147c\u147d\7\u034f\2\2\u147d\u147f"+
		"\3\2\2\2\u147e\u147b\3\2\2\2\u147e\u147f\3\2\2\2\u147f\u1480\3\2\2\2\u1480"+
		"\u148c\5\u041e\u0210\2\u1481\u1482\5\u041e\u0210\2\u1482\u1483\7\u034f"+
		"\2\2\u1483\u1485\3\2\2\2\u1484\u1481\3\2\2\2\u1484\u1485\3\2\2\2\u1485"+
		"\u1489\3\2\2\2\u1486\u1487\5\u041e\u0210\2\u1487\u1488\7\u034f\2\2\u1488"+
		"\u148a\3\2\2\2\u1489\u1486\3\2\2\2\u1489\u148a\3\2\2\2\u148a\u148c\3\2"+
		"\2\2\u148b\u1474\3\2\2\2\u148b\u1484\3\2\2\2\u148c\u0193\3\2\2\2\u148d"+
		"\u148e\7\5\2\2\u148e\u148f\7\u00b5\2\2\u148f\u1490\5\u041e\u0210\2\u1490"+
		"\u14c3\7\u00bd\2\2\u1491\u1493\7\u0356\2\2\u1492\u1491\3\2\2\2\u1492\u1493"+
		"\3\2\2\2\u1493\u1494\3\2\2\2\u1494\u1495\7\u01a8\2\2\u1495\u1496\7\u0342"+
		"\2\2\u1496\u14c4\5\u041e\u0210\2\u1497\u1499\7\u0356\2\2\u1498\u1497\3"+
		"\2\2\2\u1498\u1499\3\2\2\2\u1499\u149a\3\2\2\2\u149a\u149b\7\u029a\2\2"+
		"\u149b\u149e\7\u0342\2\2\u149c\u149f\5\u041e\u0210\2\u149d\u149f\7k\2"+
		"\2\u149e\u149c\3\2\2\2\u149e\u149d\3\2\2\2\u149f\u14c4\3\2\2\2\u14a0\u14a2"+
		"\7\u0356\2\2\u14a1\u14a0\3\2\2\2\u14a1\u14a2\3\2\2\2\u14a2\u14a3\3\2\2"+
		"\2\u14a3\u14a4\7\u0186\2\2\u14a4\u14a5\7\u0342\2\2\u14a5\u14c4\5\u041e"+
		"\u0210\2\u14a6\u14a8\7\u0356\2\2\u14a7\u14a6\3\2\2\2\u14a7\u14a8\3\2\2"+
		"\2\u14a8\u14a9\3\2\2\2\u14a9\u14aa\7\u02e8\2\2\u14aa\u14ab\7\u0342\2\2"+
		"\u14ab\u14af\7\u033e\2\2\u14ac\u14ad\7\u02e3\2\2\u14ad\u14ae\7\u0342\2"+
		"\2\u14ae\u14b0\7\u033e\2\2\u14af\u14ac\3\2\2\2\u14b0\u14b1\3\2\2\2\u14b1"+
		"\u14af\3\2\2\2\u14b1\u14b2\3\2\2\2\u14b2\u14c4\3\2\2\2\u14b3\u14b5\7\u0356"+
		"\2\2\u14b4\u14b3\3\2\2\2\u14b4\u14b5\3\2\2\2\u14b5\u14b6\3\2\2\2\u14b6"+
		"\u14b7\7\u011d\2\2\u14b7\u14bb\7\u0342\2\2\u14b8\u14bc\7\u02da\2\2\u14b9"+
		"\u14bc\7\u033c\2\2\u14ba\u14bc\5\u041e\u0210\2\u14bb\u14b8\3\2\2\2\u14bb"+
		"\u14b9\3\2\2\2\u14bb\u14ba\3\2\2\2\u14bc\u14c4\3\2\2\2\u14bd\u14bf\7\u0356"+
		"\2\2\u14be\u14bd\3\2\2\2\u14be\u14bf\3\2\2\2\u14bf\u14c0\3\2\2\2\u14c0"+
		"\u14c1\7\u00cf\2\2\u14c1\u14c2\7\u0342\2\2\u14c2\u14c4\t\t\2\2\u14c3\u1492"+
		"\3\2\2\2\u14c3\u1498\3\2\2\2\u14c3\u14a1\3\2\2\2\u14c3\u14a7\3\2\2\2\u14c3"+
		"\u14b4\3\2\2\2\u14c3\u14be\3\2\2\2\u14c4\u14c5\3\2\2\2\u14c5\u14c3\3\2"+
		"\2\2\u14c5\u14c6\3\2\2\2\u14c6\u0195\3\2\2\2\u14c7\u14c8\7#\2\2\u14c8"+
		"\u14c9\7\u00b5\2\2\u14c9\u14cd\5\u041e\u0210\2\u14ca\u14cb\t\61\2\2\u14cb"+
		"\u14cc\7\u0186\2\2\u14cc\u14ce\5\u041e\u0210\2\u14cd\u14ca\3\2\2\2\u14cd"+
		"\u14ce\3\2\2\2\u14ce\u14e1\3\2\2\2\u14cf\u14de\7\u00bd\2\2\u14d0\u14d2"+
		"\7\u0356\2\2\u14d1\u14d0\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2\u14d3\3\2\2"+
		"\2\u14d3\u14d4\7\u029a\2\2\u14d4\u14d5\7\u0342\2\2\u14d5\u14dd\5\u041e"+
		"\u0210\2\u14d6\u14d8\7\u0356\2\2\u14d7\u14d6\3\2\2\2\u14d7\u14d8\3\2\2"+
		"\2\u14d8\u14d9\3\2\2\2\u14d9\u14da\7\u00cf\2\2\u14da\u14db\7\u0342\2\2"+
		"\u14db\u14dd\t\t\2\2\u14dc\u14d1\3\2\2\2\u14dc\u14d7\3\2\2\2\u14dd\u14e0"+
		"\3\2\2\2\u14de\u14dc\3\2\2\2\u14de\u14df\3\2\2\2\u14df\u14e2\3\2\2\2\u14e0"+
		"\u14de\3\2\2\2\u14e1\u14cf\3\2\2\2\u14e1\u14e2\3\2\2\2\u14e2\u155a\3\2"+
		"\2\2\u14e3\u14e4\7#\2\2\u14e4\u1535\7\u00b5\2\2\u14e5\u1508\5\u041e\u0210"+
		"\2\u14e6\u1505\7\u00bd\2\2\u14e7\u14e9\7\u0356\2\2\u14e8\u14e7\3\2\2\2"+
		"\u14e8\u14e9\3\2\2\2\u14e9\u14ea\3\2\2\2\u14ea\u14eb\7\u029a\2\2\u14eb"+
		"\u14ec\7\u0342\2\2\u14ec\u1504\5\u041e\u0210\2\u14ed\u14ef\7\u0356\2\2"+
		"\u14ee\u14ed\3\2\2\2\u14ee\u14ef\3\2\2\2\u14ef\u14f0\3\2\2\2\u14f0\u14f1"+
		"\7\u011d\2\2\u14f1\u14f5\7\u0342\2\2\u14f2\u14f6\7\u02da\2\2\u14f3\u14f6"+
		"\7\u033c\2\2\u14f4\u14f6\5\u041e\u0210\2\u14f5\u14f2\3\2\2\2\u14f5\u14f3"+
		"\3\2\2\2\u14f5\u14f4\3\2\2\2\u14f6\u1504\3\2\2\2\u14f7\u14f9\7\u0356\2"+
		"\2\u14f8\u14f7\3\2\2\2\u14f8\u14f9\3\2\2\2\u14f9\u14fa\3\2\2\2\u14fa\u14fb"+
		"\7\u0310\2\2\u14fb\u14fc\7\u0342\2\2\u14fc\u1504\7\u033f\2\2\u14fd\u14ff"+
		"\7\u0356\2\2\u14fe\u14fd\3\2\2\2\u14fe\u14ff\3\2\2\2\u14ff\u1500\3\2\2"+
		"\2\u1500\u1501\7\u00cf\2\2\u1501\u1502\7\u0342\2\2\u1502\u1504\t\t\2\2"+
		"\u1503\u14e8\3\2\2\2\u1503\u14ee\3\2\2\2\u1503\u14f8\3\2\2\2\u1503\u14fe"+
		"\3\2\2\2\u1504\u1507\3\2\2\2\u1505\u1503\3\2\2\2\u1505\u1506\3\2\2\2\u1506"+
		"\u1509\3\2\2\2\u1507\u1505\3\2\2\2\u1508\u14e6\3\2\2\2\u1508\u1509\3\2"+
		"\2\2\u1509\u1536\3\2\2\2\u150a\u150b\5\u041e\u0210\2\u150b\u150c\7\u00bd"+
		"\2\2\u150c\u150d\7\u02e8\2\2\u150d\u150e\7\u0342\2\2\u150e\u152d\7\u033e"+
		"\2\2\u150f\u1511\7\u0356\2\2\u1510\u150f\3\2\2\2\u1510\u1511\3\2\2\2\u1511"+
		"\u1512\3\2\2\2\u1512\u1513\7\u029a\2\2\u1513\u1514\7\u0342\2\2\u1514\u152c"+
		"\5\u041e\u0210\2\u1515\u1517\7\u0356\2\2\u1516\u1515\3\2\2\2\u1516\u1517"+
		"\3\2\2\2\u1517\u1518\3\2\2\2\u1518\u1519\7\u011d\2\2\u1519\u151d\7\u0342"+
		"\2\2\u151a\u151e\7\u02da\2\2\u151b\u151e\7\u033c\2\2\u151c\u151e\5\u041e"+
		"\u0210\2\u151d\u151a\3\2\2\2\u151d\u151b\3\2\2\2\u151d\u151c\3\2\2\2\u151e"+
		"\u152c\3\2\2\2\u151f\u1521\7\u0356\2\2\u1520\u151f\3\2\2\2\u1520\u1521"+
		"\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u1523\7\u0310\2\2\u1523\u1524\7\u0342"+
		"\2\2\u1524\u152c\7\u033f\2\2\u1525\u1527\7\u0356\2\2\u1526\u1525\3\2\2"+
		"\2\u1526\u1527\3\2\2\2\u1527\u1528\3\2\2\2\u1528\u1529\7\u00cf\2\2\u1529"+
		"\u152a\7\u0342\2\2\u152a\u152c\t\t\2\2\u152b\u1510\3\2\2\2\u152b\u1516"+
		"\3\2\2\2\u152b\u1520\3\2\2\2\u152b\u1526\3\2\2\2\u152c\u152f\3\2\2\2\u152d"+
		"\u152b\3\2\2\2\u152d\u152e\3\2\2\2\u152e\u1536\3\2\2\2\u152f\u152d\3\2"+
		"\2\2\u1530\u1531\5\u041e\u0210\2\u1531\u1532\7K\2\2\u1532\u1533\7C\2\2"+
		"\u1533\u1534\7\u01e0\2\2\u1534\u1536\3\2\2\2\u1535\u14e5\3\2\2\2\u1535"+
		"\u150a\3\2\2\2\u1535\u1530\3\2\2\2\u1536\u155a\3\2\2\2\u1537\u1538\7#"+
		"\2\2\u1538\u1539\7\u00b5\2\2\u1539\u1554\5\u041e\u0210\2\u153a\u153b\7"+
		"\u0331\2\2\u153b\u154a\7\u0186\2\2\u153c\u153e\7\u0356\2\2\u153d\u153c"+
		"\3\2\2\2\u153d\u153e\3\2\2\2\u153e\u153f\3\2\2\2\u153f\u1540\7\u029a\2"+
		"\2\u1540\u1541\7\u0342\2\2\u1541\u1549\5\u041e\u0210\2\u1542\u1544\7\u0356"+
		"\2\2\u1543\u1542\3\2\2\2\u1543\u1544\3\2\2\2\u1544\u1545\3\2\2\2\u1545"+
		"\u1546\7\u00cf\2\2\u1546\u1547\7\u0342\2\2\u1547\u1549\t\t\2\2\u1548\u153d"+
		"\3\2\2\2\u1548\u1543\3\2\2\2\u1549\u154c\3\2\2\2\u154a\u1548\3\2\2\2\u154a"+
		"\u154b\3\2\2\2\u154b\u1555\3\2\2\2\u154c\u154a\3\2\2\2\u154d\u154e\t\61"+
		"\2\2\u154e\u154f\7\u0285\2\2\u154f\u1555\5\u041e\u0210\2\u1550\u1551\t"+
		"\61\2\2\u1551\u1552\7\u0276\2\2\u1552\u1553\7_\2\2\u1553\u1555\5\u041e"+
		"\u0210\2\u1554\u153a\3\2\2\2\u1554\u154d\3\2\2\2\u1554\u1550\3\2\2\2\u1555"+
		"\u155a\3\2\2\2\u1556\u1557\7#\2\2\u1557\u1558\7\u00b5\2\2\u1558\u155a"+
		"\5\u041e\u0210\2\u1559\u14c7\3\2\2\2\u1559\u14e3\3\2\2\2\u1559\u1537\3"+
		"\2\2\2\u1559\u1556\3\2\2\2\u155a\u0197\3\2\2\2\u155b\u155c\7#\2\2\u155c"+
		"\u155d\7\u00b5\2\2\u155d\u1563\5\u041e\u0210\2\u155e\u155f\t\61\2\2\u155f"+
		"\u1560\7\u0186\2\2\u1560\u1564\5\u041e\u0210\2\u1561\u1562\7\u0331\2\2"+
		"\u1562\u1564\7\u0186\2\2\u1563\u155e\3\2\2\2\u1563\u1561\3\2\2\2\u1563"+
		"\u1564\3\2\2\2\u1564\u1569\3\2\2\2\u1565\u1566\7\u00bd\2\2\u1566\u1567"+
		"\7\u029a\2\2\u1567\u1568\7\u0342\2\2\u1568\u156a\5\u041e\u0210\2\u1569"+
		"\u1565\3\2\2\2\u1569\u156a\3\2\2\2\u156a\u1578\3\2\2\2\u156b\u156c\7#"+
		"\2\2\u156c\u156d\7\u00b5\2\2\u156d\u156e\5\u041e\u0210\2\u156e\u156f\7"+
		"K\2\2\u156f\u1570\7C\2\2\u1570\u1575\7\u01e0\2\2\u1571\u1572\7\u00bd\2"+
		"\2\u1572\u1573\7\u029a\2\2\u1573\u1574\7\u0342\2\2\u1574\u1576\5\u041e"+
		"\u0210\2\u1575\u1571\3\2\2\2\u1575\u1576\3\2\2\2\u1576\u1578\3\2\2\2\u1577"+
		"\u155b\3\2\2\2\u1577\u156b\3\2\2\2\u1578\u0199\3\2\2\2\u1579\u157a\7\5"+
		"\2\2\u157a\u157b\7\u00b5\2\2\u157b\u157c\5\u041e\u0210\2\u157c\u1595\7"+
		"\u00bd\2\2\u157d\u157f\7\u0356\2\2\u157e\u157d\3\2\2\2\u157e\u157f\3\2"+
		"\2\2\u157f\u1580\3\2\2\2\u1580\u1581\7\u01a8\2\2\u1581\u1582\7\u0342\2"+
		"\2\u1582\u1596\5\u041e\u0210\2\u1583\u1585\7\u0356\2\2\u1584\u1583\3\2"+
		"\2\2\u1584\u1585\3\2\2\2\u1585\u1586\3\2\2\2\u1586\u1587\7\u029a\2\2\u1587"+
		"\u1588\7\u0342\2\2\u1588\u1596\5\u041e\u0210\2\u1589\u158b\7\u0356\2\2"+
		"\u158a\u1589\3\2\2\2\u158a\u158b\3\2\2\2\u158b\u158c\3\2\2\2\u158c\u158d"+
		"\7\u0186\2\2\u158d\u158e\7\u0342\2\2\u158e\u1596\5\u041e\u0210\2\u158f"+
		"\u1591\7\u0356\2\2\u1590\u158f\3\2\2\2\u1590\u1591\3\2\2\2\u1591\u1592"+
		"\3\2\2\2\u1592\u1593\7\u00cf\2\2\u1593\u1594\7\u0342\2\2\u1594\u1596\t"+
		"\t\2\2\u1595\u157e\3\2\2\2\u1595\u1584\3\2\2\2\u1595\u158a\3\2\2\2\u1595"+
		"\u1590\3\2\2\2\u1596\u1597\3\2\2\2\u1597\u1595\3\2\2\2\u1597\u1598\3\2"+
		"\2\2\u1598\u019b\3\2\2\2\u1599\u159a\7\5\2\2\u159a\u159b\7\u0265\2\2\u159b"+
		"\u159e\7P\2\2\u159c\u159f\5\u041e\u0210\2\u159d\u159f\7\u011b\2\2\u159e"+
		"\u159c\3\2\2\2\u159e\u159d\3\2\2\2\u159f\u15bf\3\2\2\2\u15a0\u15a1\7\u00bd"+
		"\2\2\u15a1\u15ba\7\u0354\2\2\u15a2\u15a3\7\u0167\2\2\u15a3\u15a4\7\u0342"+
		"\2\2\u15a4\u15bb\t\62\2\2\u15a5\u15a7\7\u0356\2\2\u15a6\u15a5\3\2\2\2"+
		"\u15a6\u15a7\3\2\2\2\u15a7\u15a8\3\2\2\2\u15a8\u15a9\7\u01fe\2\2\u15a9"+
		"\u15aa\7\u0342\2\2\u15aa\u15bb\7\u033c\2\2\u15ab\u15ad\7\u0356\2\2\u15ac"+
		"\u15ab\3\2\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15ae\3\2\2\2\u15ae\u15af\7\u01fd"+
		"\2\2\u15af\u15b0\7\u0342\2\2\u15b0\u15bb\7\u033c\2\2\u15b1\u15b2\7\u01ff"+
		"\2\2\u15b2\u15b3\7\u0342\2\2\u15b3\u15bb\7\u033c\2\2\u15b4\u15b5\7\u018e"+
		"\2\2\u15b5\u15b6\7\u0342\2\2\u15b6\u15bb\7\u033c\2\2\u15b7\u15b8\7\u015a"+
		"\2\2\u15b8\u15b9\7\u0342\2\2\u15b9\u15bb\7\u033c\2\2\u15ba\u15a2\3\2\2"+
		"\2\u15ba\u15a6\3\2\2\2\u15ba\u15ac\3\2\2\2\u15ba\u15b1\3\2\2\2\u15ba\u15b4"+
		"\3\2\2\2\u15ba\u15b7\3\2\2\2\u15bb\u15bc\3\2\2\2\u15bc\u15ba\3\2\2\2\u15bc"+
		"\u15bd\3\2\2\2\u15bd\u15be\3\2\2\2\u15be\u15c0\7\u0355\2\2\u15bf\u15a0"+
		"\3\2\2\2\u15bf\u15c0\3\2\2\2\u15c0\u15c6\3\2\2\2\u15c1\u15c4\7\u0258\2"+
		"\2\u15c2\u15c5\5\u041e\u0210\2\u15c3\u15c5\7\u011b\2\2\u15c4\u15c2\3\2"+
		"\2\2\u15c4\u15c3\3\2\2\2\u15c5\u15c7\3\2\2\2\u15c6\u15c1\3\2\2\2\u15c6"+
		"\u15c7\3\2\2\2\u15c7\u019d\3\2\2\2\u15c8\u15c9\7#\2\2\u15c9\u15ca\7\u0265"+
		"\2\2\u15ca\u15cb\7P\2\2\u15cb\u15eb\5\u041e\u0210\2\u15cc\u15cd\7\u00bd"+
		"\2\2\u15cd\u15e6\7\u0354\2\2\u15ce\u15cf\7\u0167\2\2\u15cf\u15d0\7\u0342"+
		"\2\2\u15d0\u15e7\t\62\2\2\u15d1\u15d3\7\u0356\2\2\u15d2\u15d1\3\2\2\2"+
		"\u15d2\u15d3\3\2\2\2\u15d3\u15d4\3\2\2\2\u15d4\u15d5\7\u01fe\2\2\u15d5"+
		"\u15d6\7\u0342\2\2\u15d6\u15e7\7\u033c\2\2\u15d7\u15d9\7\u0356\2\2\u15d8"+
		"\u15d7\3\2\2\2\u15d8\u15d9\3\2\2\2\u15d9\u15da\3\2\2\2\u15da\u15db\7\u01fd"+
		"\2\2\u15db\u15dc\7\u0342\2\2\u15dc\u15e7\7\u033c\2\2\u15dd\u15de\7\u01ff"+
		"\2\2\u15de\u15df\7\u0342\2\2\u15df\u15e7\7\u033c\2\2\u15e0\u15e1\7\u018e"+
		"\2\2\u15e1\u15e2\7\u0342\2\2\u15e2\u15e7\7\u033c\2\2\u15e3\u15e4\7\u015a"+
		"\2\2\u15e4\u15e5\7\u0342\2\2\u15e5\u15e7\7\u033c\2\2\u15e6\u15ce\3\2\2"+
		"\2\u15e6\u15d2\3\2\2\2\u15e6\u15d8\3\2\2\2\u15e6\u15dd\3\2\2\2\u15e6\u15e0"+
		"\3\2\2\2\u15e6\u15e3\3\2\2\2\u15e7\u15e8\3\2\2\2\u15e8\u15e6\3\2\2\2\u15e8"+
		"\u15e9\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u15ec\7\u0355\2\2\u15eb\u15cc"+
		"\3\2\2\2\u15eb\u15ec\3\2\2\2\u15ec\u15fa\3\2\2\2\u15ed\u15f0\7\u0258\2"+
		"\2\u15ee\u15f1\5\u041e\u0210\2\u15ef\u15f1\7\u011b\2\2\u15f0\u15ee\3\2"+
		"\2\2\u15f0\u15ef\3\2\2\2\u15f0\u15f1\3\2\2\2\u15f1\u15f8\3\2\2\2\u15f2"+
		"\u15f4\7\u0356\2\2\u15f3\u15f2\3\2\2\2\u15f3\u15f4\3\2\2\2\u15f4\u15f5"+
		"\3\2\2\2\u15f5\u15f6\7C\2\2\u15f6\u15f9\5\u041e\u0210\2\u15f7\u15f9\7"+
		"\u011b\2\2\u15f8\u15f3\3\2\2\2\u15f8\u15f7\3\2\2\2\u15f8\u15f9\3\2\2\2"+
		"\u15f9\u15fb\3\2\2\2\u15fa\u15ed\3\2\2\2\u15fa\u15fb\3\2\2\2\u15fb\u019f"+
		"\3\2\2\2\u15fc\u15fd\7#\2\2\u15fd\u15fe\7\u0266\2\2\u15fe\u15ff\7\u0097"+
		"\2\2\u15ff\u1603\7\u00fd\2\2\u1600\u1601\5\u041e\u0210\2\u1601\u1602\7"+
		"\u034f\2\2\u1602\u1604\3\2\2\2\u1603\u1600\3\2\2\2\u1603\u1604\3\2\2\2"+
		"\u1604\u1605\3\2\2\2\u1605\u1606\5\u041e\u0210\2\u1606\u160a\7\b\2\2\u1607"+
		"\u160b\7\u033e\2\2\u1608\u160b\5\u041e\u0210\2\u1609\u160b\7\u033b\2\2"+
		"\u160a\u1607\3\2\2\2\u160a\u1608\3\2\2\2\u160a\u1609\3\2\2\2\u160b\u01a1"+
		"\3\2\2\2\u160c\u160d\7#\2\2\u160d\u160e\7\u01cc\2\2\u160e\u160f\7M\2\2"+
		"\u160f\u1610\5\u041e\u0210\2\u1610\u1611\7\u0354\2\2\u1611\u1612\5\u0414"+
		"\u020b\2\u1612\u1613\7\u0355\2\2\u1613\u1614\7\b\2\2\u1614\u1616\7\u01e6"+
		"\2\2\u1615\u1617\t\63\2\2\u1616\u1615\3\2\2\2\u1616\u1617\3\2\2\2\u1617"+
		"\u1618\3\2\2\2\u1618\u1619\7G\2\2\u1619\u161a\7\u00b6\2\2\u161a\u161b"+
		"\7\u0354\2\2\u161b\u161c\5\u03b8\u01dd\2\u161c\u161d\7\u0355\2\2\u161d"+
		"\u01a3\3\2\2\2\u161e\u161f\7#\2\2\u161f\u1620\7\u01cc\2\2\u1620\u1621"+
		"\7\u0309\2\2\u1621\u1622\5\u041e\u0210\2\u1622\u1623\7\b\2\2\u1623\u1624"+
		"\7\u01cc\2\2\u1624\u1626\5\u041e\u0210\2\u1625\u1627\7\4\2\2\u1626\u1625"+
		"\3\2\2\2\u1626\u1627\3\2\2\2\u1627\u1628\3\2\2\2\u1628\u1629\7\u00a8\2"+
		"\2\u1629\u162a\7\u0354\2\2\u162a\u162f\5\u041e\u0210\2\u162b\u162c\7\u0356"+
		"\2\2\u162c\u162e\5\u041e\u0210\2\u162d\u162b\3\2\2\2\u162e\u1631\3\2\2"+
		"\2\u162f\u162d\3\2\2\2\u162f\u1630\3\2\2\2\u1630\u1632\3\2\2\2\u1631\u162f"+
		"\3\2\2\2\u1632\u1633\7\u0355\2\2\u1633\u01a5\3\2\2\2\u1634\u1635\7#\2"+
		"\2\u1635\u1638\7\u01e3\2\2\u1636\u1639\5\u03de\u01f0\2\u1637\u1639\5\u041e"+
		"\u0210\2\u1638\u1636\3\2\2\2\u1638\u1637\3\2\2\2\u1639\u163b\3\2\2\2\u163a"+
		"\u163c\5\u01a8\u00d5\2\u163b\u163a\3\2\2\2\u163b\u163c\3\2\2\2\u163c\u1640"+
		"\3\2\2\2\u163d\u163e\7p\2\2\u163e\u1641\5\u041e\u0210\2\u163f\u1641\7"+
		"/\2\2\u1640\u163d\3\2\2\2\u1640\u163f\3\2\2\2\u1640\u1641\3\2\2\2\u1641"+
		"\u01a7\3\2\2\2\u1642\u1649\7\u00bd\2\2\u1643\u1644\7\u0230\2\2\u1644\u1645"+
		"\7\u0342\2\2\u1645\u1647\t\t\2\2\u1646\u1648\7\u0356\2\2\u1647\u1646\3"+
		"\2\2\2\u1647\u1648\3\2\2\2\u1648\u164a\3\2\2\2\u1649\u1643\3\2\2\2\u1649"+
		"\u164a\3\2\2\2\u164a\u1651\3\2\2\2\u164b\u164c\7\u0205\2\2\u164c\u164d"+
		"\7\u0342\2\2\u164d\u164f\t\t\2\2\u164e\u1650\7\u0356\2\2\u164f\u164e\3"+
		"\2\2\2\u164f\u1650\3\2\2\2\u1650\u1652\3\2\2\2\u1651\u164b\3\2\2\2\u1651"+
		"\u1652\3\2\2\2\u1652\u1680\3\2\2\2\u1653\u1654\7\u00c5\2\2\u1654\u167a"+
		"\7\u0354\2\2\u1655\u1656\7\u0230\2\2\u1656\u1657\7\u0342\2\2\u1657\u1659"+
		"\t\t\2\2\u1658\u165a\7\u0356\2\2\u1659\u1658\3\2\2\2\u1659\u165a\3\2\2"+
		"\2\u165a\u165c\3\2\2\2\u165b\u1655\3\2\2\2\u165b\u165c\3\2\2\2\u165c\u1663"+
		"\3\2\2\2\u165d\u165e\7\u01de\2\2\u165e\u165f\7\u0342\2\2\u165f\u1661\5"+
		"\u03e6\u01f4\2\u1660\u1662\7\u0356\2\2\u1661\u1660\3\2\2\2\u1661\u1662"+
		"\3\2\2\2\u1662\u1664\3\2\2\2\u1663\u165d\3\2\2\2\u1663\u1664\3\2\2\2\u1664"+
		"\u166b\3\2\2\2\u1665\u1666\7\u0193\2\2\u1666\u1667\7\u0342\2\2\u1667\u1669"+
		"\7\u033c\2\2\u1668\u166a\7\u0356\2\2\u1669\u1668\3\2\2\2\u1669\u166a\3"+
		"\2\2\2\u166a\u166c\3\2\2\2\u166b\u1665\3\2\2\2\u166b\u166c\3\2\2\2\u166c"+
		"\u1677\3\2\2\2\u166d\u166e\7@\2\2\u166e\u1672\7\b\2\2\u166f\u1673\7\u021b"+
		"\2\2\u1670\u1673\7\u033e\2\2\u1671\u1673\7\u01c9\2\2\u1672\u166f\3\2\2"+
		"\2\u1672\u1670\3\2\2\2\u1672\u1671\3\2\2\2\u1673\u1675\3\2\2\2\u1674\u1676"+
		"\7\u0356\2\2\u1675\u1674\3\2\2\2\u1675\u1676\3\2\2\2\u1676\u1678\3\2\2"+
		"\2\u1677\u166d\3\2\2\2\u1677\u1678\3\2\2\2\u1678\u167b\3\2\2\2\u1679\u167b"+
		"\79\2\2\u167a\u165b\3\2\2\2\u167a\u1679\3\2\2\2\u167b\u167c\3\2\2\2\u167c"+
		"\u167e\7\u0355\2\2\u167d\u167f\7\u0356\2\2\u167e\u167d\3\2\2\2\u167e\u167f"+
		"\3\2\2\2\u167f\u1681\3\2\2\2\u1680\u1653\3\2\2\2\u1680\u1681\3\2\2\2\u1681"+
		"\u1689\3\2\2\2\u1682\u1683\7\u01d3\2\2\u1683\u1684\7\u0354\2\2\u1684\u1685"+
		"\7\u0230\2\2\u1685\u1686\7\u0342\2\2\u1686\u1687\t\t\2\2\u1687\u1688\3"+
		"\2\2\2\u1688\u168a\7\u0355\2\2\u1689\u1682\3\2\2\2\u1689\u168a\3\2\2\2"+
		"\u168a\u01a9\3\2\2\2\u168b\u168c\7\5\2\2\u168c\u168f\7\u01e3\2\2\u168d"+
		"\u1690\5\u03de\u01f0\2\u168e\u1690\5\u041e\u0210\2\u168f\u168d\3\2\2\2"+
		"\u168f\u168e\3\2\2\2\u1690\u1693\3\2\2\2\u1691\u1694\5\u01a8\u00d5\2\u1692"+
		"\u1694\5\u01ac\u00d7\2\u1693\u1691\3\2\2\2\u1693\u1692\3\2\2\2\u1694\u01ab"+
		"\3\2\2\2\u1695\u169b\7\u01f1\2\2\u1696\u1697\7\u00bd\2\2\u1697\u1698\7"+
		"\u0354\2\2\u1698\u1699\5\u01ae\u00d8\2\u1699\u169a\7\u0355\2\2\u169a\u169c"+
		"\3\2\2\2\u169b\u1696\3\2\2\2\u169b\u169c\3\2\2\2\u169c\u16ab\3\2\2\2\u169d"+
		"\u16a2\7\u01fa\2\2\u169e\u169f\7\u00bd\2\2\u169f\u16a0\7\u0181\2\2\u16a0"+
		"\u16a1\7\u0342\2\2\u16a1\u16a3\t\t\2\2\u16a2\u169e\3\2\2\2\u16a2\u16a3"+
		"\3\2\2\2\u16a3\u16ab\3\2\2\2\u16a4\u16a5\7\u01a6\2\2\u16a5\u16a8\7\u00a8"+
		"\2\2\u16a6\u16a9\5\u041e\u0210\2\u16a7\u16a9\7/\2\2\u16a8\u16a6\3\2\2"+
		"\2\u16a8\u16a7\3\2\2\2\u16a9\u16ab\3\2\2\2\u16aa\u1695\3\2\2\2\u16aa\u169d"+
		"\3\2\2\2\u16aa\u16a4\3\2\2\2\u16ab\u01ad\3\2\2\2\u16ac\u16ad\7\u0195\2"+
		"\2\u16ad\u16ae\7\u0342\2\2\u16ae\u16af\7\u033c\2\2\u16af\u01af\3\2\2\2"+
		"\u16b0\u16b1\7#\2\2\u16b1\u16b2\7\u0291\2\2\u16b2\u16b5\5\u0406\u0204"+
		"\2\u16b3\u16b4\7\n\2\2\u16b4\u16b6\5\u041e\u0210\2\u16b5\u16b3\3\2\2\2"+
		"\u16b5\u16b6\3\2\2\2\u16b6\u16b7\3\2\2\2\u16b7\u16c2\7\u0354\2\2\u16b8"+
		"\u16bb\5\u041e\u0210\2\u16b9\u16bb\7/\2\2\u16ba\u16b8\3\2\2\2\u16ba\u16b9"+
		"\3\2\2\2\u16bb\u16bc\3\2\2\2\u16bc\u16bd\7\u021e\2\2\u16bd\u16be\7\22"+
		"\2\2\u16be\u16c0\t\64\2\2\u16bf\u16c1\7\u0356\2\2\u16c0\u16bf\3\2\2\2"+
		"\u16c0\u16c1\3\2\2\2\u16c1\u16c3\3\2\2\2\u16c2\u16ba\3\2\2\2\u16c3\u16c4"+
		"\3\2\2\2\u16c4\u16c2\3\2\2\2\u16c4\u16c5\3\2\2\2\u16c5\u16c6\3\2\2\2\u16c6"+
		"\u16c7\7\u0355\2\2\u16c7\u01b1\3\2\2\2\u16c8\u16cf\5\u0402\u0202\2\u16c9"+
		"\u16cf\5\u0404\u0203\2\u16ca\u16cf\5\u040a\u0206\2\u16cb\u16cf\5\u040e"+
		"\u0208\2\u16cc\u16cf\5\u0412\u020a\2\u16cd\u16cf\5\u040c\u0207\2\u16ce"+
		"\u16c8\3\2\2\2\u16ce\u16c9\3\2\2\2\u16ce\u16ca\3\2\2\2\u16ce\u16cb\3\2"+
		"\2\2\u16ce\u16cc\3\2\2\2\u16ce\u16cd\3\2\2\2\u16cf\u01b3\3\2\2\2\u16d0"+
		"\u16d1\7#\2\2\u16d1\u16d2\7\u019b\2\2\u16d2\u16d3\7\u0251\2\2\u16d3\u16d6"+
		"\5\u041e\u0210\2\u16d4\u16d5\7\n\2\2\u16d5\u16d7\5\u041e\u0210\2\u16d6"+
		"\u16d4\3\2\2\2\u16d6\u16d7\3\2\2\2\u16d7\u16d8\3\2\2\2\u16d8\u16d9\7\u025a"+
		"\2\2\u16d9\u16e2\7\u0342\2\2\u16da\u16e3\7\u02da\2\2\u16db\u16e3\7\u0131"+
		"\2\2\u16dc\u16e3\7\u0262\2\2\u16dd\u16de\7\u0259\2\2\u16de\u16df\7\u00bd"+
		"\2\2\u16df\u16e0\7\u0097\2\2\u16e0\u16e1\7\u00fd\2\2\u16e1\u16e3\5\u041e"+
		"\u0210\2\u16e2\u16da\3\2\2\2\u16e2\u16db\3\2\2\2\u16e2\u16dc\3\2\2\2\u16e2"+
		"\u16dd\3\2\2\2\u16e3\u01b5\3\2\2\2\u16e4\u16e6\5\u0318\u018d\2\u16e5\u16e4"+
		"\3\2\2\2\u16e5\u16e6\3\2\2\2\u16e6\u16e7\3\2\2\2\u16e7\u16ef\7e\2\2\u16e8"+
		"\u16e9\7\u00a9\2\2\u16e9\u16ea\7\u0354\2\2\u16ea\u16eb\5\u0308\u0185\2"+
		"\u16eb\u16ed\7\u0355\2\2\u16ec\u16ee\7|\2\2\u16ed\u16ec\3\2\2\2\u16ed"+
		"\u16ee\3\2\2\2\u16ee\u16f0\3\2\2\2\u16ef\u16e8\3\2\2\2\u16ef\u16f0\3\2"+
		"\2\2\u16f0\u16f2\3\2\2\2\u16f1\u16f3\7\\\2\2\u16f2\u16f1\3\2\2\2\u16f2"+
		"\u16f3\3\2\2\2\u16f3\u16f4\3\2\2\2\u16f4\u16f6\5\u03ea\u01f6\2\u16f5\u16f7"+
		"\5\u03ac\u01d7\2\u16f6\u16f5\3\2\2\2\u16f6\u16f7\3\2\2\2\u16f7\u16f9\3"+
		"\2\2\2\u16f8\u16fa\5\u03a6\u01d4\2\u16f9\u16f8\3\2\2\2\u16f9\u16fa\3\2"+
		"\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fc\7\u0258\2\2\u16fc\u16fd\5\u034e\u01a8"+
		"\2\u16fd\u16fe\7p\2\2\u16fe\u1700\5\u0320\u0191\2\u16ff\u1701\5\u01b8"+
		"\u00dd\2\u1700\u16ff\3\2\2\2\u1701\u1702\3\2\2\2\u1702\u1700\3\2\2\2\u1702"+
		"\u1703\3\2\2\2\u1703\u1705\3\2\2\2\u1704\u1706\5\u01d0\u00e9\2\u1705\u1704"+
		"\3\2\2\2\u1705\u1706\3\2\2\2\u1706\u1708\3\2\2\2\u1707\u1709\5\u033a\u019e"+
		"\2\u1708\u1707\3\2\2\2\u1708\u1709\3\2\2\2\u1709\u170a\3\2\2\2\u170a\u170b"+
		"\7\u0357\2\2\u170b\u01b7\3\2\2\2\u170c\u170d\7\u00ba\2\2\u170d\u1710\7"+
		"\u02c5\2\2\u170e\u170f\7\6\2\2\u170f\u1711\5\u0320\u0191\2\u1710\u170e"+
		"\3\2\2\2\u1710\u1711\3\2\2\2\u1711\u1712\3\2\2\2\u1712\u1713\7\u00a7\2"+
		"\2\u1713\u1715\5\u01ba\u00de\2\u1714\u170c\3\2\2\2\u1715\u1716\3\2\2\2"+
		"\u1716\u1714\3\2\2\2\u1716\u1717\3\2\2\2\u1717\u1735\3\2\2\2\u1718\u1719"+
		"\7\u00ba\2\2\u1719\u171a\7j\2\2\u171a\u171d\7\u02c5\2\2\u171b\u171c\7"+
		"\22\2\2\u171c\u171e\7\u0324\2\2\u171d\u171b\3\2\2\2\u171d\u171e\3\2\2"+
		"\2\u171e\u1721\3\2\2\2\u171f\u1720\7\6\2\2\u1720\u1722\5\u0320\u0191\2"+
		"\u1721\u171f\3\2\2\2\u1721\u1722\3\2\2\2\u1722\u1723\3\2\2\2\u1723\u1724"+
		"\7\u00a7\2\2\u1724\u1735\5\u01bc\u00df\2\u1725\u1726\7\u00ba\2\2\u1726"+
		"\u1727\7j\2\2\u1727\u1728\7\u02c5\2\2\u1728\u1729\7\22\2\2\u1729\u172c"+
		"\7\u0313\2\2\u172a\u172b\7\6\2\2\u172b\u172d\5\u0320\u0191\2\u172c\u172a"+
		"\3\2\2\2\u172c\u172d\3\2\2\2\u172d\u172e\3\2\2\2\u172e\u172f\7\u00a7\2"+
		"\2\u172f\u1731\5\u01ba\u00de\2\u1730\u1725\3\2\2\2\u1731\u1732\3\2\2\2"+
		"\u1732\u1730\3\2\2\2\u1732\u1733\3\2\2\2\u1733\u1735\3\2\2\2\u1734\u1714"+
		"\3\2\2\2\u1734\u1718\3\2\2\2\u1734\u1730\3\2\2\2\u1735\u01b9\3\2\2\2\u1736"+
		"\u1737\7\u00b2\2\2\u1737\u1738\7\u009e\2\2\u1738\u173d\5\u031e\u0190\2"+
		"\u1739\u173a\7\u0356\2\2\u173a\u173c\5\u031e\u0190\2\u173b\u1739\3\2\2"+
		"\2\u173c\u173f\3\2\2\2\u173d\u173b\3\2\2";
	private static final String _serializedATNSegment3 =
		"\2\u173d\u173e\3\2\2\2\u173e\u1742\3\2\2\2\u173f\u173d\3\2\2\2\u1740\u1742"+
		"\7\60\2\2\u1741\u1736\3\2\2\2\u1741\u1740\3\2\2\2\u1742\u01bb\3\2\2\2"+
		"\u1743\u1748\7Z\2\2\u1744\u1745\7\u0354\2\2\u1745\u1746\5\u03f4\u01fb"+
		"\2\u1746\u1747\7\u0355\2\2\u1747\u1749\3\2\2\2\u1748\u1744\3\2\2\2\u1748"+
		"\u1749\3\2\2\2\u1749\u174d\3\2\2\2\u174a\u174e\5\u03b6\u01dc\2\u174b\u174c"+
		"\7/\2\2\u174c\u174e\7\u00b6\2\2\u174d\u174a\3\2\2\2\u174d\u174b\3\2\2"+
		"\2\u174e\u01bd\3\2\2\2\u174f\u1751\5\u0318\u018d\2\u1750\u174f\3\2\2\2"+
		"\u1750\u1751\3\2\2\2\u1751\u1752\3\2\2\2\u1752\u175c\7\60\2\2\u1753\u1754"+
		"\7\u00a9\2\2\u1754\u1755\7\u0354\2\2\u1755\u1756\5\u0308\u0185\2\u1756"+
		"\u1758\7\u0355\2\2\u1757\u1759\7|\2\2\u1758\u1757\3\2\2\2\u1758\u1759"+
		"\3\2\2\2\u1759\u175d\3\2\2\2\u175a\u175b\7\u00a9\2\2\u175b\u175d\7\u033c"+
		"\2\2\u175c\u1753\3\2\2\2\u175c\u175a\3\2\2\2\u175c\u175d\3\2\2\2\u175d"+
		"\u175f\3\2\2\2\u175e\u1760\7K\2\2\u175f\u175e\3\2\2\2\u175f\u1760\3\2"+
		"\2\2\u1760\u1761\3\2\2\2\u1761\u1763\5\u01c0\u00e1\2\u1762\u1764\5\u03ac"+
		"\u01d7\2\u1763\u1762\3\2\2\2\u1763\u1764\3\2\2\2\u1764\u1766\3\2\2\2\u1765"+
		"\u1767\5\u01d0\u00e9\2\u1766\u1765\3\2\2\2\u1766\u1767\3\2\2\2\u1767\u176a"+
		"\3\2\2\2\u1768\u1769\7K\2\2\u1769\u176b\5\u034e\u01a8\2\u176a\u1768\3"+
		"\2\2\2\u176a\u176b\3\2\2\2\u176b\u1779\3\2\2\2\u176c\u1777\7\u00bb\2\2"+
		"\u176d\u1778\5\u0320\u0191\2\u176e\u176f\7%\2\2\u176f\u1775\7m\2\2\u1770"+
		"\u1772\7\u0157\2\2\u1771\u1770\3\2\2\2\u1771\u1772\3\2\2\2\u1772\u1773"+
		"\3\2\2\2\u1773\u1776\5\u03f6\u01fc\2\u1774\u1776\7\u033b\2\2\u1775\u1771"+
		"\3\2\2\2\u1775\u1774\3\2\2\2\u1776\u1778\3\2\2\2\u1777\u176d\3\2\2\2\u1777"+
		"\u176e\3\2\2\2\u1778\u177a\3\2\2\2\u1779\u176c\3\2\2\2\u1779\u177a\3\2"+
		"\2\2\u177a\u177c\3\2\2\2\u177b\u177d\5\u0332\u019a\2\u177c\u177b\3\2\2"+
		"\2\u177c\u177d\3\2\2\2\u177d\u177f\3\2\2\2\u177e\u1780\5\u033a\u019e\2"+
		"\u177f\u177e\3\2\2\2\u177f\u1780\3\2\2\2\u1780\u1782\3\2\2\2\u1781\u1783"+
		"\7\u0357\2\2\u1782\u1781\3\2\2\2\u1782\u1783\3\2\2\2\u1783\u01bf\3\2\2"+
		"\2\u1784\u1789\5\u03ea\u01f6\2\u1785\u1789\5\u03a8\u01d5\2\u1786\u1789"+
		"\5\u0278\u013d\2\u1787\u1789\7\u033b\2\2\u1788\u1784\3\2\2\2\u1788\u1785"+
		"\3\2\2\2\u1788\u1786\3\2\2\2\u1788\u1787\3\2\2\2\u1789\u01c1\3\2\2\2\u178a"+
		"\u178c\5\u0318\u018d\2\u178b\u178a\3\2\2\2\u178b\u178c\3\2\2\2\u178c\u178d"+
		"\3\2\2\2\u178d\u1795\7Z\2\2\u178e\u178f\7\u00a9\2\2\u178f\u1790\7\u0354"+
		"\2\2\u1790\u1791\5\u0308\u0185\2\u1791\u1793\7\u0355\2\2\u1792\u1794\7"+
		"|\2\2\u1793\u1792\3\2\2\2\u1793\u1794\3\2\2\2\u1794\u1796\3\2\2\2\u1795"+
		"\u178e\3\2\2\2\u1795\u1796\3\2\2\2\u1796\u1798\3\2\2\2\u1797\u1799\7\\"+
		"\2\2\u1798\u1797\3\2\2\2\u1798\u1799\3\2\2\2\u1799\u179c\3\2\2\2\u179a"+
		"\u179d\5\u03ea\u01f6\2\u179b\u179d\5\u0278\u013d\2\u179c\u179a\3\2\2\2"+
		"\u179c\u179b\3\2\2\2\u179d\u179f\3\2\2\2\u179e\u17a0\5\u03ac\u01d7\2\u179f"+
		"\u179e\3\2\2\2\u179f\u17a0\3\2\2\2\u17a0\u17a5\3\2\2\2\u17a1\u17a2\7\u0354"+
		"\2\2\u17a2\u17a3\5\u03f0\u01f9\2\u17a3\u17a4\7\u0355\2\2\u17a4\u17a6\3"+
		"\2\2\2\u17a5\u17a1\3\2\2\2\u17a5\u17a6\3\2\2\2\u17a6\u17a8\3\2\2\2\u17a7"+
		"\u17a9\5\u01d0\u00e9\2\u17a8\u17a7\3\2\2\2\u17a8\u17a9\3\2\2\2\u17a9\u17aa"+
		"\3\2\2\2\u17aa\u17ac\5\u01c4\u00e3\2\u17ab\u17ad\5\u0332\u019a\2\u17ac"+
		"\u17ab\3\2\2\2\u17ac\u17ad\3\2\2\2\u17ad\u17af\3\2\2\2\u17ae\u17b0\5\u033a"+
		"\u019e\2\u17af\u17ae\3\2\2\2\u17af\u17b0\3\2\2\2\u17b0\u17b2\3\2\2\2\u17b1"+
		"\u17b3\7\u0357\2\2\u17b2\u17b1\3\2\2\2\u17b2\u17b3\3\2\2\2\u17b3\u01c3"+
		"\3\2\2\2\u17b4\u17ba\5\u03b6\u01dc\2\u17b5\u17ba\5\u0380\u01c1\2\u17b6"+
		"\u17ba\5\u0296\u014c\2\u17b7\u17b8\7/\2\2\u17b8\u17ba\7\u00b6\2\2\u17b9"+
		"\u17b4\3\2\2\2\u17b9\u17b5\3\2\2\2\u17b9\u17b6\3\2\2\2\u17b9\u17b7\3\2"+
		"\2\2\u17ba\u01c5\3\2\2\2\u17bb\u17bd\7\u0354\2\2\u17bc\u17bb\3\2\2\2\u17bc"+
		"\u17bd\3\2\2\2\u17bd\u17be\3\2\2\2\u17be\u17c3\7\u01f2\2\2\u17bf\u17c4"+
		"\7\4\2\2\u17c0\u17c4\7\64\2\2\u17c1\u17c4\5\u032a\u0196\2\u17c2\u17c4"+
		"\7\u0359\2\2\u17c3\u17bf\3\2\2\2\u17c3\u17c0\3\2\2\2\u17c3\u17c1\3\2\2"+
		"\2\u17c3\u17c2\3\2\2\2\u17c4\u17cd\3\2\2\2\u17c5\u17c6\7\u033b\2\2\u17c6"+
		"\u17c7\7\u0342\2\2\u17c7\u17c9\5\u0308\u0185\2\u17c8\u17ca\7\u0356\2\2"+
		"\u17c9\u17c8\3\2\2\2\u17c9\u17ca\3\2\2\2\u17ca\u17cc\3\2\2\2\u17cb\u17c5"+
		"\3\2\2\2\u17cc\u17cf\3\2\2\2\u17cd\u17cb\3\2\2\2\u17cd\u17ce\3\2\2\2\u17ce"+
		"\u17d0\3\2\2\2\u17cf\u17cd\3\2\2\2\u17d0\u17d1\7K\2\2\u17d1\u17d7\5\u03de"+
		"\u01f0\2\u17d2\u17d3\7\\\2\2\u17d3\u17d4\5\u041e\u0210\2\u17d4\u17d5\7"+
		"\u00bb\2\2\u17d5\u17d6\5\u0320\u0191\2\u17d6\u17d8\3\2\2\2\u17d7\u17d2"+
		"\3\2\2\2\u17d7\u17d8\3\2\2\2\u17d8\u17da\3\2\2\2\u17d9\u17db\7\u0355\2"+
		"\2\u17da\u17d9\3\2\2\2\u17da\u17db\3\2\2\2\u17db\u01c7\3\2\2\2\u17dc\u17de"+
		"\5\u0318\u018d\2\u17dd\u17dc\3\2\2\2\u17dd\u17de\3\2\2\2\u17de\u17df\3"+
		"\2\2\2\u17df\u17e0\5\u01ca\u00e6\2\u17e0\u01c9\3\2\2\2\u17e1\u17e3\5\u0324"+
		"\u0193\2\u17e2\u17e4\5\u0330\u0199\2\u17e3\u17e2\3\2\2\2\u17e3\u17e4\3"+
		"\2\2\2\u17e4\u17e6\3\2\2\2\u17e5\u17e7\5\u0332\u019a\2\u17e6\u17e5\3\2"+
		"\2\2\u17e6\u17e7\3\2\2\2\u17e7\u17e9\3\2\2\2\u17e8\u17ea\5\u033a\u019e"+
		"\2\u17e9\u17e8\3\2\2\2\u17e9\u17ea\3\2\2\2\u17ea\u17ec\3\2\2\2\u17eb\u17ed"+
		"\7\u0357\2\2\u17ec\u17eb\3\2\2\2\u17ec\u17ed\3\2\2\2\u17ed\u01cb\3\2\2"+
		"\2\u17ee\u17f1\7\u033b\2\2\u17ef\u17f1\5\u0418\u020d\2\u17f0\u17ee\3\2"+
		"\2\2\u17f0\u17ef\3\2\2\2\u17f1\u01cd\3\2\2\2\u17f2\u17f4\5\u0318\u018d"+
		"\2\u17f3\u17f2\3\2\2\2\u17f3\u17f4\3\2\2\2\u17f4\u17f5\3\2\2\2\u17f5\u17fd"+
		"\7\u00b2\2\2\u17f6\u17f7\7\u00a9\2\2\u17f7\u17f8\7\u0354\2\2\u17f8\u17f9"+
		"\5\u0308\u0185\2\u17f9\u17fb\7\u0355\2\2\u17fa\u17fc\7|\2\2\u17fb\u17fa"+
		"\3\2\2\2\u17fb\u17fc\3\2\2\2\u17fc\u17fe\3\2\2\2\u17fd\u17f6\3\2\2\2\u17fd"+
		"\u17fe\3\2\2\2\u17fe\u1801\3\2\2\2\u17ff\u1802\5\u03ea\u01f6\2\u1800\u1802"+
		"\5\u0278\u013d\2\u1801\u17ff\3\2\2\2\u1801\u1800\3\2\2\2\u1802\u1804\3"+
		"\2\2\2\u1803\u1805\5\u03aa\u01d6\2\u1804\u1803\3\2\2\2\u1804\u1805\3\2"+
		"\2\2\u1805\u1806\3\2\2\2\u1806\u1807\7\u009e\2\2\u1807\u180c\5\u031c\u018f"+
		"\2\u1808\u1809\7\u0356\2\2\u1809\u180b\5\u031c\u018f\2\u180a\u1808\3\2"+
		"\2\2\u180b\u180e\3\2\2\2\u180c\u180a\3\2\2\2\u180c\u180d\3\2\2\2\u180d"+
		"\u1810\3\2\2\2\u180e\u180c\3\2\2\2\u180f\u1811\5\u01d0\u00e9\2\u1810\u180f"+
		"\3\2\2\2\u1810\u1811\3\2\2\2\u1811\u1814\3\2\2\2\u1812\u1813\7K\2\2\u1813"+
		"\u1815\5\u034e\u01a8\2\u1814\u1812\3\2\2\2\u1814\u1815\3\2\2\2\u1815\u1823"+
		"\3\2\2\2\u1816\u1821\7\u00bb\2\2\u1817\u1822\5\u0320\u0191\2\u1818\u1819"+
		"\7%\2\2\u1819\u181f\7m\2\2\u181a\u181c\7\u0157\2\2\u181b\u181a\3\2\2\2"+
		"\u181b\u181c\3\2\2\2\u181c\u181d\3\2\2\2\u181d\u1820\5\u03f6\u01fc\2\u181e"+
		"\u1820\7\u033b\2\2\u181f\u181b\3\2\2\2\u181f\u181e\3\2\2\2\u1820\u1822"+
		"\3\2\2\2\u1821\u1817\3\2\2\2\u1821\u1818\3\2\2\2\u1822\u1824\3\2\2\2\u1823"+
		"\u1816\3\2\2\2\u1823\u1824\3\2\2\2\u1824\u1826\3\2\2\2\u1825\u1827\5\u0332"+
		"\u019a\2\u1826\u1825\3\2\2\2\u1826\u1827\3\2\2\2\u1827\u1829\3\2\2\2\u1828"+
		"\u182a\5\u033a\u019e\2\u1829\u1828\3\2\2\2\u1829\u182a\3\2\2\2\u182a\u182c"+
		"\3\2\2\2\u182b\u182d\7\u0357\2\2\u182c\u182b\3\2\2\2\u182c\u182d\3\2\2"+
		"\2\u182d\u01cf\3\2\2\2\u182e\u182f\7\u01c7\2\2\u182f\u1834\5\u01d2\u00ea"+
		"\2\u1830\u1831\7\u0356\2\2\u1831\u1833\5\u01d2\u00ea\2\u1832\u1830\3\2"+
		"\2\2\u1833\u1836\3\2\2\2\u1834\u1832\3\2\2\2\u1834\u1835\3\2\2\2\u1835"+
		"\u1842\3\2\2\2\u1836\u1834\3\2\2\2\u1837\u183a\7\\\2\2\u1838\u183b\7\u033b"+
		"\2\2\u1839\u183b\5\u03e0\u01f1\2\u183a\u1838\3\2\2\2\u183a\u1839\3\2\2"+
		"\2\u183b\u1840\3\2\2\2\u183c\u183d\7\u0354\2\2\u183d\u183e\5\u03f4\u01fb"+
		"\2\u183e\u183f\7\u0355\2\2\u183f\u1841\3\2\2\2\u1840\u183c\3\2\2\2\u1840"+
		"\u1841\3\2\2\2\u1841\u1843\3\2\2\2\u1842\u1837\3\2\2\2\u1842\u1843\3\2"+
		"\2\2\u1843\u01d1\3\2\2\2\u1844\u1847\5\u0308\u0185\2\u1845\u1847\5\u0344"+
		"\u01a3\2\u1846\u1844\3\2\2\2\u1846\u1845\3\2\2\2\u1847\u1849\3\2\2\2\u1848"+
		"\u184a\5\u03a4\u01d3\2\u1849\u1848\3\2\2\2\u1849\u184a\3\2\2\2\u184a\u01d3"+
		"\3\2\2\2\u184b\u184c\7#\2\2\u184c\u184d\7+\2\2\u184d\u1851\5\u041e\u0210"+
		"\2\u184e\u184f\7\u028e\2\2\u184f\u1850\7\u0342\2\2\u1850\u1852\t\65\2"+
		"\2\u1851\u184e\3\2\2\2\u1851\u1852\3\2\2\2\u1852\u185f\3\2\2\2\u1853\u1855"+
		"\7p\2\2\u1854\u1856\7\u0080\2\2\u1855\u1854\3\2\2\2\u1855\u1856\3\2\2"+
		"\2\u1856\u1857\3\2\2\2\u1857\u185c\5\u03d2\u01ea\2\u1858\u1859\7\u0356"+
		"\2\2\u1859\u185b\5\u03d2\u01ea\2\u185a\u1858\3\2\2\2\u185b\u185e\3\2\2"+
		"\2\u185c\u185a\3\2\2\2\u185c\u185d\3\2\2\2\u185d\u1860\3\2\2\2\u185e\u185c"+
		"\3\2\2\2\u185f\u1853\3\2\2\2\u185f\u1860\3\2\2\2\u1860\u186b\3\2\2\2\u1861"+
		"\u1862\7\u02c4\2\2\u1862\u1863\7p\2\2\u1863\u1868\5\u03d2\u01ea\2\u1864"+
		"\u1865\7\u0356\2\2\u1865\u1867\5\u03d2\u01ea\2\u1866\u1864\3\2\2\2\u1867"+
		"\u186a\3\2\2\2\u1868\u1866\3\2\2\2\u1868\u1869\3\2\2\2\u1869\u186c\3\2"+
		"\2\2\u186a\u1868\3\2\2\2\u186b\u1861\3\2\2\2\u186b\u186c\3\2\2\2\u186c"+
		"\u186f\3\2\2\2\u186d\u186e\7\32\2\2\u186e\u1870\5\u041e\u0210\2\u186f"+
		"\u186d\3\2\2\2\u186f\u1870\3\2\2\2\u1870\u187a\3\2\2\2\u1871\u1872\7\u00bd"+
		"\2\2\u1872\u1877\5\u03ce\u01e8\2\u1873\u1874\7\u0356\2\2\u1874\u1876\5"+
		"\u03ce\u01e8\2\u1875\u1873\3\2\2\2\u1876\u1879\3\2\2\2\u1877\u1875\3\2"+
		"\2\2\u1877\u1878\3\2\2\2\u1878\u187b\3\2\2\2\u1879\u1877\3\2\2\2\u187a"+
		"\u1871\3\2\2\2\u187a\u187b\3\2\2\2\u187b\u01d5\3\2\2\2\u187c\u187e\7#"+
		"\2\2\u187d\u187f\7\u00b0\2\2\u187e\u187d\3\2\2\2\u187e\u187f\3\2\2\2\u187f"+
		"\u1881\3\2\2\2\u1880\u1882\5\u03fa\u01fe\2\u1881\u1880\3\2\2\2\u1881\u1882"+
		"\3\2\2\2\u1882\u1883\3\2\2\2\u1883\u1884\7X\2\2\u1884\u1885\5\u041e\u0210"+
		"\2\u1885\u1886\7p\2\2\u1886\u1887\5\u03e0\u01f1\2\u1887\u1888\7\u0354"+
		"\2\2\u1888\u1889\5\u03ee\u01f8\2\u1889\u188f\7\u0355\2\2\u188a\u188b\7"+
		"\u02b4\2\2\u188b\u188c\7\u0354\2\2\u188c\u188d\5\u03f4\u01fb\2\u188d\u188e"+
		"\7\u0355\2\2\u188e\u1890\3\2\2\2\u188f\u188a\3\2\2\2\u188f\u1890\3\2\2"+
		"\2\u1890\u1893\3\2\2\2\u1891\u1892\7\u00bb\2\2\u1892\u1894\5\u0320\u0191"+
		"\2\u1893\u1891\3\2\2\2\u1893\u1894\3\2\2\2\u1894\u1896\3\2\2\2\u1895\u1897"+
		"\5\u02f8\u017d\2\u1896\u1895\3\2\2\2\u1896\u1897\3\2\2\2\u1897\u189a\3"+
		"\2\2\2\u1898\u1899\7p\2\2\u1899\u189b\5\u041e\u0210\2\u189a\u1898\3\2"+
		"\2\2\u189a\u189b\3\2\2\2\u189b\u189d\3\2\2\2\u189c\u189e\7\u0357\2\2\u189d"+
		"\u189c\3\2\2\2\u189d\u189e\3\2\2\2\u189e\u01d7\3\2\2\2\u189f\u18a1\7#"+
		"\2\2\u18a0\u18a2\7\u0080\2\2\u18a1\u18a0\3\2\2\2\u18a1\u18a2\3\2\2\2\u18a2"+
		"\u18a3\3\2\2\2\u18a3\u18a4\7\u0266\2\2\u18a4\u18a5\7X\2\2\u18a5\u18a6"+
		"\5\u041e\u0210\2\u18a6\u18a7\7p\2\2\u18a7\u18a8\5\u03e0\u01f1\2\u18a8"+
		"\u18a9\7\u0354\2\2\u18a9\u18aa\5\u041e\u0210\2\u18aa\u18b5\7\u0355\2\2"+
		"\u18ab\u18ac\7\u0258\2\2\u18ac\u18ad\7\u0266\2\2\u18ad\u18ae\7X\2\2\u18ae"+
		"\u18b3\5\u041e\u0210\2\u18af\u18b1\7G\2\2\u18b0\u18b2\t\66\2\2\u18b1\u18b0"+
		"\3\2\2\2\u18b1\u18b2\3\2\2\2\u18b2\u18b4\3\2\2\2\u18b3\u18af\3\2\2\2\u18b3"+
		"\u18b4\3\2\2\2\u18b4\u18b6\3\2\2\2\u18b5\u18ab\3\2\2\2\u18b5\u18b6\3\2"+
		"\2\2\u18b6\u18b8\3\2\2\2\u18b7\u18b9\5\u02f8\u017d\2\u18b8\u18b7\3\2\2"+
		"\2\u18b8\u18b9\3\2\2\2\u18b9\u18bb\3\2\2\2\u18ba\u18bc\7\u0357\2\2\u18bb"+
		"\u18ba\3\2\2\2\u18bb\u18bc\3\2\2\2\u18bc\u01d9\3\2\2\2\u18bd\u18c0\7#"+
		"\2\2\u18be\u18bf\7x\2\2\u18bf\u18c1\7\5\2\2\u18c0\u18be\3\2\2\2\u18c0"+
		"\u18c1\3\2\2\2\u18c1\u18c4\3\2\2\2\u18c2\u18c4\7\5\2\2\u18c3\u18bd\3\2"+
		"\2\2\u18c3\u18c2\3\2\2\2\u18c4\u18c5\3\2\2\2\u18c5\u18c6\t\67\2\2\u18c6"+
		"\u18c9\5\u03e4\u01f3\2\u18c7\u18c8\7\u0357\2\2\u18c8\u18ca\7\u033c\2\2"+
		"\u18c9\u18c7\3\2\2\2\u18c9\u18ca\3\2\2\2\u18ca\u18d9\3\2\2\2\u18cb\u18cd"+
		"\7\u0354\2\2\u18cc\u18cb\3\2\2\2\u18cc\u18cd\3\2\2\2\u18cd\u18ce\3\2\2"+
		"\2\u18ce\u18d3\5\u01f2\u00fa\2\u18cf\u18d0\7\u0356\2\2\u18d0\u18d2\5\u01f2"+
		"\u00fa\2\u18d1\u18cf\3\2\2\2\u18d2\u18d5\3\2\2\2\u18d3\u18d1\3\2\2\2\u18d3"+
		"\u18d4\3\2\2\2\u18d4\u18d7\3\2\2\2\u18d5\u18d3\3\2\2\2\u18d6\u18d8\7\u0355"+
		"\2\2\u18d7\u18d6\3\2\2\2\u18d7\u18d8\3\2\2\2\u18d8\u18da\3\2\2\2\u18d9"+
		"\u18cc\3\2\2\2\u18d9\u18da\3\2\2\2\u18da\u18e4\3\2\2\2\u18db\u18dc\7\u00bd"+
		"\2\2\u18dc\u18e1\5\u01f4\u00fb\2\u18dd\u18de\7\u0356\2\2\u18de\u18e0\5"+
		"\u01f4\u00fb\2\u18df\u18dd\3\2\2\2\u18e0\u18e3\3\2\2\2\u18e1\u18df\3\2"+
		"\2\2\u18e1\u18e2\3\2\2\2\u18e2\u18e5\3\2\2\2\u18e3\u18e1\3\2\2\2\u18e4"+
		"\u18db\3\2\2\2\u18e4\u18e5\3\2\2\2\u18e5\u18e8\3\2\2\2\u18e6\u18e7\7G"+
		"\2\2\u18e7\u18e9\7\u008b\2\2\u18e8\u18e6\3\2\2\2\u18e8\u18e9\3\2\2\2\u18e9"+
		"\u18ea\3\2\2\2\u18ea\u18f2\7\b\2\2\u18eb\u18f3\5\u01dc\u00ef\2\u18ec\u18ee"+
		"\5\b\5\2\u18ed\u18ec\3\2\2\2\u18ee\u18f1\3\2\2\2\u18ef\u18ed\3\2\2\2\u18ef"+
		"\u18f0\3\2\2\2\u18f0\u18f3\3\2\2\2\u18f1\u18ef\3\2\2\2\u18f2\u18eb\3\2"+
		"\2\2\u18f2\u18ef\3\2\2\2\u18f3\u01db\3\2\2\2\u18f4\u18f5\7C\2\2\u18f5"+
		"\u18f6\7\u01a8\2\2\u18f6\u18f7\5\u041e\u0210\2\u18f7\u18f8\7\u034f\2\2"+
		"\u18f8\u18f9\5\u041e\u0210\2\u18f9\u18fa\7\u034f\2\2\u18fa\u18fb\5\u041e"+
		"\u0210\2\u18fb\u01dd\3\2\2\2\u18fc\u18ff\5\u01e0\u00f1\2\u18fd\u18ff\5"+
		"\u01e6\u00f4\2\u18fe\u18fc\3\2\2\2\u18fe\u18fd\3\2\2\2\u18ff\u01df\3\2"+
		"\2\2\u1900\u1903\7#\2\2\u1901\u1902\7x\2\2\u1902\u1904\7\5\2\2\u1903\u1901"+
		"\3\2\2\2\u1903\u1904\3\2\2\2\u1904\u1907\3\2\2\2\u1905\u1907\7\5\2\2\u1906"+
		"\u1900\3\2\2\2\u1906\u1905\3\2\2\2\u1907\u1908\3\2\2\2\u1908\u1909\7\u00ac"+
		"\2\2\u1909\u190a\5\u03e2\u01f2\2\u190a\u190b\7p\2\2\u190b\u1915\5\u03e0"+
		"\u01f1\2\u190c\u190d\7\u00bd\2\2\u190d\u1912\5\u01e2\u00f2\2\u190e\u190f"+
		"\7\u0356\2\2\u190f\u1911\5\u01e2\u00f2\2\u1910\u190e\3\2\2\2\u1911\u1914"+
		"\3\2\2\2\u1912\u1910\3\2\2\2\u1912\u1913\3\2\2\2\u1913\u1916\3\2\2\2\u1914"+
		"\u1912\3\2\2\2\u1915\u190c\3\2\2\2\u1915\u1916\3\2\2\2\u1916\u191b\3\2"+
		"\2\2\u1917\u191c\7G\2\2\u1918\u191c\7\u00cc\2\2\u1919\u191a\7\u02b8\2"+
		"\2\u191a\u191c\7m\2\2\u191b\u1917\3\2\2\2\u191b\u1918\3\2\2\2\u191b\u1919"+
		"\3\2\2\2\u191c\u191d\3\2\2\2\u191d\u1922\5\u01e4\u00f3\2\u191e\u191f\7"+
		"\u0356\2\2\u191f\u1921\5\u01e4\u00f3\2\u1920\u191e\3\2\2\2\u1921\u1924"+
		"\3\2\2\2\u1922\u1920\3\2\2\2\u1922\u1923\3\2\2\2\u1923\u1927\3\2\2\2\u1924"+
		"\u1922\3\2\2\2\u1925\u1926\7\u00bd\2\2\u1926\u1928\7\u0274\2\2\u1927\u1925"+
		"\3\2\2\2\u1927\u1928\3\2\2\2\u1928\u192c\3\2\2\2\u1929\u192a\7j\2\2\u192a"+
		"\u192b\7G\2\2\u192b\u192d\7\u008b\2\2\u192c\u1929\3\2\2\2\u192c\u192d"+
		"\3\2\2\2\u192d\u192e\3\2\2\2\u192e\u1930\7\b\2\2\u192f\u1931\5\b\5\2\u1930"+
		"\u192f\3\2\2\2\u1931\u1932\3\2\2\2\u1932\u1930\3\2\2\2\u1932\u1933\3\2"+
		"\2\2\u1933\u01e1\3\2\2\2\u1934\u1937\7\u0135\2\2\u1935\u1937\5\u02dc\u016f"+
		"\2\u1936\u1934\3\2\2\2\u1936\u1935\3\2\2\2\u1937\u01e3\3\2\2\2\u1938\u1939"+
		"\t8\2\2\u1939\u01e5\3\2\2\2\u193a\u193d\7#\2\2\u193b\u193c\7x\2\2\u193c"+
		"\u193e\7\5\2\2\u193d\u193b\3\2\2\2\u193d\u193e\3\2\2\2\u193e\u1941\3\2"+
		"\2\2\u193f\u1941\7\5\2\2\u1940\u193a\3\2\2\2\u1940\u193f\3\2\2\2\u1941"+
		"\u1942\3\2\2\2\u1942\u1943\7\u00ac\2\2\u1943\u1944\5\u03e2\u01f2\2\u1944"+
		"\u1948\7p\2\2\u1945\u1946\7\4\2\2\u1946\u1949\7\u030a\2\2\u1947\u1949"+
		"\7+\2\2\u1948\u1945\3\2\2\2\u1948\u1947\3\2\2\2\u1949\u1953\3\2\2\2\u194a"+
		"\u194b\7\u00bd\2\2\u194b\u1950\5\u01e2\u00f2\2\u194c\u194d\7\u0356\2\2"+
		"\u194d\u194f\5\u01e2\u00f2\2\u194e\u194c\3\2\2\2\u194f\u1952\3\2\2\2\u1950"+
		"\u194e\3\2\2\2\u1950\u1951\3\2\2\2\u1951\u1954\3\2\2\2\u1952\u1950\3\2"+
		"\2\2\u1953\u194a\3\2\2\2\u1953\u1954\3\2\2\2\u1954\u1955\3\2\2\2\u1955"+
		"\u1956\t9\2\2\u1956\u195b\5\u01e8\u00f5\2\u1957\u1958\7\u0356\2\2\u1958"+
		"\u195a\5\u01e4\u00f3\2\u1959\u1957\3\2\2\2\u195a\u195d\3\2\2\2\u195b\u1959"+
		"\3\2\2\2\u195b\u195c\3\2\2\2\u195c\u195e\3\2\2\2\u195d\u195b\3\2\2\2\u195e"+
		"\u1960\7\b\2\2\u195f\u1961\5\b\5\2\u1960\u195f\3\2\2\2\u1961\u1962\3\2"+
		"\2\2\u1962\u1960\3\2\2\2\u1962\u1963\3\2\2\2\u1963\u01e7\3\2\2\2\u1964"+
		"\u1965\5\u0420\u0211\2\u1965\u01e9\3\2\2\2\u1966\u1969\7#\2\2\u1967\u1968"+
		"\7x\2\2\u1968\u196a\7\5\2\2\u1969\u1967\3\2\2\2\u1969\u196a\3\2\2\2\u196a"+
		"\u196d\3\2\2\2\u196b\u196d\7\5\2\2\u196c\u1966\3\2\2\2\u196c\u196b\3\2"+
		"\2\2\u196d\u196e\3\2\2\2\u196e\u196f\7M\2\2\u196f\u197d\5\u03e4\u01f3"+
		"\2\u1970\u1971\7\u0354\2\2\u1971\u1976\5\u01f2\u00fa\2\u1972\u1973\7\u0356"+
		"\2\2\u1973\u1975\5\u01f2\u00fa\2\u1974\u1972\3\2\2\2\u1975\u1978\3\2\2"+
		"\2\u1976\u1974\3\2\2\2\u1976\u1977\3\2\2\2\u1977\u1979\3\2\2\2\u1978\u1976"+
		"\3\2\2\2\u1979\u197a\7\u0355\2\2\u197a\u197e\3\2\2\2\u197b\u197c\7\u0354"+
		"\2\2\u197c\u197e\7\u0355\2\2\u197d\u1970\3\2\2\2\u197d\u197b\3\2\2\2\u197e"+
		"\u1982\3\2\2\2\u197f\u1983\5\u01ec\u00f7\2\u1980\u1983\5\u01ee\u00f8\2"+
		"\u1981\u1983\5\u01f0\u00f9\2\u1982\u197f\3\2\2\2\u1982\u1980\3\2\2\2\u1982"+
		"\u1981\3\2\2\2\u1983\u1985\3\2\2\2\u1984\u1986\7\u0357\2\2\u1985\u1984"+
		"\3\2\2\2\u1985\u1986\3\2\2\2\u1986\u01eb\3\2\2\2\u1987\u1988\7\u02fe\2"+
		"\2\u1988\u1992\7\u00a4\2\2\u1989\u198a\7\u00bd\2\2\u198a\u198f\5\u01f6"+
		"\u00fc\2\u198b\u198c\7\u0356\2\2\u198c\u198e\5\u01f6\u00fc\2\u198d\u198b"+
		"\3\2\2\2\u198e\u1991\3\2\2\2\u198f\u198d\3\2\2\2\u198f\u1990\3\2\2\2\u1990"+
		"\u1993\3\2\2\2\u1991\u198f\3\2\2\2\u1992\u1989\3\2\2\2\u1992\u1993\3\2"+
		"\2\2\u1993\u1995\3\2\2\2\u1994\u1996\7\b\2\2\u1995\u1994\3\2\2\2\u1995"+
		"\u1996\3\2\2\2\u1996\u1997\3\2\2\2\u1997\u199d\7\u008e\2\2\u1998\u1999"+
		"\7\u0354\2\2\u1999\u199a\5\u01c8\u00e5\2\u199a\u199b\7\u0355\2\2\u199b"+
		"\u199e\3\2\2\2\u199c\u199e\5\u01c8\u00e5\2\u199d\u1998\3\2\2\2\u199d\u199c"+
		"\3\2\2\2\u199e\u01ed\3\2\2\2\u199f\u19a0\7\u02fe\2\2\u19a0\u19a1\7\u033b"+
		"\2\2\u19a1\u19ab\5\u02e0\u0171\2\u19a2\u19a3\7\u00bd\2\2\u19a3\u19a8\5"+
		"\u01f6\u00fc\2\u19a4\u19a5\7\u0356\2\2\u19a5\u19a7\5\u01f6\u00fc\2\u19a6"+
		"\u19a4\3\2\2\2\u19a7\u19aa\3\2\2\2\u19a8\u19a6\3\2\2\2\u19a8\u19a9\3\2"+
		"\2\2\u19a9\u19ac\3\2\2\2\u19aa\u19a8\3\2\2\2\u19ab\u19a2\3\2\2\2\u19ab"+
		"\u19ac\3\2\2\2\u19ac\u19ae\3\2\2\2\u19ad\u19af\7\b\2\2\u19ae\u19ad\3\2"+
		"\2\2\u19ae\u19af\3\2\2\2\u19af\u19b0\3\2\2\2\u19b0\u19b4\7\r\2\2\u19b1"+
		"\u19b3\5\b\5\2\u19b2\u19b1\3\2\2\2\u19b3\u19b6\3\2\2\2\u19b4\u19b2\3\2"+
		"\2\2\u19b4\u19b5\3\2\2\2\u19b5\u19b7\3\2\2\2\u19b6\u19b4\3\2\2\2\u19b7"+
		"\u19b9\7\u008e\2\2\u19b8\u19ba\7\u0357\2\2\u19b9\u19b8\3\2\2\2\u19b9\u19ba"+
		"\3\2\2\2\u19ba\u19bb\3\2\2\2\u19bb\u19bd\7<\2\2\u19bc\u19be\7\u0357\2"+
		"\2\u19bd\u19bc\3\2\2\2\u19bd\u19be\3\2\2\2\u19be\u01ef\3\2\2\2\u19bf\u19c0"+
		"\7\u02fe\2\2\u19c0\u19ca\5\u0414\u020b\2\u19c1\u19c2\7\u00bd\2\2\u19c2"+
		"\u19c7\5\u01f6\u00fc\2\u19c3\u19c4\7\u0356\2\2\u19c4\u19c6\5\u01f6\u00fc"+
		"\2\u19c5\u19c3\3\2\2\2\u19c6\u19c9\3\2\2\2\u19c7\u19c5\3\2\2\2\u19c7\u19c8"+
		"\3\2\2\2\u19c8\u19cb\3\2\2\2\u19c9\u19c7\3\2\2\2\u19ca\u19c1\3\2\2\2\u19ca"+
		"\u19cb\3\2\2\2\u19cb\u19cd\3\2\2\2\u19cc\u19ce\7\b\2\2\u19cd\u19cc\3\2"+
		"\2\2\u19cd\u19ce\3\2\2\2\u19ce\u19cf\3\2\2\2\u19cf\u19d3\7\r\2\2\u19d0"+
		"\u19d2\5\b\5\2\u19d1\u19d0\3\2\2\2\u19d2\u19d5\3\2\2\2\u19d3\u19d1\3\2"+
		"\2\2\u19d3\u19d4\3\2\2\2\u19d4\u19d6\3\2\2\2\u19d5\u19d3\3\2\2\2\u19d6"+
		"\u19d7\7\u008e\2\2\u19d7\u19d9\5\u0308\u0185\2\u19d8\u19da\7\u0357\2\2"+
		"\u19d9\u19d8\3\2\2\2\u19d9\u19da\3\2\2\2\u19da\u19db\3\2\2\2\u19db\u19dc"+
		"\7<\2\2\u19dc\u01f1\3\2\2\2\u19dd\u19df\7\u033b\2\2\u19de\u19e0\7\b\2"+
		"\2\u19df\u19de\3\2\2\2\u19df\u19e0\3\2\2\2\u19e0\u19e4\3\2\2\2\u19e1\u19e2"+
		"\5\u041e\u0210\2\u19e2\u19e3\7\u034f\2\2\u19e3\u19e5\3\2\2\2\u19e4\u19e1"+
		"\3\2\2\2\u19e4\u19e5\3\2\2\2\u19e5\u19e6\3\2\2\2\u19e6\u19e8\5\u0414\u020b"+
		"\2\u19e7\u19e9\7\u00b7\2\2\u19e8\u19e7\3\2\2\2\u19e8\u19e9\3\2\2\2\u19e9"+
		"\u19ec\3\2\2\2\u19ea\u19eb\7\u0342\2\2\u19eb\u19ed\5\u0416\u020c\2\u19ec"+
		"\u19ea\3\2\2\2\u19ec\u19ed\3\2\2\2\u19ed\u19ef\3\2\2\2\u19ee\u19f0\t:"+
		"\2\2\u19ef\u19ee\3\2\2\2\u19ef\u19f0\3\2\2\2\u19f0\u01f3\3\2\2\2\u19f1"+
		"\u19f5\7\u0135\2\2\u19f2\u19f5\7\u01f3\2\2\u19f3\u19f5\5\u02dc\u016f\2"+
		"\u19f4\u19f1\3\2\2\2\u19f4\u19f2\3\2\2\2\u19f4\u19f3\3\2\2\2\u19f5\u01f5"+
		"\3\2\2\2\u19f6\u1a03\7\u0135\2\2\u19f7\u1a03\7\u020e\2\2\u19f8\u19f9\7"+
		"\u02fe\2\2\u19f9\u19fa\7k\2\2\u19fa\u19fb\7p\2\2\u19fb\u19fc\7k\2\2\u19fc"+
		"\u1a03\7\u016b\2\2\u19fd\u19fe\7\u0284\2\2\u19fe\u19ff\7p\2\2\u19ff\u1a00"+
		"\7k\2\2\u1a00\u1a03\7\u016b\2\2\u1a01\u1a03\5\u02dc\u016f\2\u1a02\u19f6"+
		"\3\2\2\2\u1a02\u19f7\3\2\2\2\u1a02\u19f8\3\2\2\2\u1a02\u19fd\3\2\2\2\u1a02"+
		"\u1a01\3\2\2\2\u1a03\u01f7\3\2\2\2\u1a04\u1a05\7#\2\2\u1a05\u1a06\7\u00a2"+
		"\2\2\u1a06\u1a07\5\u041e\u0210\2\u1a07\u1a08\7p\2\2\u1a08\u1a09\5\u03e0"+
		"\u01f1\2\u1a09\u1a0a\7\u0354\2\2\u1a0a\u1a0b\5\u03f4\u01fb\2\u1a0b\u1a1e"+
		"\7\u0355\2\2\u1a0c\u1a12\7\u00bd\2\2\u1a0d\u1a13\7\u0152\2\2\u1a0e\u1a0f"+
		"\7\u020d\2\2\u1a0f\u1a10\7\u033c\2\2\u1a10\u1a13\t;\2\2\u1a11\u1a13\7"+
		"\u022f\2\2\u1a12\u1a0d\3\2\2\2\u1a12\u1a0e\3\2\2\2\u1a12\u1a11\3\2\2\2"+
		"\u1a13\u1a16\3\2\2\2\u1a14\u1a15\7\u0356\2\2\u1a15\u1a17\7\u01b6\2\2\u1a16"+
		"\u1a14\3\2\2\2\u1a16\u1a17\3\2\2\2\u1a17\u1a1c\3\2\2\2\u1a18\u1a19\7\u0356"+
		"\2\2\u1a19\u1a1a\7\u0169\2\2\u1a1a\u1a1b\7\u0342\2\2\u1a1b\u1a1d\5\u03f8"+
		"\u01fd\2\u1a1c\u1a18\3\2\2\2\u1a1c\u1a1d\3\2\2\2\u1a1d\u1a1f\3\2\2\2\u1a1e"+
		"\u1a0c\3\2\2\2\u1a1e\u1a1f\3\2\2\2\u1a1f\u1a21\3\2\2\2\u1a20\u1a22\7\u0357"+
		"\2\2\u1a21\u1a20\3\2\2\2\u1a21\u1a22\3\2\2\2\u1a22\u01f9\3\2\2\2\u1a23"+
		"\u1a25\7\u00b2\2\2\u1a24\u1a26\t<\2\2\u1a25\u1a24\3\2\2\2\u1a25\u1a26"+
		"\3\2\2\2\u1a26\u1a27\3\2\2\2\u1a27\u1a28\7\u00a2\2\2\u1a28\u1a2a\5\u03de"+
		"\u01f0\2\u1a29\u1a2b\5\u041e\u0210\2\u1a2a\u1a29\3\2\2\2\u1a2a\u1a2b\3"+
		"\2\2\2\u1a2b\u1a2f\3\2\2\2\u1a2c\u1a2d\7\u0258\2\2\u1a2d\u1a2e\7\u033c"+
		"\2\2\u1a2e\u1a30\7\u00b6\2\2\u1a2f\u1a2c\3\2\2\2\u1a2f\u1a30\3\2\2\2\u1a30"+
		"\u01fb\3\2\2\2\u1a31\u1a32\7#\2\2\u1a32\u1a33\7\u00a4\2\2\u1a33\u1a34"+
		"\5\u03e0\u01f1\2\u1a34\u1a35\7\u0354\2\2\u1a35\u1a3c\5\u02e8\u0175\2\u1a36"+
		"\u1a38\7\u0356\2\2\u1a37\u1a36\3\2\2\2\u1a37\u1a38\3\2\2\2\u1a38\u1a39"+
		"\3\2\2\2\u1a39\u1a3b\5\u01fe\u0100\2\u1a3a\u1a37\3\2\2\2\u1a3b\u1a3e\3"+
		"\2\2\2\u1a3c\u1a3a\3\2\2\2\u1a3c\u1a3d\3\2\2\2\u1a3d\u1a40\3\2\2\2\u1a3e"+
		"\u1a3c\3\2\2\2\u1a3f\u1a41\7\u0356\2\2\u1a40\u1a3f\3\2\2\2\u1a40\u1a41"+
		"\3\2\2\2\u1a41\u1a42\3\2\2\2\u1a42\u1a45\7\u0355\2\2\u1a43\u1a44\7\u0184"+
		"\2\2\u1a44\u1a46\5\u0420\u0211\2\u1a45\u1a43\3\2\2\2\u1a45\u1a46\3\2\2"+
		"\2\u1a46\u1a4a\3\2\2\2\u1a47\u1a49\5\u0200\u0101\2\u1a48\u1a47\3\2\2\2"+
		"\u1a49\u1a4c\3\2\2\2\u1a4a\u1a48\3\2\2\2\u1a4a\u1a4b\3\2\2\2\u1a4b\u1a50"+
		"\3\2\2\2\u1a4c\u1a4a\3\2\2\2\u1a4d\u1a4e\7p\2\2\u1a4e\u1a51\5\u041e\u0210"+
		"\2\u1a4f\u1a51\7/\2\2\u1a50\u1a4d\3\2\2\2\u1a50\u1a4f\3\2\2\2\u1a50\u1a51"+
		"\3\2\2\2\u1a51\u1a55\3\2\2\2\u1a52\u1a53\7\u0242\2\2\u1a53\u1a56\5\u041e"+
		"\u0210\2\u1a54\u1a56\7/\2\2\u1a55\u1a52\3\2\2\2\u1a55\u1a54\3\2\2\2\u1a55"+
		"\u1a56\3\2\2\2\u1a56\u1a58\3\2\2\2\u1a57\u1a59\7\u0357\2\2\u1a58\u1a57"+
		"\3\2\2\2\u1a58\u1a59\3\2\2\2\u1a59\u01fd\3\2\2\2\u1a5a\u1a5b\7X\2\2\u1a5b"+
		"\u1a5d\5\u041e\u0210\2\u1a5c\u1a5e\t=\2\2\u1a5d\u1a5c\3\2\2\2\u1a5d\u1a5e"+
		"\3\2\2\2\u1a5e\u1a5f\3\2\2\2\u1a5f\u1a60\7\u0354\2\2\u1a60\u1a61\5\u03ee"+
		"\u01f8\2\u1a61\u1a63\7\u0355\2\2\u1a62\u1a64\5\u02f8\u017d\2\u1a63\u1a62"+
		"\3\2\2\2\u1a63\u1a64\3\2\2\2\u1a64\u1a67\3\2\2\2\u1a65\u1a66\7p\2\2\u1a66"+
		"\u1a68\5\u041e\u0210\2\u1a67\u1a65\3\2\2\2\u1a67\u1a68\3\2\2\2\u1a68\u01ff"+
		"\3\2\2\2\u1a69\u1a7d\7\u00bd\2\2\u1a6a\u1a6b\7\u0354\2\2\u1a6b\u1a70\5"+
		"\u02fa\u017e\2\u1a6c\u1a6d\7\u0356\2\2\u1a6d\u1a6f\5\u02fa\u017e\2\u1a6e"+
		"\u1a6c\3\2\2\2\u1a6f\u1a72\3\2\2\2\u1a70\u1a6e\3\2\2\2\u1a70\u1a71\3\2"+
		"\2\2\u1a71\u1a73\3\2\2\2\u1a72\u1a70\3\2\2\2\u1a73\u1a74\7\u0355\2\2\u1a74"+
		"\u1a7e\3\2\2\2\u1a75\u1a7a\5\u02fa\u017e\2\u1a76\u1a77\7\u0356\2\2\u1a77"+
		"\u1a79\5\u02fa\u017e\2\u1a78\u1a76\3\2\2\2\u1a79\u1a7c\3\2\2\2\u1a7a\u1a78"+
		"\3\2\2\2\u1a7a\u1a7b\3\2\2\2\u1a7b\u1a7e\3\2\2\2\u1a7c\u1a7a\3\2\2\2\u1a7d"+
		"\u1a6a\3\2\2\2\u1a7d\u1a75\3\2\2\2\u1a7e\u0201\3\2\2\2\u1a7f\u1a80\7#"+
		"\2\2\u1a80\u1a81\7\u00b8\2\2\u1a81\u1a86\5\u03e2\u01f2\2\u1a82\u1a83\7"+
		"\u0354\2\2\u1a83\u1a84\5\u03f4\u01fb\2\u1a84\u1a85\7\u0355\2\2\u1a85\u1a87"+
		"\3\2\2\2\u1a86\u1a82\3\2\2\2\u1a86\u1a87\3\2\2\2\u1a87\u1a91\3\2\2\2\u1a88"+
		"\u1a89\7\u00bd\2\2\u1a89\u1a8e\5\u0204\u0103\2\u1a8a\u1a8b\7\u0356\2\2"+
		"\u1a8b\u1a8d\5\u0204\u0103\2\u1a8c\u1a8a\3\2\2\2\u1a8d\u1a90\3\2\2\2\u1a8e"+
		"\u1a8c\3\2\2\2\u1a8e\u1a8f\3\2\2\2\u1a8f\u1a92\3\2\2\2\u1a90\u1a8e\3\2"+
		"\2\2\u1a91\u1a88\3\2\2\2\u1a91\u1a92\3\2\2\2\u1a92\u1a93\3\2\2\2\u1a93"+
		"\u1a94\7\b\2\2\u1a94\u1a98\5\u01c8\u00e5\2\u1a95\u1a96\7\u00bd\2\2\u1a96"+
		"\u1a97\7\25\2\2\u1a97\u1a99\7w\2\2\u1a98\u1a95\3\2\2\2\u1a98\u1a99\3\2"+
		"\2\2\u1a99\u1a9b\3\2\2\2\u1a9a\u1a9c\7\u0357\2\2\u1a9b\u1a9a\3\2\2\2\u1a9b"+
		"\u1a9c\3\2\2\2\u1a9c\u0203\3\2\2\2\u1a9d\u1a9e\t>\2\2\u1a9e\u0205\3\2"+
		"\2\2\u1a9f\u1aa0\7\5\2\2\u1aa0\u1aa1\7\u00a4\2\2\u1aa1\u1ad6\5\u03e0\u01f1"+
		"\2\u1aa2\u1aa3\7\u009e\2\2\u1aa3\u1aa4\7\u0354\2\2\u1aa4\u1aa5\7\u0185"+
		"\2\2\u1aa5\u1aa6\7\u0342\2\2\u1aa6\u1aa7\t?\2\2\u1aa7\u1ad7\7\u0355\2"+
		"\2\u1aa8\u1aa9\7\3\2\2\u1aa9\u1ad7\5\u02e8\u0175\2\u1aaa\u1aab\7\5\2\2"+
		"\u1aab\u1aac\7\33\2\2\u1aac\u1ad7\5\u02ec\u0177\2\u1aad\u1aae\79\2\2\u1aae"+
		"\u1aaf\7\33\2\2\u1aaf\u1ab4\5\u041e\u0210\2\u1ab0\u1ab1\7\u0356\2\2\u1ab1"+
		"\u1ab3\5\u041e\u0210\2\u1ab2\u1ab0\3\2\2\2\u1ab3\u1ab6\3\2\2\2\u1ab4\u1ab2"+
		"\3\2\2\2\u1ab4\u1ab5\3\2\2\2\u1ab5\u1ad7\3\2\2\2\u1ab6\u1ab4\3\2\2\2\u1ab7"+
		"\u1ab8\79\2\2\u1ab8\u1ab9\7\36\2\2\u1ab9\u1ad7\5\u041e\u0210\2\u1aba\u1abb"+
		"\7\u00bd\2\2\u1abb\u1abc\7\25\2\2\u1abc\u1abd\7\3\2\2\u1abd\u1abe\7\36"+
		"\2\2\u1abe\u1abf\5\u041e\u0210\2\u1abf\u1ac0\7H\2\2\u1ac0\u1ac1\7_\2\2"+
		"\u1ac1\u1ac2\7\u0354\2\2\u1ac2\u1ac3\5\u03f4\u01fb\2\u1ac3\u1ac4\7\u0355"+
		"\2\2\u1ac4\u1ac5\7\u008a\2\2\u1ac5\u1ac6\5\u03e0\u01f1\2\u1ac6\u1ac7\7"+
		"\u0354\2\2\u1ac7\u1ac8\5\u03f4\u01fb\2\u1ac8\u1ac9\7\u0355\2\2\u1ac9\u1ad7"+
		"\3\2\2\2\u1aca\u1acb\7\25\2\2\u1acb\u1acc\7\36\2\2\u1acc\u1ad7\5\u041e"+
		"\u0210\2\u1acd\u1ace\t\27\2\2\u1ace\u1ad0\7\u00ac\2\2\u1acf\u1ad1\5\u041e"+
		"\u0210\2\u1ad0\u1acf\3\2\2\2\u1ad0\u1ad1\3\2\2\2\u1ad1\u1ad7\3\2\2\2\u1ad2"+
		"\u1ad3\7\u01f1\2\2\u1ad3\u1ad7\5\u0200\u0101\2\u1ad4\u1ad5\7\u0322\2\2"+
		"\u1ad5\u1ad7\5\u0208\u0105\2\u1ad6\u1aa2\3\2\2\2\u1ad6\u1aa8\3\2\2\2\u1ad6"+
		"\u1aaa\3\2\2\2\u1ad6\u1aad\3\2\2\2\u1ad6\u1ab7\3\2\2\2\u1ad6\u1aba\3\2"+
		"\2\2\u1ad6\u1aca\3\2\2\2\u1ad6\u1acd\3\2\2\2\u1ad6\u1ad2\3\2\2\2\u1ad6"+
		"\u1ad4\3\2\2\2\u1ad7\u1ad9\3\2\2\2\u1ad8\u1ada\7\u0357\2\2\u1ad9\u1ad8"+
		"\3\2\2\2\u1ad9\u1ada\3\2\2\2\u1ada\u0207\3\2\2\2\u1adb\u1add\7\u01cc\2"+
		"\2\u1adc\u1adb\3\2\2\2\u1adc\u1add\3\2\2\2\u1add\u1ade\3\2\2\2\u1ade\u1ae0"+
		"\5\u0308\u0185\2\u1adf\u1adc\3\2\2\2\u1adf\u1ae0\3\2\2\2\u1ae0\u1ae1\3"+
		"\2\2\2\u1ae1\u1ae2\7\u00a8\2\2\u1ae2\u1ae5\5\u03e0\u01f1\2\u1ae3\u1ae4"+
		"\7\u01cc\2\2\u1ae4\u1ae6\5\u0308\u0185\2\u1ae5\u1ae3\3\2\2\2\u1ae5\u1ae6"+
		"\3\2\2\2\u1ae6\u1ae9\3\2\2\2\u1ae7\u1ae8\7\u00bd\2\2\u1ae8\u1aea\5\u020a"+
		"\u0106\2\u1ae9\u1ae7\3\2\2\2\u1ae9\u1aea\3\2\2\2\u1aea\u0209\3\2\2\2\u1aeb"+
		"\u1aec\7\u032f\2\2\u1aec\u1aed\7\u0354\2\2\u1aed\u1aee\7\u02cb\2\2\u1aee"+
		"\u1aef\7\u0342\2\2\u1aef\u1af1\5\u01cc\u00e7\2\u1af0\u1af2\7\u01a1\2\2"+
		"\u1af1\u1af0\3\2\2\2\u1af1\u1af2\3\2\2\2\u1af2\u1af3\3\2\2\2\u1af3\u1af4"+
		"\7\u0356\2\2\u1af4\u1af5\7\u026d\2\2\u1af5\u1af6\7\u0342\2\2\u1af6\u1af7"+
		"\t@\2\2\u1af7\u1af8\7\u0355\2\2\u1af8\u020b\3\2\2\2\u1af9\u1afa\7\5\2"+
		"\2\u1afa\u1afd\7+\2\2\u1afb\u1afe\5\u041e\u0210\2\u1afc\u1afe\7%\2\2\u1afd"+
		"\u1afb\3\2\2\2\u1afd\u1afc\3\2\2\2\u1afe\u1b0d\3\2\2\2\u1aff\u1b00\7\u01a5"+
		"\2\2\u1b00\u1b01\7\u01a8\2\2\u1b01\u1b02\7\u0342\2\2\u1b02\u1b0e\5\u041e"+
		"\u0210\2\u1b03\u1b04\7\32\2\2\u1b04\u1b0e\5\u041e\u0210\2\u1b05\u1b06"+
		"\7\u009e\2\2\u1b06\u1b09\5\u0216\u010c\2\u1b07\u1b08\7\u00bd\2\2\u1b08"+
		"\u1b0a\5\u025c\u012f\2\u1b09\u1b07\3\2\2\2\u1b09\u1b0a\3\2\2\2\u1b0a\u1b0e"+
		"\3\2\2\2\u1b0b\u1b0e\5\u020e\u0108\2\u1b0c\u1b0e\5\u0212\u010a\2\u1b0d"+
		"\u1aff\3\2\2\2\u1b0d\u1b03\3\2\2\2\u1b0d\u1b05\3\2\2\2\u1b0d\u1b0b\3\2"+
		"\2\2\u1b0d\u1b0c\3\2\2\2\u1b0e\u1b10\3\2\2\2\u1b0f\u1b11\7\u0357\2\2\u1b10"+
		"\u1b0f\3\2\2\2\u1b10\u1b11\3\2\2\2\u1b11\u020d\3\2\2\2\u1b12\u1b13\7\3"+
		"\2\2\u1b13\u1b14\7E\2\2\u1b14\u1b19\5\u0210\u0109\2\u1b15\u1b16\7\u0356"+
		"\2\2\u1b16\u1b18\5\u0210\u0109\2\u1b17\u1b15\3\2\2\2\u1b18\u1b1b\3\2\2"+
		"\2\u1b19\u1b17\3\2\2\2\u1b19\u1b1a\3\2\2\2\u1b1a\u1b1f\3\2\2\2\u1b1b\u1b19"+
		"\3\2\2\2\u1b1c\u1b1d\7\u00a8\2\2\u1b1d\u1b1e\7\u0144\2\2\u1b1e\u1b20\5"+
		"\u041e\u0210\2\u1b1f\u1b1c\3\2\2\2\u1b1f\u1b20\3\2\2\2\u1b20\u1b33\3\2"+
		"\2\2\u1b21\u1b22\7\3\2\2\u1b22\u1b23\7\u02c4\2\2\u1b23\u1b24\7E\2\2\u1b24"+
		"\u1b29\5\u0210\u0109\2\u1b25\u1b26\7\u0356\2\2\u1b26\u1b28\5\u0210\u0109"+
		"\2\u1b27\u1b25\3\2\2\2\u1b28\u1b2b\3\2\2\2\u1b29\u1b27\3\2\2\2\u1b29\u1b2a"+
		"\3\2\2\2\u1b2a\u1b33\3\2\2\2\u1b2b\u1b29\3\2\2\2\u1b2c\u1b2d\7\u01f9\2"+
		"\2\u1b2d\u1b2e\7E\2\2\u1b2e\u1b33\5\u041e\u0210\2\u1b2f\u1b30\7\u01a5"+
		"\2\2\u1b30\u1b31\7E\2\2\u1b31\u1b33\5\u0210\u0109\2\u1b32\u1b12\3\2\2"+
		"\2\u1b32\u1b21\3\2\2\2\u1b32\u1b2c\3\2\2\2\u1b32\u1b2f\3\2\2\2\u1b33\u020f"+
		"\3\2\2\2\u1b34\u1b35\7\u0354\2\2\u1b35\u1b36\7\u01a8\2\2\u1b36\u1b37\7"+
		"\u0342\2\2\u1b37\u1b3c\5\u0422\u0212\2\u1b38\u1b39\7\u0356\2\2\u1b39\u1b3a"+
		"\7\u01ad\2\2\u1b3a\u1b3b\7\u0342\2\2\u1b3b\u1b3d\5\u0422\u0212\2\u1b3c"+
		"\u1b38\3\2\2\2\u1b3c\u1b3d\3\2\2\2\u1b3d\u1b42\3\2\2\2\u1b3e\u1b3f\7\u0356"+
		"\2\2\u1b3f\u1b40\7\u0146\2\2\u1b40\u1b41\7\u0342\2\2\u1b41\u1b43\7\u033e"+
		"\2\2\u1b42\u1b3e\3\2\2\2\u1b42\u1b43\3\2\2\2\u1b43\u1b48\3\2\2\2\u1b44"+
		"\u1b45\7\u0356\2\2\u1b45\u1b46\7\u0228\2\2\u1b46\u1b47\7\u0342\2\2\u1b47"+
		"\u1b49\5\u0428\u0215\2\u1b48\u1b44\3\2\2\2\u1b48\u1b49\3\2\2\2\u1b49\u1b4f"+
		"\3\2\2\2\u1b4a\u1b4b\7\u0356\2\2\u1b4b\u1b4c\7\u0197\2\2\u1b4c\u1b4d\7"+
		"\u0342\2\2\u1b4d\u1b50\5\u0428\u0215\2\u1b4e\u1b50\7\u0256\2\2\u1b4f\u1b4a"+
		"\3\2\2\2\u1b4f\u1b4e\3\2\2\2\u1b4f\u1b50\3\2\2\2\u1b50\u1b55\3\2\2\2\u1b51"+
		"\u1b52\7\u0356\2\2\u1b52\u1b53\7\u0145\2\2\u1b53\u1b54\7\u0342\2\2\u1b54"+
		"\u1b56\5\u0428\u0215\2\u1b55\u1b51\3\2\2\2\u1b55\u1b56\3\2\2\2\u1b56\u1b59"+
		"\3\2\2\2\u1b57\u1b58\7\u0356\2\2\u1b58\u1b5a\7\u01be\2\2\u1b59\u1b57\3"+
		"\2\2\2\u1b59\u1b5a\3\2\2\2\u1b5a\u1b5b\3\2\2\2\u1b5b\u1b5c\7\u0355\2\2"+
		"\u1b5c\u0211\3\2\2\2\u1b5d\u1b5e\7\3\2\2\u1b5e\u1b5f\7\u0144\2\2\u1b5f"+
		"\u1b64\5\u041e\u0210\2\u1b60\u1b61\7\37\2\2\u1b61\u1b65\7\u0148\2\2\u1b62"+
		"\u1b63\7\37\2\2\u1b63\u1b65\7\u019a\2\2\u1b64\u1b60\3\2\2\2\u1b64\u1b62"+
		"\3\2\2\2\u1b64\u1b65\3\2\2\2\u1b65\u1b76\3\2\2\2\u1b66\u1b67\7\u01f9\2"+
		"\2\u1b67\u1b68\7\u0144\2\2\u1b68\u1b76\5\u041e\u0210\2\u1b69\u1b6a\7\u01a5"+
		"\2\2\u1b6a\u1b6b\7\u0144\2\2\u1b6b\u1b73\5\u041e\u0210\2\u1b6c\u1b74\5"+
		"\u0214\u010b\2\u1b6d\u1b74\7/\2\2\u1b6e\u1b6f\7\u01a8\2\2\u1b6f\u1b70"+
		"\7\u0342\2\2\u1b70\u1b74\5\u041e\u0210\2\u1b71\u1b74\7\u00e4\2\2\u1b72"+
		"\u1b74\7\u00e3\2\2\u1b73\u1b6c\3\2\2\2\u1b73\u1b6d\3\2\2\2\u1b73\u1b6e"+
		"\3\2\2\2\u1b73\u1b71\3\2\2\2\u1b73\u1b72\3\2\2\2\u1b74\u1b76\3\2\2\2\u1b75"+
		"\u1b5d\3\2\2\2\u1b75\u1b66\3\2\2\2\u1b75\u1b69\3\2\2\2\u1b76\u0213\3\2"+
		"\2\2\u1b77\u1b78\tA\2\2\u1b78\u0215\3\2\2\2\u1b79\u1b91\5\u0218\u010d"+
		"\2\u1b7a\u1b91\5\u021a\u010e\2\u1b7b\u1b91\5\u021e\u0110\2\u1b7c\u1b91"+
		"\5\u0220\u0111\2\u1b7d\u1b91\5\u0224\u0113\2\u1b7e\u1b91\5\u023e\u0120"+
		"\2\u1b7f\u1b91\5\u0240\u0121\2\u1b80\u1b91\5\u0242\u0122\2\u1b81\u1b91"+
		"\5\u0244\u0123\2\u1b82\u1b91\5\u0246\u0124\2\u1b83\u1b91\5\u0248\u0125"+
		"\2\u1b84\u1b91\5\u024a\u0126\2\u1b85\u1b86\7\u0148\2\2\u1b86\u1b91\5\u03d0"+
		"\u01e9\2\u1b87\u1b91\5\u024c\u0127\2\u1b88\u1b91\5\u024e\u0128\2\u1b89"+
		"\u1b91\5\u0250\u0129\2\u1b8a\u1b91\5\u0252\u012a\2\u1b8b\u1b91\5\u0254"+
		"\u012b\2\u1b8c\u1b91\5\u0256\u012c\2\u1b8d\u1b91\5\u0258\u012d\2\u1b8e"+
		"\u1b91\5\u025a\u012e\2\u1b8f\u1b91\5\u025c\u012f\2\u1b90\u1b79\3\2\2\2"+
		"\u1b90\u1b7a\3\2\2\2\u1b90\u1b7b\3\2\2\2\u1b90\u1b7c\3\2\2\2\u1b90\u1b7d"+
		"\3\2\2\2\u1b90\u1b7e\3\2\2\2\u1b90\u1b7f\3\2\2\2\u1b90\u1b80\3\2\2\2\u1b90"+
		"\u1b81\3\2\2\2\u1b90\u1b82\3\2\2\2\u1b90\u1b83\3\2\2\2\u1b90\u1b84\3\2"+
		"\2\2\u1b90\u1b85\3\2\2\2\u1b90\u1b87\3\2\2\2\u1b90\u1b88\3\2\2\2\u1b90"+
		"\u1b89\3\2\2\2\u1b90\u1b8a\3\2\2\2\u1b90\u1b8b\3\2\2\2\u1b90\u1b8c\3\2"+
		"\2\2\u1b90\u1b8d\3\2\2\2\u1b90\u1b8e\3\2\2\2\u1b90\u1b8f\3\2\2\2\u1b91"+
		"\u0217\3\2\2\2\u1b92\u1b93\7\u00de\2\2\u1b93\u1ba4\5\u03f8\u01fd\2\u1b94"+
		"\u1b95\7\u00df\2\2\u1b95\u1ba4\7n\2\2\u1b96\u1b9b\7p\2\2\u1b97\u1b98\7"+
		"\u0169\2\2\u1b98\u1b99\7\u0342\2\2\u1b99\u1b9c\7p\2\2\u1b9a\u1b9c\7n\2"+
		"\2\u1b9b\u1b97\3\2\2\2\u1b9b\u1b9a\3\2\2\2\u1b9c\u1ba4\3\2\2\2\u1b9d\u1b9e"+
		"\7\u00e0\2\2\u1b9e\u1ba4\5\u03f8\u01fd\2\u1b9f\u1ba0\7\u00e1\2\2\u1ba0"+
		"\u1ba4\5\u03f8\u01fd\2\u1ba1\u1ba2\7\u00e2\2\2\u1ba2\u1ba4\t\t\2\2\u1ba3"+
		"\u1b92\3\2\2\2\u1ba3\u1b94\3\2\2\2\u1ba3\u1b96\3\2\2\2\u1ba3\u1b9d\3\2"+
		"\2\2\u1ba3\u1b9f\3\2\2\2\u1ba3\u1ba1\3\2\2\2\u1ba4\u0219\3\2\2\2\u1ba5"+
		"\u1ba6\7\u00f9\2\2\u1ba6\u1bb6\7\u0342\2\2\u1ba7\u1bb7\7n\2\2\u1ba8\u1bb3"+
		"\7p\2\2\u1ba9\u1bae\5\u021c\u010f\2\u1baa\u1bab\7\u0356\2\2\u1bab\u1bad"+
		"\5\u021c\u010f\2\u1bac\u1baa\3\2\2\2\u1bad\u1bb0\3\2\2\2\u1bae\u1bac\3"+
		"\2\2\2\u1bae\u1baf\3\2\2\2\u1baf\u1bb2\3\2\2\2\u1bb0\u1bae\3\2\2\2\u1bb1"+
		"\u1ba9\3\2\2\2\u1bb2\u1bb5\3\2\2\2\u1bb3\u1bb1\3\2\2\2\u1bb3\u1bb4\3\2"+
		"\2\2\u1bb4\u1bb7\3\2\2\2\u1bb5\u1bb3\3\2\2\2\u1bb6\u1ba7\3\2\2\2\u1bb6"+
		"\u1ba8\3\2\2\2\u1bb7\u021b\3\2\2\2\u1bb8\u1bb9\7\u00dd\2\2\u1bb9\u1bba"+
		"\7\u0342\2\2\u1bba\u1bbf\5\u03f8\u01fd\2\u1bbb\u1bbc\7\u00f8\2\2\u1bbc"+
		"\u1bbd\7\u0342\2\2\u1bbd\u1bbf\tB\2\2\u1bbe\u1bb8\3\2\2\2\u1bbe\u1bbb"+
		"\3\2\2\2\u1bbf\u021d\3\2\2\2\u1bc0\u1bc1\7\u028e\2\2\u1bc1\u1bc2\7\u0342"+
		"\2\2\u1bc2\u1bc3\t\65\2\2\u1bc3\u021f\3\2\2\2\u1bc4\u1bc5\7\u010f\2\2"+
		"\u1bc5\u1bc9\5\u03f8\u01fd\2\u1bc6\u1bc7\7\u0110\2\2\u1bc7\u1bc9\tC\2"+
		"\2\u1bc8\u1bc4\3\2\2\2\u1bc8\u1bc6\3\2\2\2\u1bc9\u0221\3\2\2\2\u1bca\u1bcb"+
		"\7\5\2\2\u1bcb\u1bcc\7\u029f\2\2\u1bcc\u1bcf\5\u041e\u0210\2\u1bcd\u1bce"+
		"\7\n\2\2\u1bce\u1bd0\5\u041e\u0210\2\u1bcf\u1bcd\3\2\2\2\u1bcf\u1bd0\3"+
		"\2\2\2\u1bd0\u1bd8\3\2\2\2\u1bd1\u1bd2\7\u0319\2\2\u1bd2\u1bd6\7\u0342"+
		"\2\2\u1bd3\u1bd7\7\u031c\2\2\u1bd4\u1bd7\7\u031f\2\2\u1bd5\u1bd7\7\u012b"+
		"\2\2\u1bd6\u1bd3\3\2\2\2\u1bd6\u1bd4\3\2\2\2\u1bd6\u1bd5\3\2\2\2\u1bd7"+
		"\u1bd9\3\2\2\2\u1bd8\u1bd1\3\2\2\2\u1bd8\u1bd9\3\2\2\2\u1bd9\u1bda\3\2"+
		"\2\2\u1bda\u1bdb\7\b\2\2\u1bdb\u1bdc\7\u0325\2\2\u1bdc\u1bdd\7\u0354\2"+
		"\2\u1bdd\u1bde\7\u02c2\2\2\u1bde\u1bdf\7\u0342\2\2\u1bdf\u1be4\7\u033c"+
		"\2\2\u1be0\u1be1\7\u0356\2\2\u1be1\u1be2\7\u02c1\2\2\u1be2\u1be3\7\u0342"+
		"\2\2\u1be3\u1be5\tD\2\2\u1be4\u1be0\3\2\2\2\u1be4\u1be5\3\2\2\2\u1be5"+
		"\u1be6\3\2\2\2\u1be6\u1c54\7\u0355\2\2\u1be7\u1c55\7\u024f\2\2\u1be8\u1be9"+
		"\7G\2\2\u1be9\u1bea\7\u030c\2\2\u1bea\u1beb\7\u0354\2\2\u1beb\u1bec\7"+
		"\u0278\2\2\u1bec\u1bfd\7\u0342\2\2\u1bed\u1bef\7\u0330\2\2\u1bee\u1bf0"+
		"\tE\2\2\u1bef\u1bee\3\2\2\2\u1bef\u1bf0\3\2\2\2\u1bf0\u1bf3\3\2\2\2\u1bf1"+
		"\u1bf2\7\u0285\2\2\u1bf2\u1bf4\5\u041e\u0210\2\u1bf3\u1bf1\3\2\2\2\u1bf3"+
		"\u1bf4\3\2\2\2\u1bf4\u1bfe\3\2\2\2\u1bf5\u1bf6\7\u0285\2\2\u1bf6\u1bf8"+
		"\5\u041e\u0210\2\u1bf7\u1bf9\7\u0330\2\2\u1bf8\u1bf7\3\2\2\2\u1bf8\u1bf9"+
		"\3\2\2\2\u1bf9\u1bfb\3\2\2\2\u1bfa\u1bfc\tE\2\2\u1bfb\u1bfa\3\2\2\2\u1bfb"+
		"\u1bfc\3\2\2\2\u1bfc\u1bfe\3\2\2\2\u1bfd\u1bed\3\2\2\2\u1bfd\u1bf5\3\2"+
		"\2\2\u1bfe\u1c10\3\2\2\2\u1bff\u1c01\7\u0356\2\2\u1c00\u1bff\3\2\2\2\u1c00"+
		"\u1c01\3\2\2\2\u1c01\u1c02\3\2\2\2\u1c02\u1c03\7\u0135\2\2\u1c03\u1c04"+
		"\7\u0342\2\2\u1c04\u1c0e\tF\2\2\u1c05\u1c0c\7\u00ce\2\2\u1c06\u1c0d\7"+
		"\u026f\2\2\u1c07\u1c0d\7\u01e9\2\2\u1c08\u1c09\7\u026f\2\2\u1c09\u1c0d"+
		"\7\u01e9\2\2\u1c0a\u1c0b\7\u01e9\2\2\u1c0b\u1c0d\7\u026f\2\2\u1c0c\u1c06"+
		"\3\2\2\2\u1c0c\u1c07\3\2\2\2\u1c0c\u1c08\3\2\2\2\u1c0c\u1c0a\3\2\2\2\u1c0d"+
		"\u1c0f\3\2\2\2\u1c0e\u1c05\3\2\2\2\u1c0e\u1c0f\3\2\2\2\u1c0f\u1c11\3\2"+
		"\2\2\u1c10\u1c00\3\2\2\2\u1c10\u1c11\3\2\2\2\u1c11\u1c18\3\2\2\2\u1c12"+
		"\u1c14\7\u0356\2\2\u1c13\u1c12\3\2\2\2\u1c13\u1c14\3\2\2\2\u1c14\u1c15"+
		"\3\2\2\2\u1c15\u1c16\7\u02d3\2\2\u1c16\u1c17\7\u0342\2\2\u1c17\u1c19\t"+
		"G\2\2\u1c18\u1c13\3\2\2\2\u1c18\u1c19\3\2\2\2\u1c19\u1c20\3\2\2\2\u1c1a"+
		"\u1c1c\7\u0356\2\2\u1c1b\u1c1a\3\2\2\2\u1c1b\u1c1c\3\2\2\2\u1c1c\u1c1d"+
		"\3\2\2\2\u1c1d\u1c1e\7\u02d4\2\2\u1c1e\u1c1f\7\u0342\2\2\u1c1f\u1c21\7"+
		"\u033c\2\2\u1c20\u1c1b\3\2\2\2\u1c20\u1c21\3\2\2\2\u1c21\u1c22\3\2\2\2"+
		"\u1c22\u1c55\7\u0355\2\2\u1c23\u1c24\7G\2\2\u1c24\u1c25\7\u0298\2\2\u1c25"+
		"\u1c26\7\u0354\2\2\u1c26\u1c27\7\u0278\2\2\u1c27\u1c38\7\u0342\2\2\u1c28"+
		"\u1c2a\7\u0330\2\2\u1c29\u1c2b\tE\2\2\u1c2a\u1c29\3\2\2\2\u1c2a\u1c2b"+
		"\3\2\2\2\u1c2b\u1c2e\3\2\2\2\u1c2c\u1c2d\7\u0285\2\2\u1c2d\u1c2f\5\u041e"+
		"\u0210\2\u1c2e\u1c2c\3\2\2\2\u1c2e\u1c2f\3\2\2\2\u1c2f\u1c39\3\2\2\2\u1c30"+
		"\u1c31\7\u0285\2\2\u1c31\u1c33\5\u041e\u0210\2\u1c32\u1c34\7\u0330\2\2"+
		"\u1c33\u1c32\3\2\2\2\u1c33\u1c34\3\2\2\2\u1c34\u1c36\3\2\2\2\u1c35\u1c37"+
		"\tE\2\2\u1c36\u1c35\3\2\2\2\u1c36\u1c37\3\2\2\2\u1c37\u1c39\3\2\2\2\u1c38"+
		"\u1c28\3\2\2\2\u1c38\u1c30\3\2\2\2\u1c39\u1c4b\3\2\2\2\u1c3a\u1c3c\7\u0356"+
		"\2\2\u1c3b\u1c3a\3\2\2\2\u1c3b\u1c3c\3\2\2\2\u1c3c\u1c3d\3\2\2\2\u1c3d"+
		"\u1c3e\7\u0135\2\2\u1c3e\u1c3f\7\u0342\2\2\u1c3f\u1c49\tF\2\2\u1c40\u1c47"+
		"\7\u00ce\2\2\u1c41\u1c48\7\u026f\2\2\u1c42\u1c48\7\u01e9\2\2\u1c43\u1c44"+
		"\7\u026f\2\2\u1c44\u1c48\7\u01e9\2\2\u1c45\u1c46\7\u01e9\2\2\u1c46\u1c48"+
		"\7\u026f\2\2\u1c47\u1c41\3\2\2\2\u1c47\u1c42\3\2\2\2\u1c47\u1c43\3\2\2"+
		"\2\u1c47\u1c45\3\2\2\2\u1c48\u1c4a\3\2\2\2\u1c49\u1c40\3\2\2\2\u1c49\u1c4a"+
		"\3\2\2\2\u1c4a\u1c4c\3\2\2\2\u1c4b\u1c3b\3\2\2\2\u1c4b\u1c4c\3\2\2\2\u1c4c"+
		"\u1c4e\3\2\2\2\u1c4d\u1c4f\7\u0356\2\2\u1c4e\u1c4d\3\2\2\2\u1c4e\u1c4f"+
		"\3\2\2\2\u1c4f\u1c50\3\2\2\2\u1c50\u1c51\7\u0300\2\2\u1c51\u1c52\7\u0342"+
		"\2\2\u1c52\u1c53\tH\2\2\u1c53\u1c55\7\u0355\2\2\u1c54\u1be7\3\2\2\2\u1c54"+
		"\u1be8\3\2\2\2\u1c54\u1c23\3\2\2\2\u1c55\u0223\3\2\2\2\u1c56\u1c57\5\u0226"+
		"\u0114\2\u1c57\u0225\3\2\2\2\u1c58\u1c59\5\u0228\u0115\2\u1c59\u1c5a\5"+
		"\u022e\u0118\2\u1c5a\u1c5f\3\2\2\2\u1c5b\u1c5c\5\u022a\u0116\2\u1c5c\u1c5d"+
		"\5\u0230\u0119\2\u1c5d\u1c5f\3\2\2\2\u1c5e\u1c58\3\2\2\2\u1c5e\u1c5b\3"+
		"\2\2\2\u1c5f\u0227\3\2\2\2\u1c60\u1c61\7\u01ce\2\2\u1c61\u0229\3\2\2\2"+
		"\u1c62\u1c63\7\u0332\2\2\u1c63\u022b\3\2\2\2\u1c64\u1c65\7\u0342\2\2\u1c65"+
		"\u022d\3\2\2\2\u1c66\u1c67\5\u022c\u0117\2\u1c67\u1c68\5\u0234\u011b\2"+
		"\u1c68\u1c73\3\2\2\2\u1c69\u1c73\7\u02a8\2\2\u1c6a\u1c73\7\u02ad\2\2\u1c6b"+
		"\u1c73\7n\2\2\u1c6c\u1c73\7\u02fc\2\2\u1c6d\u1c6e\7\u0306\2\2\u1c6e\u1c73"+
		"\tI\2\2\u1c6f\u1c73\7\u023a\2\2\u1c70\u1c71\7\u0246\2\2\u1c71\u1c73\7"+
		"\u033c\2\2\u1c72\u1c66\3\2\2\2\u1c72\u1c69\3\2\2\2\u1c72\u1c6a\3\2\2\2"+
		"\u1c72\u1c6b\3\2\2\2\u1c72\u1c6c\3\2\2\2\u1c72\u1c6d\3\2\2\2\u1c72\u1c6f"+
		"\3\2\2\2\u1c72\u1c70\3\2\2\2\u1c73\u022f\3\2\2\2\u1c74\u1c75\5\u022c\u0117"+
		"\2\u1c75\u1c76\5\u0232\u011a\2\u1c76\u1c79\3\2\2\2\u1c77\u1c79\7n\2\2"+
		"\u1c78\u1c74\3\2\2\2\u1c78\u1c77\3\2\2\2\u1c79\u0231\3\2\2\2\u1c7a\u1c7b"+
		"\5\u0234\u011b\2\u1c7b\u0233\3\2\2\2\u1c7c\u1c7d\5\u0238\u011d\2\u1c7d"+
		"\u1c7e\5\u023c\u011f\2\u1c7e\u1c7f\5\u0236\u011c\2\u1c7f\u1c80\5\u023a"+
		"\u011e\2\u1c80\u0235\3\2\2\2\u1c81\u1c82\7\u0358\2\2\u1c82\u0237\3\2\2"+
		"\2\u1c83\u1c84\7\u0325\2\2\u1c84\u1c85\7\u0358\2\2\u1c85\u1c86\78\2\2"+
		"\u1c86\u0239\3\2\2\2\u1c87\u1c88\7\u033c\2\2\u1c88\u023b\3\2\2\2\u1c89"+
		"\u1c8a\5\u041e\u0210\2\u1c8a\u1c8b\7\u034f\2\2\u1c8b\u1c8c\5\u023c\u011f"+
		"\2\u1c8c\u1c94\3\2\2\2\u1c8d\u1c8e\5\u041e\u0210\2\u1c8e\u1c8f\7\u034f"+
		"\2\2\u1c8f\u1c92\3\2\2\2\u1c90\u1c92\5\u041e\u0210\2\u1c91\u1c8d\3\2\2"+
		"\2\u1c91\u1c90\3\2\2\2\u1c92\u1c94\3\2\2\2\u1c93\u1c89\3\2\2\2\u1c93\u1c91"+
		"\3\2\2\2\u1c94\u023d\3\2\2\2\u1c95\u1c96\7\u0112\2\2\u1c96\u1c97\5\u03f8"+
		"\u01fd\2\u1c97\u023f\3\2\2\2\u1c98\u1c99\7\u0135\2\2\u1c99\u1c9a\5\u03f8"+
		"\u01fd\2\u1c9a\u0241\3\2\2\2\u1c9b\u1c9c\tJ\2\2\u1c9c\u0243\3\2\2\2\u1c9d"+
		"\u1c9e\tK\2\2\u1c9e\u0245\3\2\2\2\u1c9f\u1ca0\tL\2\2\u1ca0\u0247\3\2\2"+
		"\2\u1ca1\u1ca2\7\u011f\2\2\u1ca2\u1ca3\7\u0342\2\2\u1ca3\u1ca4\tM\2\2"+
		"\u1ca4\u0249\3\2\2\2\u1ca5\u1ca6\7\u0118\2\2\u1ca6\u1cbf\5\u03f8\u01fd"+
		"\2\u1ca7\u1ca8\7\u024d\2\2\u1ca8\u1cbf\5\u03f8\u01fd\2\u1ca9\u1caa\7\u011d"+
		"\2\2\u1caa\u1cad\7\u0342\2\2\u1cab\u1cae\5\u041e\u0210\2\u1cac\u1cae\7"+
		"\u033e\2\2\u1cad\u1cab\3\2\2\2\u1cad\u1cac\3\2\2\2\u1cae\u1cbf\3\2\2\2"+
		"\u1caf\u1cb0\7\u011c\2\2\u1cb0\u1cb3\7\u0342\2\2\u1cb1\u1cb4\5\u041e\u0210"+
		"\2\u1cb2\u1cb4\7\u033e\2\2\u1cb3\u1cb1\3\2\2\2\u1cb3\u1cb2\3\2\2\2\u1cb4"+
		"\u1cbf\3\2\2\2\u1cb5\u1cb6\7\u01a9\2\2\u1cb6\u1cb7\7\u0342\2\2\u1cb7\u1cbf"+
		"\t\t\2\2\u1cb8\u1cb9\7\u024a\2\2\u1cb9\u1cba\7\u0342\2\2\u1cba\u1cbf\t"+
		"\t\2\2\u1cbb\u1cbc\7\u0250\2\2\u1cbc\u1cbd\7\u0342\2\2\u1cbd\u1cbf\7\u033c"+
		"\2\2\u1cbe\u1ca5\3\2\2\2\u1cbe\u1ca7\3\2\2\2\u1cbe\u1ca9\3\2\2\2\u1cbe"+
		"\u1caf\3\2\2\2\u1cbe\u1cb5\3\2\2\2\u1cbe\u1cb8\3\2\2\2\u1cbe\u1cbb\3\2"+
		"\2\2\u1cbf\u024b\3\2\2\2\u1cc0\u1cc9\7\u015d\2\2\u1cc1\u1cc2\7\u00e5\2"+
		"\2\u1cc2\u1cc3\7P\2\2\u1cc3\u1cc4\7\u0342\2\2\u1cc4\u1cc7\5\u041e\u0210"+
		"\2\u1cc5\u1cc7\7n\2\2\u1cc6\u1cc1\3\2\2\2\u1cc6\u1cc5\3\2\2\2\u1cc7\u1cca"+
		"\3\2\2\2\u1cc8\u1cca\tN\2\2\u1cc9\u1cc6\3\2\2\2\u1cc9\u1cc8\3\2\2\2\u1cca"+
		"\u024d\3\2\2\2\u1ccb\u1ccc\7\u01a3\2\2\u1ccc\u1ccd\t\t\2\2\u1ccd\u024f"+
		"\3\2\2\2\u1cce\u1ccf\7\u01cb\2\2\u1ccf\u1cd0\tO\2\2\u1cd0\u0251\3\2\2"+
		"\2\u1cd1\u1cd2\7\u01f4\2\2\u1cd2\u1cd8\tP\2\2\u1cd3\u1cd4\7\u0249\2\2"+
		"\u1cd4\u1cd8\5\u03f8\u01fd\2\u1cd5\u1cd6\7\u01ca\2\2\u1cd6\u1cd8\tQ\2"+
		"\2\u1cd7\u1cd1\3\2\2\2\u1cd7\u1cd3\3\2\2\2\u1cd7\u1cd5\3\2\2\2\u1cd8\u0253"+
		"\3\2\2\2\u1cd9\u1ce0\7\u0133\2\2\u1cda\u1ce0\7\u012a\2\2\u1cdb\u1ce0\7"+
		"\u01ab\2\2\u1cdc\u1ce0\7\u0137\2\2\u1cdd\u1cde\7\u0161\2\2\u1cde\u1ce0"+
		"\5\u03f8\u01fd\2\u1cdf\u1cd9\3\2\2\2\u1cdf\u1cda\3\2\2\2\u1cdf\u1cdb\3"+
		"\2\2\2\u1cdf\u1cdc\3\2\2\2\u1cdf\u1cdd\3\2\2\2\u1ce0\u0255\3\2\2\2\u1ce1"+
		"\u1ce2\7\u00d0\2\2\u1ce2\u1ce7\5\u03f8\u01fd\2\u1ce3\u1ce4\7\u01eb\2\2"+
		"\u1ce4\u1ce7\t\t\2\2\u1ce5\u1ce7\t\t\2\2\u1ce6\u1ce1\3\2\2\2\u1ce6\u1ce3"+
		"\3\2\2\2\u1ce6\u1ce5\3\2\2\2\u1ce7\u0257\3\2\2\2\u1ce8\u1ce9\7\u00d2\2"+
		"\2\u1ce9\u1cfe\5\u03f8\u01fd\2\u1cea\u1ceb\7\u00d3\2\2\u1ceb\u1cfe\5\u03f8"+
		"\u01fd\2\u1cec\u1ced\7\u00d4\2\2\u1ced\u1cfe\5\u03f8\u01fd\2\u1cee\u1cef"+
		"\7\u00d5\2\2\u1cef\u1cfe\5\u03f8\u01fd\2\u1cf0\u1cf1\7\u00d8\2\2\u1cf1"+
		"\u1cfe\5\u03f8\u01fd\2\u1cf2\u1cf3\7\u0100\2\2\u1cf3\u1cf4\7\u0342\2\2"+
		"\u1cf4\u1cfe\7\u033c\2\2\u1cf5\u1cf6\7\u0102\2\2\u1cf6\u1cfe\5\u03f8\u01fd"+
		"\2\u1cf7\u1cf8\7\u01bc\2\2\u1cf8\u1cfe\5\u03f8\u01fd\2\u1cf9\u1cfa\7\u01e5"+
		"\2\2\u1cfa\u1cfe\5\u03f8\u01fd\2\u1cfb\u1cfc\7\u01f5\2\2\u1cfc\u1cfe\5"+
		"\u03f8\u01fd\2\u1cfd\u1ce8\3\2\2\2\u1cfd\u1cea\3\2\2\2\u1cfd\u1cec\3\2"+
		"\2\2\u1cfd\u1cee\3\2\2\2\u1cfd\u1cf0\3\2\2\2\u1cfd\u1cf2\3\2\2\2\u1cfd"+
		"\u1cf5\3\2\2\2\u1cfd\u1cf7\3\2\2\2\u1cfd\u1cf9\3\2\2\2\u1cfd\u1cfb\3\2"+
		"\2\2\u1cfe\u0259\3\2\2\2\u1cff\u1d00\7\u0240\2\2\u1d00\u1d01\7\u0342\2"+
		"\2\u1d01\u1d02\7\u033c\2\2\u1d02\u1d03\tR\2\2\u1d03\u025b\3\2\2\2\u1d04"+
		"\u1d05\7\u0092\2\2\u1d05\u1d06\7\u00cc\2\2\u1d06\u1d0b\7\u033c\2\2\u1d07"+
		"\u1d08\7\u0092\2\2\u1d08\u1d0b\7\u0165\2\2\u1d09\u1d0b\7\u01b1\2\2\u1d0a"+
		"\u1d04\3\2\2\2\u1d0a\u1d07\3\2\2\2\u1d0a\u1d09\3\2\2\2\u1d0b\u025d\3\2"+
		"\2\2\u1d0c\u1d0d\79\2\2\u1d0d\u1d10\7X\2\2\u1d0e\u1d0f\7V\2\2\u1d0f\u1d11"+
		"\7A\2\2\u1d10\u1d0e\3\2\2\2\u1d10\u1d11\3\2\2\2\u1d11\u1d22\3\2\2\2\u1d12"+
		"\u1d17\5\u0260\u0131\2\u1d13\u1d14\7\u0356\2\2\u1d14\u1d16\5\u0260\u0131"+
		"\2\u1d15\u1d13\3\2\2\2\u1d16\u1d19\3\2\2\2\u1d17\u1d15\3\2\2\2\u1d17\u1d18"+
		"\3\2\2\2\u1d18\u1d23\3\2\2\2\u1d19\u1d17\3\2\2\2\u1d1a\u1d1f\5\u0262\u0132"+
		"\2\u1d1b\u1d1c\7\u0356\2\2\u1d1c\u1d1e\5\u0262\u0132\2\u1d1d\u1d1b\3\2"+
		"\2\2\u1d1e\u1d21\3\2\2\2\u1d1f\u1d1d\3\2\2\2\u1d1f\u1d20\3\2\2\2\u1d20"+
		"\u1d23\3\2\2\2\u1d21\u1d1f\3\2\2\2\u1d22\u1d12\3\2\2\2\u1d22\u1d1a\3\2"+
		"\2\2\u1d23\u1d25\3\2\2\2\u1d24\u1d26\7\u0357\2\2\u1d25\u1d24\3\2\2\2\u1d25"+
		"\u1d26\3\2\2\2\u1d26\u025f\3\2\2\2\u1d27\u1d28\5\u041e\u0210\2\u1d28\u1d29"+
		"\7p\2\2\u1d29\u1d2a\5\u03de\u01f0\2\u1d2a\u0261\3\2\2\2\u1d2b\u1d2c\5"+
		"\u041e\u0210\2\u1d2c\u1d2d\7\u034f\2\2\u1d2d\u1d2f\3\2\2\2\u1d2e\u1d2b"+
		"\3\2\2\2\u1d2e\u1d2f\3\2\2\2\u1d2f\u1d30\3\2\2\2\u1d30\u1d31\5\u041e\u0210"+
		"\2\u1d31\u1d32\7\u034f\2\2\u1d32\u1d33\5\u041e\u0210\2\u1d33\u0263\3\2"+
		"\2\2\u1d34\u1d35\79\2\2\u1d35\u1d38\t\67\2\2\u1d36\u1d37\7V\2\2\u1d37"+
		"\u1d39\7A\2\2\u1d38\u1d36\3\2\2\2\u1d38\u1d39\3\2\2\2\u1d39\u1d3a\3\2"+
		"\2\2\u1d3a\u1d3f\5\u03e4\u01f3\2\u1d3b\u1d3c\7\u0356\2\2\u1d3c\u1d3e\5"+
		"\u03e4\u01f3\2\u1d3d\u1d3b\3\2\2\2\u1d3e\u1d41\3\2\2\2\u1d3f\u1d3d\3\2"+
		"\2\2\u1d3f\u1d40\3\2\2\2\u1d40\u1d43\3\2\2\2\u1d41\u1d3f\3\2\2\2\u1d42"+
		"\u1d44\7\u0357\2\2\u1d43\u1d42\3\2\2\2\u1d43\u1d44\3\2\2\2\u1d44\u0265"+
		"\3\2\2\2\u1d45\u1d48\5\u0268\u0135\2\u1d46\u1d48\5\u026a\u0136\2\u1d47"+
		"\u1d45\3\2\2\2\u1d47\u1d46\3\2\2\2\u1d48\u0267\3\2\2\2\u1d49\u1d4a\79"+
		"\2\2\u1d4a\u1d4d\7\u00ac\2\2\u1d4b\u1d4c\7V\2\2\u1d4c\u1d4e\7A\2\2\u1d4d"+
		"\u1d4b\3\2\2\2\u1d4d\u1d4e\3\2\2\2\u1d4e\u1d4f\3\2\2\2\u1d4f\u1d54\5\u03e2"+
		"\u01f2\2\u1d50\u1d51\7\u0356\2\2\u1d51\u1d53\5\u03e2\u01f2\2\u1d52\u1d50"+
		"\3\2\2\2\u1d53\u1d56\3\2\2\2\u1d54\u1d52\3\2\2\2\u1d54\u1d55\3\2\2\2\u1d55"+
		"\u1d58\3\2\2\2\u1d56\u1d54\3\2\2\2\u1d57\u1d59\7\u0357\2\2\u1d58\u1d57"+
		"\3\2\2\2\u1d58\u1d59\3\2\2\2\u1d59\u0269\3\2\2\2\u1d5a\u1d5b\79\2\2\u1d5b"+
		"\u1d5e\7\u00ac\2\2\u1d5c\u1d5d\7V\2\2\u1d5d\u1d5f\7A\2\2\u1d5e\u1d5c\3"+
		"\2\2\2\u1d5e\u1d5f\3\2\2\2\u1d5f\u1d60\3\2\2\2\u1d60\u1d65\5\u03e2\u01f2"+
		"\2\u1d61\u1d62\7\u0356\2\2\u1d62\u1d64\5\u03e2\u01f2\2\u1d63\u1d61\3\2"+
		"\2\2\u1d64\u1d67\3\2\2\2\u1d65\u1d63\3\2\2\2\u1d65\u1d66\3\2\2\2\u1d66"+
		"\u1d68\3\2\2\2\u1d67\u1d65\3\2\2\2\u1d68\u1d6c\7p\2\2\u1d69\u1d6d\7+\2"+
		"\2\u1d6a\u1d6b\7\4\2\2\u1d6b\u1d6d\7\u030a\2\2\u1d6c\u1d69\3\2\2\2\u1d6c"+
		"\u1d6a\3\2\2\2\u1d6d\u1d6f\3\2\2\2\u1d6e\u1d70\7\u0357\2\2\u1d6f\u1d6e"+
		"\3\2\2\2\u1d6f\u1d70\3\2\2\2\u1d70\u026b\3\2\2\2\u1d71\u1d72\79\2\2\u1d72"+
		"\u1d75\7M\2\2\u1d73\u1d74\7V\2\2\u1d74\u1d76\7A\2\2\u1d75\u1d73\3\2\2"+
		"\2\u1d75\u1d76\3\2\2\2\u1d76\u1d77\3\2\2\2\u1d77\u1d7c\5\u03e4\u01f3\2"+
		"\u1d78\u1d79\7\u0356\2\2\u1d79\u1d7b\5\u03e4\u01f3\2\u1d7a\u1d78\3\2\2"+
		"\2\u1d7b\u1d7e\3\2\2\2\u1d7c\u1d7a\3\2\2\2\u1d7c\u1d7d\3\2\2\2\u1d7d\u1d80"+
		"\3\2\2\2\u1d7e\u1d7c\3\2\2\2\u1d7f\u1d81\7\u0357\2\2\u1d80\u1d7f\3\2\2"+
		"\2\u1d80\u1d81\3\2\2\2\u1d81\u026d\3\2\2\2\u1d82\u1d83\79\2\2\u1d83\u1d8d"+
		"\7\u00a2\2\2\u1d84\u1d86\7\u0356\2\2\u1d85\u1d84\3\2\2\2\u1d85\u1d86\3"+
		"\2\2\2\u1d86\u1d8a\3\2\2\2\u1d87\u1d88\5\u03e0\u01f1\2\u1d88\u1d89\7\u034f"+
		"\2\2\u1d89\u1d8b\3\2\2\2\u1d8a\u1d87\3\2\2\2\u1d8a\u1d8b\3\2\2\2\u1d8b"+
		"\u1d8c\3\2\2\2\u1d8c\u1d8e\5\u041e\u0210\2\u1d8d\u1d85\3\2\2\2\u1d8e\u1d8f"+
		"\3\2\2\2\u1d8f\u1d8d\3\2\2\2\u1d8f\u1d90\3\2\2\2\u1d90\u1d91\3\2\2\2\u1d91"+
		"\u1d92\7\u0357\2\2\u1d92\u026f\3\2\2\2\u1d93\u1d94\79\2\2\u1d94\u1d97"+
		"\7\u00a4\2\2\u1d95\u1d96\7V\2\2\u1d96\u1d98\7A\2\2\u1d97\u1d95\3\2\2\2"+
		"\u1d97\u1d98\3\2\2\2\u1d98\u1d99\3\2\2\2\u1d99\u1d9b\5\u03e0\u01f1\2\u1d9a"+
		"\u1d9c\7\u0357\2\2\u1d9b\u1d9a\3\2\2\2\u1d9b\u1d9c\3\2\2\2\u1d9c\u0271"+
		"\3\2\2\2\u1d9d\u1d9e\79\2\2\u1d9e\u1da1\7\u00b8\2\2\u1d9f\u1da0\7V\2\2"+
		"\u1da0\u1da2\7A\2\2\u1da1\u1d9f\3\2\2\2\u1da1\u1da2\3\2\2\2\u1da2\u1da3"+
		"\3\2\2\2\u1da3\u1da8\5\u03e2\u01f2\2\u1da4\u1da5\7\u0356\2\2\u1da5\u1da7"+
		"\5\u03e2\u01f2\2\u1da6\u1da4\3\2\2\2\u1da7\u1daa\3\2\2\2\u1da8\u1da6\3"+
		"\2\2\2\u1da8\u1da9\3\2\2\2\u1da9\u1dac\3\2\2\2\u1daa\u1da8\3\2\2\2\u1dab"+
		"\u1dad\7\u0357\2\2\u1dac\u1dab\3\2\2\2\u1dac\u1dad\3\2\2\2\u1dad\u0273"+
		"\3\2\2\2\u1dae\u1daf\7#\2\2\u1daf\u1db0\7\u0251\2\2\u1db0\u1db5\5\u03e2"+
		"\u01f2\2\u1db1\u1db2\7K\2\2\u1db2\u1db3\5\u0414\u020b\2\u1db3\u1db4\5"+
		"\u0416\u020c\2\u1db4\u1db6\3\2\2\2\u1db5\u1db1\3\2\2\2\u1db5\u1db6\3\2"+
		"\2\2\u1db6\u1dbd\3\2\2\2\u1db7\u1db8\7\b\2\2\u1db8\u1db9\7\u00a4\2\2\u1db9"+
		"\u1dba\7\u0354\2\2\u1dba\u1dbb\5\u02e8\u0175\2\u1dbb\u1dbc\7\u0355\2\2"+
		"\u1dbc\u1dbe\3\2\2\2\u1dbd\u1db7\3\2\2\2\u1dbd\u1dbe\3\2\2\2\u1dbe\u0275"+
		"\3\2\2\2\u1dbf\u1dc0\79\2\2\u1dc0\u1dc3\7\u0251\2\2\u1dc1\u1dc2\7V\2\2"+
		"\u1dc2\u1dc4\7A\2\2\u1dc3\u1dc1\3\2\2\2\u1dc3\u1dc4\3\2\2\2\u1dc4\u1dc5"+
		"\3\2\2\2\u1dc5\u1dc6\5\u03e2\u01f2\2\u1dc6\u0277\3\2\2\2\u1dc7\u1dca\5"+
		"\u027a\u013e\2\u1dc8\u1dca\5\u027c\u013f\2\u1dc9\u1dc7\3\2\2\2\u1dc9\u1dc8"+
		"\3\2\2\2\u1dca\u0279\3\2\2\2\u1dcb\u1dcc\7s\2\2\u1dcc\u1dcd\7\u0354\2"+
		"\2\u1dcd\u1dce\5\u041e\u0210\2\u1dce\u1dcf\7\u0356\2\2\u1dcf\u1dd0\7\u033e"+
		"\2\2\u1dd0\u1dd1\7\u0355\2\2\u1dd1\u027b\3\2\2\2\u1dd2\u1dd3\7r\2\2\u1dd3"+
		"\u1dd4\7\u0354\2\2\u1dd4\u1dd5\7\u033e\2\2\u1dd5\u1dd6\7\u0356\2\2\u1dd6"+
		"\u1dd7\7\u033e\2\2\u1dd7\u1dd8\7\u0355\2\2\u1dd8\u1dda\7\u034f\2\2\u1dd9"+
		"\u1ddb\5\u041e\u0210\2\u1dda\u1dd9\3\2\2\2\u1dda\u1ddb\3\2\2\2\u1ddb\u1ddc"+
		"\3\2\2\2\u1ddc\u1dde\7\u034f\2\2\u1ddd\u1ddf\5\u041e\u0210\2\u1dde\u1ddd"+
		"\3\2\2\2\u1dde\u1ddf\3\2\2\2\u1ddf\u1de0\3\2\2\2\u1de0\u1de1\7\u034f\2"+
		"\2\u1de1\u1de2\5\u041e\u0210\2\u1de2\u027d\3\2\2\2\u1de3\u1de4\7.\2\2"+
		"\u1de4\u1de6\7\u033b\2\2\u1de5\u1de7\7\b\2\2\u1de6\u1de5\3\2\2\2\u1de6"+
		"\u1de7\3\2\2\2\u1de7\u1de8\3\2\2\2\u1de8\u1dea\5\u02e0\u0171\2\u1de9\u1deb"+
		"\7\u0357\2\2\u1dea\u1de9\3\2\2\2\u1dea\u1deb\3\2\2\2\u1deb\u1e11\3\2\2"+
		"\2\u1dec\u1ded\7.\2\2\u1ded\u1df2\5\u02de\u0170\2\u1dee\u1def\7\u0356"+
		"\2\2\u1def\u1df1\5\u02de\u0170\2\u1df0\u1dee\3\2\2\2\u1df1\u1df4\3\2\2"+
		"\2\u1df2\u1df0\3\2\2\2\u1df2\u1df3\3\2\2\2\u1df3\u1df6\3\2\2\2\u1df4\u1df2"+
		"\3\2\2\2\u1df5\u1df7\7\u0357\2\2\u1df6\u1df5\3\2\2\2\u1df6\u1df7\3\2\2"+
		"\2\u1df7\u1e11\3\2\2\2\u1df8\u1df9\7.\2\2\u1df9\u1dfb\7\u033b\2\2\u1dfa"+
		"\u1dfc\7\b\2\2\u1dfb\u1dfa\3\2\2\2\u1dfb\u1dfc\3\2\2\2\u1dfc\u1dfd\3\2"+
		"\2\2\u1dfd\u1dff\5\u02e4\u0173\2\u1dfe\u1e00\7\u0357\2\2\u1dff\u1dfe\3"+
		"\2\2\2\u1dff\u1e00\3\2\2\2\u1e00\u1e11\3\2\2\2\u1e01\u1e02\7\u00bd\2\2"+
		"\u1e02\u1e03\7\u0268\2\2\u1e03\u1e04\7\u0354\2\2\u1e04\u1e09\5\u0280\u0141"+
		"\2\u1e05\u1e06\7\u0356\2\2\u1e06\u1e08\5\u0280\u0141\2\u1e07\u1e05\3\2"+
		"\2\2\u1e08\u1e0b\3\2\2\2\u1e09\u1e07\3\2\2\2\u1e09\u1e0a\3\2\2\2\u1e0a"+
		"\u1e0c\3\2\2\2\u1e0b\u1e09\3\2\2\2\u1e0c\u1e0e\7\u0355\2\2\u1e0d\u1e0f"+
		"\7\u0357\2\2\u1e0e\u1e0d\3\2\2\2\u1e0e\u1e0f\3\2\2\2\u1e0f\u1e11\3\2\2"+
		"\2\u1e10\u1de3\3\2\2\2\u1e10\u1dec\3\2\2\2\u1e10\u1df8\3\2\2\2\u1e10\u1e01"+
		"\3\2\2\2\u1e11\u027f\3\2\2\2\u1e12\u1e13\7\u033e\2\2\u1e13\u1e14\7\b\2"+
		"\2\u1e14\u1e18\5\u041e\u0210\2\u1e15\u1e16\7/\2\2\u1e16\u1e18\7\u033e"+
		"\2\2\u1e17\u1e12\3\2\2\2\u1e17\u1e15\3\2\2\2\u1e18\u0281\3\2\2\2\u1e19"+
		"\u1e1b\7\27\2\2\u1e1a\u1e1c\7\u0157\2\2\u1e1b\u1e1a\3\2\2\2\u1e1b\u1e1c"+
		"\3\2\2\2\u1e1c\u1e1d\3\2\2\2\u1e1d\u1e1f\5\u03f6\u01fc\2\u1e1e\u1e20\7"+
		"\u0357\2\2\u1e1f\u1e1e\3\2\2\2\u1e1f\u1e20\3\2\2\2\u1e20\u1e37\3\2\2\2"+
		"\u1e21\u1e23\7-\2\2\u1e22\u1e24\7\u0157\2\2\u1e23\u1e22\3\2\2\2\u1e23"+
		"\u1e24\3\2\2\2\u1e24\u1e26\3\2\2\2\u1e25\u1e27\7*\2\2\u1e26\u1e25\3\2"+
		"\2\2\u1e26\u1e27\3\2\2\2\u1e27\u1e28\3\2\2\2\u1e28\u1e2a\5\u03f6\u01fc"+
		"\2\u1e29\u1e2b\7\u0357\2\2\u1e2a\u1e29\3\2\2\2\u1e2a\u1e2b\3\2\2\2\u1e2b"+
		"\u1e37\3\2\2\2\u1e2c\u1e37\5\u02fc\u017f\2\u1e2d\u1e37\5\u0302\u0182\2"+
		"\u1e2e\u1e30\7q\2\2\u1e2f\u1e31\7\u0157\2\2\u1e30\u1e2f\3\2\2\2\u1e30"+
		"\u1e31\3\2\2\2\u1e31\u1e32\3\2\2\2\u1e32\u1e34\5\u03f6\u01fc\2\u1e33\u1e35"+
		"\7\u0357\2\2\u1e34\u1e33\3\2\2\2\u1e34\u1e35\3\2\2\2\u1e35\u1e37\3\2\2"+
		"\2\u1e36\u1e19\3\2\2\2\u1e36\u1e21\3\2\2\2\u1e36\u1e2c\3\2\2\2\u1e36\u1e2d"+
		"\3\2\2\2\u1e36\u1e2e\3\2\2\2\u1e37\u0283\3\2\2\2\u1e38\u1e39\7\f\2\2\u1e39"+
		"\u1e3a\7+\2\2\u1e3a\u1e47\5\u041e\u0210\2\u1e3b\u1e44\7\u02f5\2\2\u1e3c"+
		"\u1e3e\7\u0356\2\2\u1e3d\u1e3c\3\2\2\2\u1e3d\u1e3e\3\2\2\2\u1e3e\u1e3f"+
		"\3\2\2\2\u1e3f\u1e40\tS\2\2\u1e40\u1e41\7\u0342\2\2\u1e41\u1e43\7\u033e"+
		"\2\2\u1e42\u1e3d\3\2\2\2\u1e43\u1e46\3\2\2\2\u1e44\u1e42\3\2\2\2\u1e44"+
		"\u1e45\3\2\2\2\u1e45\u1e48\3\2\2\2\u1e46\u1e44\3\2\2\2\u1e47\u1e3b\3\2"+
		"\2\2\u1e47\u1e48\3\2\2\2\u1e48\u1e51\3\2\2\2\u1e49\u1e4b\7\u0356\2\2\u1e4a"+
		"\u1e49\3\2\2\2\u1e4a\u1e4b\3\2\2\2\u1e4b\u1e4c\3\2\2\2\u1e4c\u1e4d\tS"+
		"\2\2\u1e4d\u1e4e\7\u0342\2\2\u1e4e\u1e50\7\u033e\2\2\u1e4f\u1e4a\3\2\2"+
		"\2\u1e50\u1e53\3\2\2\2\u1e51\u1e4f\3\2\2\2\u1e51\u1e52\3\2\2\2\u1e52\u1e6b"+
		"\3\2\2\2\u1e53\u1e51\3\2\2\2\u1e54\u1e59\7\u00a8\2\2\u1e55\u1e57\7\u0356"+
		"\2\2\u1e56\u1e55\3\2\2\2\u1e56\u1e57\3\2\2\2\u1e57\u1e58\3\2\2\2\u1e58"+
		"\u1e5a\5\u041e\u0210\2\u1e59\u1e56\3\2\2\2\u1e5a\u1e5b\3\2\2\2\u1e5b\u1e59"+
		"\3\2\2\2\u1e5b\u1e5c\3\2\2\2\u1e5c\u1e6c\3\2\2\2\u1e5d\u1e67\7\u00a8\2"+
		"\2\u1e5e\u1e60\7\u0356\2\2\u1e5f\u1e5e\3\2\2\2\u1e5f\u1e60\3\2\2\2\u1e60"+
		"\u1e61\3\2\2\2\u1e61\u1e62\tT\2\2\u1e62\u1e65\7\u0342\2\2\u1e63\u1e66"+
		"\7\u033e\2\2\u1e64\u1e66\5\u041e\u0210\2\u1e65\u1e63\3\2\2\2\u1e65\u1e64"+
		"\3\2\2\2\u1e66\u1e68\3\2\2\2\u1e67\u1e5f\3\2\2\2\u1e68\u1e69\3\2\2\2\u1e69"+
		"\u1e67\3\2\2\2\u1e69\u1e6a\3\2\2\2\u1e6a\u1e6c\3\2\2\2\u1e6b\u1e54\3\2"+
		"\2\2\u1e6b\u1e5d\3\2\2\2\u1e6c\u1e8e\3\2\2\2\u1e6d\u1e6e\7\u02d6\2\2\u1e6e"+
		"\u1e73\7\u00a8\2\2\u1e6f\u1e71\7\u0356\2\2\u1e70\u1e6f\3\2\2\2\u1e70\u1e71"+
		"\3\2\2\2\u1e71\u1e72\3\2\2\2\u1e72\u1e74\5\u041e\u0210\2\u1e73\u1e70\3"+
		"\2\2\2\u1e74\u1e75\3\2\2\2\u1e75\u1e73\3\2\2\2\u1e75\u1e76\3\2\2\2\u1e76"+
		"\u1e78\3\2\2\2\u1e77\u1e6d\3\2\2\2\u1e78\u1e79\3\2\2\2\u1e79\u1e77\3\2"+
		"\2\2\u1e79\u1e7a\3\2\2\2\u1e7a\u1e8f\3\2\2\2\u1e7b\u1e7c\7\u02d6\2\2\u1e7c"+
		"\u1e86\7\u00a8\2\2\u1e7d\u1e7f\7\u0356\2\2\u1e7e\u1e7d\3\2\2\2\u1e7e\u1e7f"+
		"\3\2\2\2\u1e7f\u1e80\3\2\2\2\u1e80\u1e81\tT\2\2\u1e81\u1e84\7\u0342\2"+
		"\2\u1e82\u1e85\7\u033e\2\2\u1e83\u1e85\5\u041e\u0210\2\u1e84\u1e82\3\2"+
		"\2\2\u1e84\u1e83\3\2\2\2\u1e85\u1e87\3\2\2\2\u1e86\u1e7e\3\2\2\2\u1e87"+
		"\u1e88\3\2\2\2\u1e88\u1e86\3\2\2\2\u1e88\u1e89\3\2\2\2\u1e89\u1e8b\3\2"+
		"\2\2\u1e8a\u1e7b\3\2\2\2\u1e8b\u1e8c\3\2\2\2\u1e8c\u1e8a\3\2\2\2\u1e8c"+
		"\u1e8d\3\2\2\2\u1e8d\u1e8f\3\2\2\2\u1e8e\u1e77\3\2\2\2\u1e8e\u1e8a\3\2"+
		"\2\2\u1e8e\u1e8f\3\2\2\2\u1e8f\u1f30\3\2\2\2\u1e90\u1f2d\7\u00bd\2\2\u1e91"+
		"\u1e93\7\u0356\2\2\u1e92\u1e91\3\2\2\2\u1e92\u1e93\3\2\2\2\u1e93\u1e94"+
		"\3\2\2\2\u1e94\u1f2c\7\u029c\2\2\u1e95\u1e97\7\u0356\2\2\u1e96\u1e95\3"+
		"\2\2\2\u1e96\u1e97\3\2\2\2\u1e97\u1e98\3\2\2\2\u1e98\u1f2c\7\u0294\2\2"+
		"\u1e99\u1e9b\7\u0356\2\2\u1e9a\u1e99\3\2\2\2\u1e9a\u1e9b\3\2\2\2\u1e9b"+
		"\u1e9c\3\2\2\2\u1e9c\u1f2c\tU\2\2\u1e9d\u1e9f\7\u0356\2\2\u1e9e\u1e9d"+
		"\3\2\2\2\u1e9e\u1e9f\3\2\2\2\u1e9f\u1ea0\3\2\2\2\u1ea0\u1ea1\7\u0124\2"+
		"\2\u1ea1\u1ea4\7\u0342\2\2\u1ea2\u1ea5\7\u033e\2\2\u1ea3\u1ea5\5\u041e"+
		"\u0210\2\u1ea4\u1ea2\3\2\2\2\u1ea4\u1ea3\3\2\2\2\u1ea5\u1f2c\3\2\2\2\u1ea6"+
		"\u1ea8\7\u0356\2\2\u1ea7\u1ea6\3\2\2\2\u1ea7\u1ea8\3\2\2\2\u1ea8\u1ea9"+
		"\3\2\2\2\u1ea9\u1eaa\7\u01a8\2\2\u1eaa\u1eab\7\u0342\2\2\u1eab\u1f2c\5"+
		"\u041e\u0210\2\u1eac\u1eae\7\u0356\2\2\u1ead\u1eac\3\2\2\2\u1ead\u1eae"+
		"\3\2\2\2\u1eae\u1eaf\3\2\2\2\u1eaf\u1f2c\7\u010c\2\2\u1eb0\u1eb2\7\u0356"+
		"\2\2\u1eb1\u1eb0\3\2\2\2\u1eb1\u1eb2\3\2\2\2\u1eb2\u1eb3\3\2\2\2\u1eb3"+
		"\u1f2c\7\u02ab\2\2\u1eb4\u1eb6\7\u0356\2\2\u1eb5\u1eb4\3\2\2\2\u1eb5\u1eb6"+
		"\3\2\2\2\u1eb6\u1ec3\3\2\2\2\u1eb7\u1eb8\7\u02a5\2\2\u1eb8\u1ebb\7\u0342"+
		"\2\2\u1eb9\u1ebc\7\u033e\2\2\u1eba\u1ebc\5\u041e\u0210\2\u1ebb\u1eb9\3"+
		"\2\2\2\u1ebb\u1eba\3\2\2\2\u1ebc\u1ec4\3\2\2\2\u1ebd\u1ebe\7\u02fd\2\2"+
		"\u1ebe\u1ec1\7\u0342\2\2\u1ebf\u1ec2\7\u033c\2\2\u1ec0\u1ec2\5\u041e\u0210"+
		"\2\u1ec1\u1ebf\3\2\2\2\u1ec1\u1ec0\3\2\2\2\u1ec2\u1ec4\3\2\2\2\u1ec3\u1eb7"+
		"\3\2\2\2\u1ec3\u1ebd\3\2\2\2\u1ec4\u1f2c\3\2\2\2\u1ec5\u1ec7\7\u0356\2"+
		"\2\u1ec6\u1ec5\3\2\2\2\u1ec6\u1ec7\3\2\2\2\u1ec7\u1ec8\3\2\2\2\u1ec8\u1f2c"+
		"\tV\2\2\u1ec9\u1ecb\7\u0356\2\2\u1eca\u1ec9\3\2\2\2\u1eca\u1ecb\3\2\2"+
		"\2\u1ecb\u1ecc\3\2\2\2\u1ecc\u1f2c\tW\2\2\u1ecd\u1ecf\7\u0356\2\2\u1ece"+
		"\u1ecd\3\2\2\2\u1ece\u1ecf\3\2\2\2\u1ecf\u1ed0\3\2\2\2\u1ed0\u1f2c\tX"+
		"\2\2\u1ed1\u1ed3\7\u0356\2\2\u1ed2\u1ed1\3\2\2\2\u1ed2\u1ed3\3\2\2\2\u1ed3"+
		"\u1ed4\3\2\2\2\u1ed4\u1ed5\7\u02cf\2\2\u1ed5\u1ed8\7\u0342\2\2\u1ed6\u1ed9"+
		"\7\u033e\2\2\u1ed7\u1ed9\5\u041e\u0210\2\u1ed8\u1ed6\3\2\2\2\u1ed8\u1ed7"+
		"\3\2\2\2\u1ed9\u1f2c\3\2\2\2\u1eda\u1edc\7\u0356\2\2\u1edb\u1eda\3\2\2"+
		"\2\u1edb\u1edc\3\2\2\2\u1edc\u1edd\3\2\2\2\u1edd\u1ede\7\u02d0\2\2\u1ede"+
		"\u1edf\7\u0342\2\2\u1edf\u1f2c\7\u033e\2\2\u1ee0\u1ee2\7\u0356\2\2\u1ee1"+
		"\u1ee0\3\2\2\2\u1ee1\u1ee2\3\2\2\2\u1ee2\u1ee3\3\2\2\2\u1ee3\u1ee4\7\u027f"+
		"\2\2\u1ee4\u1ee7\7\u0342\2\2\u1ee5\u1ee8\7\u033c\2\2\u1ee6\u1ee8\5\u041e"+
		"\u0210\2\u1ee7\u1ee5\3\2\2\2\u1ee7\u1ee6\3\2\2\2\u1ee8\u1f2c\3\2\2\2\u1ee9"+
		"\u1eeb\7\u0356\2\2\u1eea\u1ee9\3\2\2\2\u1eea\u1eeb\3\2\2\2\u1eeb\u1eec"+
		"\3\2\2\2\u1eec\u1eed\7\u0282\2\2\u1eed\u1ef0\7\u0342\2\2\u1eee\u1ef1\7"+
		"\u033c\2\2\u1eef\u1ef1\5\u041e\u0210\2\u1ef0\u1eee\3\2\2\2\u1ef0\u1eef"+
		"\3\2\2\2\u1ef1\u1f2c\3\2\2\2\u1ef2\u1ef4\7\u0356\2\2\u1ef3\u1ef2\3\2\2"+
		"\2\u1ef3\u1ef4\3\2\2\2\u1ef4\u1ef5\3\2\2\2\u1ef5\u1ef6\7\u02c8\2\2\u1ef6"+
		"\u1ef9\7\u0342\2\2\u1ef7\u1efa\7\u033c\2\2\u1ef8\u1efa\5\u041e\u0210\2"+
		"\u1ef9\u1ef7\3\2\2\2\u1ef9\u1ef8\3\2\2\2\u1efa\u1f2c\3\2\2\2\u1efb\u1efd"+
		"\7\u0356\2\2\u1efc\u1efb\3\2\2\2\u1efc\u1efd\3\2\2\2\u1efd\u1efe\3\2\2"+
		"\2\u1efe\u1f2c\tY\2\2\u1eff\u1f01\7\u0356\2\2\u1f00\u1eff\3\2\2\2\u1f00"+
		"\u1f01\3\2\2\2\u1f01\u1f02\3\2\2\2\u1f02\u1f2c\tZ\2\2\u1f03\u1f05\7\u0356"+
		"\2\2\u1f04\u1f03\3\2\2\2\u1f04\u1f05\3\2\2\2\u1f05\u1f06\3\2\2\2\u1f06"+
		"\u1f2c\7\u02fb\2\2\u1f07\u1f09\7\u0356\2\2\u1f08\u1f07\3\2\2\2\u1f08\u1f09"+
		"\3\2\2\2\u1f09\u1f0a\3\2\2\2\u1f0a\u1f0d\7\u031a\2\2\u1f0b\u1f0c\7\u0342"+
		"\2\2\u1f0c\u1f0e\7\u033c\2\2\u1f0d\u1f0b\3\2\2\2\u1f0d\u1f0e\3\2\2\2\u1f0e"+
		"\u1f2c\3\2\2\2\u1f0f\u1f11\7\u0356\2\2\u1f10\u1f0f\3\2\2\2\u1f10\u1f11"+
		"\3\2\2\2\u1f11\u1f12\3\2\2\2\u1f12\u1f2c\t[\2\2\u1f13\u1f15\7\u0356\2"+
		"\2\u1f14\u1f13\3\2\2\2\u1f14\u1f15\3\2\2\2\u1f15\u1f16\3\2\2\2\u1f16\u1f2c"+
		"\t\\\2\2\u1f17\u1f19\7\u0356\2\2\u1f18\u1f17\3\2\2\2\u1f18\u1f19\3\2\2"+
		"\2\u1f19\u1f1a\3\2\2\2\u1f1a\u1f1b\7\u0135\2\2\u1f1b\u1f1c\7\u0354\2\2"+
		"\u1f1c\u1f1d\7\u00ce\2\2\u1f1d\u1f1e\7\u0342\2\2\u1f1e\u1f1f\t]\2\2\u1f1f"+
		"\u1f20\7\u0356\2\2\u1f20\u1f21\7\u030a\2\2\u1f21\u1f22\7\u0285\2\2\u1f22"+
		"\u1f29\7\u0342\2\2\u1f23\u1f2a\5\u041e\u0210\2\u1f24\u1f25\7\u030a\2\2"+
		"\u1f25\u1f26\7\u0276\2\2\u1f26\u1f27\7_\2\2\u1f27\u1f28\7\u0342\2\2\u1f28"+
		"\u1f2a\5\u041e\u0210\2\u1f29\u1f23\3\2\2\2\u1f29\u1f24\3\2\2\2\u1f2a\u1f2c"+
		"\3\2\2\2\u1f2b\u1e92\3\2\2\2\u1f2b\u1e96\3\2\2\2\u1f2b\u1e9a\3\2\2\2\u1f2b"+
		"\u1e9e\3\2\2\2\u1f2b\u1ea7\3\2\2\2\u1f2b\u1ead\3\2\2\2\u1f2b\u1eb1\3\2"+
		"\2\2\u1f2b\u1eb5\3\2\2\2\u1f2b\u1ec6\3\2\2\2\u1f2b\u1eca\3\2\2\2\u1f2b"+
		"\u1ece\3\2\2\2\u1f2b\u1ed2\3\2\2\2\u1f2b\u1edb\3\2\2\2\u1f2b\u1ee1\3\2"+
		"\2\2\u1f2b\u1eea\3\2\2\2\u1f2b\u1ef3\3\2\2\2\u1f2b\u1efc\3\2\2\2\u1f2b"+
		"\u1f00\3\2\2\2\u1f2b\u1f04\3\2\2\2\u1f2b\u1f08\3\2\2\2\u1f2b\u1f10\3\2"+
		"\2\2\u1f2b\u1f14\3\2\2\2\u1f2b\u1f18\3\2\2\2\u1f2c\u1f2f\3\2\2\2\u1f2d"+
		"\u1f2b\3\2\2\2\u1f2d\u1f2e\3\2\2\2\u1f2e\u1f31\3\2\2\2\u1f2f\u1f2d\3\2"+
		"\2\2\u1f30\u1e90\3\2\2\2\u1f30\u1f31\3\2\2\2\u1f31\u0285\3\2\2\2\u1f32"+
		"\u1f33\7\f\2\2\u1f33\u1f34\7\u02c4\2\2\u1f34\u1f4c\5\u041e\u0210\2\u1f35"+
		"\u1f3a\7\u00a8\2\2\u1f36\u1f38\7\u0356\2\2\u1f37\u1f36\3\2\2\2\u1f37\u1f38"+
		"\3\2\2\2\u1f38\u1f39\3\2\2\2\u1f39\u1f3b\5\u041e\u0210\2\u1f3a\u1f37\3"+
		"\2\2\2\u1f3b\u1f3c\3\2\2\2\u1f3c\u1f3a\3\2\2\2\u1f3c\u1f3d\3\2\2\2\u1f3d"+
		"\u1f4d\3\2\2\2\u1f3e\u1f48\7\u00a8\2\2\u1f3f\u1f41\7\u0356\2\2\u1f40\u1f3f"+
		"\3\2\2\2\u1f40\u1f41\3\2\2\2\u1f41\u1f42\3\2\2\2\u1f42\u1f43\tT\2\2\u1f43"+
		"\u1f46\7\u0342\2\2\u1f44\u1f47\7\u033e\2\2\u1f45\u1f47\5\u041e\u0210\2"+
		"\u1f46\u1f44\3\2\2\2\u1f46\u1f45\3\2\2\2\u1f47\u1f49\3\2\2\2\u1f48\u1f40"+
		"\3\2\2\2\u1f49\u1f4a\3\2\2\2\u1f4a\u1f48\3\2\2\2\u1f4a\u1f4b\3\2\2\2\u1f4b"+
		"\u1f4d\3\2\2\2\u1f4c\u1f35\3\2\2\2\u1f4c\u1f3e\3\2\2\2\u1f4d\u1f6f\3\2"+
		"\2\2\u1f4e\u1f4f\7\u02d6\2\2\u1f4f\u1f54\7\u00a8\2\2\u1f50\u1f52\7\u0356"+
		"\2\2\u1f51\u1f50\3\2\2\2\u1f51\u1f52\3\2\2\2\u1f52\u1f53\3\2\2\2\u1f53"+
		"\u1f55\5\u041e\u0210\2\u1f54\u1f51\3\2\2\2\u1f55\u1f56\3\2\2\2\u1f56\u1f54"+
		"\3\2\2\2\u1f56\u1f57\3\2\2\2\u1f57\u1f59\3\2\2\2\u1f58\u1f4e\3\2\2\2\u1f59"+
		"\u1f5a\3\2\2\2\u1f5a\u1f58\3\2\2\2\u1f5a\u1f5b\3\2\2\2\u1f5b\u1f70\3\2"+
		"\2\2\u1f5c\u1f5d\7\u02d6\2\2\u1f5d\u1f67\7\u00a8\2\2\u1f5e\u1f60\7\u0356"+
		"\2\2\u1f5f\u1f5e\3\2\2\2\u1f5f\u1f60\3\2\2\2\u1f60\u1f61\3\2\2\2\u1f61"+
		"\u1f62\tT\2\2\u1f62\u1f65\7\u0342\2\2\u1f63\u1f66\7\u033e\2\2\u1f64\u1f66"+
		"\5\u041e\u0210\2\u1f65\u1f63\3\2\2\2\u1f65\u1f64\3\2\2\2\u1f66\u1f68\3"+
		"\2\2\2\u1f67\u1f5f\3\2\2\2\u1f68\u1f69\3\2\2\2\u1f69\u1f67\3\2\2\2\u1f69"+
		"\u1f6a\3\2\2\2\u1f6a\u1f6c\3\2\2\2\u1f6b\u1f5c\3\2\2\2\u1f6c\u1f6d\3\2"+
		"\2\2\u1f6d\u1f6b\3\2\2\2\u1f6d\u1f6e\3\2\2\2\u1f6e\u1f70\3\2\2\2\u1f6f"+
		"\u1f58\3\2\2\2\u1f6f\u1f6b\3\2\2\2\u1f6f\u1f70\3\2\2\2\u1f70\u201e\3\2"+
		"\2\2\u1f71\u201b\7\u00bd\2\2\u1f72\u1f74\7\u0356\2\2\u1f73\u1f72\3\2\2"+
		"\2\u1f73\u1f74\3\2\2\2\u1f74\u1f75\3\2\2\2\u1f75\u201a\7\u029c\2\2\u1f76"+
		"\u1f78\7\u0356\2\2\u1f77\u1f76\3\2\2\2\u1f77\u1f78\3\2\2\2\u1f78\u1f79"+
		"\3\2\2\2\u1f79\u201a\7\u0294\2\2\u1f7a\u1f7c\7\u0356\2\2\u1f7b\u1f7a\3"+
		"\2\2\2\u1f7b\u1f7c\3\2\2\2\u1f7c\u1f7d\3\2\2\2\u1f7d\u201a\tU\2\2\u1f7e"+
		"\u1f80\7\u0356\2\2\u1f7f\u1f7e\3\2\2\2\u1f7f\u1f80\3\2\2\2\u1f80\u1f81"+
		"\3\2\2\2\u1f81\u1f82\7\u0124\2\2\u1f82\u1f85\7\u0342\2\2\u1f83\u1f86\7"+
		"\u033e\2\2\u1f84\u1f86\5\u041e\u0210\2\u1f85\u1f83\3\2\2\2\u1f85\u1f84"+
		"\3\2\2\2\u1f86\u201a\3\2\2\2\u1f87\u1f89\7\u0356\2\2\u1f88\u1f87\3\2\2"+
		"\2\u1f88\u1f89\3\2\2\2\u1f89\u1f8a\3\2\2\2\u1f8a\u1f8b\7\u01a8\2\2\u1f8b"+
		"\u1f8c\7\u0342\2\2\u1f8c\u201a\5\u041e\u0210\2\u1f8d\u1f8f\7\u0356\2\2"+
		"\u1f8e\u1f8d\3\2\2\2\u1f8e\u1f8f\3\2\2\2\u1f8f\u1f90\3\2\2\2\u1f90\u201a"+
		"\7\u010c\2\2\u1f91\u1f93\7\u0356\2\2\u1f92\u1f91\3\2\2\2\u1f92\u1f93\3"+
		"\2\2\2\u1f93\u1f94\3\2\2\2\u1f94\u201a\7\u02ab\2\2\u1f95\u1f97\7\u0356"+
		"\2\2\u1f96\u1f95\3\2\2\2\u1f96\u1f97\3\2\2\2\u1f97\u1fa4\3\2\2\2\u1f98"+
		"\u1f99\7\u02a5\2\2\u1f99\u1f9c\7\u0342\2\2\u1f9a\u1f9d\7\u033e\2\2\u1f9b"+
		"\u1f9d\5\u041e\u0210\2\u1f9c\u1f9a\3\2\2\2\u1f9c\u1f9b\3\2\2\2\u1f9d\u1fa5"+
		"\3\2\2\2\u1f9e\u1f9f\7\u02fd\2\2\u1f9f\u1fa2\7\u0342\2\2\u1fa0\u1fa3\7"+
		"\u033c\2\2\u1fa1\u1fa3\5\u041e\u0210\2\u1fa2\u1fa0\3\2\2\2\u1fa2\u1fa1"+
		"\3\2\2\2\u1fa3\u1fa5\3\2\2\2\u1fa4\u1f98\3\2\2\2\u1fa4\u1f9e\3\2\2\2\u1fa5"+
		"\u201a\3\2\2\2\u1fa6\u1fa8\7\u0356\2\2\u1fa7\u1fa6\3\2\2\2\u1fa7\u1fa8"+
		"\3\2\2\2\u1fa8\u1fa9\3\2\2\2\u1fa9\u201a\tV\2\2\u1faa\u1fac\7\u0356\2"+
		"\2\u1fab\u1faa\3\2\2\2\u1fab\u1fac\3\2\2\2\u1fac\u1fad\3\2\2\2\u1fad\u201a"+
		"\tW\2\2\u1fae\u1fb0\7\u0356\2\2\u1faf\u1fae\3\2\2\2\u1faf\u1fb0\3\2\2"+
		"\2\u1fb0\u1fb1\3\2\2\2\u1fb1\u201a\tX\2\2\u1fb2\u1fb4\7\u0356\2\2\u1fb3"+
		"\u1fb2\3\2\2\2\u1fb3\u1fb4\3\2\2\2\u1fb4\u1fb5\3\2\2\2\u1fb5\u1fb6\7\u02cf"+
		"\2\2\u1fb6\u1fb9\7\u0342\2\2\u1fb7\u1fba\7\u033e\2\2\u1fb8\u1fba\5\u041e"+
		"\u0210\2\u1fb9\u1fb7\3\2\2\2\u1fb9\u1fb8\3\2\2\2\u1fba\u201a\3\2\2\2\u1fbb"+
		"\u1fbd\7\u0356\2\2\u1fbc\u1fbb\3\2\2\2\u1fbc\u1fbd\3\2\2\2\u1fbd\u1fbe"+
		"\3\2\2\2\u1fbe\u1fbf\7\u02d0\2\2\u1fbf\u1fc0\7\u0342\2\2\u1fc0\u201a\7"+
		"\u033e\2\2\u1fc1\u1fc3\7\u0356\2\2\u1fc2\u1fc1\3\2\2\2\u1fc2\u1fc3\3\2"+
		"\2\2\u1fc3\u1fc4\3\2\2\2\u1fc4\u1fc5\7\u027f\2\2\u1fc5\u1fc8\7\u0342\2"+
		"\2\u1fc6\u1fc9\7\u033c\2\2\u1fc7\u1fc9\5\u041e\u0210\2\u1fc8\u1fc6\3\2"+
		"\2\2\u1fc8\u1fc7\3\2\2\2\u1fc9\u201a\3\2\2\2\u1fca\u1fcc\7\u0356\2\2\u1fcb"+
		"\u1fca\3\2\2\2\u1fcb\u1fcc\3\2\2\2\u1fcc\u1fcd\3\2\2\2\u1fcd\u1fce\7\u0282"+
		"\2\2\u1fce\u1fd1\7\u0342\2\2\u1fcf\u1fd2\7\u033c\2\2\u1fd0\u1fd2\5\u041e"+
		"\u0210\2\u1fd1\u1fcf\3\2\2\2\u1fd1\u1fd0\3\2\2\2\u1fd2\u201a\3\2\2\2\u1fd3"+
		"\u1fd5\7\u0356\2\2\u1fd4\u1fd3\3\2\2\2\u1fd4\u1fd5\3\2\2\2\u1fd5\u1fd6"+
		"\3\2\2\2\u1fd6\u1fd7\7\u02c8\2\2\u1fd7\u1fda\7\u0342\2\2\u1fd8\u1fdb\7"+
		"\u033c\2\2\u1fd9\u1fdb\5\u041e\u0210\2\u1fda\u1fd8\3\2\2\2\u1fda\u1fd9"+
		"\3\2\2\2\u1fdb\u201a\3\2\2\2\u1fdc\u1fde\7\u0356\2\2\u1fdd\u1fdc\3\2\2"+
		"\2\u1fdd\u1fde\3\2\2\2\u1fde\u1fdf\3\2\2\2\u1fdf\u201a\tY\2\2\u1fe0\u1fe2"+
		"\7\u0356\2\2\u1fe1\u1fe0\3\2\2\2\u1fe1\u1fe2\3\2\2\2\u1fe2\u1fe3\3\2\2"+
		"\2\u1fe3\u201a\tZ\2\2\u1fe4\u1fe6\7\u0356\2\2\u1fe5\u1fe4\3\2\2\2\u1fe5"+
		"\u1fe6\3\2\2\2\u1fe6\u1fe7\3\2\2\2\u1fe7\u201a\7\u02fb\2\2\u1fe8\u1fea"+
		"\7\u0356\2\2\u1fe9\u1fe8\3\2\2\2\u1fe9\u1fea\3\2\2\2\u1fea\u1feb\3\2\2"+
		"\2\u1feb\u1fee\7\u031a\2\2\u1fec\u1fed\7\u0342\2\2\u1fed\u1fef\7\u033c"+
		"\2\2\u1fee\u1fec\3\2\2\2\u1fee\u1fef\3\2\2\2\u1fef\u201a\3\2\2\2\u1ff0"+
		"\u1ff2\7\u0356\2\2\u1ff1\u1ff0\3\2\2\2\u1ff1\u1ff2\3\2\2\2\u1ff2\u1ff3"+
		"\3\2\2\2\u1ff3\u201a\t[\2\2\u1ff4\u1ff6\7\u0356\2\2\u1ff5\u1ff4\3\2\2"+
		"\2\u1ff5\u1ff6\3\2\2\2\u1ff6\u1ff7\3\2\2\2\u1ff7\u201a\t\\\2\2\u1ff8\u1ffa"+
		"\7\u0356\2\2\u1ff9\u1ff8\3\2\2\2\u1ff9\u1ffa\3\2\2\2\u1ffa\u1fff\3\2\2"+
		"\2\u1ffb\u2000\7\u01b7\2\2\u1ffc\u1ffd\7\u022c\2\2\u1ffd\u1ffe\7\u0342"+
		"\2\2\u1ffe\u2000\7\u033e\2\2\u1fff\u1ffb\3\2\2\2\u1fff\u1ffc\3\2\2\2\u2000"+
		"\u201a\3\2\2\2\u2001\u2003\7\u0356\2\2\u2002\u2001\3\2\2\2\u2002\u2003"+
		"\3\2\2\2\u2003\u2004\3\2\2\2\u2004\u201a\7\u01b0\2\2\u2005\u2007\7\u0356"+
		"\2\2\u2006\u2005\3\2\2\2\u2006\u2007\3\2\2\2\u2007\u2008\3\2\2\2\u2008"+
		"\u2009\7\u0135\2\2\u2009\u200a\7\u0354\2\2\u200a\u200b\7\u00ce\2\2\u200b"+
		"\u200c\7\u0342\2\2\u200c\u200d\t]\2\2\u200d\u200e\7\u0356\2\2\u200e\u200f"+
		"\7\u030a\2\2\u200f\u2010\7\u0285\2\2\u2010\u2017\7\u0342\2\2\u2011\u2018"+
		"\5\u041e\u0210\2\u2012\u2013\7\u030a\2\2\u2013\u2014\7\u0276\2\2\u2014"+
		"\u2015\7_\2\2\u2015\u2016\7\u0342\2\2\u2016\u2018\5\u041e\u0210\2\u2017"+
		"\u2011\3\2\2\2\u2017\u2012\3\2\2\2\u2018\u201a\3\2\2\2\u2019\u1f73\3\2"+
		"\2\2\u2019\u1f77\3\2\2\2\u2019\u1f7b\3\2\2\2\u2019\u1f7f\3\2\2\2\u2019"+
		"\u1f88\3\2\2\2\u2019\u1f8e\3\2\2\2\u2019\u1f92\3\2\2\2\u2019\u1f96\3\2"+
		"\2\2\u2019\u1fa7\3\2\2\2\u2019\u1fab\3\2\2\2\u2019\u1faf\3\2\2\2\u2019"+
		"\u1fb3\3\2\2\2\u2019\u1fbc\3\2\2\2\u2019\u1fc2\3\2\2\2\u2019\u1fcb\3\2"+
		"\2\2\u2019\u1fd4\3\2\2\2\u2019\u1fdd\3\2\2\2\u2019\u1fe1\3\2\2\2\u2019"+
		"\u1fe5\3\2\2\2\u2019\u1fe9\3\2\2\2\u2019\u1ff1\3\2\2\2\u2019\u1ff5\3\2"+
		"\2\2\u2019\u1ff9\3\2\2\2\u2019\u2002\3\2\2\2\u2019\u2006\3\2\2\2\u201a"+
		"\u201d\3\2\2\2\u201b\u2019\3\2\2\2\u201b\u201c\3\2\2\2\u201c\u201f\3\2"+
		"\2\2\u201d\u201b\3\2\2\2\u201e\u1f71\3\2\2\2\u201e\u201f\3\2\2\2\u201f"+
		"\u0287\3\2\2\2\u2020\u2021\7\f\2\2\u2021\u2022\7\u0285\2\2\u2022\u2023"+
		"\5\u041e\u0210\2\u2023\u2024\7\u00a8\2\2\u2024\u2025\7E\2\2\u2025\u2026"+
		"\7\u0342\2\2\u2026\u2046\7\u033e\2\2\u2027\u2028\7\u00bd\2\2\u2028\u2029"+
		"\7\u01db\2\2\u2029\u202a\7_\2\2\u202a\u2041\7\u0354\2\2\u202b\u202d\7"+
		"\u0356\2\2\u202c\u202b\3\2\2\2\u202c\u202d\3\2\2\2\u202d\u202e\3\2\2\2"+
		"\u202e\u202f\7E\2\2\u202f\u2030\7\u0342\2\2\u2030\u2042\7\u033e\2\2\u2031"+
		"\u2033\7\u0356\2\2\u2032\u2031\3\2\2\2\u2032\u2033\3\2\2\2\u2033\u2034"+
		"\3\2\2\2\u2034\u2035\7\u0135\2\2\u2035\u2036\7\22\2\2\u2036\u2037\7\u02e8"+
		"\2\2\u2037\u2038\7\u0342\2\2\u2038\u2042\7\u033e\2\2\u2039\u203b\7\u0356"+
		"\2\2\u203a\u2039\3\2\2\2\u203a\u203b\3\2\2\2\u203b\u203c\3\2\2\2\u203c"+
		"\u203d\7\u011a\2\2\u203d\u203e\7\22\2\2\u203e\u203f\7\u02e8\2\2\u203f"+
		"\u2040\7\u0342\2\2\u2040\u2042\7\u033e\2\2\u2041\u202c\3\2\2\2\u2041\u2032"+
		"\3\2\2\2\u2041\u203a\3\2\2\2\u2042\u2043\3\2\2\2\u2043\u2041\3\2\2\2\u2043"+
		"\u2044\3\2\2\2\u2044\u2045\3\2\2\2\u2045\u2047\7\u0355\2\2\u2046\u2027"+
		"\3\2\2\2\u2046\u2047\3\2\2\2\u2047\u0289\3\2\2\2\u2048\u2049\7\f\2\2\u2049"+
		"\u204a\7\u02c6\2\2\u204a\u204b\7_\2\2\u204b\u204c\7\u00a8\2\2\u204c\u204d"+
		"\7E\2\2\u204d\u204e\7\u0342\2\2\u204e\u204f\7\u033e\2\2\u204f\u2050\7"+
		"\u0135\2\2\u2050\u2051\7\22\2\2\u2051\u2052\7\u02e8\2\2\u2052\u2053\7"+
		"\u0342\2\2\u2053\u2054\7\u033e\2\2\u2054\u028b\3\2\2\2\u2055\u2056\7\f"+
		"\2\2\u2056\u2057\7\u030b\2\2\u2057\u2058\7\u02c6\2\2\u2058\u2059\7_\2"+
		"\2\u2059\u205a\7\u00a8\2\2\u205a\u205b\7E\2\2\u205b\u205c\7\u0342\2\2"+
		"\u205c\u205d\7\u033e\2\2\u205d\u205e\7\u0135\2\2\u205e\u205f\7\22\2\2"+
		"\u205f\u2060\7\u02e8\2\2\u2060\u2061\7\u0342\2\2\u2061\u2062\7\u033e\2"+
		"\2\u2062\u028d\3\2\2\2\u2063\u2067\7`\2\2\u2064\u2068\5\u0290\u0149\2"+
		"\u2065\u2068\5\u0292\u014a\2\u2066\u2068\5\u0294\u014b\2\u2067\u2064\3"+
		"\2\2\2\u2067\u2065\3\2\2\2\u2067\u2066\3\2\2\2\u2068\u028f\3\2\2\2\u2069"+
		"\u206c\t\30\2\2\u206a\u206c\7\u0257\2\2\u206b\u2069\3\2\2\2\u206b\u206a"+
		"\3\2\2\2\u206c\u206f\3\2\2\2\u206d\u206e\7\u00bd\2\2\u206e\u2070\7\u0231"+
		"\2\2\u206f\u206d\3\2\2\2\u206f\u2070\3\2\2\2\u2070\u0291\3\2\2\2\u2071"+
		"\u2072\7\u01e2\2\2\u2072\u2073\7\u02e1\2\2\u2073\u2076\7\u0238\2\2\u2074"+
		"\u2077\7\4\2\2\u2075\u2077\7\u033c\2\2\u2076\u2074\3\2\2\2\u2076\u2075"+
		"\3\2\2\2\u2077\u0293\3\2\2\2\u2078\u2079\7\u031a\2\2\u2079\u207a\7\u0171"+
		"\2\2\u207a\u207b\7\u033c\2\2\u207b\u0295\3\2\2\2\u207c\u207d\7@\2\2\u207d"+
		"\u207f\5\u029a\u014e\2\u207e\u2080\7\u0357\2\2\u207f\u207e\3\2\2\2\u207f"+
		"\u2080\3\2\2\2\u2080\u0297\3\2\2\2\u2081\u208a\5\u03e8\u01f5\2\u2082\u2087"+
		"\5\u029c\u014f\2\u2083\u2084\7\u0356\2\2\u2084\u2086\5\u029c\u014f\2\u2085"+
		"\u2083\3\2\2\2\u2086\u2089\3\2\2\2\u2087\u2085\3\2\2\2\u2087\u2088\3\2"+
		"\2\2\u2088\u208b\3\2\2\2\u2089\u2087\3\2\2\2\u208a\u2082\3\2\2\2\u208a"+
		"\u208b\3\2\2\2\u208b\u208d\3\2\2\2\u208c\u208e\7\u0357\2\2\u208d\u208c"+
		"\3\2\2\2\u208d\u208e\3\2\2\2\u208e\u0299\3\2\2\2\u208f\u2090\7\u033b\2"+
		"\2\u2090\u2092\7\u0342\2\2\u2091\u208f\3\2\2\2\u2091\u2092\3\2\2\2\u2092"+
		"\u2095\3\2\2\2\u2093\u2096\5\u03e8\u01f5\2\u2094\u2096\5\u02a4\u0153\2"+
		"\u2095\u2093\3\2\2\2\u2095\u2094\3\2\2\2\u2096\u2098\3\2\2\2\u2097\u2099"+
		"\5\u029c\u014f\2\u2098\u2097\3\2\2\2\u2098\u2099\3\2\2\2\u2099\u20ad\3"+
		"\2\2\2\u209a\u209b\7\u0354\2\2\u209b\u20a0\5\u02a4\u0153\2\u209c\u209d"+
		"\7\u035c\2\2\u209d\u209f\5\u02a4\u0153\2\u209e\u209c\3\2\2\2\u209f\u20a2"+
		"\3\2\2\2\u20a0\u209e\3\2\2\2\u20a0\u20a1\3\2\2\2\u20a1\u20a3\3\2\2\2\u20a2"+
		"\u20a0\3\2\2\2\u20a3\u20aa\7\u0355\2\2\u20a4\u20a6\7\b\2\2\u20a5\u20a4"+
		"\3\2\2\2\u20a5\u20a6\3\2\2\2\u20a6\u20a7\3\2\2\2\u20a7\u20a8\t^\2\2\u20a8"+
		"\u20a9\7\u0342\2\2\u20a9\u20ab\7\u033e\2\2\u20aa\u20a5\3\2\2\2\u20aa\u20ab"+
		"\3\2\2\2\u20ab\u20ad\3\2\2\2\u20ac\u2091\3\2\2\2\u20ac\u209a\3\2\2\2\u20ad"+
		"\u029b\3\2\2\2\u20ae\u20b3\5\u02a0\u0151\2\u20af\u20b0\7\u0356\2\2\u20b0"+
		"\u20b2\5\u029c\u014f\2\u20b1\u20af\3\2\2\2\u20b2\u20b5\3\2\2\2\u20b3\u20b1"+
		"\3\2\2\2\u20b3\u20b4\3\2\2\2\u20b4\u20bf\3\2\2\2\u20b5\u20b3\3\2\2\2\u20b6"+
		"\u20bb\5\u029e\u0150\2\u20b7\u20b8\7\u0356\2\2\u20b8\u20ba\5\u029e\u0150"+
		"\2\u20b9\u20b7\3\2\2\2\u20ba\u20bd\3\2\2\2\u20bb\u20b9\3\2\2\2\u20bb\u20bc"+
		"\3\2\2\2\u20bc\u20bf\3\2\2\2\u20bd\u20bb\3\2\2\2\u20be\u20ae\3\2\2\2\u20be"+
		"\u20b6\3\2\2\2\u20bf\u029d\3\2\2\2\u20c0\u20c1\7\u033b\2\2\u20c1\u20c2"+
		"\7\u0342\2\2\u20c2\u20c3\5\u02a2\u0152\2\u20c3\u029f\3\2\2\2\u20c4\u20c5"+
		"\5\u02a2\u0152\2\u20c5\u02a1\3\2\2\2\u20c6\u20cf\5\u0418\u020d\2\u20c7"+
		"\u20c9\7\u033b\2\2\u20c8\u20ca\t_\2\2\u20c9\u20c8\3\2\2\2\u20c9\u20ca"+
		"\3\2\2\2\u20ca\u20cf\3\2\2\2\u20cb\u20cf\5\u041e\u0210\2\u20cc\u20cf\7"+
		"/\2\2\u20cd\u20cf\7k\2\2\u20ce\u20c6\3\2\2\2\u20ce\u20c7\3\2\2\2\u20ce"+
		"\u20cb\3\2\2\2\u20ce\u20cc\3\2\2\2\u20ce\u20cd\3\2\2\2\u20cf\u02a3\3\2"+
		"\2\2\u20d0\u20d1\t\3\2\2\u20d1\u02a5\3\2\2\2\u20d2\u20d4\5\u02dc\u016f"+
		"\2\u20d3\u20d5\7\u0357\2\2\u20d4\u20d3\3\2\2\2\u20d4\u20d5\3\2\2\2\u20d5"+
		"\u210e\3\2\2\2\u20d6\u20e2\7O\2\2\u20d7\u20d9\7\4\2\2\u20d8\u20da\7\u01dd"+
		"\2\2\u20d9\u20d8\3\2\2\2\u20d9\u20da\3\2\2\2\u20da\u20e3\3\2\2\2\u20db"+
		"\u20e0\5\u02c2\u0162\2\u20dc\u20dd\7\u0354\2\2\u20dd\u20de\5\u03f4\u01fb"+
		"\2\u20de\u20df\7\u0355\2\2\u20df\u20e1\3\2\2\2\u20e0\u20dc\3\2\2\2\u20e0"+
		"\u20e1\3\2\2\2\u20e1\u20e3\3\2\2\2\u20e2\u20d7\3\2\2\2\u20e2\u20db\3\2"+
		"\2\2\u20e3\u20e6\3\2\2\2\u20e4\u20e5\7p\2\2\u20e5\u20e7\5\u03e0\u01f1"+
		"\2\u20e6\u20e4\3\2\2\2\u20e6\u20e7\3\2\2\2\u20e7\u20e8\3\2\2\2\u20e8\u20e9"+
		"\7\u00a8\2\2\u20e9\u20ee\5\u02a8\u0155\2\u20ea\u20eb\7\u0356\2\2\u20eb"+
		"\u20ed\5\u02a8\u0155\2\u20ec\u20ea\3\2\2\2\u20ed\u20f0\3\2\2\2\u20ee\u20ec"+
		"\3\2\2\2\u20ee\u20ef\3\2\2\2\u20ef\u20f4\3\2\2\2\u20f0\u20ee\3\2\2\2\u20f1"+
		"\u20f2\7\u00bd\2\2\u20f2\u20f3\7O\2\2\u20f3\u20f5\7w\2\2\u20f4\u20f1\3"+
		"\2\2\2\u20f4\u20f5\3\2\2\2\u20f5\u20f8\3\2\2\2\u20f6\u20f7\7\b\2\2\u20f7"+
		"\u20f9\5\u02a8\u0155\2\u20f8\u20f6\3\2\2\2\u20f8\u20f9\3\2\2\2\u20f9\u20fb"+
		"\3\2\2\2\u20fa\u20fc\7\u0357\2\2\u20fb\u20fa\3\2\2\2\u20fb\u20fc\3\2\2"+
		"\2\u20fc\u210e\3\2\2\2\u20fd\u2104\7\u008f\2\2\u20fe\u20ff\7\u0354\2\2"+
		"\u20ff\u2100\7\u00bd\2\2\u2100\u2101\7\u0105\2\2\u2101\u2102\7\u0342\2"+
		"\2\u2102\u2103\7\u033b\2\2\u2103\u2105\7\u0355\2\2\u2104\u20fe\3\2\2\2"+
		"\u2104\u2105\3\2\2\2\u2105\u2107\3\2\2\2\u2106\u2108\7\u0357\2\2\u2107"+
		"\u2106\3\2\2\2\u2107\u2108\3\2\2\2\u2108\u210e\3\2\2\2\u2109\u210e\5\u02b4"+
		"\u015b\2\u210a\u210e\5\u02b6\u015c\2\u210b\u210e\5\u02b8\u015d\2\u210c"+
		"\u210e\5\u02aa\u0156\2\u210d\u20d2\3\2\2\2\u210d\u20d6\3\2\2\2\u210d\u20fd"+
		"\3\2\2\2\u210d\u2109\3\2\2\2\u210d\u210a\3\2\2\2\u210d\u210b\3\2\2\2\u210d"+
		"\u210c\3\2\2\2\u210e\u02a7\3\2\2\2\u210f\u2113\3\2\2\2\u2110\u2113\5\u041e"+
		"\u0210\2\u2111\u2113\7\u0084\2\2\u2112\u210f\3\2\2\2\u2112\u2110\3\2\2"+
		"\2\u2112\u2111\3\2\2\2\u2113\u02a9\3\2\2\2\u2114\u2115\7#\2\2\u2115\u2116"+
		"\7\u0285\2\2\u2116\u2119\5\u041e\u0210\2\u2117\u2118\7\n\2\2\u2118\u211a"+
		"\5\u041e\u0210\2\u2119\u2117\3\2\2\2\u2119\u211a\3\2\2\2\u211a\u211e\3"+
		"\2\2\2\u211b\u211c\7K\2\2\u211c\u211f\5\u02ac\u0157\2\u211d\u211f\5\u02b0"+
		"\u0159\2\u211e\u211b\3\2\2\2\u211e\u211d\3\2\2\2\u211f\u2126\3\2\2\2\u2120"+
		"\u2121\7\u00c6\2\2\u2121\u2122\7G\2\2\u2122\u2123\7\r\2\2\u2123\u2124"+
		"\7\u0127\2\2\u2124\u2125\7\u0342\2\2\u2125\u2127\t\t\2\2\u2126\u2120\3"+
		"\2\2\2\u2126\u2127\3\2\2\2\u2127\u02ab\3\2\2\2\u2128\u2129\7\u00d9\2\2"+
		"\u2129\u213a\5\u041e\u0210\2\u212a\u212c\7\u0139\2\2\u212b\u212a\3\2\2"+
		"\2\u212b\u212c\3\2\2\2\u212c\u212d\3\2\2\2\u212d\u212e\7E\2\2\u212e\u212f"+
		"\7\u0342\2\2\u212f\u2137\7\u033e\2\2\u2130\u2131\7\u00bd\2\2\u2131\u2132"+
		"\7\u01db\2\2\u2132\u2133\7_\2\2\u2133\u2134\7\u0354\2\2\u2134\u2135\5"+
		"\u02ae\u0158\2\u2135\u2136\7\u0355\2\2\u2136\u2138\3\2\2\2\u2137\u2130"+
		"\3\2\2\2\u2137\u2138\3\2\2\2\u2138\u213a\3\2\2\2\u2139\u2128\3\2\2\2\u2139"+
		"\u212b\3\2\2\2\u213a\u02ad\3\2\2\2\u213b\u213c\t`\2\2\u213c\u213d\7\u0342"+
		"\2\2\u213d\u2144\7\u033e\2\2\u213e\u213f\7\u0356\2\2\u213f\u2140\ta\2"+
		"\2\u2140\u2141\7\22\2\2\u2141\u2142\7\u02e8\2\2\u2142\u2143\7\u0342\2"+
		"\2\u2143\u2145\7\u033e\2\2\u2144\u213e\3\2\2\2\u2144\u2145\3\2\2\2\u2145"+
		"\u02af\3\2\2\2\u2146\u2147\7\u0135\2\2\u2147\u2148\7\22\2\2\u2148\u2149"+
		"\7\u02e8\2\2\u2149\u214a\7\u0342\2\2\u214a\u214c\7\u033e\2\2\u214b\u2146"+
		"\3\2\2\2\u214b\u214c\3\2\2\2\u214c\u214d\3\2\2\2\u214d\u214e\7\u00bd\2"+
		"\2\u214e\u214f\7\u0237\2\2\u214f\u2150\7\u0342\2\2\u2150\u2155\7\u033e"+
		"\2\2\u2151\u2152\7\u0356\2\2\u2152\u2154\5\u02b2\u015a\2\u2153\u2151\3"+
		"\2\2\2\u2154\u2157\3\2\2\2\u2155\u2153\3\2\2\2\u2155\u2156\3\2\2\2\u2156"+
		"\u02b1\3\2\2\2\u2157\u2155\3\2\2\2\u2158\u2159\tb\2\2\u2159\u215a\7\u0342"+
		"\2\2\u215a\u215b\7\u033e\2\2\u215b\u02b3\3\2\2\2\u215c\u215d\7q\2\2\u215d"+
		"\u215e\7\u023b\2\2\u215e\u215f\7_\2\2\u215f\u2160\5\u041e\u0210\2\u2160"+
		"\u2161\7\u011a\2\2\u2161\u2162\7\22\2\2\u2162\u2163\5\u02c0\u0161\2\u2163"+
		"\u216d\3\2\2\2\u2164\u2165\7q\2\2\u2165\u2166\7\u02c6\2\2\u2166\u2167"+
		"\7_\2\2\u2167\u2168\7\u011a\2\2\u2168\u2169\7\22\2\2\u2169\u216a\7\u02e8"+
		"\2\2\u216a\u216b\7\u0342\2\2\u216b\u216d\7\u033e\2\2\u216c\u215c\3\2\2"+
		"\2\u216c\u2164\3\2\2\2\u216d\u02b5\3\2\2\2\u216e\u216f\7\27\2\2\u216f"+
		"\u2170\7\u023b\2\2\u2170\u2171\7_\2\2\u2171\u217a\5\u041e\u0210\2\u2172"+
		"\u2173\7\27\2\2\u2173\u2174\7\4\2\2\u2174\u2175\7\u023b\2\2\u2175\u217a"+
		"\7\u0177\2\2\u2176\u2177\7\27\2\2\u2177\u2178\7\u02c6\2\2\u2178\u217a"+
		"\7_\2\2\u2179\u216e\3\2\2\2\u2179\u2172\3\2\2\2\u2179\u2176\3\2\2\2\u217a"+
		"\u02b7\3\2\2\2\u217b\u217c\7#\2\2\u217c\u217d\7\u02c6\2\2\u217d\u217e"+
		"\7_\2\2\u217e\u217f\7\u0135\2\2\u217f\u2180\7\22\2\2\u2180\u2181\7\u02e8"+
		"\2\2\u2181\u2182\7\u0342\2\2\u2182\u219f\7\u033e\2\2\u2183\u2184\7#\2"+
		"\2\u2184\u2185\7\u023b\2\2\u2185\u2186\7_\2\2\u2186\u2189\5\u041e\u0210"+
		"\2\u2187\u2188\7\n\2\2\u2188\u218a\5\u041e\u0210\2\u2189\u2187\3\2\2\2"+
		"\u2189\u218a\3\2\2\2\u218a\u218e\3\2\2\2\u218b\u218c\7K\2\2\u218c\u218d"+
		"\7\u01e0\2\2\u218d\u218f\5\u041e\u0210\2\u218e\u218b\3\2\2\2\u218e\u218f"+
		"\3\2\2\2\u218f\u2190\3\2\2\2\u2190\u219a\7\u00bd\2\2\u2191\u2196\5\u02ba"+
		"\u015e\2\u2192\u2193\7\u0135\2\2\u2193\u2194\7\22\2\2\u2194\u2196\5\u02be"+
		"\u0160\2\u2195\u2191\3\2\2\2\u2195\u2192\3\2\2\2\u2196\u2198\3\2\2\2\u2197"+
		"\u2199\7\u0356\2\2\u2198\u2197\3\2\2\2\u2198\u2199\3\2\2\2\u2199\u219b"+
		"\3\2\2\2\u219a\u2195\3\2\2\2\u219b\u219c\3\2\2\2\u219c\u219a\3\2\2\2\u219c"+
		"\u219d\3\2\2\2\u219d\u219f\3\2\2\2\u219e\u217b\3\2\2\2\u219e\u2183\3\2"+
		"\2\2\u219f\u02b9\3\2\2\2\u21a0\u21a1\7\u0176\2\2\u21a1\u21a2\7\u0342\2"+
		"\2\u21a2\u21b0\7\u033e\2\2\u21a3\u21a4\7\u00ce\2\2\u21a4\u21a5\7\u0342"+
		"\2\2\u21a5\u21b0\5\u02bc\u015f\2\u21a6\u21a7\7\u0163\2\2\u21a7\u21a8\7"+
		"\u0342\2\2\u21a8\u21b0\7\u033e\2\2\u21a9\u21aa\7\u01e1\2\2\u21aa\u21ab"+
		"\7\u0342\2\2\u21ab\u21b0\7\u033e\2\2\u21ac\u21ad\7\u010b\2\2\u21ad\u21ae"+
		"\7\u0342\2\2\u21ae\u21b0\t\f\2\2\u21af\u21a0\3\2\2\2\u21af\u21a3\3\2\2"+
		"\2\u21af\u21a6\3\2\2\2\u21af\u21a9\3\2\2\2\u21af\u21ac\3\2\2\2\u21b0\u02bb"+
		"\3\2\2\2\u21b1\u21b2\tc\2\2\u21b2\u02bd\3\2\2\2\u21b3\u21b4\7\u0285\2"+
		"\2\u21b4\u21bf\5\u041e\u0210\2\u21b5\u21b6\7\u0276\2\2\u21b6\u21b7\7_"+
		"\2\2\u21b7\u21bf\5\u041e\u0210\2\u21b8\u21b9\7\u023b\2\2\u21b9\u21ba\7"+
		"_\2\2\u21ba\u21bf\5\u041e\u0210\2\u21bb\u21bc\7\u02e8\2\2\u21bc\u21bd"+
		"\7\u0342\2\2\u21bd\u21bf\7\u033e\2\2\u21be\u21b3\3\2\2\2\u21be\u21b5\3"+
		"\2\2\2\u21be\u21b8\3\2\2\2\u21be\u21bb\3\2\2\2\u21bf\u02bf\3\2\2\2\u21c0"+
		"\u21c1\7\u0285\2\2\u21c1\u21c6\5\u041e\u0210\2\u21c2\u21c3\7\u00bd\2\2"+
		"\u21c3\u21c4\7\u02e8\2\2\u21c4\u21c5\7\u0342\2\2\u21c5\u21c7\7\u033e\2"+
		"\2\u21c6\u21c2\3\2\2\2\u21c6\u21c7\3\2\2\2\u21c7\u21d8\3\2\2\2\u21c8\u21c9"+
		"\7\u0276\2\2\u21c9\u21ca\7_\2\2\u21ca\u21cf\5\u041e\u0210\2\u21cb\u21cc"+
		"\7\u00bd\2\2\u21cc\u21cd\7\u02e8\2\2\u21cd\u21ce\7\u0342\2\2\u21ce\u21d0"+
		"\7\u033e\2\2\u21cf\u21cb\3\2\2\2\u21cf\u21d0\3\2\2\2\u21d0\u21d8\3\2\2"+
		"\2\u21d1\u21d2\7\u023b\2\2\u21d2\u21d3\7_\2\2\u21d3\u21d8\5\u041e\u0210"+
		"\2\u21d4\u21d5\7\u02e8\2\2\u21d5\u21d6\7\u0342\2\2\u21d6\u21d8\7\u033e"+
		"\2\2\u21d7\u21c0\3\2\2\2\u21d7\u21c8\3\2\2\2\u21d7\u21d1\3\2\2\2\u21d7"+
		"\u21d4\3\2\2\2\u21d8\u02c1\3\2\2\2\u21d9\u21f4\7@\2\2\u21da\u21db\7\u00b8"+
		"\2\2\u21db\u21f4\5\u041e\u0210\2\u21dc\u21dd\7\u023f\2\2\u21dd\u21f4\5"+
		"\u041e\u0210\2\u21de\u21e0\7\u0104\2\2\u21df\u21e1\5\u041e\u0210\2\u21e0"+
		"\u21df\3\2\2\2\u21e0\u21e1\3\2\2\2\u21e1\u21f4\3\2\2\2\u21e2\u21e3\7#"+
		"\2\2\u21e3\u21f4\td\2\2\u21e4\u21f4\7\u0224\2\2\u21e5\u21f4\7\u0166\2"+
		"\2\u21e6\u21f4\7\u0099\2\2\u21e7\u21f4\7\u008a\2\2\u21e8\u21f4\7Z\2\2"+
		"\u21e9\u21f1\7\5\2\2\u21ea\u21ec\7\7\2\2\u21eb\u21ea\3\2\2\2\u21eb\u21ec"+
		"\3\2\2\2\u21ec\u21ef\3\2\2\2\u21ed\u21f0\5\u041e\u0210\2\u21ee\u21f0\7"+
		"+\2\2\u21ef\u21ed\3\2\2\2\u21ef\u21ee\3\2\2\2\u21f0\u21f2\3\2\2\2\u21f1"+
		"\u21eb\3\2\2\2\u21f1\u21f2\3\2\2\2\u21f2\u21f4\3\2\2\2\u21f3\u21d9\3\2"+
		"\2\2\u21f3\u21da\3\2\2\2\u21f3\u21dc\3\2\2\2\u21f3\u21de\3\2\2\2\u21f3"+
		"\u21e2\3\2\2\2\u21f3\u21e4\3\2\2\2\u21f3\u21e5\3\2\2\2\u21f3\u21e6\3\2"+
		"\2\2\u21f3\u21e7\3\2\2\2\u21f3\u21e8\3\2\2\2\u21f3\u21e9\3\2\2\2\u21f4"+
		"\u02c3\3\2\2\2\u21f5\u21f6\7\u009e\2\2\u21f6\u21f9\7\u033b\2\2\u21f7\u21f8"+
		"\7\u034f\2\2\u21f8\u21fa\5\u041e\u0210\2\u21f9\u21f7\3\2\2\2\u21f9\u21fa"+
		"\3\2\2\2\u21fa\u21fb\3\2\2\2\u21fb\u21fc\7\u0342\2\2\u21fc\u21fe\5\u0308"+
		"\u0185\2\u21fd\u21ff\7\u0357\2\2\u21fe\u21fd\3\2\2\2\u21fe\u21ff\3\2\2"+
		"\2\u21ff\u221d\3\2\2\2\u2200\u2201\7\u009e\2\2\u2201\u2202\7\u033b\2\2"+
		"\u2202\u2203\5\u0426\u0214\2\u2203\u2205\5\u0308\u0185\2\u2204\u2206\7"+
		"\u0357\2\2\u2205\u2204\3\2\2\2\u2205\u2206\3\2\2\2\u2206\u221d\3\2\2\2"+
		"\u2207\u2208\7\u009e\2\2\u2208\u2209\7\u033b\2\2\u2209\u220a\7\u0342\2"+
		"\2\u220a\u220b\7*\2\2\u220b\u2216\5\u02fe\u0180\2\u220c\u2214\7G\2\2\u220d"+
		"\u220e\7\u0087\2\2\u220e\u2215\7\u01c2\2\2\u220f\u2212\7\u00b2\2\2\u2210"+
		"\u2211\7m\2\2\u2211\u2213\5\u03f4\u01fb\2\u2212\u2210\3\2\2\2\u2212\u2213"+
		"\3\2\2\2\u2213\u2215\3\2\2\2\u2214\u220d\3\2\2\2\u2214\u220f\3\2\2\2\u2215"+
		"\u2217\3\2\2\2\u2216\u220c\3\2\2\2\u2216\u2217\3\2\2\2\u2217\u2219\3\2"+
		"\2\2\u2218\u221a\7\u0357\2\2\u2219\u2218\3\2\2\2\u2219\u221a\3\2\2\2\u221a"+
		"\u221d\3\2\2\2\u221b\u221d\5\u0304\u0183\2\u221c\u21f5\3\2\2\2\u221c\u2200"+
		"\3\2\2\2\u221c\u2207\3\2\2\2\u221c\u221b\3\2\2\2\u221d\u02c5\3\2\2\2\u221e"+
		"\u221f\7\r\2\2\u221f\u2220\7\65\2\2\u2220\u2223\te\2\2\u2221\u2224\5\u041e"+
		"\u0210\2\u2222\u2224\7\u033b\2\2\u2223\u2221\3\2\2\2\u2223\u2222\3\2\2"+
		"\2\u2223\u2224\3\2\2\2\u2224\u2226\3\2\2\2\u2225\u2227\7\u0357\2\2\u2226"+
		"\u2225\3\2\2\2\u2226\u2227\3\2\2\2\u2227\u2270\3\2\2\2\u2228\u2229\7\r"+
		"\2\2\u2229\u2233\te\2\2\u222a\u222d\5\u041e\u0210\2\u222b\u222d\7\u033b"+
		"\2\2\u222c\u222a\3\2\2\2\u222c\u222b\3\2\2\2\u222d\u2231\3\2\2\2\u222e"+
		"\u222f\7\u00bd\2\2\u222f\u2230\7\u018a\2\2\u2230\u2232\7\u033e\2\2\u2231"+
		"\u222e\3\2\2\2\u2231\u2232\3\2\2\2\u2232\u2234\3\2\2\2\u2233\u222c\3\2"+
		"\2\2\u2233\u2234\3\2\2\2\u2234\u2236\3\2\2\2\u2235\u2237\7\u0357\2\2\u2236"+
		"\u2235\3\2\2\2\u2236\u2237\3\2\2\2\u2237\u2270\3\2\2\2\u2238\u2239\7\34"+
		"\2\2\u2239\u2246\te\2\2\u223a\u223d\5\u041e\u0210\2\u223b\u223d\7\u033b"+
		"\2\2\u223c\u223a\3\2\2\2\u223c\u223b\3\2\2\2\u223d\u2244\3\2\2\2\u223e"+
		"\u223f\7\u00bd\2\2\u223f\u2240\7\u0354\2\2\u2240\u2241\7\u011f\2\2\u2241"+
		"\u2242\7\u0342\2\2\u2242\u2243\t\t\2\2\u2243\u2245\7\u0355\2\2\u2244\u223e"+
		"\3\2\2\2\u2244\u2245\3\2\2\2\u2245\u2247\3\2\2\2\u2246\u223c\3\2\2\2\u2246"+
		"\u2247\3\2\2\2\u2247\u2249\3\2\2\2\u2248\u224a\7\u0357\2\2\u2249\u2248"+
		"\3\2\2\2\u2249\u224a\3\2\2\2\u224a\u2270\3\2\2\2\u224b\u224d\7\34\2\2"+
		"\u224c\u224e\7\u0264\2\2\u224d\u224c\3\2\2\2\u224d\u224e\3\2\2\2\u224e"+
		"\u2250\3\2\2\2\u224f\u2251\7\u0357\2\2\u2250\u224f\3\2\2\2\u2250\u2251"+
		"\3\2\2\2\u2251\u2270\3\2\2\2\u2252\u2253\7\34\2\2\u2253\u2270\5\u041e"+
		"\u0210\2\u2254\u2255\7\u0092\2\2\u2255\u2270\5\u041e\u0210\2\u2256\u2257"+
		"\7\u0092\2\2\u2257\u225a\te\2\2\u2258\u225b\5\u041e\u0210\2\u2259\u225b"+
		"\7\u033b\2\2\u225a\u2258\3\2\2\2\u225a\u2259\3\2\2\2\u225a\u225b\3\2\2"+
		"\2\u225b\u225d\3\2\2\2\u225c\u225e\7\u0357\2\2\u225d\u225c\3\2\2\2\u225d"+
		"\u225e\3\2\2\2\u225e\u2270\3\2\2\2\u225f\u2261\7\u0092\2\2\u2260\u2262"+
		"\7\u0264\2\2\u2261\u2260\3\2\2\2\u2261\u2262\3\2\2\2\u2262\u2264\3\2\2"+
		"\2\u2263\u2265\7\u0357\2\2\u2264\u2263\3\2\2\2\u2264\u2265\3\2\2\2\u2265"+
		"\u2270\3\2\2\2\u2266\u2267\7\u0096\2\2\u2267\u226a\te\2\2\u2268\u226b"+
		"\5\u041e\u0210\2\u2269\u226b\7\u033b\2\2\u226a\u2268\3\2\2\2\u226a\u2269"+
		"\3\2\2\2\u226a\u226b\3\2\2\2\u226b\u226d\3\2\2\2\u226c\u226e\7\u0357\2"+
		"\2\u226d\u226c\3\2\2\2\u226d\u226e\3\2\2\2\u226e\u2270\3\2\2\2\u226f\u221e"+
		"\3\2\2\2\u226f\u2228\3\2\2\2\u226f\u2238\3\2\2\2\u226f\u224b\3\2\2\2\u226f"+
		"\u2252\3\2\2\2\u226f\u2254\3\2\2\2\u226f\u2256\3\2\2\2\u226f\u225f\3\2"+
		"\2\2\u226f\u2266\3\2\2\2\u2270\u02c7\3\2\2\2\u2271\u2273\7\u0158\2\2\u2272"+
		"\u2274\7\u033c\2\2\u2273\u2272\3\2\2\2\u2273\u2274\3\2\2\2\u2274\u02c9"+
		"\3\2\2\2\u2275\u2277\7\u0159\2\2\u2276\u2278\7\u033c\2\2\u2277\u2276\3"+
		"\2\2\2\u2277\u2278\3\2\2\2\u2278\u02cb\3\2\2\2\u2279\u227a\7\u00b4\2\2"+
		"\u227a\u227c\5\u041e\u0210\2\u227b\u227d\7\u0357\2\2\u227c\u227b\3\2\2"+
		"\2\u227c\u227d\3\2\2\2\u227d\u02cd\3\2\2\2\u227e\u2280\7\u009f\2\2\u227f"+
		"\u2281\7\u033e\2\2\u2280\u227f\3\2\2\2\u2280\u2281\3\2\2\2\u2281\u02cf"+
		"\3\2\2\2\u2282\u2285\7\u0089\2\2\u2283\u2284\7\u00bd\2\2\u2284\u2286\7"+
		"\u01c8\2\2\u2285\u2283\3\2\2\2\u2285\u2286\3\2\2\2\u2286\u02d1\3\2\2\2"+
		"\u2287\u228a\7\u00a0\2\2\u2288\u2289\7\u00bd\2\2\u2289\u228b\7\u01b8\2"+
		"\2\u228a\u2288\3\2\2\2\u228a\u228b\3\2\2\2\u228b\u02d3\3\2\2\2\u228c\u228d"+
		"\7,\2\2\u228d\u2297\7\u030f\2\2\u228e\u228f\7\u0354\2\2\u228f\u2290\7"+
		"\u0228\2\2\u2290\u2294\7\u0342\2\2\u2291\u2295\5\u0314\u018b\2\u2292\u2295"+
		"\5\u041e\u0210\2\u2293\u2295\7/\2\2\u2294\u2291\3\2\2\2\u2294\u2292\3"+
		"\2\2\2\u2294\u2293\3\2\2\2\u2295\u2296\3\2\2\2\u2296\u2298\7\u0355\2\2"+
		"\u2297\u228e\3\2\2\2\u2297\u2298\3\2\2\2\u2298\u229a\3\2\2\2\u2299\u229b"+
		"\7\u0357\2\2\u229a\u2299\3\2\2\2\u229a\u229b\3\2\2\2\u229b\u02d5\3\2\2"+
		"\2\u229c\u229d\7,\2\2\u229d\u22a2\5\u02d8\u016d\2\u229e\u229f\7\u0354"+
		"\2\2\u229f\u22a0\5\u03b8\u01dd\2\u22a0\u22a1\7\u0355\2\2\u22a1\u22a3\3"+
		"\2\2\2\u22a2\u229e\3\2\2\2\u22a2\u22a3\3\2\2\2\u22a3\u22a6\3\2\2\2\u22a4"+
		"\u22a5\7\u00bd\2\2\u22a5\u22a7\5\u02da\u016e\2\u22a6\u22a4\3\2\2\2\u22a6"+
		"\u22a7\3\2\2\2\u22a7\u22a9\3\2\2\2\u22a8\u22aa\7\u0357\2\2\u22a9\u22a8"+
		"\3\2\2\2\u22a9\u22aa\3\2\2\2\u22aa\u02d7\3\2\2\2\u22ab\u22ae\5\u0420\u0211"+
		"\2\u22ac\u22ae\5\u041c\u020f\2\u22ad\u22ab\3\2\2\2\u22ad\u22ac\3\2\2\2"+
		"\u22ae\u02d9\3\2\2\2\u22af\u22b2\5\u0420\u0211\2\u22b0\u22b1\7\u0356\2"+
		"\2\u22b1\u22b3\5\u0420\u0211\2\u22b2\u22b0\3\2\2\2\u22b2\u22b3\3\2\2\2"+
		"\u22b3\u02db\3\2\2\2\u22b4\u22b5\7@\2\2\u22b5\u22b6\7\b\2\2\u22b6\u22b7"+
		"\tf\2\2\u22b7\u02dd\3\2\2\2\u22b8\u22ba\7\u033b\2\2\u22b9\u22bb\7\b\2"+
		"\2\u22ba\u22b9\3\2\2\2\u22ba\u22bb\3\2\2\2\u22bb\u22bc\3\2\2\2\u22bc\u22bf"+
		"\5\u0414";
	private static final String _serializedATNSegment4 =
		"\u020b\2\u22bd\u22be\7\u0342\2\2\u22be\u22c0\5\u0308\u0185\2\u22bf\u22bd"+
		"\3\2\2\2\u22bf\u22c0\3\2\2\2\u22c0\u02df\3\2\2\2\u22c1\u22c2\7\u00a4\2"+
		"\2\u22c2\u22c3\7\u0354\2\2\u22c3\u22ca\5\u02e8\u0175\2\u22c4\u22c6\7\u0356"+
		"\2\2\u22c5\u22c4\3\2\2\2\u22c5\u22c6\3\2\2\2\u22c6\u22c7\3\2\2\2\u22c7"+
		"\u22c9\5\u02e2\u0172\2\u22c8\u22c5\3\2\2\2\u22c9\u22cc\3\2\2\2\u22ca\u22c8"+
		"\3\2\2\2\u22ca\u22cb\3\2\2\2\u22cb\u22cd\3\2\2\2\u22cc\u22ca\3\2\2\2\u22cd"+
		"\u22ce\7\u0355\2\2\u22ce\u02e1\3\2\2\2\u22cf\u22d0\7\u0080\2\2\u22d0\u22d4"+
		"\7_\2\2\u22d1\u22d2\7X\2\2\u22d2\u22d4\5\u041e\u0210\2\u22d3\u22cf\3\2"+
		"\2\2\u22d3\u22d1\3\2\2\2\u22d4\u22d6\3\2\2\2\u22d5\u22d7\tg\2\2\u22d6"+
		"\u22d5\3\2\2\2\u22d6\u22d7\3\2\2\2\u22d7\u22da\3\2\2\2\u22d8\u22da\7\u00b0"+
		"\2\2\u22d9\u22d3\3\2\2\2\u22d9\u22d8\3\2\2\2\u22da\u22db\3\2\2\2\u22db"+
		"\u22dc\7\u0354\2\2\u22dc\u22dd\5\u03ee\u01f8\2\u22dd\u22de\7\u0355\2\2"+
		"\u22de\u22e5\3\2\2\2\u22df\u22e0\7\25\2\2\u22e0\u22e1\7\u0354\2\2\u22e1"+
		"\u22e2\5\u0320\u0191\2\u22e2\u22e3\7\u0355\2\2\u22e3\u22e5\3\2\2\2\u22e4"+
		"\u22d9\3\2\2\2\u22e4\u22df\3\2\2\2\u22e5\u02e3\3\2\2\2\u22e6\u22e7\7\u0266"+
		"\2\2\u22e7\u22e9\7\u0354\2\2\u22e8\u22ea\th\2\2\u22e9\u22e8\3\2\2\2\u22e9"+
		"\u22ea\3\2\2\2\u22ea\u22eb\3\2\2\2\u22eb\u22ec\5\u02e6\u0174\2\u22ec\u22ed"+
		"\7\u0355\2\2\u22ed\u02e5\3\2\2\2\u22ee\u22ef\7\u033d\2\2\u22ef\u22f0\7"+
		"\u034f\2\2\u22f0\u22f1\7\u033d\2\2\u22f1\u02e7\3\2\2\2\u22f2\u22f9\5\u02ea"+
		"\u0176\2\u22f3\u22f5\7\u0356\2\2\u22f4\u22f3\3\2\2\2\u22f4\u22f5\3\2\2"+
		"\2\u22f5\u22f6\3\2\2\2\u22f6\u22f8\5\u02ea\u0176\2\u22f7\u22f4\3\2\2\2"+
		"\u22f8\u22fb\3\2\2\2\u22f9\u22f7\3\2\2\2\u22f9\u22fa\3\2\2\2\u22fa\u02e9"+
		"\3\2\2\2\u22fb\u22f9\3\2\2\2\u22fc\u2300\5\u02ec\u0177\2\u22fd\u2300\5"+
		"\u02ee\u0178\2\u22fe\u2300\5\u02f2\u017a\2\u22ff\u22fc\3\2\2\2\u22ff\u22fd"+
		"\3\2\2\2\u22ff\u22fe\3\2\2\2\u2300\u02eb\3\2\2\2\u2301\u2308\5\u041e\u0210"+
		"\2\u2302\u2309\5\u0414\u020b\2\u2303\u2304\7\b\2\2\u2304\u2306\5\u0308"+
		"\u0185\2\u2305\u2307\7\u02ed\2\2\u2306\u2305\3\2\2\2\u2306\u2307\3\2\2"+
		"\2\u2307\u2309\3\2\2\2\u2308\u2302\3\2\2\2\u2308\u2303\3\2\2\2\u2309\u230c"+
		"\3\2\2\2\u230a\u230b\7\32\2\2\u230b\u230d\5\u041e\u0210\2\u230c\u230a"+
		"\3\2\2\2\u230c\u230d\3\2\2\2\u230d\u230f\3\2\2\2\u230e\u2310\5\u03fc\u01ff"+
		"\2\u230f\u230e\3\2\2\2\u230f\u2310\3\2\2\2\u2310\u2326\3\2\2\2\u2311\u2312"+
		"\7\36\2\2\u2312\u2314\5\u041e\u0210\2\u2313\u2311\3\2\2\2\u2313\u2314"+
		"\3\2\2\2\u2314\u2315\3\2\2\2\u2315\u2317\5\u03fe\u0200\2\u2316\u2318\5"+
		"\u03fe\u0200\2\u2317\u2316\3\2\2\2\u2317\u2318\3\2\2\2\u2318\u2327\3\2"+
		"\2\2\u2319\u231f\7S\2\2\u231a\u231b\7\u0354\2\2\u231b\u231c\7\u033c\2"+
		"\2\u231c\u231d\7\u0356\2\2\u231d\u231e\7\u033c\2\2\u231e\u2320\7\u0355"+
		"\2\2\u231f\u231a\3\2\2\2\u231f\u2320\3\2\2\2\u2320\u2324\3\2\2\2\u2321"+
		"\u2322\7j\2\2\u2322\u2323\7G\2\2\u2323\u2325\7\u008b\2\2\u2324\u2321\3"+
		"\2\2\2\u2324\u2325\3\2\2\2\u2325\u2327\3\2\2\2\u2326\u2313\3\2\2\2\u2326"+
		"\u2319\3\2\2\2\u2326\u2327\3\2\2\2\u2327\u2329\3\2\2\2\u2328\u232a\7\u0094"+
		"\2\2\u2329\u2328\3\2\2\2\u2329\u232a\3\2\2\2\u232a\u232e\3\2\2\2\u232b"+
		"\u232d\5\u02f0\u0179\2\u232c\u232b\3\2\2\2\u232d\u2330\3\2\2\2\u232e\u232c"+
		"\3\2\2\2\u232e\u232f\3\2\2\2\u232f\u02ed\3\2\2\2\u2330\u232e\3\2\2\2\u2331"+
		"\u2332\5\u041e\u0210\2\u2332\u2333\ti\2\2\u2333\u2337\5\u0308\u0185\2"+
		"\u2334\u2338\7\u018b\2\2\u2335\u2336\7j\2\2\u2336\u2338\7\u018b\2\2\u2337"+
		"\u2334\3\2\2\2\u2337\u2335\3\2\2\2\u2337\u2338\3\2\2\2\u2338\u02ef\3\2"+
		"\2\2\u2339\u233a\7\36\2\2\u233a\u233c\5\u041e\u0210\2\u233b\u2339\3\2"+
		"\2\2\u233b\u233c\3\2\2\2\u233c\u2362\3\2\2\2\u233d\u233e\7\u0080\2\2\u233e"+
		"\u2341\7_\2\2\u233f\u2341\7\u00b0\2\2\u2340\u233d\3\2\2\2\u2340\u233f"+
		"\3\2\2\2\u2341\u2343\3\2\2\2\u2342\u2344\5\u03fa\u01fe\2\u2343\u2342\3"+
		"\2\2\2\u2343\u2344\3\2\2\2\u2344\u2346\3\2\2\2\u2345\u2347\5\u02f8\u017d"+
		"\2\u2346\u2345\3\2\2\2\u2346\u2347\3\2\2\2\u2347\u2363\3\2\2\2\u2348\u234c"+
		"\7\25\2\2\u2349\u234a\7j\2\2\u234a\u234b\7G\2\2\u234b\u234d\7\u008b\2"+
		"\2\u234c\u2349\3\2\2\2\u234c\u234d\3\2\2\2\u234d\u234e\3\2\2\2\u234e\u234f"+
		"\7\u0354\2\2\u234f\u2350\5\u0320\u0191\2\u2350\u2351\7\u0355\2\2\u2351"+
		"\u2363\3\2\2\2\u2352\u2353\7H\2\2\u2353\u2355\7_\2\2\u2354\u2352\3\2\2"+
		"\2\u2354\u2355\3\2\2\2\u2355\u2356\3\2\2\2\u2356\u2357\7\u008a\2\2\u2357"+
		"\u2358\5\u03e0\u01f1\2\u2358\u2359\7\u0354\2\2\u2359\u235a\5\u03f4\u01fb"+
		"\2\u235a\u235c\7\u0355\2\2\u235b\u235d\5\u02f4\u017b\2\u235c\u235b\3\2"+
		"\2\2\u235c\u235d\3\2\2\2\u235d\u235f\3\2\2\2\u235e\u2360\5\u02f6\u017c"+
		"\2\u235f\u235e\3\2\2\2\u235f\u2360\3\2\2\2\u2360\u2363\3\2\2\2\u2361\u2363"+
		"\5\u03fc\u01ff\2\u2362\u2340\3\2\2\2\u2362\u2348\3\2\2\2\u2362\u2354\3"+
		"\2\2\2\u2362\u2361\3\2\2\2\u2363\u02f1\3\2\2\2\u2364\u2365\7\36\2\2\u2365"+
		"\u2367\5\u041e\u0210\2\u2366\u2364\3\2\2\2\u2366\u2367\3\2\2\2\u2367\u23a8"+
		"\3\2\2\2\u2368\u2369\7\u0080\2\2\u2369\u236c\7_\2\2\u236a\u236c\7\u00b0"+
		"\2\2\u236b\u2368\3\2\2\2\u236b\u236a\3\2\2\2\u236c\u236e\3\2\2\2\u236d"+
		"\u236f\5\u03fa\u01fe\2\u236e\u236d\3\2\2\2\u236e\u236f\3\2\2\2\u236f\u2370"+
		"\3\2\2\2\u2370\u2371\7\u0354\2\2\u2371\u2372\5\u03ee\u01f8\2\u2372\u2374"+
		"\7\u0355\2\2\u2373\u2375\5\u02f8\u017d\2\u2374\u2373\3\2\2\2\u2374\u2375"+
		"\3\2\2\2\u2375\u2378\3\2\2\2\u2376\u2377\7p\2\2\u2377\u2379\5\u041e\u0210"+
		"\2\u2378\u2376\3\2\2\2\u2378\u2379\3\2\2\2\u2379\u23a9\3\2\2\2\u237a\u237e"+
		"\7\25\2\2\u237b\u237c\7j\2\2\u237c\u237d\7G\2\2\u237d\u237f\7\u008b\2"+
		"\2\u237e\u237b\3\2\2\2\u237e\u237f\3\2\2\2\u237f\u2380\3\2\2\2\u2380\u2381"+
		"\7\u0354\2\2\u2381\u2382\5\u0320\u0191\2\u2382\u2383\7\u0355\2\2\u2383"+
		"\u23a9\3\2\2\2\u2384\u2386\7/\2\2\u2385\u2387\7\u0354\2\2\u2386\u2385"+
		"\3\2\2\2\u2386\u2387\3\2\2\2\u2387\u238c\3\2\2\2\u2388\u238d\7\u033e\2"+
		"\2\u2389\u238d\7\u035c\2\2\u238a\u238d\5\u0382\u01c2\2\u238b\u238d\7\u033c"+
		"\2\2\u238c\u2388\3\2\2\2\u238c\u2389\3\2\2\2\u238c\u238a\3\2\2\2\u238c"+
		"\u238b\3\2\2\2\u238d\u238e\3\2\2\2\u238e\u238c\3\2\2\2\u238e\u238f\3\2"+
		"\2\2\u238f\u2391\3\2\2\2\u2390\u2392\7\u0355\2\2\u2391\u2390\3\2\2\2\u2391"+
		"\u2392\3\2\2\2\u2392\u2393\3\2\2\2\u2393\u2394\7G\2\2\u2394\u23a9\5\u041e"+
		"\u0210\2\u2395\u2396\7H\2\2\u2396\u2397\7_\2\2\u2397\u2398\7\u0354\2\2"+
		"\u2398\u2399\5\u03f4\u01fb\2\u2399\u239a\7\u0355\2\2\u239a\u239b\7\u008a"+
		"\2\2\u239b\u23a0\5\u03e0\u01f1\2\u239c\u239d\7\u0354\2\2\u239d\u239e\5"+
		"\u03f4\u01fb\2\u239e\u239f\7\u0355\2\2\u239f\u23a1\3\2\2\2\u23a0\u239c"+
		"\3\2\2\2\u23a0\u23a1\3\2\2\2\u23a1\u23a3\3\2\2\2\u23a2\u23a4\5\u02f4\u017b"+
		"\2\u23a3\u23a2\3\2\2\2\u23a3\u23a4\3\2\2\2\u23a4\u23a6\3\2\2\2\u23a5\u23a7"+
		"\5\u02f6\u017c\2\u23a6\u23a5\3\2\2\2\u23a6\u23a7\3\2\2\2\u23a7\u23a9\3"+
		"\2\2\2\u23a8\u236b\3\2\2\2\u23a8\u237a\3\2\2\2\u23a8\u2384\3\2\2\2\u23a8"+
		"\u2395\3\2\2\2\u23a9\u02f3\3\2\2\2\u23aa\u23ab\7p\2\2\u23ab\u23b3\7\60"+
		"\2\2\u23ac\u23ad\7\u01af\2\2\u23ad\u23b4\7\u00c4\2\2\u23ae\u23b4\7\23"+
		"\2\2\u23af\u23b0\7\u009e\2\2\u23b0\u23b4\7k\2\2\u23b1\u23b2\7\u009e\2"+
		"\2\u23b2\u23b4\7/\2\2\u23b3\u23ac\3\2\2\2\u23b3\u23ae\3\2\2\2\u23b3\u23af"+
		"\3\2\2\2\u23b3\u23b1\3\2\2\2\u23b4\u02f5\3\2\2\2\u23b5\u23b6\7p\2\2\u23b6"+
		"\u23be\7\u00b2\2\2\u23b7\u23b8\7\u01af\2\2\u23b8\u23bf\7\u00c4\2\2\u23b9"+
		"\u23bf\7\23\2\2\u23ba\u23bb\7\u009e\2\2\u23bb\u23bf\7k\2\2\u23bc\u23bd"+
		"\7\u009e\2\2\u23bd\u23bf\7/\2\2\u23be\u23b7\3\2\2\2\u23be\u23b9\3\2\2"+
		"\2\u23be\u23ba\3\2\2\2\u23be\u23bc\3\2\2\2\u23bf\u02f7\3\2\2\2\u23c0\u23c1"+
		"\7\u00bd\2\2\u23c1\u23c2\7\u0354\2\2\u23c2\u23c7\5\u02fa\u017e\2\u23c3"+
		"\u23c4\7\u0356\2\2\u23c4\u23c6\5\u02fa\u017e\2\u23c5\u23c3\3\2\2\2\u23c6"+
		"\u23c9\3\2\2\2\u23c7\u23c5\3\2\2\2\u23c7\u23c8\3\2\2\2\u23c8\u23ca\3\2"+
		"\2\2\u23c9\u23c7\3\2\2\2\u23ca\u23cb\7\u0355\2\2\u23cb\u02f9\3\2\2\2\u23cc"+
		"\u23cf\5\u0420\u0211\2\u23cd\u23cf\5\u041c\u020f\2\u23ce\u23cc\3\2\2\2"+
		"\u23ce\u23cd\3\2\2\2\u23cf\u23d0\3\2\2\2\u23d0\u23d5\7\u0342\2\2\u23d1"+
		"\u23d6\5\u0420\u0211\2\u23d2\u23d6\5\u041c\u020f\2\u23d3\u23d6\5\u03f8"+
		"\u01fd\2\u23d4\u23d6\7\u033c\2\2\u23d5\u23d1\3\2\2\2\u23d5\u23d2\3\2\2"+
		"\2\u23d5\u23d3\3\2\2\2\u23d5\u23d4\3\2\2\2\u23d6\u02fb\3\2\2\2\u23d7\u23d8"+
		"\7.\2\2\u23d8\u23f8\5\u03f6\u01fc\2\u23d9\u23e3\7*\2\2\u23da\u23e1\5\u02fe"+
		"\u0180\2\u23db\u23dc\7G\2\2\u23dc\u23df\7\u00b2\2\2\u23dd\u23de\7m\2\2"+
		"\u23de\u23e0\5\u03f4\u01fb\2\u23df\u23dd\3\2\2\2\u23df\u23e0\3\2\2\2\u23e0"+
		"\u23e2\3\2\2\2\u23e1\u23db\3\2\2\2\u23e1\u23e2\3\2\2\2\u23e2\u23e4\3\2"+
		"\2\2\u23e3\u23da\3\2\2\2\u23e3\u23e4\3\2\2\2\u23e4\u23f9\3\2\2\2\u23e5"+
		"\u23e7\tj\2\2\u23e6\u23e5\3\2\2\2\u23e6\u23e7\3\2\2\2\u23e7\u23e9\3\2"+
		"\2\2\u23e8\u23ea\7\u0210\2\2\u23e9\u23e8\3\2\2\2\u23e9\u23ea\3\2\2\2\u23ea"+
		"\u23eb\3\2\2\2\u23eb\u23ec\7*\2\2\u23ec\u23ed\7G\2\2\u23ed\u23f6\5\u01c8"+
		"\u00e5\2\u23ee\u23f4\7G\2\2\u23ef\u23f0\7\u0087\2\2\u23f0\u23f5\7\u01c2"+
		"\2\2\u23f1\u23f5\7\u00b2\2\2\u23f2\u23f3\7m\2\2\u23f3\u23f5\5\u03f4\u01fb"+
		"\2\u23f4\u23ef\3\2\2\2\u23f4\u23f1\3\2\2\2\u23f4\u23f2\3\2\2\2\u23f5\u23f7"+
		"\3\2\2\2\u23f6\u23ee\3\2\2\2\u23f6\u23f7\3\2\2\2\u23f7\u23f9\3\2\2\2\u23f8"+
		"\u23d9\3\2\2\2\u23f8\u23e6\3\2\2\2\u23f9\u23fb\3\2\2\2\u23fa\u23fc\7\u0357"+
		"\2\2\u23fb\u23fa\3\2\2\2\u23fb\u23fc\3\2\2\2\u23fc\u02fd\3\2\2\2\u23fd"+
		"\u23ff\5\u0300\u0181\2\u23fe\u23fd\3\2\2\2\u23ff\u2402\3\2\2\2\u2400\u23fe"+
		"\3\2\2\2\u2400\u2401\3\2\2\2\u2401\u2403\3\2\2\2\u2402\u2400\3\2\2\2\u2403"+
		"\u2404\7G\2\2\u2404\u2405\5\u01c8\u00e5\2\u2405\u02ff\3\2\2\2\u2406\u240c"+
		"\tC\2\2\u2407\u240c\tk\2\2\u2408\u240c\tl\2\2\u2409\u240c\tm\2\2\u240a"+
		"\u240c\7\u0252\2\2\u240b\u2406\3\2\2\2\u240b\u2407\3\2\2\2\u240b\u2408"+
		"\3\2\2\2\u240b\u2409\3\2\2\2\u240b\u240a\3\2\2\2\u240c\u0301\3\2\2\2\u240d"+
		"\u2417\7D\2\2\u240e\u2415\7\u01ae\2\2\u240f\u2415\7\u01d8\2\2\u2410\u2415"+
		"\7\u014a\2\2\u2411\u2415\7\u017a\2\2\u2412\u2413\tn\2\2\u2413\u2415\5"+
		"\u0308\u0185\2\u2414\u240e\3\2\2\2\u2414\u240f\3\2\2\2\u2414\u2410\3\2"+
		"\2\2\u2414\u2411\3\2\2\2\u2414\u2412\3\2\2\2\u2414\u2415\3\2\2\2\u2415"+
		"\u2416\3\2\2\2\u2416\u2418\7K\2\2\u2417\u2414\3\2\2\2\u2417\u2418\3\2"+
		"\2\2\u2418\u241a\3\2\2\2\u2419\u241b\7\u0157\2\2\u241a\u2419\3\2\2\2\u241a"+
		"\u241b\3\2\2\2\u241b\u241c\3\2\2\2\u241c\u2426\5\u03f6\u01fc\2\u241d\u241e"+
		"\7\\\2\2\u241e\u2423\7\u033b\2\2\u241f\u2420\7\u0356\2\2\u2420\u2422\7"+
		"\u033b\2\2\u2421\u241f\3\2\2\2\u2422\u2425\3\2\2\2\u2423\u2421\3\2\2\2"+
		"\u2423\u2424\3\2\2\2\u2424\u2427\3\2\2\2\u2425\u2423\3\2\2\2\u2426\u241d"+
		"\3\2\2\2\u2426\u2427\3\2\2\2\u2427\u2429\3\2\2\2\u2428\u242a\7\u0357\2"+
		"\2\u2429\u2428\3\2\2\2\u2429\u242a\3\2\2\2\u242a\u0303\3\2\2\2\u242b\u242c"+
		"\7\u009e\2\2\u242c\u2430\5\u041e\u0210\2\u242d\u2431\5\u041e\u0210\2\u242e"+
		"\u2431\5\u0306\u0184\2\u242f\u2431\5\u03f8\u01fd\2\u2430\u242d\3\2\2\2"+
		"\u2430\u242e\3\2\2\2\u2430\u242f\3\2\2\2\u2431\u2433\3\2\2\2\u2432\u2434"+
		"\7\u0357\2\2\u2433\u2432\3\2\2\2\u2433\u2434\3\2\2\2\u2434\u2461\3\2\2"+
		"\2\u2435\u2436\7\u009e\2\2\u2436\u2437\7\u00a2\2\2\u2437\u2438\to\2\2"+
		"\u2438\u243a\5\u03f8\u01fd\2\u2439\u243b\7\u0357\2\2\u243a\u2439\3\2\2"+
		"\2\u243a\u243b\3\2\2\2\u243b\u2461\3\2\2\2\u243c\u243d\7\u009e\2\2\u243d"+
		"\u243e\7\u0093\2\2\u243e\u2440\t\2\2\2\u243f\u2441\7\u0357\2\2\u2440\u243f"+
		"\3\2\2\2\u2440\u2441\3\2\2\2\u2441\u2461\3\2\2\2\u2442\u2443\7\u009e\2"+
		"\2\u2443\u2444\7\u00ab\2\2\u2444\u2445\7\u0170\2\2\u2445\u244f\7\u017d"+
		"\2\2\u2446\u2447\7\u0087\2\2\u2447\u2450\7\u0254\2\2\u2448\u2449\7\u0087"+
		"\2\2\u2449\u2450\7\u00ff\2\2\u244a\u244b\7\u01fb\2\2\u244b\u2450\7\u0087"+
		"\2\2\u244c\u2450\7\u022a\2\2\u244d\u2450\7\u0220\2\2\u244e\u2450\7\u033c"+
		"\2\2\u244f\u2446\3\2\2\2\u244f\u2448\3\2\2\2\u244f\u244a\3\2\2\2\u244f"+
		"\u244c\3\2\2\2\u244f\u244d\3\2\2\2\u244f\u244e\3\2\2\2\u2450\u2452\3\2"+
		"\2\2\u2451\u2453\7\u0357\2\2\u2452\u2451\3\2\2\2\u2452\u2453\3\2\2\2\u2453"+
		"\u2461\3\2\2\2\u2454\u2455\7\u009e\2\2\u2455\u2456\7T\2\2\u2456\u2457"+
		"\5\u03e0\u01f1\2\u2457\u2459\5\u03f8\u01fd\2\u2458\u245a\7\u0357\2\2\u2459"+
		"\u2458\3\2\2\2\u2459\u245a\3\2\2\2\u245a\u2461\3\2\2\2\u245b\u245c\7\u009e"+
		"\2\2\u245c\u245d\tp\2\2\u245d\u2461\5\u03f8\u01fd\2\u245e\u245f\7\u009e"+
		"\2\2\u245f\u2461\5\u039a\u01ce\2\u2460\u242b\3\2\2\2\u2460\u2435\3\2\2"+
		"\2\u2460\u243c\3\2\2\2\u2460\u2442\3\2\2\2\u2460\u2454\3\2\2\2\u2460\u245b"+
		"\3\2\2\2\u2460\u245e\3\2\2\2\u2461\u0305\3\2\2\2\u2462\u2465\5\u0418\u020d"+
		"\2\u2463\u2465\7\u033b\2\2\u2464\u2462\3\2\2\2\u2464\u2463\3\2\2\2\u2465"+
		"\u0307\3\2\2\2\u2466\u2467\b\u0185\1\2\u2467\u2470\5\u030c\u0187\2\u2468"+
		"\u2470\5\u0382\u01c2\2\u2469\u2470\5\u030e\u0188\2\u246a\u2470\5\u03ec"+
		"\u01f7\2\u246b\u2470\5\u0312\u018a\2\u246c\u2470\5\u0310\u0189\2\u246d"+
		"\u2470\5\u03c2\u01e2\2\u246e\u2470\7\u026c\2\2\u246f\u2466\3\2\2\2\u246f"+
		"\u2468\3\2\2\2\u246f\u2469\3\2\2\2\u246f\u246a\3\2\2\2\u246f\u246b\3\2"+
		"\2\2\u246f\u246c\3\2\2\2\u246f\u246d\3\2\2\2\u246f\u246e\3\2\2\2\u2470"+
		"\u2486\3\2\2\2\u2471\u2472\f\7\2\2\u2472\u2473\tq\2\2\u2473\u2485\5\u0308"+
		"\u0185\b\u2474\u2475\f\6\2\2\u2475\u2476\tr\2\2\u2476\u2485\5\u0308\u0185"+
		"\7\u2477\u2478\f\r\2\2\u2478\u247d\7\u034f\2\2\u2479\u247e\5\u0390\u01c9"+
		"\2\u247a\u247e\5\u0394\u01cb\2\u247b\u247e\5\u0398\u01cd\2\u247c\u247e"+
		"\5\u039c\u01cf\2\u247d\u2479\3\2\2\2\u247d\u247a\3\2\2\2\u247d\u247b\3"+
		"\2\2\2\u247d\u247c\3\2\2\2\u247e\u2485\3\2\2\2\u247f\u2480\f\f\2\2\u2480"+
		"\u2481\7\32\2\2\u2481\u2485\5\u041e\u0210\2\u2482\u2483\f\5\2\2\u2483"+
		"\u2485\5\u030a\u0186\2\u2484\u2471\3\2\2\2\u2484\u2474\3\2\2\2\u2484\u2477"+
		"\3\2\2\2\u2484\u247f\3\2\2\2\u2484\u2482\3\2\2\2\u2485\u2488\3\2\2\2\u2486"+
		"\u2484\3\2\2\2\u2486\u2487\3\2\2\2\u2487\u0309\3\2\2\2\u2488\u2486\3\2"+
		"\2\2\u2489\u248a\7\u00c2\2\2\u248a\u248b\7\u0245\2\2\u248b\u248c\7\u026b"+
		"\2\2\u248c\u248d\5\u0308\u0185\2\u248d\u030b\3\2\2\2\u248e\u2493\7/\2"+
		"\2\u248f\u2493\7k\2\2\u2490\u2493\7\u033b\2\2\u2491\u2493\5\u0418\u020d"+
		"\2\u2492\u248e\3\2\2\2\u2492\u248f\3\2\2\2\u2492\u2490\3\2\2\2\u2492\u2491"+
		"\3\2\2\2\u2493\u030d\3\2\2\2\u2494\u2495\7\24\2\2\u2495\u2497\5\u0308"+
		"\u0185\2\u2496\u2498\5\u03a0\u01d1\2\u2497\u2496\3\2\2\2\u2498\u2499\3"+
		"\2\2\2\u2499\u2497\3\2\2\2\u2499\u249a\3\2\2\2\u249a\u249d\3\2\2\2\u249b"+
		"\u249c\7;\2\2\u249c\u249e\5\u0308\u0185\2\u249d\u249b\3\2\2\2\u249d\u249e"+
		"\3\2\2\2\u249e\u249f\3\2\2\2\u249f\u24a0\7<\2\2\u24a0\u24ae\3\2\2\2\u24a1"+
		"\u24a3\7\24\2\2\u24a2\u24a4\5\u03a2\u01d2\2\u24a3\u24a2\3\2\2\2\u24a4"+
		"\u24a5\3\2\2\2\u24a5\u24a3\3\2\2\2\u24a5\u24a6\3\2\2\2\u24a6\u24a9\3\2"+
		"\2\2\u24a7\u24a8\7;\2\2\u24a8\u24aa\5\u0308\u0185\2\u24a9\u24a7\3\2\2"+
		"\2\u24a9\u24aa\3\2\2\2\u24aa\u24ab\3\2\2\2\u24ab\u24ac\7<\2\2\u24ac\u24ae"+
		"\3\2\2\2\u24ad\u2494\3\2\2\2\u24ad\u24a1\3\2\2\2\u24ae\u030f\3\2\2\2\u24af"+
		"\u24b0\7\u035e\2\2\u24b0\u24b4\5\u0308\u0185\2\u24b1\u24b2\ts\2\2\u24b2"+
		"\u24b4\5\u0308\u0185\2\u24b3\u24af\3\2\2\2\u24b3\u24b1\3\2\2\2\u24b4\u0311"+
		"\3\2\2\2\u24b5\u24b6\7\u0354\2\2\u24b6\u24b7\5\u0308\u0185\2\u24b7\u24b8"+
		"\7\u0355\2\2\u24b8\u24be\3\2\2\2\u24b9\u24ba\7\u0354\2\2\u24ba\u24bb\5"+
		"\u0316\u018c\2\u24bb\u24bc\7\u0355\2\2\u24bc\u24be\3\2\2\2\u24bd\u24b5"+
		"\3\2\2\2\u24bd\u24b9\3\2\2\2\u24be\u0313\3\2\2\2\u24bf\u24c8\7k\2\2\u24c0"+
		"\u24c8\5\u0418\u020d\2\u24c1\u24c8\5\u0382\u01c2\2\u24c2\u24c8\7\u033b"+
		"\2\2\u24c3\u24c4\7\u0354\2\2\u24c4\u24c5\5\u0314\u018b\2\u24c5\u24c6\7"+
		"\u0355\2\2\u24c6\u24c8\3\2\2\2\u24c7\u24bf\3\2\2\2\u24c7\u24c0\3\2\2\2"+
		"\u24c7\u24c1\3\2\2\2\u24c7\u24c2\3\2\2\2\u24c7\u24c3\3\2\2\2\u24c8\u0315"+
		"\3\2\2\2\u24c9\u24ca\5\u01ca\u00e6\2\u24ca\u0317\3\2\2\2\u24cb\u24cc\7"+
		"\u00bd\2\2\u24cc\u24d1\5\u031a\u018e\2\u24cd\u24ce\7\u0356\2\2\u24ce\u24d0"+
		"\5\u031a\u018e\2\u24cf\u24cd\3\2\2\2\u24d0\u24d3\3\2\2\2\u24d1\u24cf\3"+
		"\2\2\2\u24d1\u24d2\3\2\2\2\u24d2\u0319\3\2\2\2\u24d3\u24d1\3\2\2\2\u24d4"+
		"\u24d9\5\u041e\u0210\2\u24d5\u24d6\7\u0354\2\2\u24d6\u24d7\5\u03f4\u01fb"+
		"\2\u24d7\u24d8\7\u0355\2\2\u24d8\u24da\3\2\2\2\u24d9\u24d5\3\2\2\2\u24d9"+
		"\u24da\3\2\2\2\u24da\u24db\3\2\2\2\u24db\u24dc\7\b\2\2\u24dc\u24dd\7\u0354"+
		"\2\2\u24dd\u24de\5\u01ca\u00e6\2\u24de\u24df\7\u0355\2\2\u24df\u031b\3"+
		"\2\2\2\u24e0\u24e1\7\u033b\2\2\u24e1\u24e2\7\u0342\2\2\u24e2\u24e5\5\u03ec"+
		"\u01f7\2\u24e3\u24e6\7\u0342\2\2\u24e4\u24e6\5\u0426\u0214\2\u24e5\u24e3"+
		"\3\2\2\2\u24e5\u24e4\3\2\2\2\u24e6\u24e7\3\2\2\2\u24e7\u24e8\5\u0308\u0185"+
		"\2\u24e8\u24fa\3\2\2\2\u24e9\u24ec\5\u03ec\u01f7\2\u24ea\u24ec\7\u033b"+
		"\2\2\u24eb\u24e9\3\2\2\2\u24eb\u24ea\3\2\2\2\u24ec\u24ef\3\2\2\2\u24ed"+
		"\u24f0\7\u0342\2\2\u24ee\u24f0\5\u0426\u0214\2\u24ef\u24ed\3\2\2\2\u24ef"+
		"\u24ee\3\2\2\2\u24f0\u24f1\3\2\2\2\u24f1\u24fa\5\u0308\u0185\2\u24f2\u24f3"+
		"\5\u041e\u0210\2\u24f3\u24f4\7\u034f\2\2\u24f4\u24f5\5\u041e\u0210\2\u24f5"+
		"\u24f6\7\u0354\2\2\u24f6\u24f7\5\u03b8\u01dd\2\u24f7\u24f8\7\u0355\2\2"+
		"\u24f8\u24fa\3\2\2\2\u24f9\u24e0\3\2\2\2\u24f9\u24eb\3\2\2\2\u24f9\u24f2"+
		"\3\2\2\2\u24fa\u031d\3\2\2\2\u24fb\u24fe\5\u03ec\u01f7\2\u24fc\u24fe\7"+
		"\u033b\2\2\u24fd\u24fb\3\2\2\2\u24fd\u24fc\3\2\2\2\u24fe\u2501\3\2\2\2"+
		"\u24ff\u2502\7\u0342\2\2\u2500\u2502\5\u0426\u0214\2\u2501\u24ff\3\2\2"+
		"\2\u2501\u2500\3\2\2\2\u2502\u2503\3\2\2\2\u2503\u250c\5\u0308\u0185\2"+
		"\u2504\u2505\5\u041e\u0210\2\u2505\u2506\7\u034f\2\2\u2506\u2507\5\u041e"+
		"\u0210\2\u2507\u2508\7\u0354\2\2\u2508\u2509\5\u03b8\u01dd\2\u2509\u250a"+
		"\7\u0355\2\2\u250a\u250c\3\2\2\2\u250b\u24fd\3\2\2\2\u250b\u2504\3\2\2"+
		"\2\u250c\u031f\3\2\2\2\u250d\u2511\b\u0191\1\2\u250e\u2510\7j\2\2\u250f"+
		"\u250e\3\2\2\2\u2510\u2513\3\2\2\2\u2511\u250f\3\2\2\2\u2511\u2512\3\2"+
		"\2\2\u2512\u2519\3\2\2\2\u2513\u2511\3\2\2\2\u2514\u251a\5\u0322\u0192"+
		"\2\u2515\u2516\7\u0354\2\2\u2516\u2517\5\u0320\u0191\2\u2517\u2518\7\u0355"+
		"\2\2\u2518\u251a\3\2\2\2\u2519\u2514\3\2\2\2\u2519\u2515\3\2\2\2\u251a"+
		"\u2523\3\2\2\2\u251b\u251c\f\4\2\2\u251c\u251d\7\6\2\2\u251d\u2522\5\u0320"+
		"\u0191\5\u251e\u251f\f\3\2\2\u251f\u2520\7x\2\2\u2520\u2522\5\u0320\u0191"+
		"\4\u2521\u251b\3\2\2\2\u2521\u251e\3\2\2\2\u2522\u2525\3\2\2\2\u2523\u2521"+
		"\3\2\2\2\u2523\u2524\3\2\2\2\u2524\u0321\3\2\2\2\u2525\u2523\3\2\2\2\u2526"+
		"\u2527\7A\2\2\u2527\u2528\7\u0354\2\2\u2528\u2529\5\u0316\u018c\2\u2529"+
		"\u252a\7\u0355\2\2\u252a\u2564\3\2\2\2\u252b\u2564\5\u0388\u01c5\2\u252c"+
		"\u252d\5\u0308\u0185\2\u252d\u252e\5\u0424\u0213\2\u252e\u252f\5\u0308"+
		"\u0185\2\u252f\u2564\3\2\2\2\u2530\u2531\5\u0308\u0185\2\u2531\u2532\5"+
		"\u0424\u0213\2\u2532\u2533\tt\2\2\u2533\u2534\7\u0354\2\2\u2534\u2535"+
		"\5\u0316\u018c\2\u2535\u2536\7\u0355\2\2\u2536\u2564\3\2\2\2\u2537\u253b"+
		"\5\u0308\u0185\2\u2538\u253a\7j\2\2\u2539\u2538\3\2\2\2\u253a\u253d\3"+
		"\2\2\2\u253b\u2539\3\2\2\2\u253b\u253c\3\2\2\2\u253c\u253e\3\2\2\2\u253d"+
		"\u253b\3\2\2\2\u253e\u253f\7\16\2\2\u253f\u2540\5\u0308\u0185\2\u2540"+
		"\u2541\7\6\2\2\u2541\u2542\5\u0308\u0185\2\u2542\u2564\3\2\2\2\u2543\u2547"+
		"\5\u0308\u0185\2\u2544\u2546\7j\2\2\u2545\u2544\3\2\2\2\u2546\u2549\3"+
		"\2\2\2\u2547\u2545\3\2\2\2\u2547\u2548\3\2\2\2\u2548\u254a\3\2\2\2\u2549"+
		"\u2547\3\2\2\2\u254a\u254b\7W\2\2\u254b\u254e\7\u0354\2\2\u254c\u254f"+
		"\5\u0316\u018c\2\u254d\u254f\5\u03b8\u01dd\2\u254e\u254c\3\2\2\2\u254e"+
		"\u254d\3\2\2\2\u254f\u2550\3\2\2\2\u2550\u2551\7\u0355\2\2\u2551\u2564"+
		"\3\2\2\2\u2552\u2556\5\u0308\u0185\2\u2553\u2555\7j\2\2\u2554\u2553\3"+
		"\2\2\2\u2555\u2558\3\2\2\2\u2556\u2554\3\2\2\2\u2556\u2557\3\2\2\2\u2557"+
		"\u2559\3\2\2\2\u2558\u2556\3\2\2\2\u2559\u255a\7b\2\2\u255a\u255d\5\u0308"+
		"\u0185\2\u255b\u255c\7>\2\2\u255c\u255e\5\u0308\u0185\2\u255d\u255b\3"+
		"\2\2\2\u255d\u255e\3\2\2\2\u255e\u2564\3\2\2\2\u255f\u2560\5\u0308\u0185"+
		"\2\u2560\u2561\7]\2\2\u2561\u2562\5\u03fc\u01ff\2\u2562\u2564\3\2\2\2"+
		"\u2563\u2526\3\2\2\2\u2563\u252b\3\2\2\2\u2563\u252c\3\2\2\2\u2563\u2530"+
		"\3\2\2\2\u2563\u2537\3\2\2\2\u2563\u2543\3\2\2\2\u2563\u2552\3\2\2\2\u2563"+
		"\u255f\3\2\2\2\u2564\u0323\3\2\2\2\u2565\u256b\5\u0328\u0195\2\u2566\u2567"+
		"\7\u0354\2\2\u2567\u2568\5\u0324\u0193\2\u2568\u2569\7\u0355\2\2\u2569"+
		"\u256b\3\2\2\2\u256a\u2565\3\2\2\2\u256a\u2566\3\2\2\2\u256b\u2576\3\2"+
		"\2\2\u256c\u256e\5\u0328\u0195\2\u256d\u256f\5\u0330\u0199\2\u256e\u256d"+
		"\3\2\2\2\u256e\u256f\3\2\2\2\u256f\u2571\3\2\2\2\u2570\u2572\5\u0326\u0194"+
		"\2\u2571\u2570\3\2\2\2\u2572\u2573\3\2\2\2\u2573\u2571\3\2\2\2\u2573\u2574"+
		"\3\2\2\2\u2574\u2576\3\2\2\2\u2575\u256a\3\2\2\2\u2575\u256c\3\2\2\2\u2576"+
		"\u0325\3\2\2\2\u2577\u2579\7\u00af\2\2\u2578\u257a\7\4\2\2\u2579\u2578"+
		"\3\2\2\2\u2579\u257a\3\2\2\2\u257a\u257e\3\2\2\2\u257b\u257e\7?\2\2\u257c"+
		"\u257e\7[\2\2\u257d\u2577\3\2\2\2\u257d\u257b\3\2\2\2\u257d\u257c\3\2"+
		"\2\2\u257e\u2584\3\2\2\2\u257f\u2585\5\u0328\u0195\2\u2580\u2581\7\u0354"+
		"\2\2\u2581\u2582\5\u0324\u0193\2\u2582\u2583\7\u0355\2\2\u2583\u2585\3"+
		"\2\2\2\u2584\u257f\3\2\2\2\u2584\u2580\3\2\2\2\u2585\u0327\3\2\2\2\u2586"+
		"\u2588\7\u0099\2\2\u2587\u2589\tu\2\2\u2588\u2587\3\2\2\2\u2588\u2589"+
		"\3\2\2\2\u2589\u258b\3\2\2\2\u258a\u258c\5\u032a\u0196\2\u258b\u258a\3"+
		"\2\2\2\u258b\u258c\3\2\2\2\u258c\u258d\3\2\2\2\u258d\u2590\5\u0340\u01a1"+
		"\2\u258e\u258f\7\\\2\2\u258f\u2591\5\u03e0\u01f1\2\u2590\u258e\3\2\2\2"+
		"\u2590\u2591\3\2\2\2\u2591\u2594\3\2\2\2\u2592\u2593\7K\2\2\u2593\u2595"+
		"\5\u034e\u01a8\2\u2594\u2592\3\2\2\2\u2594\u2595\3\2\2\2\u2595\u2598\3"+
		"\2\2\2\u2596\u2597\7\u00bb\2\2\u2597\u2599\5\u0320\u0191\2\u2598\u2596"+
		"\3\2\2\2\u2598\u2599\3\2\2\2\u2599\u25a7\3\2\2\2\u259a\u259b\7P\2\2\u259b"+
		"\u259d\7\22\2\2\u259c\u259e\7\4\2\2\u259d\u259c\3\2\2\2\u259d\u259e\3"+
		"\2\2\2\u259e\u259f\3\2\2\2\u259f\u25a4\5\u0338\u019d\2\u25a0\u25a1\7\u0356"+
		"\2\2\u25a1\u25a3\5\u0338\u019d\2\u25a2\u25a0\3\2\2\2\u25a3\u25a6\3\2\2"+
		"\2\u25a4\u25a2\3\2\2\2\u25a4\u25a5\3\2\2\2\u25a5\u25a8\3\2\2\2\u25a6\u25a4"+
		"\3\2\2\2\u25a7\u259a\3\2\2\2\u25a7\u25a8\3\2\2\2\u25a8\u25ab\3\2\2\2\u25a9"+
		"\u25aa\7Q\2\2\u25aa\u25ac\5\u0320\u0191\2\u25ab\u25a9\3\2\2\2\u25ab\u25ac"+
		"\3\2\2\2\u25ac\u0329\3\2\2\2\u25ad\u25b0\7\u00a9\2\2\u25ae\u25b1\5\u032c"+
		"\u0197\2\u25af\u25b1\5\u032e\u0198\2\u25b0\u25ae\3\2\2\2\u25b0\u25af\3"+
		"\2\2\2\u25b1\u25b4\3\2\2\2\u25b2\u25b3\7\u00bd\2\2\u25b3\u25b5\7\u0244"+
		"\2\2\u25b4\u25b2\3\2\2\2\u25b4\u25b5\3\2\2\2\u25b5\u032b\3\2\2\2\u25b6"+
		"\u25b7\tv\2\2\u25b7\u25be\7|\2\2\u25b8\u25b9\7\u0354\2\2\u25b9\u25ba\5"+
		"\u0308\u0185\2\u25ba\u25bb\7\u0355\2\2\u25bb\u25bc\7|\2\2\u25bc\u25be"+
		"\3\2\2\2\u25bd\u25b6\3\2\2\2\u25bd\u25b8\3\2\2\2\u25be\u032d\3\2\2\2\u25bf"+
		"\u25c5\7\u033c\2\2\u25c0\u25c1\7\u0354\2\2\u25c1\u25c2\5\u0308\u0185\2"+
		"\u25c2\u25c3\7\u0355\2\2\u25c3\u25c5\3\2\2\2\u25c4\u25bf\3\2\2\2\u25c4"+
		"\u25c0\3\2\2\2\u25c5\u032f\3\2\2\2\u25c6\u25c7\7y\2\2\u25c7\u25c8\7\22"+
		"\2\2\u25c8\u25cd\5\u0336\u019c\2\u25c9\u25ca\7\u0356\2\2\u25ca\u25cc\5"+
		"\u0336\u019c\2\u25cb\u25c9\3\2\2\2\u25cc\u25cf\3\2\2\2\u25cd\u25cb\3\2"+
		"\2\2\u25cd\u25ce\3\2\2\2\u25ce\u25db\3\2\2\2\u25cf\u25cd\3\2\2\2\u25d0"+
		"\u25d1\7\u01bf\2\2\u25d1\u25d2\5\u0308\u0185\2\u25d2\u25d9\tw\2\2\u25d3"+
		"\u25d4\7D\2\2\u25d4\u25d5\tx\2\2\u25d5\u25d6\5\u0308\u0185\2\u25d6\u25d7"+
		"\tw\2\2\u25d7\u25d8\7\u01c2\2\2\u25d8\u25da\3\2\2\2\u25d9\u25d3\3\2\2"+
		"\2\u25d9\u25da\3\2\2\2\u25da\u25dc\3\2\2\2\u25db\u25d0\3\2\2\2\u25db\u25dc"+
		"\3\2\2\2\u25dc\u0331\3\2\2\2\u25dd\u25de\7G\2\2\u25de\u263a\7\20\2\2\u25df"+
		"\u25e0\7G\2\2\u25e0\u25e8\7\u0266\2\2\u25e1\u25e5\7\u0086\2\2\u25e2\u25e3"+
		"\7\u0354\2\2\u25e3\u25e4\7\u033e\2\2\u25e4\u25e6\7\u0355\2\2\u25e5\u25e2"+
		"\3\2\2\2\u25e5\u25e6\3\2\2\2\u25e6\u25e9\3\2\2\2\u25e7\u25e9\7\u00dc\2"+
		"\2\u25e8\u25e1\3\2\2\2\u25e8\u25e7\3\2\2\2\u25e9\u25ed\3\2\2\2\u25ea\u25ec"+
		"\5\u0334\u019b\2\u25eb\u25ea\3\2\2\2\u25ec\u25ef\3\2\2\2\u25ed\u25eb\3"+
		"\2\2\2\u25ed\u25ee\3\2\2\2\u25ee\u25fa\3\2\2\2\u25ef\u25ed\3\2\2\2\u25f0"+
		"\u25f8\7\u0356\2\2\u25f1\u25f9\7\u0267\2\2\u25f2\u25f6\7\u0269\2\2\u25f3"+
		"\u25f4\7\u0354\2\2\u25f4\u25f5\7\u033e\2\2\u25f5\u25f7\7\u0355\2\2\u25f6"+
		"\u25f3\3\2\2\2\u25f6\u25f7\3\2\2\2\u25f7\u25f9\3\2\2\2\u25f8\u25f1\3\2"+
		"\2\2\u25f8\u25f2\3\2\2\2\u25f9\u25fb\3\2\2\2\u25fa\u25f0\3\2\2\2\u25fa"+
		"\u25fb\3\2\2\2\u25fb\u2601\3\2\2\2\u25fc\u25fd\7\u0356\2\2\u25fd\u25ff"+
		"\7\u012f\2\2\u25fe\u2600\ty\2\2\u25ff\u25fe\3\2\2\2\u25ff\u2600\3\2\2"+
		"\2\u2600\u2602\3\2\2\2\u2601\u25fc\3\2\2\2\u2601\u2602\3\2\2\2\u2602\u263a"+
		"\3\2\2\2\u2603\u2604\7G\2\2\u2604\u2605\7\u0266\2\2\u2605\u2609\7\u013d"+
		"\2\2\u2606\u2608\5\u0334\u019b\2\u2607\u2606\3\2\2\2\u2608\u260b\3\2\2"+
		"\2\u2609\u2607\3\2\2\2\u2609\u260a\3\2\2\2\u260a\u260e\3\2\2\2\u260b\u2609"+
		"\3\2\2\2\u260c\u260d\7\u0356\2\2\u260d\u260f\7\u0267\2\2\u260e\u260c\3"+
		"\2\2\2\u260e\u260f\3\2\2\2\u260f\u263a\3\2\2\2\u2610\u2611\7G\2\2\u2611"+
		"\u2612\7\u0266\2\2\u2612\u2616\7\u01cf\2\2\u2613\u2614\7\u0354\2\2\u2614"+
		"\u2615\7\u033e\2\2\u2615\u2617\7\u0355\2\2\u2616\u2613\3\2\2\2\u2616\u2617"+
		"\3\2\2\2\u2617\u261b\3\2\2\2\u2618\u261a\5\u0334\u019b\2\u2619\u2618\3"+
		"\2\2\2\u261a\u261d\3\2\2\2\u261b\u2619\3\2\2\2\u261b\u261c\3\2\2\2\u261c"+
		"\u2623\3\2\2\2\u261d\u261b\3\2\2\2\u261e\u261f\7\u0356\2\2\u261f\u2621"+
		"\7\u012f\2\2\u2620\u2622\ty\2\2\u2621\u2620\3\2\2\2\u2621\u2622\3\2\2"+
		"\2\u2622\u2624\3\2\2\2\u2623\u261e\3\2\2\2\u2623\u2624\3\2\2\2\u2624\u263a"+
		"\3\2\2\2\u2625\u2626\7G\2\2\u2626\u2627\7\u0172\2\2\u2627\u262f\tz\2\2"+
		"\u2628\u2629\7\u0356\2\2\u2629\u262d\7\u0207\2\2\u262a\u262b\7\u0354\2"+
		"\2\u262b\u262c\7\u033e\2\2\u262c\u262e\7\u0355\2\2\u262d\u262a\3\2\2\2"+
		"\u262d\u262e\3\2\2\2\u262e\u2630\3\2\2\2\u262f\u2628\3\2\2\2\u262f\u2630"+
		"\3\2\2\2\u2630\u2633\3\2\2\2\u2631\u2632\7\u0356\2\2\u2632\u2634\7\u0168"+
		"\2\2\u2633\u2631\3\2\2\2\u2633\u2634\3\2\2\2\u2634\u2637\3\2\2\2\u2635"+
		"\u2636\7\u0356\2\2\u2636\u2638\7\u0263\2\2\u2637\u2635\3\2\2\2\u2637\u2638"+
		"\3\2\2\2\u2638\u263a\3\2\2\2\u2639\u25dd\3\2\2\2\u2639\u25df\3\2\2\2\u2639"+
		"\u2603\3\2\2\2\u2639\u2610\3\2\2\2\u2639\u2625\3\2\2\2\u263a\u0333\3\2"+
		"\2\2\u263b\u2644\7\u0356\2\2\u263c\u2645\7\u00eb\2\2\u263d\u2645\7\u0251"+
		"\2\2\u263e\u2642\7\u0207\2\2\u263f\u2640\7\u0354\2\2\u2640\u2641\7\u033e"+
		"\2\2\u2641\u2643\7\u0355\2\2\u2642\u263f\3\2\2\2\u2642\u2643\3\2\2\2\u2643"+
		"\u2645\3\2\2\2\u2644\u263c\3\2\2\2\u2644\u263d\3\2\2\2\u2644\u263e\3\2"+
		"\2\2\u2645\u0335\3\2\2\2\u2646\u2649\5\u0308\u0185\2\u2647\u264a\7\t\2"+
		"\2\u2648\u264a\7\62\2\2\u2649\u2647\3\2\2\2\u2649\u2648\3\2\2\2\u2649"+
		"\u264a\3\2\2\2\u264a\u0337\3\2\2\2\u264b\u264c\5\u0308\u0185\2\u264c\u0339"+
		"\3\2\2\2\u264d\u264e\7w\2\2\u264e\u264f\7\u0354\2\2\u264f\u2654\5\u033c"+
		"\u019f\2\u2650\u2651\7\u0356\2\2\u2651\u2653\5\u033c\u019f\2\u2652\u2650"+
		"\3\2\2\2\u2653\u2656\3\2\2\2\u2654\u2652\3\2\2\2\u2654\u2655\3\2\2\2\u2655"+
		"\u2657\3\2\2\2\u2656\u2654\3\2\2\2\u2657\u2658\7\u0355\2\2\u2658\u033b"+
		"\3\2\2\2\u2659\u265a\7\u0142\2\2\u265a\u2687\7\u033c\2\2\u265b\u265c\t"+
		"{\2\2\u265c\u2687\7P\2\2\u265d\u265e\t|\2\2\u265e\u2687\7\u00af\2\2\u265f"+
		"\u2660\t}\2\2\u2660\u2687\7^\2\2\u2661\u2662\7\u013b\2\2\u2662\u2687\7"+
		"\u0260\2\2\u2663\u2664\7\u014d\2\2\u2664\u2687\7y\2\2\u2665\u2687\7\u0164"+
		"\2\2\u2666\u2667\7\u0174\2\2\u2667\u2687\7~\2\2\u2668\u2669\7\u0175\2"+
		"\2\u2669\u2687\7~\2\2\u266a\u266b\7\u0195\2\2\u266b\u2687\7\u033c\2\2"+
		"\u266c\u266d\7\u0196\2\2\u266d\u2687\7\u033c\2\2\u266e\u266f\7\u01c5\2"+
		"\2\u266f\u2670\7G\2\2\u2670\u2671\7\u0354\2\2\u2671\u2676\5\u033e\u01a0"+
		"\2\u2672\u2673\7\u0356\2\2\u2673\u2675\5\u033e\u01a0\2\u2674\u2672\3\2"+
		"\2\2\u2675\u2678\3\2\2\2\u2676\u2674\3\2\2\2\u2676\u2677\3\2\2\2\u2677"+
		"\u2679\3\2\2\2\u2678\u2676\3\2\2\2\u2679\u267a\7\u0355\2\2\u267a\u2687"+
		"\3\2\2\2\u267b\u267c\7\u01c5\2\2\u267c\u267d\7G\2\2\u267d\u2687\7\u0255"+
		"\2\2\u267e\u267f\7\u01cb\2\2\u267f\u2687\tO\2\2\u2680\u2687\7\u01f3\2"+
		"\2\u2681\u2682\7\u0206\2\2\u2682\u2687\7~\2\2\u2683\u2684\7\u00b4\2\2"+
		"\u2684\u2685\7~\2\2\u2685\u2687\7\u033e\2\2\u2686\u2659\3\2\2\2\u2686"+
		"\u265b\3\2\2\2\u2686\u265d\3\2\2\2\u2686\u265f\3\2\2\2\u2686\u2661\3\2"+
		"\2\2\u2686\u2663\3\2\2\2\u2686\u2665\3\2\2\2\u2686\u2666\3\2\2\2\u2686"+
		"\u2668\3\2\2\2\u2686\u266a\3\2\2\2\u2686\u266c\3\2\2\2\u2686\u266e\3\2"+
		"\2\2\u2686\u267b\3\2\2\2\u2686\u267e\3\2\2\2\u2686\u2680\3\2\2\2\u2686"+
		"\u2681\3\2\2\2\u2686\u2683\3\2\2\2\u2687\u033d\3\2\2\2\u2688\u268f\7\u033b"+
		"\2\2\u2689\u2690\7\u0255\2\2\u268a\u268d\7\u0342\2\2\u268b\u268e\5\u0418"+
		"\u020d\2\u268c\u268e\7k\2\2\u268d\u268b\3\2\2\2\u268d\u268c\3\2\2\2\u268e"+
		"\u2690\3\2\2\2\u268f\u2689\3\2\2\2\u268f\u268a\3\2\2\2\u2690\u033f\3\2"+
		"\2\2\u2691\u2696\5\u034c\u01a7\2\u2692\u2693\7\u0356\2\2\u2693\u2695\5"+
		"\u034c\u01a7\2\u2694\u2692\3\2\2\2\u2695\u2698\3\2\2\2\u2696\u2694\3\2"+
		"\2\2\u2696\u2697\3\2\2\2\u2697\u0341\3\2\2\2\u2698\u2696\3\2\2\2\u2699"+
		"\u269a\7\u0354\2\2\u269a\u269f\5\u02a4\u0153\2\u269b\u269c\7\u0356\2\2"+
		"\u269c\u269e\5\u02a4\u0153\2\u269d\u269b\3\2\2\2\u269e\u26a1\3\2\2\2\u269f"+
		"\u269d\3\2\2\2\u269f\u26a0\3\2\2\2\u26a0\u26a2\3\2\2\2\u26a1\u269f\3\2"+
		"\2\2\u26a2\u26a3\7\u0355\2\2\u26a3\u0343\3\2\2\2\u26a4\u26a5\5\u03e0\u01f1"+
		"\2\u26a5\u26a6\7\u034f\2\2\u26a6\u26a8\3\2\2\2\u26a7\u26a4\3\2\2\2\u26a7"+
		"\u26a8\3\2\2\2\u26a8\u26a9\3\2\2\2\u26a9\u26ae\7\u0359\2\2\u26aa\u26ab"+
		"\t~\2\2\u26ab\u26ac\7\u034f\2\2\u26ac\u26ae\7\u0359\2\2\u26ad\u26a7\3"+
		"\2\2\2\u26ad\u26aa\3\2\2\2\u26ae\u0345\3\2\2\2\u26af\u26b6\5\u03ec\u01f7"+
		"\2\u26b0\u26b1\7\u0353\2\2\u26b1\u26b6\7S\2\2\u26b2\u26b3\7\u0353\2\2"+
		"\u26b3\u26b6\7\u020b\2\2\u26b4\u26b6\7k\2\2\u26b5\u26af\3\2\2\2\u26b5"+
		"\u26b0\3\2\2\2\u26b5\u26b2\3\2\2\2\u26b5\u26b4\3\2\2\2\u26b6\u26b8\3\2"+
		"\2\2\u26b7\u26b9\5\u03a4\u01d3\2\u26b8\u26b7\3\2\2\2\u26b8\u26b9\3\2\2"+
		"\2\u26b9\u0347\3\2\2\2\u26ba\u26bb\5\u041e\u0210\2\u26bb\u26bc\7\u034f"+
		"\2\2\u26bc\u26bd\5\u041e\u0210\2\u26bd\u26bf\5\u0342\u01a2\2\u26be\u26c0"+
		"\5\u03a4\u01d3\2\u26bf\u26be\3\2\2\2\u26bf\u26c0\3\2\2\2\u26c0\u26cc\3"+
		"\2\2\2\u26c1\u26c2\5\u041e\u0210\2\u26c2\u26c3\7\u0358\2\2\u26c3\u26c4"+
		"\7\u0358\2\2\u26c4\u26c6\5\u041e\u0210\2\u26c5\u26c7\5\u0342\u01a2\2\u26c6"+
		"\u26c5\3\2\2\2\u26c6\u26c7\3\2\2\2\u26c7\u26c9\3\2\2\2\u26c8\u26ca\5\u03a4"+
		"\u01d3\2\u26c9\u26c8\3\2\2\2\u26c9\u26ca\3\2\2\2\u26ca\u26cc\3\2\2\2\u26cb"+
		"\u26ba\3\2\2\2\u26cb\u26c1\3\2\2\2\u26cc\u0349\3\2\2\2\u26cd\u26ce\5\u03b4"+
		"\u01db\2\u26ce\u26cf\7\u0342\2\2\u26cf\u26d0\5\u0308\u0185\2\u26d0\u26d6"+
		"\3\2\2\2\u26d1\u26d3\5\u0308\u0185\2\u26d2\u26d4\5\u03a4\u01d3\2\u26d3"+
		"\u26d2\3\2\2\2\u26d3\u26d4\3\2\2\2\u26d4\u26d6\3\2\2\2\u26d5\u26cd\3\2"+
		"\2\2\u26d5\u26d1\3\2\2\2\u26d6\u034b\3\2\2\2\u26d7\u26e2\5\u0344\u01a3"+
		"\2\u26d8\u26e2\5\u0346\u01a4\2\u26d9\u26e2\5\u0348\u01a5\2\u26da\u26dd"+
		"\7\u033b\2\2\u26db\u26de\5\u0426\u0214\2\u26dc\u26de\7\u0342\2\2\u26dd"+
		"\u26db\3\2\2\2\u26dd\u26dc\3\2\2\2\u26de\u26df\3\2\2\2\u26df\u26e2\5\u0308"+
		"\u0185\2\u26e0\u26e2\5\u034a\u01a6\2\u26e1\u26d7\3\2\2\2\u26e1\u26d8\3"+
		"\2\2\2\u26e1\u26d9\3\2\2\2\u26e1\u26da\3\2\2\2\u26e1\u26e0\3\2\2\2\u26e2"+
		"\u034d\3\2\2\2\u26e3\u26e8\5\u0350\u01a9\2\u26e4\u26e5\7\u0356\2\2\u26e5"+
		"\u26e7\5\u0350\u01a9\2\u26e6\u26e4\3\2\2\2\u26e7\u26ea\3\2\2\2\u26e8\u26e6"+
		"\3\2\2\2\u26e8\u26e9\3\2\2\2\u26e9\u034f\3\2\2\2\u26ea\u26e8\3\2\2\2\u26eb"+
		"\u26f1\5\u0352\u01aa\2\u26ec\u26ed\7\u0354\2\2\u26ed\u26ee\5\u0350\u01a9"+
		"\2\u26ee\u26ef\7\u0355\2\2\u26ef\u26f1\3\2\2\2\u26f0\u26eb\3\2\2\2\u26f0"+
		"\u26ec\3\2\2\2\u26f1\u0351\3\2\2\2\u26f2\u26f6\5\u0354\u01ab\2\u26f3\u26f5"+
		"\5\u0368\u01b5\2\u26f4\u26f3\3\2\2\2\u26f5\u26f8\3\2\2\2\u26f6\u26f4\3"+
		"\2\2\2\u26f6\u26f7\3\2\2\2\u26f7\u2703\3\2\2\2\u26f8\u26f6\3\2\2\2\u26f9"+
		"\u26fa\7\u0354\2\2\u26fa\u26fb\5\u0352\u01aa\2\u26fb\u26ff\7\u0355\2\2"+
		"\u26fc\u26fe\5\u0368\u01b5\2\u26fd\u26fc\3\2\2\2\u26fe\u2701\3\2\2\2\u26ff"+
		"\u26fd\3\2\2\2\u26ff\u2700\3\2\2\2\u2700\u2703\3\2\2\2\u2701\u26ff\3\2"+
		"\2\2\u2702\u26f2\3\2\2\2\u2702\u26f9\3\2\2\2\u2703\u0353\3\2\2\2\u2704"+
		"\u2706\5\u037a\u01be\2\u2705\u2707\5\u03a6\u01d4\2\u2706\u2705\3\2\2\2"+
		"\u2706\u2707\3\2\2\2\u2707\u2741\3\2\2\2\u2708\u270a\5\u03de\u01f0\2\u2709"+
		"\u270b\5\u03a6\u01d4\2\u270a\u2709\3\2\2\2\u270a\u270b\3\2\2\2\u270b\u2741"+
		"\3\2\2\2\u270c\u270e\5\u037c\u01bf\2\u270d\u270f\5\u03a6\u01d4\2\u270e"+
		"\u270d\3\2\2\2\u270e\u270f\3\2\2\2\u270f\u2741\3\2\2\2\u2710\u2711\7\u0354"+
		"\2\2\u2711\u2712\5\u0380\u01c1\2\u2712\u2717\7\u0355\2\2\u2713\u2715\5"+
		"\u03a6\u01d4\2\u2714\u2716\5\u03b2\u01da\2\u2715\u2714\3\2\2\2\u2715\u2716"+
		"\3\2\2\2\u2716\u2718\3\2\2\2\u2717\u2713\3\2\2\2\u2717\u2718\3\2\2\2\u2718"+
		"\u2741\3\2\2\2\u2719\u271b\5\u0362\u01b2\2\u271a\u271c\5\u03a6\u01d4\2"+
		"\u271b\u271a\3\2\2\2\u271b\u271c\3\2\2\2\u271c\u2741\3\2\2\2\u271d\u2722"+
		"\5\u0382\u01c2\2\u271e\u2720\5\u03a6\u01d4\2\u271f\u2721\5\u03b2\u01da"+
		"\2\u2720\u271f\3\2\2\2\u2720\u2721\3\2\2\2\u2721\u2723\3\2\2\2\u2722\u271e"+
		"\3\2\2\2\u2722\u2723\3\2\2\2\u2723\u2741\3\2\2\2\u2724\u2726\7\u033b\2"+
		"\2\u2725\u2727\5\u03a6\u01d4\2\u2726\u2725\3\2\2\2\u2726\u2727\3\2\2\2"+
		"\u2727\u2741\3\2\2\2\u2728\u272d\5\u039e\u01d0\2\u2729\u272b\5\u03a6\u01d4"+
		"\2\u272a\u272c\5\u03b2\u01da\2\u272b\u272a\3\2\2\2\u272b\u272c\3\2\2\2"+
		"\u272c\u272e\3\2\2\2\u272d\u2729\3\2\2\2\u272d\u272e\3\2\2\2\u272e\u2741"+
		"\3\2\2\2\u272f\u2730\7\u033b\2\2\u2730\u2731\7\u034f\2\2\u2731\u2736\5"+
		"\u0382\u01c2\2\u2732\u2734\5\u03a6\u01d4\2\u2733\u2735\5\u03b2\u01da\2"+
		"\u2734\u2733\3\2\2\2\u2734\u2735\3\2\2\2\u2735\u2737\3\2\2\2\u2736\u2732"+
		"\3\2\2\2\u2736\u2737\3\2\2\2\u2737\u2741\3\2\2\2\u2738\u2741\5\u0356\u01ac"+
		"\2\u2739\u2741\5\u0358\u01ad\2\u273a\u273b\7\u0358\2\2\u273b\u273c\7\u0358"+
		"\2\2\u273c\u273e\5\u0382\u01c2\2\u273d\u273f\5\u03a6\u01d4\2\u273e\u273d"+
		"\3\2\2\2\u273e\u273f\3\2\2\2\u273f\u2741\3\2\2\2\u2740\u2704\3\2\2\2\u2740"+
		"\u2708\3\2\2\2\u2740\u270c\3\2\2\2\u2740\u2710\3\2\2\2\u2740\u2719\3\2"+
		"\2\2\u2740\u271d\3\2\2\2\u2740\u2724\3\2\2\2\u2740\u2728\3\2\2\2\u2740"+
		"\u272f\3\2\2\2\u2740\u2738\3\2\2\2\u2740\u2739\3\2\2\2\u2740\u273a\3\2"+
		"\2\2\u2741\u0355\3\2\2\2\u2742\u2743\7v\2\2\u2743\u2744\7\u0354\2\2\u2744"+
		"\u2745\5\u0308\u0185\2\u2745\u2746\7\u0356\2\2\u2746\u2749\5\u0308\u0185"+
		"\2\u2747\u2748\7\u0356\2\2\u2748\u274a\5\u0308\u0185\2\u2749\u2747\3\2"+
		"\2\2\u2749\u274a\3\2\2\2\u274a\u274b\3\2\2\2\u274b\u2751\7\u0355\2\2\u274c"+
		"\u274d\7\u00bd\2\2\u274d\u274e\7\u0354\2\2\u274e\u274f\5\u035e\u01b0\2"+
		"\u274f\u2750\7\u0355\2\2\u2750\u2752\3\2\2\2\u2751\u274c\3\2\2\2\u2751"+
		"\u2752\3\2\2\2\u2752\u2754\3\2\2\2\u2753\u2755\5\u03a6\u01d4\2\u2754\u2753"+
		"\3\2\2\2\u2754\u2755\3\2\2\2\u2755\u0357\3\2\2\2\u2756\u2757\7u\2\2\u2757"+
		"\u2758\7\u0354\2\2\u2758\u275b\5\u0308\u0185\2\u2759\u275a\7\u0356\2\2"+
		"\u275a\u275c\5\u0308\u0185\2\u275b\u2759\3\2\2\2\u275b\u275c\3\2\2\2\u275c"+
		"\u275d\3\2\2\2\u275d\u2763\7\u0355\2\2\u275e\u275f\7\u00bd\2\2\u275f\u2760"+
		"\7\u0354\2\2\u2760\u2761\5\u035a\u01ae\2\u2761\u2762\7\u0355\2\2\u2762"+
		"\u2764\3\2\2\2\u2763\u275e\3\2\2\2\u2763\u2764\3\2\2\2\u2764\u2766\3\2"+
		"\2\2\u2765\u2767\5\u03a6\u01d4\2\u2766\u2765\3\2\2\2\u2766\u2767\3\2\2"+
		"\2\u2767\u0359\3\2\2\2\u2768\u276d\5\u035c\u01af\2\u2769\u276a\7\u0356"+
		"\2\2\u276a\u276c\5\u035c\u01af\2\u276b\u2769\3\2\2\2\u276c\u276f\3\2\2"+
		"\2\u276d\u276b\3\2\2\2\u276d\u276e\3\2\2\2\u276e\u035b\3\2\2\2\u276f\u276d"+
		"\3\2\2\2\u2770\u2773\5\u0360\u01b1\2\u2771\u2772\7\b\2\2\u2772\u2774\7"+
		"\u0172\2\2\u2773\u2771\3\2\2\2\u2773\u2774\3\2\2\2\u2774\u035d\3\2\2\2"+
		"\u2775\u277a\5\u0360\u01b1\2\u2776\u2777\7\u0356\2\2\u2777\u2779\5\u0360"+
		"\u01b1\2\u2778\u2776\3\2\2\2\u2779\u277c\3\2\2\2\u277a\u2778\3\2\2\2\u277a"+
		"\u277b\3\2\2\2\u277b\u035f\3\2\2\2\u277c\u277a\3\2\2\2\u277d\u277e\5\u041e"+
		"\u0210\2\u277e\u2780\5\u0414\u020b\2\u277f\u2781\7\u033e\2\2\u2780\u277f"+
		"\3\2\2\2\u2780\u2781\3\2\2\2\u2781\u0361\3\2\2\2\u2782\u2785\5\u0364\u01b3"+
		"\2\u2783\u2785\5\u0366\u01b4\2\u2784\u2782\3\2\2\2\u2784\u2783\3\2\2\2"+
		"\u2785\u0363\3\2\2\2\u2786\u2787\7\u0286\2\2\u2787\u2788\7\u0354\2\2\u2788"+
		"\u2789\7\u0287\2\2\u2789\u278a\5\u03e0\u01f1\2\u278a\u278b\7\u0356\2\2"+
		"\u278b\u278c\t\177\2\2\u278c\u278d\7\u0355\2\2\u278d\u0365\3\2\2\2\u278e"+
		"\u278f\7\u0286\2\2\u278f\u2790\7\u0354\2\2\u2790\u2791\7\u0372\2\2\u2791"+
		"\u2792\5\u03e0\u01f1\2\u2792\u2793\7\u0356\2\2\u2793\u2794\5\u0378\u01bd"+
		"\2\u2794\u2795\7\u0356\2\2\u2795\u2796\5\u0340\u01a1\2\u2796\u2797\7\u0355"+
		"\2\2\u2797\u0367\3\2\2\2\u2798\u279e\5\u036a\u01b6\2\u2799\u279e\5\u036c"+
		"\u01b7\2\u279a\u279e\5\u036e\u01b8\2\u279b\u279e\5\u0370\u01b9\2\u279c"+
		"\u279e\5\u0372\u01ba\2\u279d\u2798\3\2\2\2\u279d\u2799\3\2\2\2\u279d\u279a"+
		"\3\2\2\2\u279d\u279b\3\2\2\2\u279d\u279c\3\2\2\2\u279e\u0369\3\2\2\2\u279f"+
		"\u27a1\7Y\2\2\u27a0\u279f\3\2\2\2\u27a0\u27a1\3\2\2\2\u27a1\u27a7\3\2"+
		"\2\2\u27a2\u27a4\t\u0080\2\2\u27a3\u27a5\7z\2\2\u27a4\u27a3\3\2\2\2\u27a4"+
		"\u27a5\3\2\2\2\u27a5\u27a7\3\2\2\2\u27a6\u27a0\3\2\2\2\u27a6\u27a2\3\2"+
		"\2\2\u27a7\u27a9\3\2\2\2\u27a8\u27aa\t\u0081\2\2\u27a9\u27a8\3\2\2\2\u27a9"+
		"\u27aa\3\2\2\2\u27aa\u27ab\3\2\2\2\u27ab\u27ac\7^\2\2\u27ac\u27ad\5\u0350"+
		"\u01a9\2\u27ad\u27ae\7p\2\2\u27ae\u27af\5\u0320\u0191\2\u27af\u036b\3"+
		"\2\2\2\u27b0\u27b1\7$\2\2\u27b1\u27b2\7^\2\2\u27b2\u27b3\5\u0350\u01a9"+
		"\2\u27b3\u036d\3\2\2\2\u27b4\u27b5\t\u0082\2\2\u27b5\u27b6\7\u00d7\2\2"+
		"\u27b6\u27b7\5\u0350\u01a9\2\u27b7\u036f\3\2\2\2\u27b8\u27b9\7}\2\2\u27b9"+
		"\u27ba\5\u0374\u01bb\2\u27ba\u27bb\5\u03a6\u01d4\2\u27bb\u0371\3\2\2\2"+
		"\u27bc\u27bd\7\u00b1\2\2\u27bd\u27be\5\u0376\u01bc\2\u27be\u27bf\5\u03a6"+
		"\u01d4\2\u27bf\u0373\3\2\2\2\u27c0\u27c1\7\u0354\2\2\u27c1\u27c2\5\u03bc"+
		"\u01df\2\u27c2\u27c3\7G\2\2\u27c3\u27c4\5\u03ec\u01f7\2\u27c4\u27c5\7"+
		"W\2\2\u27c5\u27c6\5\u03b2\u01da\2\u27c6\u27c7\7\u0355\2\2\u27c7\u0375"+
		"\3\2\2\2\u27c8\u27c9\7\u0354\2\2\u27c9\u27ca\5\u0308\u0185\2\u27ca\u27cb"+
		"\7G\2\2\u27cb\u27cc\5\u03ec\u01f7\2\u27cc\u27cd\7W\2\2\u27cd\u27ce\7\u0354"+
		"\2\2\u27ce\u27cf\5\u0378\u01bd\2\u27cf\u27d0\7\u0355\2\2\u27d0\u27d1\7"+
		"\u0355\2\2\u27d1\u0377\3\2\2\2\u27d2\u27d7\5\u03ec\u01f7\2\u27d3\u27d4"+
		"\7\u0356\2\2\u27d4\u27d6\5\u03ec\u01f7\2\u27d5\u27d3\3\2\2\2\u27d6\u27d9"+
		"\3\2\2\2\u27d7\u27d5\3\2\2\2\u27d7\u27d8\3\2\2\2\u27d8\u0379\3\2\2\2\u27d9"+
		"\u27d7\3\2\2\2\u27da\u27dc\5\u03e0\u01f1\2\u27db\u27dd\5\u03aa\u01d6\2"+
		"\u27dc\u27db\3\2\2\2\u27dc\u27dd\3\2\2\2\u27dd\u037b\3\2\2\2\u27de\u27df"+
		"\7t\2\2\u27df\u27e0\7\u0354\2\2\u27e0\u27e1\7\u033e\2\2\u27e1\u27e2\7"+
		"\u0356\2\2\u27e2\u27e3\7\u033e\2\2\u27e3\u27e4\7\u0356\2\2\u27e4\u27e5"+
		"\7\u033e\2\2\u27e5\u27f9\7\u0355\2\2\u27e6\u27e7\7t\2\2\u27e7\u27e8\7"+
		"\u0354\2\2\u27e8\u27e9\7\21\2\2\u27e9\u27ea\7\u033e\2\2\u27ea\u27f4\7"+
		"\u0356\2\2\u27eb\u27f0\5\u037e\u01c0\2\u27ec\u27ed\7\u0356\2\2\u27ed\u27ef"+
		"\5\u037e\u01c0\2\u27ee\u27ec\3\2\2\2\u27ef\u27f2\3\2\2\2\u27f0\u27ee\3"+
		"\2\2\2\u27f0\u27f1\3\2\2\2\u27f1\u27f5\3\2\2\2\u27f2\u27f0\3\2\2\2\u27f3"+
		"\u27f5\5\u041e\u0210\2\u27f4\u27eb\3\2\2\2\u27f4\u27f3\3\2\2\2\u27f5\u27f6"+
		"\3\2\2\2\u27f6\u27f7\7\u0355\2\2\u27f7\u27f9\3\2\2\2\u27f8\u27de\3\2\2"+
		"\2\u27f8\u27e6\3\2\2\2\u27f9\u037d\3\2\2\2\u27fa\u27fb\5\u041e\u0210\2"+
		"\u27fb\u27fc\7\u0342\2\2\u27fc\u27fd\t\30\2\2\u27fd\u037f\3\2\2\2\u27fe"+
		"\u2809\5\u0316\u018c\2\u27ff\u2800\7\u0354\2\2\u2800\u2801\5\u0316\u018c"+
		"\2\u2801\u2802\7\u0355\2\2\u2802\u2809\3\2\2\2\u2803\u2809\5\u03b6\u01dc"+
		"\2\u2804\u2805\7\u0354\2\2\u2805\u2806\5\u03b6\u01dc\2\u2806\u2807\7\u0355"+
		"\2\2\u2807\u2809\3\2\2\2\u2808\u27fe\3\2\2\2\u2808\u27ff\3\2\2\2\u2808"+
		"\u2803\3\2\2\2\u2808\u2804\3\2\2\2\u2809\u0381\3\2\2\2\u280a\u2818\5\u03ba"+
		"\u01de\2\u280b\u2818\5\u03bc\u01df\2\u280c\u2818\5\u03be\u01e0\2\u280d"+
		"\u2818\5\u038a\u01c6\2\u280e\u280f\5\u0400\u0201\2\u280f\u2811\7\u0354"+
		"\2\2\u2810\u2812\5\u03b8\u01dd\2\u2811\u2810\3\2\2\2\u2811\u2812\3\2\2"+
		"\2\u2812\u2813\3\2\2\2\u2813\u2814\7\u0355\2\2\u2814\u2818\3\2\2\2\u2815"+
		"\u2818\5\u0386\u01c4\2\u2816\u2818\5\u0384\u01c3\2\u2817\u280a\3\2\2\2"+
		"\u2817\u280b\3\2\2\2\u2817\u280c\3\2\2\2\u2817\u280d\3\2\2\2\u2817\u280e"+
		"\3\2\2\2\u2817\u2815\3\2\2\2\u2817\u2816\3\2\2\2\u2818\u0383\3\2\2\2\u2819"+
		"\u281a\5\u041e\u0210\2\u281a\u281b\7\u034f\2\2\u281b\u281d\3\2\2\2\u281c"+
		"\u2819\3\2\2\2\u281c\u281d\3\2\2\2\u281d\u281e\3\2\2\2\u281e\u281f\7\u00c0"+
		"\2\2\u281f\u2820\7\u034f\2\2\u2820\u2821\5\u041e\u0210\2\u2821\u2822\7"+
		"\u0354\2\2\u2822\u2823\5\u0308\u0185\2\u2823\u2824\7\u0355\2\2\u2824\u0385"+
		"\3\2\2\2\u2825\u2826\t\u0083\2\2\u2826\u2827\7\u0354\2\2\u2827\u2828\5"+
		"\u03e0\u01f1\2\u2828\u2836\7\u0356\2\2\u2829\u2837\5\u03ec\u01f7\2\u282a"+
		"\u282b\7\u0354\2\2\u282b\u2830\5\u03ec\u01f7\2\u282c\u282d\7\u0356\2\2"+
		"\u282d\u282f\5\u03ec\u01f7\2\u282e\u282c\3\2\2\2\u282f\u2832\3\2\2\2\u2830"+
		"\u282e\3\2\2\2\u2830\u2831\3\2\2\2\u2831\u2833\3\2\2\2\u2832\u2830\3\2"+
		"\2\2\u2833\u2834\7\u0355\2\2\u2834\u2837\3\2\2\2\u2835\u2837\7\u0359\2"+
		"\2\u2836\u2829\3\2\2\2\u2836\u282a\3\2\2\2\u2836\u2835\3\2\2\2\u2837\u2838"+
		"\3\2\2\2\u2838\u2839\7\u0356\2\2\u2839\u283d\5\u0308\u0185\2\u283a\u283b"+
		"\7\u0356\2\2\u283b\u283c\7\u02bd\2\2\u283c\u283e\5\u0308\u0185\2\u283d"+
		"\u283a\3\2\2\2\u283d\u283e\3\2\2\2\u283e\u2841\3\2\2\2\u283f\u2840\7\u0356"+
		"\2\2\u2840\u2842\5\u0308\u0185\2\u2841\u283f\3\2\2\2\u2841\u2842\3\2\2"+
		"\2\u2842\u2843\3\2\2\2\u2843\u2844\7\u0355\2\2\u2844\u286a\3\2\2\2\u2845"+
		"\u2846\t\u0084\2\2\u2846\u2847\7\u0354\2\2\u2847\u2848\5\u03e0\u01f1\2"+
		"\u2848\u2856\7\u0356\2\2\u2849\u2857\5\u03ec\u01f7\2\u284a\u284b\7\u0354"+
		"\2\2\u284b\u2850\5\u03ec\u01f7\2\u284c\u284d\7\u0356\2\2\u284d\u284f\5"+
		"\u03ec\u01f7\2\u284e\u284c\3\2\2\2\u284f\u2852\3\2\2\2\u2850\u284e\3\2"+
		"\2\2\u2850\u2851\3\2\2\2\u2851\u2853\3\2\2\2\u2852\u2850\3\2\2\2\u2853"+
		"\u2854\7\u0355\2\2\u2854\u2857\3\2\2\2\u2855\u2857\7\u0359\2\2\u2856\u2849"+
		"\3\2\2\2\u2856\u284a\3\2\2\2\u2856\u2855\3\2\2\2\u2857\u2858\3\2\2\2\u2858"+
		"\u2859\7\u0356\2\2\u2859\u285a\5\u0308\u0185\2\u285a\u285b\7\u0355\2\2"+
		"\u285b\u286a\3\2\2\2\u285c\u285d\7\u009b\2\2\u285d\u285e\7\u0354\2\2\u285e"+
		"\u285f\5\u03e0\u01f1\2\u285f\u2860\7\u0356\2\2\u2860\u2861\5\u03ec\u01f7"+
		"\2\u2861\u2862\7\u0356\2\2\u2862\u2863\5\u0308\u0185\2\u2863\u2864\7\u0356"+
		"\2\2\u2864\u2865\5\u03ec\u01f7\2\u2865\u2866\7\u0356\2\2\u2866\u2867\5"+
		"\u0308\u0185\2\u2867\u2868\7\u0355\2\2\u2868\u286a\3\2\2\2\u2869\u2825"+
		"\3\2\2\2\u2869\u2845\3\2\2\2\u2869\u285c\3\2\2\2\u286a\u0387\3\2\2\2\u286b"+
		"\u286c\7\37\2\2\u286c\u2881\7\u0354\2\2\u286d\u2882\5\u03ec\u01f7\2\u286e"+
		"\u286f\7\u0354\2\2\u286f\u2874\5\u03ec\u01f7\2\u2870\u2871\7\u0356\2\2"+
		"\u2871\u2873\5\u03ec\u01f7\2\u2872\u2870\3\2\2\2\u2873\u2876\3\2\2\2\u2874"+
		"\u2872\3\2\2\2\u2874\u2875\3\2\2\2\u2875\u2877\3\2\2\2\u2876\u2874\3\2"+
		"\2\2\u2877\u2878\7\u0355\2\2\u2878\u2882\3\2\2\2\u2879\u2882\7\u0359\2"+
		"\2\u287a\u287b\7\u01df\2\2\u287b\u287c\7\u0354\2\2\u287c\u287d\5\u03ec"+
		"\u01f7\2\u287d\u287e\7\u0356\2\2\u287e\u287f\5\u0308\u0185\2\u287f\u2880"+
		"\7\u0355\2\2\u2880\u2882\3\2\2\2\u2881\u286d\3\2\2\2\u2881\u286e\3\2\2"+
		"\2\u2881\u2879\3\2\2\2\u2881\u287a\3\2\2\2\u2882\u2883\3\2\2\2\u2883\u2884"+
		"\7\u0356\2\2\u2884\u2885\5\u0308\u0185\2\u2885\u2886\7\u0355\2\2\u2886"+
		"\u28a4\3\2\2\2\u2887\u2888\7I\2\2\u2888\u2889\7\u0354\2\2\u2889\u288a"+
		"\5\u03e0\u01f1\2\u288a\u2898\7\u0356\2\2\u288b\u2899\5\u03ec\u01f7\2\u288c"+
		"\u288d\7\u0354\2\2\u288d\u2892\5\u03ec\u01f7\2\u288e\u288f\7\u0356\2\2"+
		"\u288f\u2891\5\u03ec\u01f7\2\u2890\u288e\3\2\2\2\u2891\u2894\3\2\2\2\u2892"+
		"\u2890\3\2\2\2\u2892\u2893\3\2\2\2\u2893\u2895\3\2\2\2\u2894\u2892\3\2"+
		"\2\2\u2895\u2896\7\u0355\2\2\u2896\u2899\3\2\2\2\u2897\u2899\7\u0359\2"+
		"\2\u2898\u288b\3\2\2\2\u2898\u288c\3\2\2\2\u2898\u2897\3\2\2\2\u2899\u289a"+
		"\3\2\2\2\u289a\u289b\7\u0356\2\2\u289b\u289f\5\u0308\u0185\2\u289c\u289d"+
		"\7\u0356\2\2\u289d\u289e\7\u02bd\2\2\u289e\u28a0\5\u0308\u0185\2\u289f"+
		"\u289c\3\2\2\2\u289f\u28a0\3\2\2\2\u28a0\u28a1\3\2\2\2\u28a1\u28a2\7\u0355"+
		"\2\2\u28a2\u28a4\3\2\2\2\u28a3\u286b\3\2\2\2\u28a3\u2887\3\2\2\2\u28a4"+
		"\u0389\3\2\2\2\u28a5\u28a6\7\u00ec\2\2\u28a6\u28a7\7\u0354\2\2\u28a7\u28a8"+
		"\7\u0359\2\2\u28a8\u2938\7\u0355\2\2\u28a9\u28aa\7\u00f4\2\2\u28aa\u28ab"+
		"\7\u0354\2\2\u28ab\u28ac\5\u0308\u0185\2\u28ac\u28ad\7\b\2\2\u28ad\u28ae"+
		"\5\u0414\u020b\2\u28ae\u28af\7\u0355\2\2\u28af\u2938\3\2\2\2\u28b0\u28b1"+
		"\7\u00f5\2\2\u28b1\u28b2\7\u0354\2\2\u28b2\u28b3\5\u0308\u0185\2\u28b3"+
		"\u28b4\7\b\2\2\u28b4\u28b5\5\u0414\u020b\2\u28b5\u28b6\7\u0355\2\2\u28b6"+
		"\u2938\3\2\2\2\u28b7\u28b8\7\"\2\2\u28b8\u28b9\7\u0354\2\2\u28b9\u28ba"+
		"\5\u0414\u020b\2\u28ba\u28bb\7\u0356\2\2\u28bb\u28be\5\u0308\u0185\2\u28bc"+
		"\u28bd\7\u0356\2\2\u28bd\u28bf\5\u0308\u0185\2\u28be\u28bc\3\2\2\2\u28be"+
		"\u28bf\3\2\2\2\u28bf\u28c0\3\2\2\2\u28c0\u28c1\7\u0355\2\2\u28c1\u2938"+
		"\3\2\2\2\u28c2\u28c3\7\u00fa\2\2\u28c3\u28c4\7\u0354\2\2\u28c4\u28c5\7"+
		"\u0359\2\2\u28c5\u2938\7\u0355\2\2\u28c6\u28c7\7\31\2\2\u28c7\u28c8\7"+
		"\u0354\2\2\u28c8\u28c9\5\u03b8\u01dd\2\u28c9\u28ca\7\u0355\2\2\u28ca\u2938"+
		"\3\2\2\2\u28cb\u2938\7(\2\2\u28cc\u2938\7)\2\2\u28cd\u28ce\7\u0113\2\2"+
		"\u28ce\u28cf\7\u0354\2\2\u28cf\u28d0\7\u033d\2\2\u28d0\u28d1\7\u0356\2"+
		"\2\u28d1\u28d2\5\u0308\u0185\2\u28d2\u28d3\7\u0356\2\2\u28d3\u28d4\5\u0308"+
		"\u0185\2\u28d4\u28d5\7\u0355\2\2\u28d5\u2938\3\2\2\2\u28d6\u28d7\7\u0114"+
		"\2\2\u28d7\u28d8\7\u0354\2\2\u28d8\u28d9\7\u033d\2\2\u28d9\u28da\7\u0356"+
		"\2\2\u28da\u28db\5\u0308\u0185\2\u28db\u28dc\7\u0356\2\2\u28dc\u28dd\5"+
		"\u0308\u0185\2\u28dd\u28de\7\u0355\2\2\u28de\u2938\3\2\2\2\u28df\u28e0"+
		"\7\u0115\2\2\u28e0\u28e1\7\u0354\2\2\u28e1\u28e2\7\u033d\2\2\u28e2\u28e3"+
		"\7\u0356\2\2\u28e3\u28e4\5\u0308\u0185\2\u28e4\u28e5\7\u0355\2\2\u28e5"+
		"\u2938\3\2\2\2\u28e6\u28e7\7\u0116\2\2\u28e7\u28e8\7\u0354\2\2\u28e8\u28e9"+
		"\7\u033d\2\2\u28e9\u28ea\7\u0356\2\2\u28ea\u28eb\5\u0308\u0185\2\u28eb"+
		"\u28ec\7\u0355\2\2\u28ec\u2938\3\2\2\2\u28ed\u28ee\7\u0155\2\2\u28ee\u28ef"+
		"\7\u0354\2\2\u28ef\u2938\7\u0355\2\2\u28f0\u28f1\7\u0156\2\2\u28f1\u28f2"+
		"\7\u0354\2\2\u28f2\u2938\7\u0355\2\2\u28f3\u28f4\7S\2\2\u28f4\u28f5\7"+
		"\u0354\2\2\u28f5\u28f8\5\u0414\u020b\2\u28f6\u28f7\7\u0356\2\2\u28f7\u28f9"+
		"\7\u033c\2\2\u28f8\u28f6\3\2\2\2\u28f8\u28f9\3\2\2\2\u28f9\u28fc\3\2\2"+
		"\2\u28fa\u28fb\7\u0356\2\2\u28fb\u28fd\7\u033c\2\2\u28fc\u28fa\3\2\2\2"+
		"\u28fc\u28fd\3\2\2\2\u28fd\u28fe\3\2\2\2\u28fe\u28ff\7\u0355\2\2\u28ff"+
		"\u2938\3\2\2\2\u2900\u2901\7\u019d\2\2\u2901\u2902\7\u0354\2\2\u2902\u2938"+
		"\7\u0355\2\2\u2903\u2904\7l\2\2\u2904\u2905\7\u0354\2\2\u2905\u2906\5"+
		"\u0308\u0185\2\u2906\u2907\7\u0356\2\2\u2907\u2908\5\u0308\u0185\2\u2908"+
		"\u2909\7\u0355\2\2\u2909\u2938\3\2\2\2\u290a\u290b\7\u0236\2\2\u290b\u290c"+
		"\7\u0354\2\2\u290c\u290d\5\u0308\u0185\2\u290d\u290e\7\u0356\2\2\u290e"+
		"\u290f\7\u033c\2\2\u290f\u2910\7\u0356\2\2\u2910\u2911\7\u033c\2\2\u2911"+
		"\u2912\7\u0356\2\2\u2912\u2913\5\u0308\u0185\2\u2913\u2914\7\u0355\2\2"+
		"\u2914\u2938\3\2\2\2\u2915\u2938\7\u009d\2\2\u2916\u2938\7\u00a3\2\2\u2917"+
		"\u2938\7\u00b5\2\2\u2918\u2919\7\u02b9\2\2\u2919\u291a\7\u0354\2\2\u291a"+
		"\u291b\5\u0308\u0185\2\u291b\u291c\7\u0356\2\2\u291c\u291d\5\u0308\u0185"+
		"\2\u291d\u291e\7\u0355\2\2\u291e\u2938\3\2\2\2\u291f\u2938\5\u038c\u01c7"+
		"\2\u2920\u2921\7\u02b2\2\2\u2921\u2922\7\u0354\2\2\u2922\u2923\5\u0320"+
		"\u0191\2\u2923\u2924\7\u0356\2\2\u2924\u2925\5\u0308\u0185\2\u2925\u2926"+
		"\7\u0356\2\2\u2926\u2927\5\u0308\u0185\2\u2927\u2928\7\u0355\2\2\u2928"+
		"\u2938\3\2\2\2\u2929\u292a\7\u0235\2\2\u292a\u292b\7\u0354\2\2\u292b\u292c"+
		"\5\u0308\u0185\2\u292c\u292d\7\u0356\2\2\u292d\u292e\5\u0308\u0185\2\u292e"+
		"\u2935\7\u0355\2\2\u292f\u2930\7\u00be\2\2\u2930\u2931\7P\2\2\u2931\u2932"+
		"\7\u0354\2\2\u2932\u2933\5\u0330\u0199\2\u2933\u2934\7\u0355\2\2\u2934"+
		"\u2936\3\2\2\2\u2935\u292f\3\2\2\2\u2935\u2936\3\2\2\2\u2936\u2938\3\2"+
		"\2\2\u2937\u28a5\3\2\2\2\u2937\u28a9\3\2\2\2\u2937\u28b0\3\2\2\2\u2937"+
		"\u28b7\3\2\2\2\u2937\u28c2\3\2\2\2\u2937\u28c6\3\2\2\2\u2937\u28cb\3\2"+
		"\2\2\u2937\u28cc\3\2\2\2\u2937\u28cd\3\2\2\2\u2937\u28d6\3\2\2\2\u2937"+
		"\u28df\3\2\2\2\u2937\u28e6\3\2\2\2\u2937\u28ed\3\2\2\2\u2937\u28f0\3\2"+
		"\2\2\u2937\u28f3\3\2\2\2\u2937\u2900\3\2\2\2\u2937\u2903\3\2\2\2\u2937"+
		"\u290a\3\2\2\2\u2937\u2915\3\2\2\2\u2937\u2916\3\2\2\2\u2937\u2917\3\2"+
		"\2\2\u2937\u2918\3\2\2\2\u2937\u291f\3\2\2\2\u2937\u2920\3\2\2\2\u2937"+
		"\u2929\3\2\2\2\u2938\u038b\3\2\2\2\u2939\u293e\5\u038e\u01c8\2\u293a\u293e"+
		"\5\u0392\u01ca\2\u293b\u293e\5\u0396\u01cc\2\u293c\u293e\5\u039a\u01ce"+
		"\2\u293d\u2939\3\2\2\2\u293d\u293a\3\2\2\2\u293d\u293b\3\2\2\2\u293d\u293c"+
		"\3\2\2\2\u293e\u038d\3\2\2\2\u293f\u2948\7\u033b\2\2\u2940\u2948\5\u041e"+
		"\u0210\2\u2941\u2948\7\u02a2\2\2\u2942\u2948\5\u0392\u01ca\2\u2943\u2944"+
		"\7\u0354\2\2\u2944\u2945\5\u0316\u018c\2\u2945\u2946\7\u0355\2\2\u2946"+
		"\u2948\3\2\2\2\u2947\u293f\3\2\2\2\u2947\u2940\3\2\2\2\u2947\u2941\3\2"+
		"\2\2\u2947\u2942\3\2\2\2\u2947\u2943\3\2\2\2\u2948\u2949\3\2\2\2\u2949"+
		"\u294a\7\u034f\2\2\u294a\u294b\5\u0390\u01c9\2\u294b\u038f\3\2\2\2\u294c"+
		"\u294d\7\u025b\2\2\u294d\u294e\7\u0354\2\2\u294e\u294f\7\u033e\2\2\u294f"+
		"\u2950\7\u0356\2\2\u2950\u2951\7\u033e\2\2\u2951\u2952\7\u0355\2\2\u2952"+
		"\u0391\3\2\2\2\u2953\u295b\7\u033b\2\2\u2954\u295b\5\u041e\u0210\2\u2955"+
		"\u295b\5\u03de\u01f0\2\u2956\u2957\7\u0354\2\2\u2957\u2958\5\u0316\u018c"+
		"\2\u2958\u2959\7\u0355\2\2\u2959\u295b\3\2\2\2\u295a\u2953\3\2\2\2\u295a"+
		"\u2954\3\2\2\2\u295a\u2955\3\2\2\2\u295a\u2956\3\2\2\2\u295b\u295c\3\2"+
		"\2\2\u295c\u295d\7\u034f\2\2\u295d\u295e\5\u0394\u01cb\2\u295e\u0393\3"+
		"\2\2\2\u295f\u2960\7\u01e2\2\2\u2960\u2961\7\u0354\2\2\u2961\u2962\7\u033e"+
		"\2\2\u2962\u2963\7\u0355\2\2\u2963\u0395\3\2\2\2\u2964\u296b\7\u033b\2"+
		"\2\u2965\u296b\5\u041e\u0210\2\u2966\u2967\7\u0354\2\2\u2967\u2968\5\u0316"+
		"\u018c\2\u2968\u2969\7\u0355\2\2\u2969\u296b\3\2\2\2\u296a\u2964\3\2\2"+
		"\2\u296a\u2965\3\2\2\2\u296a\u2966\3\2\2\2\u296b\u296c\3\2\2\2\u296c\u296d"+
		"\7\u034f\2\2\u296d\u296e\5\u0398\u01cd\2\u296e\u0397\3\2\2\2\u296f\u2970"+
		"\7\u013a\2\2\u2970\u2971\7\u0354\2\2\u2971\u2972\7\u033e\2\2\u2972\u2973"+
		"\7\u0355\2\2\u2973\u0399\3\2\2\2\u2974\u297b\7\u033b\2\2\u2975\u297b\5"+
		"\u041e\u0210\2\u2976\u2977\7\u0354\2\2\u2977\u2978\5\u0316\u018c\2\u2978"+
		"\u2979\7\u0355\2\2\u2979\u297b\3\2\2\2\u297a\u2974\3\2\2\2\u297a\u2975"+
		"\3\2\2\2\u297a\u2976\3\2\2\2\u297b\u297c\3\2\2\2\u297c\u297d\7\u034f\2"+
		"\2\u297d\u297e\5\u039c\u01cf\2\u297e\u039b\3\2\2\2\u297f\u2980\7\u01a5"+
		"\2\2\u2980\u2981\7\u0354\2\2\u2981\u2982\7\u033e\2\2\u2982\u2983\7\u0355"+
		"\2\2\u2983\u039d\3\2\2\2\u2984\u298b\7\u033b\2\2\u2985\u298b\5\u041e\u0210"+
		"\2\u2986\u2987\7\u0354\2\2\u2987\u2988\5\u0316\u018c\2\u2988\u2989\7\u0355"+
		"\2\2\u2989\u298b\3\2\2\2\u298a\u2984\3\2\2\2\u298a\u2985\3\2\2\2\u298a"+
		"\u2986\3\2\2\2\u298b\u298c\3\2\2\2\u298c\u298d\7\u034f\2\2\u298d\u298e"+
		"\7\u01b3\2\2\u298e\u298f\7\u0354\2\2\u298f\u2990\7\u033e\2\2\u2990\u2991"+
		"\7\u0355\2\2\u2991\u039f\3\2\2\2\u2992\u2993\7\u00ba\2\2\u2993\u2994\5"+
		"\u0308\u0185\2\u2994\u2995\7\u00a7\2\2\u2995\u2996\5\u0308\u0185\2\u2996"+
		"\u03a1\3\2\2\2\u2997\u2998\7\u00ba\2\2\u2998\u2999\5\u0320\u0191\2\u2999"+
		"\u299a\7\u00a7\2\2\u299a\u299b\5\u0308\u0185\2\u299b\u03a3\3\2\2\2\u299c"+
		"\u299e\7\b\2\2\u299d\u299c\3\2\2\2\u299d\u299e\3\2\2\2\u299e\u299f\3\2"+
		"\2\2\u299f\u29a0\5\u03b4\u01db\2\u29a0\u03a5\3\2\2\2\u29a1\u29a3\7\b\2"+
		"\2\u29a2\u29a1\3\2\2\2\u29a2\u29a3\3\2\2\2\u29a3\u29a4\3\2\2\2\u29a4\u29a5"+
		"\5\u03a8\u01d5\2\u29a5\u03a7\3\2\2\2\u29a6\u29a8\5\u041e\u0210\2\u29a7"+
		"\u29a9\5\u03aa\u01d6\2\u29a8\u29a7\3\2\2\2\u29a8\u29a9\3\2\2\2\u29a9\u03a9"+
		"\3\2\2\2\u29aa\u29ac\7\u00bd\2\2\u29ab\u29aa\3\2\2\2\u29ab\u29ac\3\2\2"+
		"\2\u29ac\u29ad\3\2\2\2\u29ad\u29ae\7\u0354\2\2\u29ae\u29b5\5\u03ae\u01d8"+
		"\2\u29af\u29b1\7\u0356\2\2\u29b0\u29af\3\2\2\2\u29b0\u29b1\3\2\2\2\u29b1"+
		"\u29b2\3\2\2\2\u29b2\u29b4\5\u03ae\u01d8\2\u29b3\u29b0\3\2\2\2\u29b4\u29b7"+
		"\3\2\2\2\u29b5\u29b3\3\2\2\2\u29b5\u29b6\3\2\2\2\u29b6\u29b8\3\2\2\2\u29b7"+
		"\u29b5\3\2\2\2\u29b8\u29b9\7\u0355\2\2\u29b9\u03ab\3\2\2\2\u29ba\u29bb"+
		"\7\u00bd\2\2\u29bb\u29bc\7\u0354\2\2\u29bc\u29c3\5\u03ae\u01d8\2\u29bd"+
		"\u29bf\7\u0356\2\2\u29be\u29bd\3\2\2\2\u29be\u29bf\3\2\2\2\u29bf\u29c0"+
		"\3\2\2\2\u29c0\u29c2\5\u03ae\u01d8\2\u29c1\u29be\3\2\2\2\u29c2\u29c5\3"+
		"\2\2\2\u29c3\u29c1\3\2\2\2\u29c3\u29c4\3\2\2\2\u29c4\u29c6\3\2\2\2\u29c5"+
		"\u29c3\3\2\2\2\u29c6\u29c7\7\u0355\2\2\u29c7\u03ad\3\2\2\2\u29c8\u29ca"+
		"\7\u01b4\2\2\u29c9\u29c8\3\2\2\2\u29c9\u29ca\3\2\2\2\u29ca\u29fc\3\2\2"+
		"\2\u29cb\u29df\7X\2\2\u29cc\u29cd\7\u0354\2\2\u29cd\u29d2\5\u03b0\u01d9"+
		"\2\u29ce\u29cf\7\u0356\2\2\u29cf\u29d1\5\u03b0\u01d9\2\u29d0\u29ce\3\2"+
		"\2\2\u29d1\u29d4\3\2\2\2\u29d2\u29d0\3\2\2\2\u29d2\u29d3\3\2\2\2\u29d3"+
		"\u29d5\3\2\2\2\u29d4\u29d2\3\2\2\2\u29d5\u29d6\7\u0355\2\2\u29d6\u29e0"+
		"\3\2\2\2\u29d7\u29dc\5\u03b0\u01d9\2\u29d8\u29d9\7\u0356\2\2\u29d9\u29db"+
		"\5\u03b0\u01d9\2\u29da\u29d8\3\2\2\2\u29db\u29de\3\2\2\2\u29dc\u29da\3"+
		"\2\2\2\u29dc\u29dd\3\2\2\2\u29dd\u29e0\3\2\2\2\u29de\u29dc\3\2\2\2\u29df"+
		"\u29cc\3\2\2\2\u29df\u29d7\3\2\2\2\u29e0\u29fd\3\2\2\2\u29e1\u29e2\7X"+
		"\2\2\u29e2\u29e3\7\u0342\2\2\u29e3\u29fd\5\u03b0\u01d9\2\u29e4\u29f3\7"+
		"\u02ac\2\2\u29e5\u29e6\7\u0354\2\2\u29e6\u29e7\5\u03b0\u01d9\2\u29e7\u29e8"+
		"\7\u0354\2\2\u29e8\u29ed\7\u033d\2\2\u29e9\u29ea\7\u0356\2\2\u29ea\u29ec"+
		"\7\u033d\2\2\u29eb\u29e9\3\2\2\2\u29ec\u29ef\3\2\2\2\u29ed\u29eb\3\2\2"+
		"\2\u29ed\u29ee\3\2\2\2\u29ee\u29f0\3\2\2\2\u29ef\u29ed\3\2\2\2\u29f0\u29f1"+
		"\7\u0355\2\2\u29f1\u29f2\7\u0355\2\2\u29f2\u29f4\3\2\2\2\u29f3\u29e5\3"+
		"\2\2\2\u29f3\u29f4\3\2\2\2\u29f4\u29fd\3\2\2\2\u29f5\u29fd\7\u0220\2\2"+
		"\u29f6\u29fd\7\u022a\2\2\u29f7\u29f8\7\u022b\2\2\u29f8\u29f9\7\u0342\2"+
		"\2\u29f9\u29fd\7\u033c\2\2\u29fa\u29fd\7R\2\2\u29fb\u29fd\7\u033d\2\2"+
		"\u29fc\u29cb\3\2\2\2\u29fc\u29e1\3\2\2\2\u29fc\u29e4\3\2\2\2\u29fc\u29f5"+
		"\3\2\2\2\u29fc\u29f6\3\2\2\2\u29fc\u29f7\3\2\2\2\u29fc\u29fa\3\2\2\2\u29fc"+
		"\u29fb\3\2\2\2\u29fd\u03af\3\2\2\2\u29fe\u2a01\5\u041e\u0210\2\u29ff\u2a01"+
		"\7\u033c\2\2\u2a00\u29fe\3\2\2\2\u2a00\u29ff\3\2\2\2\u2a01\u03b1\3\2\2"+
		"\2\u2a02\u2a03\7\u0354\2\2\u2a03\u2a08\5\u03b4\u01db\2\u2a04\u2a05\7\u0356"+
		"\2\2\u2a05\u2a07\5\u03b4\u01db\2\u2a06\u2a04\3\2\2\2\u2a07\u2a0a\3\2\2"+
		"\2\u2a08\u2a06\3\2\2\2\u2a08\u2a09\3\2\2\2\u2a09\u2a0b\3\2\2\2\u2a0a\u2a08"+
		"\3\2\2\2\u2a0b\u2a0c\7\u0355\2\2\u2a0c\u03b3\3\2\2\2\u2a0d\u2a10\5\u041e"+
		"\u0210\2\u2a0e\u2a10\7\u033e\2\2\u2a0f\u2a0d\3\2\2\2\u2a0f\u2a0e\3\2\2"+
		"\2\u2a10\u03b5\3\2\2\2\u2a11\u2a12\7\u00b6\2\2\u2a12\u2a13\7\u0354\2\2"+
		"\u2a13\u2a14\5\u03b8\u01dd\2\u2a14\u2a1c\7\u0355\2\2\u2a15\u2a16\7\u0356"+
		"\2\2\u2a16\u2a17\7\u0354\2\2\u2a17\u2a18\5\u03b8\u01dd\2\u2a18\u2a19\7"+
		"\u0355\2\2\u2a19\u2a1b\3\2\2\2\u2a1a\u2a15\3\2\2\2\u2a1b\u2a1e\3\2\2\2"+
		"\u2a1c\u2a1a\3\2\2\2\u2a1c\u2a1d\3\2\2\2\u2a1d\u03b7\3\2\2\2\u2a1e\u2a1c"+
		"\3\2\2\2\u2a1f\u2a24\5\u0308\u0185\2\u2a20\u2a21\7\u0356\2\2\u2a21\u2a23"+
		"\5\u0308\u0185\2\u2a22\u2a20\3\2\2\2\u2a23\u2a26\3\2\2\2\u2a24\u2a22\3"+
		"\2\2\2\u2a24\u2a25\3\2\2\2\u2a25\u03b9\3\2\2\2\u2a26\u2a24\3\2\2\2\u2a27"+
		"\u2a28\t\u0085\2\2\u2a28\u2a29\7\u0354\2\2\u2a29\u2a2a\7\u0355\2\2\u2a2a"+
		"\u2a32\5\u03c2\u01e2\2\u2a2b\u2a2c\7\u01b9\2\2\u2a2c\u2a2d\7\u0354\2\2"+
		"\u2a2d\u2a2e\5\u0308\u0185\2\u2a2e\u2a2f\7\u0355\2\2\u2a2f\u2a30\5\u03c2"+
		"\u01e2\2\u2a30\u2a32\3\2\2\2\u2a31\u2a27\3\2\2\2\u2a31\u2a2b\3\2\2\2\u2a32"+
		"\u03bb\3\2\2\2\u2a33\u2a34\t\u0086\2\2\u2a34\u2a35\7\u0354\2\2\u2a35\u2a36"+
		"\5\u03c0\u01e1\2\u2a36\u2a38\7\u0355\2\2\u2a37\u2a39\5\u03c2\u01e2\2\u2a38"+
		"\u2a37\3\2\2\2\u2a38\u2a39\3\2\2\2\u2a39\u2a54\3\2\2\2\u2a3a\u2a3b\t\u0087"+
		"\2\2\u2a3b\u2a3e\7\u0354\2\2\u2a3c\u2a3f\7\u0359\2\2\u2a3d\u2a3f\5\u03c0"+
		"\u01e1\2\u2a3e\u2a3c\3\2\2\2\u2a3e\u2a3d\3\2\2\2\u2a3f\u2a40\3\2\2\2\u2a40"+
		"\u2a42\7\u0355\2\2\u2a41\u2a43\5\u03c2\u01e2\2\u2a42\u2a41\3\2\2\2\u2a42"+
		"\u2a43\3\2\2\2\u2a43\u2a54\3\2\2\2\u2a44\u2a45\7\u00fb\2\2\u2a45\u2a46"+
		"\7\u0354\2\2\u2a46\u2a47\5\u03c0\u01e1\2\u2a47\u2a48\7\u0355\2\2\u2a48"+
		"\u2a54\3\2\2\2\u2a49\u2a4a\7\u015b\2\2\u2a4a\u2a4b\7\u0354\2\2\u2a4b\u2a4c"+
		"\5\u0308\u0185\2\u2a4c\u2a4d\7\u0355\2\2\u2a4d\u2a54\3\2\2\2\u2a4e\u2a4f"+
		"\7\u015c\2\2\u2a4f\u2a50\7\u0354\2\2\u2a50\u2a51\5\u03b8\u01dd\2\u2a51"+
		"\u2a52\7\u0355\2\2\u2a52\u2a54\3\2\2\2\u2a53\u2a33\3\2\2\2\u2a53\u2a3a"+
		"\3\2\2\2\u2a53\u2a44\3\2\2\2\u2a53\u2a49\3\2\2\2\u2a53\u2a4e\3\2\2\2\u2a54"+
		"\u03bd\3\2\2\2\u2a55\u2a56\t\u0088\2\2\u2a56\u2a57\7\u0354\2\2\u2a57\u2a58"+
		"\5\u0308\u0185\2\u2a58\u2a59\7\u0355\2\2\u2a59\u2a5a\5\u03c2\u01e2\2\u2a5a"+
		"\u2a8e\3\2\2\2\u2a5b\u2a5c\t\u0089\2\2\u2a5c\u2a5d\7\u0354\2\2\u2a5d\u2a64"+
		"\5\u0308\u0185\2\u2a5e\u2a5f\7\u0356\2\2\u2a5f\u2a62\5\u0308\u0185\2\u2a60"+
		"\u2a61\7\u0356\2\2\u2a61\u2a63\5\u0308\u0185\2\u2a62\u2a60\3\2\2\2\u2a62"+
		"\u2a63\3\2\2\2\u2a63\u2a65\3\2\2\2\u2a64\u2a5e\3\2\2\2\u2a64\u2a65\3\2"+
		"\2\2\u2a65\u2a66\3\2\2\2\u2a66\u2a67\7\u0355\2\2\u2a67\u2a68\5\u03c2\u01e2"+
		"\2\u2a68\u2a8e\3\2\2\2\u2a69\u2a6a\t\u008a\2\2\u2a6a\u2a6b\7\u0354\2\2"+
		"\u2a6b\u2a6c\7\u0355\2\2\u2a6c\u2a6d\7{\2\2\u2a6d\u2a71\7\u0354\2\2\u2a6e"+
		"\u2a6f\7\u01cc\2\2\u2a6f\u2a70\7\22\2\2\u2a70\u2a72\5\u03b8\u01dd\2\u2a71"+
		"\u2a6e\3\2\2\2\u2a71\u2a72\3\2\2\2\u2a72\u2a73\3\2\2\2\u2a73\u2a74\5\u0330"+
		"\u0199\2\u2a74\u2a75\7\u0355\2\2\u2a75\u2a8e\3\2\2\2\u2a76\u2a77\t\u008b"+
		"\2\2\u2a77\u2a78\7\u0354\2\2\u2a78\u2a79\5\u0308\u0185\2\u2a79\u2a7a\7"+
		"\u0355\2\2\u2a7a\u2a7b\7\u00be\2\2\u2a7b\u2a7c\7P\2\2\u2a7c\u2a7d\7\u0354"+
		"\2\2\u2a7d\u2a7e\7y\2\2\u2a7e\u2a7f\7\22\2\2\u2a7f\u2a81\5\u0308\u0185"+
		"\2\u2a80\u2a82\t\u008c\2\2\u2a81\u2a80\3\2\2\2\u2a81\u2a82\3\2\2\2\u2a82"+
		"\u2a83\3\2\2\2\u2a83\u2a84\7\u0355\2\2\u2a84\u2a85\7{\2\2\u2a85\u2a89"+
		"\7\u0354\2\2\u2a86\u2a87\7\u01cc\2\2\u2a87\u2a88\7\22\2\2\u2a88\u2a8a"+
		"\5\u03b8\u01dd\2\u2a89\u2a86\3\2\2\2\u2a89\u2a8a\3\2\2\2\u2a8a\u2a8b\3"+
		"\2\2\2\u2a8b\u2a8c\7\u0355\2\2\u2a8c\u2a8e\3\2\2\2\u2a8d\u2a55\3\2\2\2"+
		"\u2a8d\u2a5b\3\2\2\2\u2a8d\u2a69\3\2\2\2\u2a8d\u2a76\3\2\2\2\u2a8e\u03bf"+
		"\3\2\2\2\u2a8f\u2a91\tu\2\2\u2a90\u2a8f\3\2\2\2\u2a90\u2a91\3\2\2\2\u2a91"+
		"\u2a92\3\2\2\2\u2a92\u2a93\5\u0308\u0185\2\u2a93\u03c1\3\2\2\2\u2a94\u2a95"+
		"\7{\2\2\u2a95\u2a99\7\u0354\2\2\u2a96\u2a97\7\u01cc\2\2\u2a97\u2a98\7"+
		"\22\2\2\u2a98\u2a9a\5\u03b8\u01dd\2\u2a99\u2a96\3\2\2\2\u2a99\u2a9a\3"+
		"\2\2\2\u2a9a\u2a9c\3\2\2\2\u2a9b\u2a9d\5\u0330\u0199\2\u2a9c\u2a9b\3\2"+
		"\2\2\u2a9c\u2a9d\3\2\2\2\u2a9d\u2a9f\3\2\2\2\u2a9e\u2aa0\5\u03c4\u01e3"+
		"\2\u2a9f\u2a9e\3\2\2\2\u2a9f\u2aa0\3\2\2\2\u2aa0\u2aa1\3\2\2\2\u2aa1\u2aa2"+
		"\7\u0355\2\2\u2aa2\u03c3\3\2\2\2\u2aa3\u2aa4\t\u008d\2\2\u2aa4\u2aa5\5"+
		"\u03c6\u01e4\2\u2aa5\u03c5\3\2\2\2\u2aa6\u2aad\5\u03ca\u01e6\2\u2aa7\u2aa8"+
		"\7\16\2\2\u2aa8\u2aa9\5\u03c8\u01e5\2\u2aa9\u2aaa\7\6\2\2\u2aaa\u2aab"+
		"\5\u03c8\u01e5\2\u2aab\u2aad\3\2\2\2\u2aac\u2aa6\3\2\2\2\u2aac\u2aa7\3"+
		"\2\2\2\u2aad\u03c7\3\2\2\2\u2aae\u2ab1\5\u03ca\u01e6\2\u2aaf\u2ab1\5\u03cc"+
		"\u01e7\2\u2ab0\u2aae\3\2\2\2\u2ab0\u2aaf\3\2\2\2\u2ab1\u03c9\3\2\2\2\u2ab2"+
		"\u2ab3\7\u0253\2\2\u2ab3\u2ab9\7\u01d6\2\2\u2ab4\u2ab5\7\u033c\2\2\u2ab5"+
		"\u2ab9\7\u01d6\2\2\u2ab6\u2ab7\7%\2\2\u2ab7\u2ab9\7\u0209\2\2\u2ab8\u2ab2"+
		"\3\2\2\2\u2ab8\u2ab4\3\2\2\2\u2ab8\u2ab6\3\2\2\2\u2ab9\u03cb\3\2\2\2\u2aba"+
		"\u2abb\7\u0253\2\2\u2abb\u2abf\7\u014c\2\2\u2abc\u2abd\7\u033c\2\2\u2abd"+
		"\u2abf\7\u014c\2\2\u2abe\u2aba\3\2\2\2\u2abe\u2abc\3\2\2\2\u2abf\u03cd"+
		"\3\2\2\2\u2ac0\u2ac1\7\u0148\2\2\u2ac1\u2ac6\5\u03d0\u01e9\2\u2ac2\u2ac3"+
		"\7\u0356\2\2\u2ac3\u2ac5\5\u03d0\u01e9\2\u2ac4\u2ac2\3\2\2\2\u2ac5\u2ac8"+
		"\3\2\2\2\u2ac6\u2ac4\3\2\2\2\u2ac6\u2ac7\3\2\2\2\u2ac7\u2ae3\3\2\2\2\u2ac8"+
		"\u2ac6\3\2\2\2\u2ac9\u2aca\7\u011d\2\2\u2aca\u2acd\7\u0342\2\2\u2acb\u2ace"+
		"\5\u041e\u0210\2\u2acc\u2ace\7\u033e\2\2\u2acd\u2acb\3\2\2\2\u2acd\u2acc"+
		"\3\2\2\2\u2ace\u2ae3\3\2\2\2\u2acf\u2ad0\7\u011c\2\2\u2ad0\u2ad3\7\u0342"+
		"\2\2\u2ad1\u2ad4\5\u041e\u0210\2\u2ad2\u2ad4\7\u033e\2\2\u2ad3\u2ad1\3"+
		"\2\2\2\u2ad3\u2ad2\3\2\2\2\u2ad4\u2ae3\3\2\2\2\u2ad5\u2ad6\7\u01a9\2\2"+
		"\u2ad6\u2ad7\7\u0342\2\2\u2ad7\u2ae3\t\t\2\2\u2ad8\u2ad9\7\u024a\2\2\u2ad9"+
		"\u2ada\7\u0342\2\2\u2ada\u2ae3\t\t\2\2\u2adb\u2adc\7\u0250\2\2\u2adc\u2add"+
		"\7\u0342\2\2\u2add\u2ae3\7\u033c\2\2\u2ade\u2adf\7\u0118\2\2\u2adf\u2ae3"+
		"\t\t\2\2\u2ae0\u2ae1\7\u024d\2\2\u2ae1\u2ae3\t\t\2\2\u2ae2\u2ac0\3\2\2"+
		"\2\u2ae2\u2ac9\3\2\2\2\u2ae2\u2acf\3\2\2\2\u2ae2\u2ad5\3\2\2\2\u2ae2\u2ad8"+
		"\3\2\2\2\u2ae2\u2adb\3\2\2\2\u2ae2\u2ade\3\2\2\2\u2ae2\u2ae0\3\2\2\2\u2ae3"+
		"\u03cf\3\2\2\2\u2ae4\u2aeb\7\u0354\2\2\u2ae5\u2ae6\7\u01b5\2\2\u2ae6\u2ae7"+
		"\7\u0342\2\2\u2ae7\u2aec\t\u008e\2\2\u2ae8\u2ae9\7\u0128\2\2\u2ae9\u2aea"+
		"\7\u0342\2\2\u2aea\u2aec\7\u033e\2\2\u2aeb\u2ae5\3\2\2\2\u2aeb\u2ae8\3"+
		"\2\2\2\u2aec\u2aed\3\2\2\2\u2aed\u2aee\7\u0355\2\2\u2aee\u03d1\3\2\2\2"+
		"\u2aef\u2af2\5\u03d4\u01eb\2\u2af0\u2af2\5\u03d6\u01ec\2\u2af1\u2aef\3"+
		"\2\2\2\u2af1\u2af0\3\2\2\2\u2af2\u03d3\3\2\2\2\u2af3\u2af4\7\u0144\2\2"+
		"\u2af4\u2af7\5\u041e\u0210\2\u2af5\u2af6\7\37\2\2\u2af6\u2af8\7\u0148"+
		"\2\2\u2af7\u2af5\3\2\2\2\u2af7\u2af8\3\2\2\2\u2af8\u2afa\3\2\2\2\u2af9"+
		"\u2afb\7/\2\2\u2afa\u2af9\3\2\2\2\u2afa\u2afb\3\2\2\2\u2afb\u2afe\3\2"+
		"\2\2\u2afc\u2afd\7\37\2\2\u2afd\u2aff\7\u019a\2\2\u2afe\u2afc\3\2\2\2"+
		"\u2afe\u2aff\3\2\2\2\u2aff\u2b00\3\2\2\2\u2b00\u2b05\5\u03d6\u01ec\2\u2b01"+
		"\u2b02\7\u0356\2\2\u2b02\u2b04\5\u03d6\u01ec\2\u2b03\u2b01\3\2\2\2\u2b04"+
		"\u2b07\3\2\2\2\u2b05\u2b03\3\2\2\2\u2b05\u2b06\3\2\2\2\u2b06\u03d5\3\2"+
		"\2\2\u2b07\u2b05\3\2\2\2\u2b08\u2b09\7\u0354\2\2\u2b09\u2b0a\7\u01a8\2"+
		"\2\u2b0a\u2b0d\7\u0342\2\2\u2b0b\u2b0e\5\u041e\u0210\2\u2b0c\u2b0e\7\u033e"+
		"\2\2\u2b0d\u2b0b\3\2\2\2\u2b0d\u2b0c\3\2\2\2\u2b0e\u2b10\3\2\2\2\u2b0f"+
		"\u2b11\7\u0356\2\2\u2b10\u2b0f\3\2\2\2\u2b10\u2b11\3\2\2\2\u2b11\u2b12"+
		"\3\2\2\2\u2b12\u2b13\7\u0146\2\2\u2b13\u2b14\7\u0342\2\2\u2b14\u2b16\7"+
		"\u033e\2\2\u2b15\u2b17\7\u0356\2\2\u2b16\u2b15\3\2\2\2\u2b16\u2b17\3\2"+
		"\2\2\u2b17\u2b1e\3\2\2\2\u2b18\u2b19\7\u0228\2\2\u2b19\u2b1a\7\u0342\2"+
		"\2\u2b1a\u2b1c\5\u0428\u0215\2\u2b1b\u2b1d\7\u0356\2\2\u2b1c\u2b1b\3\2"+
		"\2\2\u2b1c\u2b1d\3\2\2\2\u2b1d\u2b1f\3\2\2\2\u2b1e\u2b18\3\2\2\2\u2b1e"+
		"\u2b1f\3\2\2\2\u2b1f\u2b29\3\2\2\2\u2b20\u2b21\7\u0197\2\2\u2b21\u2b24"+
		"\7\u0342\2\2\u2b22\u2b25\5\u0428\u0215\2\u2b23\u2b25\7\u0256\2\2\u2b24"+
		"\u2b22\3\2\2\2\u2b24\u2b23\3\2\2\2\u2b25\u2b27\3\2\2\2\u2b26\u2b28\7\u0356"+
		"\2\2\u2b27\u2b26\3\2\2\2\u2b27\u2b28\3\2\2\2\u2b28\u2b2a\3\2\2\2\u2b29"+
		"\u2b20\3\2\2\2\u2b29\u2b2a\3\2\2\2\u2b2a\u2b31\3\2\2\2\u2b2b\u2b2c\7\u0145"+
		"\2\2\u2b2c\u2b2d\7\u0342\2\2\u2b2d\u2b2f\5\u0428\u0215\2\u2b2e\u2b30\7"+
		"\u0356\2\2\u2b2f\u2b2e\3\2\2\2\u2b2f\u2b30\3\2\2\2\u2b30\u2b32\3\2\2\2"+
		"\u2b31\u2b2b\3\2\2\2\u2b31\u2b32\3\2\2\2\u2b32\u2b33\3\2\2\2\u2b33\u2b34"+
		"\7\u0355\2\2\u2b34\u03d7\3\2\2\2\u2b35\u2b36\5\u041e\u0210\2\u2b36\u2b37"+
		"\7\u034f\2\2\u2b37\u2b38\5\u041e\u0210\2\u2b38\u2b39\7\u034f\2\2\u2b39"+
		"\u2b3a\5\u041e\u0210\2\u2b3a\u2b3b\7\u034f\2\2\u2b3b\u2b47\3\2\2\2\u2b3c"+
		"\u2b3d\5\u041e\u0210\2\u2b3d\u2b3f\7\u034f\2\2\u2b3e\u2b40\5\u041e\u0210"+
		"\2\u2b3f\u2b3e\3\2\2\2\u2b3f\u2b40\3\2\2\2\u2b40\u2b41\3\2\2\2\u2b41\u2b42"+
		"\7\u034f\2\2\u2b42\u2b47\3\2\2\2\u2b43\u2b44\5\u041e\u0210\2\u2b44\u2b45"+
		"\7\u034f\2\2\u2b45\u2b47\3\2\2\2\u2b46\u2b35\3\2\2\2\u2b46\u2b3c\3\2\2"+
		"\2\u2b46\u2b43\3\2\2\2\u2b46\u2b47\3\2\2\2\u2b47\u2b48\3\2\2\2\u2b48\u2b49"+
		"\5\u041e\u0210\2\u2b49\u03d9\3\2\2\2\u2b4a\u2b50\5\u041e\u0210\2\u2b4b"+
		"\u2b4c\5\u041e\u0210\2\u2b4c\u2b4d\7\u034f\2\2\u2b4d\u2b4e\5\u041e\u0210"+
		"\2\u2b4e\u2b50\3\2\2\2\u2b4f\u2b4a\3\2\2\2\u2b4f\u2b4b\3\2\2\2\u2b50\u03db"+
		"\3\2\2\2\u2b51\u2b57\5\u041e\u0210\2\u2b52\u2b53\5\u041e\u0210\2\u2b53"+
		"\u2b54\7\u034f\2\2\u2b54\u2b55\5\u041e\u0210\2\u2b55\u2b57\3\2\2\2\u2b56"+
		"\u2b51\3\2\2\2\u2b56\u2b52\3\2\2\2\u2b57\u03dd\3\2\2\2\u2b58\u2b59\5\u041e"+
		"\u0210\2\u2b59\u2b5a\7\u034f\2\2\u2b5a\u2b5b\5\u041e\u0210\2\u2b5b\u2b5c"+
		"\7\u034f\2\2\u2b5c\u2b5d\5\u041e\u0210\2\u2b5d\u2b5e\7\u034f\2\2\u2b5e"+
		"\u2b6a\3\2\2\2\u2b5f\u2b60\5\u041e\u0210\2\u2b60\u2b62\7\u034f\2\2\u2b61"+
		"\u2b63\5\u041e\u0210\2\u2b62\u2b61\3\2\2\2\u2b62\u2b63\3\2\2\2\u2b63\u2b64"+
		"\3\2\2\2\u2b64\u2b65\7\u034f\2\2\u2b65\u2b6a\3\2\2\2\u2b66\u2b67\5\u041e"+
		"\u0210\2\u2b67\u2b68\7\u034f\2\2\u2b68\u2b6a\3\2\2\2\u2b69\u2b58\3\2\2"+
		"\2\u2b69\u2b5f\3\2\2\2\u2b69\u2b66\3\2\2\2\u2b69\u2b6a\3\2\2\2\u2b6a\u2b6b"+
		"\3\2\2\2\u2b6b\u2b6c\5\u041e\u0210\2\u2b6c\u03df\3\2\2\2\u2b6d\u2b6e\5"+
		"\u041e\u0210\2\u2b6e\u2b70\7\u034f\2\2\u2b6f\u2b71\5\u041e\u0210\2\u2b70"+
		"\u2b6f\3\2\2\2\u2b70\u2b71\3\2\2\2\u2b71\u2b72\3\2\2\2\u2b72\u2b73\7\u034f"+
		"\2\2\u2b73\u2b78\3\2\2\2\u2b74\u2b75\5\u041e\u0210\2\u2b75\u2b76\7\u034f"+
		"\2\2\u2b76\u2b78\3\2\2\2\u2b77\u2b6d\3\2\2\2\u2b77\u2b74\3\2\2\2\u2b77"+
		"\u2b78\3\2\2\2\u2b78\u2b79\3\2\2\2\u2b79\u2b88\5\u041e\u0210\2\u2b7a\u2b7b"+
		"\5\u041e\u0210\2\u2b7b\u2b7d\7\u034f\2\2\u2b7c\u2b7e\5\u041e\u0210\2\u2b7d"+
		"\u2b7c\3\2\2\2\u2b7d\u2b7e\3\2\2\2\u2b7e\u2b7f\3\2\2\2\u2b7f\u2b80\7\u034f"+
		"\2\2\u2b80\u2b85\3\2\2\2\u2b81\u2b82\5\u041e\u0210\2\u2b82\u2b83\7\u034f"+
		"\2\2\u2b83\u2b85\3\2\2\2\u2b84\u2b7a\3\2\2\2\u2b84\u2b81\3\2\2\2\u2b84"+
		"\u2b85\3\2\2\2\u2b85\u2b86\3\2\2\2\u2b86\u2b88\7\u0280\2\2\u2b87\u2b77"+
		"\3\2\2\2\u2b87\u2b84\3\2\2\2\u2b88\u03e1\3\2\2\2\u2b89\u2b8a\5\u041e\u0210"+
		"\2\u2b8a\u2b8b\7\u034f\2\2\u2b8b\u2b8d\3\2\2\2\u2b8c\u2b89\3\2\2\2\u2b8c"+
		"\u2b8d\3\2\2\2\u2b8d\u2b8e\3\2\2\2\u2b8e\u2b8f\5\u041e\u0210\2\u2b8f\u03e3"+
		"\3\2\2\2\u2b90\u2b91\5\u041e\u0210\2\u2b91\u2b92\7\u034f\2\2\u2b92\u2b94"+
		"\3\2\2\2\u2b93\u2b90\3\2\2\2\u2b93\u2b94\3\2\2\2\u2b94\u2b95\3\2\2\2\u2b95"+
		"\u2b96\5\u041e\u0210\2\u2b96\u03e5\3\2\2\2\u2b97\u2b99\5\u041e\u0210\2"+
		"\u2b98\u2b97\3\2\2\2\u2b98\u2b99\3\2\2\2\u2b99\u2b9a\3\2\2\2\u2b9a\u2b9c"+
		"\7\u034f\2\2\u2b9b\u2b9d\5\u041e\u0210\2\u2b9c\u2b9b\3\2\2\2\u2b9c\u2b9d"+
		"\3\2\2\2\u2b9d\u2b9e\3\2\2\2\u2b9e\u2b9f\7\u034f\2\2\u2b9f\u2ba2\5\u041e"+
		"\u0210\2\u2ba0\u2ba2\5\u03e4\u01f3\2\u2ba1\u2b98\3\2\2\2\u2ba1\u2ba0\3"+
		"\2\2\2\u2ba2\u03e7\3\2\2\2\u2ba3\u2ba5\5\u041e\u0210\2\u2ba4\u2ba3\3\2"+
		"\2\2\u2ba4\u2ba5\3\2\2\2\u2ba5\u2ba6\3\2\2\2\u2ba6\u2ba8\7\u034f\2\2\u2ba7"+
		"\u2ba9\5\u041e\u0210\2\u2ba8\u2ba7\3\2\2\2\u2ba8\u2ba9\3\2\2\2\u2ba9\u2baa"+
		"\3\2\2\2\u2baa\u2bac\7\u034f\2\2\u2bab\u2bad\5\u041e\u0210\2\u2bac\u2bab"+
		"\3\2\2\2\u2bac\u2bad\3\2\2\2\u2bad\u2bae\3\2\2\2\u2bae\u2baf\7\u034f\2"+
		"\2\u2baf\u2bb2\5\u041e\u0210\2\u2bb0\u2bb2\5\u03e6\u01f4\2\u2bb1\u2ba4"+
		"\3\2\2\2\u2bb1\u2bb0\3\2\2\2\u2bb2\u03e9\3\2\2\2\u2bb3\u2bb6\5\u03de\u01f0"+
		"\2\u2bb4\u2bb6\7\u033b\2\2\u2bb5\u2bb3\3\2\2\2\u2bb5\u2bb4\3\2\2\2\u2bb6"+
		"\u03eb\3\2\2\2\u2bb7\u2bb8\t~\2\2\u2bb8\u2bb9\7\u034f\2\2\u2bb9\u2bd7"+
		"\5\u041e\u0210\2\u2bba\u2bbc\5\u041e\u0210\2\u2bbb\u2bba\3\2\2\2\u2bbb"+
		"\u2bbc\3\2\2\2\u2bbc\u2bbd\3\2\2\2\u2bbd\u2bbf\7\u034f\2\2\u2bbe\u2bc0"+
		"\5\u041e\u0210\2\u2bbf\u2bbe\3\2\2\2\u2bbf\u2bc0\3\2\2\2\u2bc0\u2bc1\3"+
		"\2\2\2\u2bc1\u2bc3\7\u034f\2\2\u2bc2\u2bc4\5\u041e\u0210\2\u2bc3\u2bc2"+
		"\3\2\2\2\u2bc3\u2bc4\3\2\2\2\u2bc4\u2bc5\3\2\2\2\u2bc5\u2bc6\7\u034f\2"+
		"\2\u2bc6\u2bd7\5\u041e\u0210\2\u2bc7\u2bc9\5\u041e\u0210\2\u2bc8\u2bc7"+
		"\3\2\2\2\u2bc8\u2bc9\3\2\2\2\u2bc9\u2bca\3\2\2\2\u2bca\u2bcc\7\u034f\2"+
		"\2\u2bcb\u2bcd\5\u041e\u0210\2\u2bcc\u2bcb\3\2\2\2\u2bcc\u2bcd\3\2\2\2"+
		"\u2bcd\u2bce\3\2\2\2\u2bce\u2bcf\7\u034f\2\2\u2bcf\u2bd7\5\u041e\u0210"+
		"\2\u2bd0\u2bd2\5\u041e\u0210\2\u2bd1\u2bd0\3\2\2\2\u2bd1\u2bd2\3\2\2\2"+
		"\u2bd2\u2bd3\3\2\2\2\u2bd3\u2bd4\7\u034f\2\2\u2bd4\u2bd7\5\u041e\u0210"+
		"\2\u2bd5\u2bd7\5\u041e\u0210\2\u2bd6\u2bb7\3\2\2\2\u2bd6\u2bbb\3\2\2\2"+
		"\u2bd6\u2bc8\3\2\2\2\u2bd6\u2bd1\3\2\2\2\u2bd6\u2bd5\3\2\2\2\u2bd7\u03ed"+
		"\3\2\2\2\u2bd8\u2bda\5\u041e\u0210\2\u2bd9\u2bdb\t\u008c\2\2\u2bda\u2bd9"+
		"\3\2\2\2\u2bda\u2bdb\3\2\2\2\u2bdb\u2be3\3\2\2\2\u2bdc\u2bdd\7\u0356\2"+
		"\2\u2bdd\u2bdf\5\u041e\u0210\2\u2bde\u2be0\t\u008c\2\2\u2bdf\u2bde\3\2"+
		"\2\2\u2bdf\u2be0\3\2\2\2\u2be0\u2be2\3\2\2\2\u2be1\u2bdc\3\2\2\2\u2be2"+
		"\u2be5\3\2\2\2\u2be3\u2be1\3\2\2\2\u2be3\u2be4\3\2\2\2\u2be4\u03ef\3\2"+
		"\2\2\u2be5\u2be3\3\2\2\2\u2be6\u2beb\5\u03f2\u01fa\2\u2be7\u2be8\7\u0356"+
		"\2\2\u2be8\u2bea\5\u03f2\u01fa\2\u2be9\u2be7\3\2\2\2\u2bea\u2bed\3\2\2"+
		"\2\u2beb\u2be9\3\2\2\2\u2beb\u2bec\3\2\2\2\u2bec\u03f1\3\2\2\2\u2bed\u2beb"+
		"\3\2\2\2\u2bee\u2bf0\5\u041e\u0210\2\u2bef\u2bee\3\2\2\2\u2bef\u2bf0\3"+
		"\2\2\2\u2bf0\u2bf1\3\2\2\2\u2bf1\u2bf3\7\u034f\2\2\u2bf2\u2bef\3\2\2\2"+
		"\u2bf3\u2bf6\3\2\2\2\u2bf4\u2bf2\3\2\2\2\u2bf4\u2bf5\3\2\2\2\u2bf5\u2bf7"+
		"\3\2\2\2\u2bf6\u2bf4\3\2\2\2\u2bf7\u2bf8\5\u041e\u0210\2\u2bf8\u03f3\3"+
		"\2\2\2\u2bf9\u2bfe\5\u041e\u0210\2\u2bfa\u2bfb\7\u0356\2\2\u2bfb\u2bfd"+
		"\5\u041e\u0210\2\u2bfc\u2bfa\3\2\2\2\u2bfd\u2c00\3\2\2\2\u2bfe\u2bfc\3"+
		"\2\2\2\u2bfe\u2bff\3\2\2\2\u2bff\u03f5\3\2\2\2\u2c00\u2bfe\3\2\2\2\u2c01"+
		"\u2c04\5\u041e\u0210\2\u2c02\u2c04\7\u033b\2\2\u2c03\u2c01\3\2\2\2\u2c03"+
		"\u2c02\3\2\2\2\u2c04\u03f7\3\2\2\2\u2c05\u2c06\t\t\2\2\u2c06\u03f9\3\2"+
		"\2\2\u2c07\u2c08\tg\2\2\u2c08\u03fb\3\2\2\2\u2c09\u2c0b\7j\2\2\u2c0a\u2c09"+
		"\3\2\2\2\u2c0a\u2c0b\3\2\2\2\u2c0b\u2c0c\3\2\2\2\u2c0c\u2c0d\7k\2\2\u2c0d"+
		"\u03fd\3\2\2\2\u2c0e\u2c1a\5\u03fc\u01ff\2\u2c0f\u2c10\7/\2\2\u2c10\u2c13"+
		"\5\u0314\u018b\2\u2c11\u2c12\7\32\2\2\u2c12\u2c14\5\u041e\u0210\2\u2c13"+
		"\u2c11\3\2\2\2\u2c13\u2c14\3\2\2\2\u2c14\u2c17\3\2\2\2\u2c15\u2c16\7\u00bd"+
		"\2\2\u2c16\u2c18\7\u00b6\2\2\u2c17\u2c15\3\2\2\2\u2c17\u2c18\3\2\2\2\u2c18"+
		"\u2c1a\3\2\2\2\u2c19\u2c0e\3\2\2\2\u2c19\u2c0f\3\2\2\2\u2c1a\u03ff\3\2"+
		"\2\2\u2c1b\u2c21\5\u03e8\u01f5\2\u2c1c\u2c21\7\u0091\2\2\u2c1d\u2c21\7"+
		"a\2\2\u2c1e\u2c21\7\u00ec\2\2\u2c1f\u2c21\7\u00fa\2\2\u2c20\u2c1b\3\2"+
		"\2\2\u2c20\u2c1c\3\2\2\2\u2c20\u2c1d\3\2\2\2\u2c20\u2c1e\3\2\2\2\u2c20"+
		"\u2c1f\3\2\2\2\u2c21\u0401\3\2\2\2\u2c22\u2c23\7\r\2\2\u2c23\u2c24\7\u0293"+
		"\2\2\u2c24\u2c25\7\u0247\2\2\u2c25\u2c26\7\u0354\2\2\u2c26\u2c27\7\u033b"+
		"\2\2\u2c27\u2c28\7\u0355\2\2\u2c28\u2c29\7\u0246\2\2\u2c29\u2c2a\7\u0342"+
		"\2\2\u2c2a\u2c2c\5\u01cc\u00e7\2\u2c2b\u2c2d\7\u0357\2\2\u2c2c\u2c2b\3"+
		"\2\2\2\u2c2c\u2c2d\3\2\2\2\u2c2d\u0403\3\2\2\2\u2c2e\u2c2f\7\r\2\2\u2c2f"+
		"\u2c31\7\u0127\2\2\u2c30\u2c32\7\u0293\2\2\u2c31\u2c30\3\2\2\2\u2c31\u2c32"+
		"\3\2\2\2\u2c32\u2c33\3\2\2\2\u2c33\u2c34\7\u033b\2\2\u2c34\u2c35\7K\2"+
		"\2\u2c35\u2c36\7\u030b\2\2\u2c36\u2c37\5\u0408\u0205\2\u2c37\u2c38\7\u00a8"+
		"\2\2\u2c38\u2c39\7\u030b\2\2\u2c39\u2c3c\5\u0408\u0205\2\u2c3a\u2c3b\7"+
		"\u0356\2\2\u2c3b\u2c3d\7\u033e\2\2\u2c3c\u2c3a\3\2\2\2\u2c3c\u2c3d\3\2"+
		"\2\2\u2c3d\u2c3e\3\2\2\2\u2c3e\u2c3f\7p\2\2\u2c3f\u2c40\7\u0291\2\2\u2c40"+
		"\u2c57\5\u0406\u0204\2\u2c41\u2c48\7\u00bd\2\2\u2c42\u2c43\t\u008f\2\2"+
		"\u2c43\u2c44\7\u0342\2\2\u2c44\u2c46\7\u033b\2\2\u2c45\u2c47\7\u0356\2"+
		"\2\u2c46\u2c45\3\2\2\2\u2c46\u2c47\3\2\2\2\u2c47\u2c49\3\2\2\2\u2c48\u2c42"+
		"\3\2\2\2\u2c48\u2c49\3\2\2\2\u2c49\u2c50\3\2\2\2\u2c4a\u2c4b\7\u02bf\2"+
		"\2\u2c4b\u2c4c\7\u0342\2\2\u2c4c\u2c4e\t\2\2\2\u2c4d\u2c4f\7\u0356\2\2"+
		"\u2c4e\u2c4d\3\2\2\2\u2c4e\u2c4f\3\2\2\2\u2c4f\u2c51\3\2\2\2\u2c50\u2c4a"+
		"\3\2\2\2\u2c50\u2c51\3\2\2\2\u2c51\u2c55\3\2\2\2\u2c52\u2c53\7\u0135\2"+
		"\2\u2c53\u2c54\7\u0342\2\2\u2c54\u2c56\t\t\2\2\u2c55\u2c52\3\2\2\2\u2c55"+
		"\u2c56\3\2\2\2\u2c56\u2c58\3\2\2\2\u2c57\u2c41\3\2\2\2\u2c57\u2c58\3\2"+
		"\2\2\u2c58\u2c5a\3\2\2\2\u2c59\u2c5b\7\u0357\2\2\u2c5a\u2c59\3\2\2\2\u2c5a"+
		"\u2c5b\3\2\2\2\u2c5b\u0405\3\2\2\2\u2c5c\u2c5f\5\u041e\u0210\2\u2c5d\u2c5f"+
		"\5\u0308\u0185\2\u2c5e\u2c5c\3\2\2\2\u2c5e\u2c5d\3\2\2\2\u2c5f\u0407\3"+
		"\2\2\2\u2c60\u2c63\5\u041e\u0210\2\u2c61\u2c63\5\u0308\u0185\2\u2c62\u2c60"+
		"\3\2\2\2\u2c62\u2c61\3\2\2\2\u2c63\u0409\3\2\2\2\u2c64\u2c65\7<\2\2\u2c65"+
		"\u2c66\7\u0293\2\2\u2c66\u2c68\7\u033b\2\2\u2c67\u2c69\7\u0357\2\2\u2c68"+
		"\u2c67\3\2\2\2\u2c68\u2c69\3\2\2\2\u2c69\u2c76\3\2\2\2\u2c6a\u2c71\7\u00bd"+
		"\2\2\u2c6b\u2c6c\7\u02a0\2\2\u2c6c\u2c6d\7\u0342\2\2\u2c6d\u2c6e\t\3\2"+
		"\2\u2c6e\u2c6f\7\u0124\2\2\u2c6f\u2c70\7\u0342\2\2\u2c70\u2c72\t\3\2\2"+
		"\u2c71\u2c6b\3\2\2\2\u2c71\u2c72\3\2\2\2\u2c72\u2c74\3\2\2\2\u2c73\u2c75"+
		"\7\u00fc\2\2\u2c74\u2c73\3\2\2\2\u2c74\u2c75\3\2\2\2\u2c75\u2c77\3\2\2"+
		"\2\u2c76\u2c6a\3\2\2\2\u2c76\u2c77\3\2\2\2\u2c77\u040b\3\2\2\2\u2c78\u2c7a"+
		"\7\u00b9\2\2\u2c79\u2c78\3\2\2\2\u2c79\u2c7a\3\2\2\2\u2c7a\u2c7b\3\2\2"+
		"\2\u2c7b\u2c7c\7\u0354\2\2\u2c7c\u2c7d\5\u040e\u0208\2\u2c7d\u2c83\7\u0355"+
		"\2\2\u2c7e\u2c80\7\u0356\2\2\u2c7f\u2c7e\3\2\2\2\u2c7f\u2c80\3\2\2\2\u2c80"+
		"\u2c81\3\2\2\2\u2c81\u2c82\7\u0246\2\2\u2c82\u2c84\5\u01cc\u00e7\2\u2c83"+
		"\u2c7f\3\2\2\2\u2c83\u2c84\3\2\2\2\u2c84\u2c86\3\2\2\2\u2c85\u2c87\7\u0357"+
		"\2\2\u2c86\u2c85\3\2\2\2\u2c86\u2c87\3\2\2\2\u2c87\u040d\3\2\2\2\u2c88"+
		"\u2c89\7\u02ae\2\2\u2c89\u2c8a\7\u0293\2\2\u2c8a\u2c8b\7P\2\2\u2c8b\u2c8c"+
		"\t\3\2\2\u2c8c\u2c8d\7K\2\2\u2c8d\u2c8f\5\u0410\u0209\2\u2c8e\u2c90\7"+
		"\u0357\2\2\u2c8f\u2c8e\3\2\2\2\u2c8f\u2c90\3\2\2\2\u2c90\u040f\3\2\2\2"+
		"\u2c91\u2c92\5\u041e\u0210\2\u2c92\u2c93\7\u034f\2\2\u2c93\u2c94\5\u041e"+
		"\u0210\2\u2c94\u2c95\7\u034f\2\2\u2c95\u2c96\5\u041e\u0210\2\u2c96\u2c99"+
		"\3\2\2\2\u2c97\u2c99\5\u041e\u0210\2\u2c98\u2c91\3\2\2\2\u2c98\u2c97\3"+
		"\2\2\2\u2c99\u0411\3\2\2\2\u2c9a\u2c9b\7\u021d\2\2\u2c9b\u2c9c\7p\2\2"+
		"\u2c9c\u2c9d\7\u0293\2\2\u2c9d\u2c9e\t\3\2\2\u2c9e\u2c9f\7\u019b\2\2\u2c9f"+
		"\u2ca0\7\u0251\2\2\u2ca0\u2ca4\5\u0308\u0185\2\u2ca1\u2ca2\7\u0354\2\2"+
		"\u2ca2\u2ca3\t\3\2\2\u2ca3\u2ca5\7\u0355\2\2\u2ca4\u2ca1\3\2\2\2\u2ca4"+
		"\u2ca5\3\2\2\2\u2ca5\u2ca7\3\2\2\2\u2ca6\u2ca8\7\u0357\2\2\u2ca7\u2ca6"+
		"\3\2\2\2\u2ca7\u2ca8\3\2\2\2\u2ca8\u0413\3\2\2\2\u2ca9\u2caa\t\u0090\2"+
		"\2\u2caa\u2cab\7\u0354\2\2\u2cab\u2cac\7\u018c\2\2\u2cac\u2cc8\7\u0355"+
		"\2\2\u2cad\u2cae\5\u041e\u0210\2\u2cae\u2caf\7\u0354\2\2\u2caf\u2cb0\7"+
		"\u033c\2\2\u2cb0\u2cb1\7\u0356\2\2\u2cb1\u2cb2\7\u033c\2\2\u2cb2\u2cb3"+
		"\7\u0355\2\2\u2cb3\u2cc8\3\2\2\2\u2cb4\u2cb5\5\u041e\u0210\2\u2cb5\u2cb6"+
		"\7\u0354\2\2\u2cb6\u2cb7\7\u033c\2\2\u2cb7\u2cb8\7\u0355\2\2\u2cb8\u2cc8"+
		"\3\2\2\2\u2cb9\u2cba\5\u041e\u0210\2\u2cba\u2cc0\7S\2\2\u2cbb\u2cbc\7"+
		"\u0354\2\2\u2cbc\u2cbd\7\u033c\2\2\u2cbd\u2cbe\7\u0356\2\2\u2cbe\u2cbf"+
		"\7\u033c\2\2\u2cbf\u2cc1\7\u0355\2\2\u2cc0\u2cbb\3\2\2\2\u2cc0\u2cc1\3"+
		"\2\2\2\u2cc1\u2cc8\3\2\2\2\u2cc2\u2cc4\7\66\2\2\u2cc3\u2cc5\7\177\2\2"+
		"\u2cc4\u2cc3\3\2\2\2\u2cc4\u2cc5\3\2\2\2\u2cc5\u2cc8\3\2\2\2\u2cc6\u2cc8"+
		"\5\u041e\u0210\2\u2cc7\u2ca9\3\2\2\2\u2cc7\u2cad\3\2\2\2\u2cc7\u2cb4\3"+
		"\2\2\2\u2cc7\u2cb9\3\2\2\2\u2cc7\u2cc2\3\2\2\2\u2cc7\u2cc6\3\2\2\2\u2cc8"+
		"\u0415\3\2\2\2\u2cc9\u2ccd\7k\2\2\u2cca\u2ccd\7/\2\2\u2ccb\u2ccd\5\u0418"+
		"\u020d\2\u2ccc\u2cc9\3\2\2\2\u2ccc\u2cca\3\2\2\2\u2ccc\u2ccb\3\2\2\2\u2ccd"+
		"\u0417\3\2\2\2\u2cce\u2cde\7\u033e\2\2\u2ccf\u2cde\7\u033f\2\2\u2cd0\u2cd2"+
		"\5\u041a\u020e\2\u2cd1\u2cd0\3\2\2\2\u2cd1\u2cd2\3\2\2\2\u2cd2\u2cd3\3"+
		"\2\2\2\u2cd3\u2cde\7\u033c\2\2\u2cd4\u2cd6\5\u041a\u020e\2\u2cd5\u2cd4"+
		"\3\2\2\2\u2cd5\u2cd6\3\2\2\2\u2cd6\u2cd7\3\2\2\2\u2cd7\u2cde\t\u0091\2"+
		"\2\u2cd8\u2cda\5\u041a\u020e\2\u2cd9\u2cd8\3\2\2\2\u2cd9\u2cda\3\2\2\2"+
		"\u2cda\u2cdb\3\2\2\2\u2cdb\u2cdc\7\u0353\2\2\u2cdc\u2cde\t\u0092\2\2\u2cdd"+
		"\u2cce\3\2\2\2\u2cdd\u2ccf\3\2\2\2\u2cdd\u2cd1\3\2\2\2\u2cdd\u2cd5\3\2"+
		"\2\2\u2cdd\u2cd9\3\2\2\2\u2cde\u0419\3\2\2\2\u2cdf\u2ce0\ts\2\2\u2ce0"+
		"\u041b\3\2\2\2\u2ce1\u2ce2\t\u0093\2\2\u2ce2\u041d\3\2\2\2\u2ce3\u2ce8"+
		"\7\u033d\2\2\u2ce4\u2ce8\7\u0338\2\2\u2ce5\u2ce8\7\u033a\2\2\u2ce6\u2ce8"+
		"\5\u041c\u020f\2\u2ce7\u2ce3\3\2\2\2\u2ce7\u2ce4\3\2\2\2\u2ce7\u2ce5\3"+
		"\2\2\2\u2ce7\u2ce6\3\2\2\2\u2ce8\u041f\3\2\2\2\u2ce9\u2cea\7\u033d\2\2"+
		"\u2cea\u0421\3\2\2\2\u2ceb\u2cee\5\u041e\u0210\2\u2cec\u2cee\7\u033e\2"+
		"\2\u2ced\u2ceb\3\2\2\2\u2ced\u2cec\3\2\2\2\u2cee\u0423\3\2\2\2\u2cef\u2cff"+
		"\7\u0342\2\2\u2cf0\u2cff\7\u0343\2\2\u2cf1\u2cff\7\u0344\2\2\u2cf2\u2cf3"+
		"\7\u0344\2\2\u2cf3\u2cff\7\u0342\2\2\u2cf4\u2cf5\7\u0343\2\2\u2cf5\u2cff"+
		"\7\u0342\2\2\u2cf6\u2cf7\7\u0344\2\2\u2cf7\u2cff\7\u0343\2\2\u2cf8\u2cf9"+
		"\7\u0345\2\2\u2cf9\u2cff\7\u0342\2\2\u2cfa\u2cfb\7\u0345\2\2\u2cfb\u2cff"+
		"\7\u0343\2\2\u2cfc\u2cfd\7\u0345\2\2\u2cfd\u2cff\7\u0344\2\2\u2cfe\u2cef"+
		"\3\2\2\2\u2cfe\u2cf0\3\2\2\2\u2cfe\u2cf1\3\2\2\2\u2cfe\u2cf2\3\2\2\2\u2cfe"+
		"\u2cf4\3\2\2\2\u2cfe\u2cf6\3\2\2\2\u2cfe\u2cf8\3\2\2\2\u2cfe\u2cfa\3\2"+
		"\2\2\u2cfe\u2cfc\3\2\2\2\u2cff\u0425\3\2\2\2\u2d00\u2d01\t\u0094\2\2\u2d01"+
		"\u0427\3\2\2\2\u2d02\u2d04\7\u033c\2\2\u2d03\u2d05\t\u0095\2\2\u2d04\u2d03"+
		"\3\2\2\2\u2d04\u2d05\3\2\2\2\u2d05\u0429\3\2\2\2\u0654\u042d\u0435\u043a"+
		"\u043e\u0444\u0446\u044b\u0452\u0456\u045c\u0460\u0464\u0468\u046c\u0470"+
		"\u0474\u0478\u047b\u0482\u0522\u0529\u0537\u053b\u0540\u0545\u0549\u054d"+
		"\u0552\u0557\u0559\u055d\u0560\u0567\u056a\u0573\u0576\u0581\u0586\u058b"+
		"\u0590\u0595\u059b\u059f\u05a2\u05a6\u05a9\u05ac\u05b3\u05b7\u05b9\u05be"+
		"\u05c4\u05c8\u05d5\u05db\u05de\u05e7\u05ea\u05fe\u0606\u060b\u060e\u0613"+
		"\u0616\u061b\u0623\u0628\u062b\u0630\u0636\u063b\u064c\u064f\u0652\u0655"+
		"\u065a\u0663\u0672\u0683\u068e\u0694\u06a3\u06b2\u06bb\u06bf\u06c4\u06ca"+
		"\u06d0\u06d3\u06d8\u06dd\u06e5\u06ef\u0702\u070a\u0717\u0719\u0725\u0727"+
		"\u072e\u0737\u073d\u0746\u0755\u075f\u0769\u0791\u07a8\u07cc\u07de\u07e1"+
		"\u07e6\u07e9\u07ee\u07f1\u07f6\u07f9\u07fe\u0801\u0809\u080c\u0814\u0821"+
		"\u082c\u0831\u0835\u083b\u0852\u085e\u0869\u086e\u0872\u0878\u087a\u0887"+
		"\u089e\u08a5\u08ae\u08b3\u08b6\u08bb\u08be\u08c3\u08c8\u08e4\u08ec\u08f2"+
		"\u08f9\u08fb\u0908\u090f\u091e\u0930\u0933\u0935\u093a\u093e\u0941\u0943"+
		"\u0949\u094c\u094e\u0954\u0956\u096c\u0974\u097c\u097e\u0980\u0989\u099e"+
		"\u09ab\u09ba\u09be\u09e1\u09e4\u09e9\u0a00\u0a03\u0a08\u0a22\u0a30\u0a35"+
		"\u0a3d\u0a42\u0a49\u0a5e\u0a83\u0a88\u0a9b\u0aa7\u0aaa\u0aaf\u0ab2\u0ab8"+
		"\u0ac7\u0acc\u0ad4\u0ad7\u0adc\u0ae1\u0ae4\u0afc\u0b03\u0b08\u0b0d\u0b12"+
		"\u0b14\u0b1b\u0b28\u0b2e\u0b33\u0b3b\u0b4b\u0b52\u0b57\u0b5c\u0b5f\u0b65"+
		"\u0b6b\u0b70\u0b75\u0b7a\u0b7d\u0b83\u0b89\u0b94\u0b97\u0ba1\u0ba7\u0bab"+
		"\u0baf\u0bcc\u0bd9\u0bdf\u0be9\u0bec\u0c00\u0c04\u0c08\u0c0d\u0c1c\u0c23"+
		"\u0c2c\u0c34\u0c37\u0c3c\u0c41\u0c49\u0c4f\u0c53\u0c59\u0c5e\u0c62\u0c69"+
		"\u0c71\u0c79\u0c82\u0c87\u0c8b\u0c8e\u0c92\u0c98\u0c9d\u0ca5\u0cad\u0cb3"+
		"\u0cb9\u0cbc\u0cc1\u0cc4\u0ccb\u0ccd\u0cd0\u0cd6\u0cd9\u0cde\u0ce1\u0ce6"+
		"\u0ce9\u0cee\u0cf1\u0cf6\u0cf9\u0cfc\u0cff\u0d06\u0d0a\u0d11\u0d18\u0d1e"+
		"\u0d2b\u0d2f\u0d34\u0d3e\u0d47\u0d4b\u0d57\u0d5d\u0d62\u0d64\u0d78\u0d7c"+
		"\u0d84\u0d8d\u0d93\u0d99\u0da1\u0da3\u0dad\u0db1\u0db4\u0db8\u0dbd\u0dc3"+
		"\u0dc6\u0dca\u0dd2\u0dd4\u0dd7\u0ddf\u0de7\u0dee\u0df5\u0df7\u0df9\u0dfe"+
		"\u0e04\u0e07\u0e09\u0e0b\u0e0e\u0e13\u0e16\u0e1b\u0e2a\u0e31\u0e38\u0e3a"+
		"\u0e3c\u0e41\u0e47\u0e4a\u0e4c\u0e4e\u0e51\u0e56\u0e59\u0e5e\u0e6b\u0e70"+
		"\u0e79\u0e7e\u0e84\u0e88\u0e8c\u0e9d\u0e9f\u0ea9\u0eae\u0eb0\u0eb4\u0eba"+
		"\u0ec2\u0ec7\u0eca\u0ed2\u0ed5\u0eda\u0edf\u0ee4\u0ee9\u0eee\u0ef3\u0ef7"+
		"\u0efc\u0f07\u0f0c\u0f0f\u0f12\u0f17\u0f1a\u0f1f\u0f22\u0f27\u0f2a\u0f2f"+
		"\u0f32\u0f37\u0f3a\u0f3f\u0f45\u0f4a\u0f4d\u0f52\u0f59\u0f5b\u0f61\u0f6a"+
		"\u0f6f\u0f71\u0f7d\u0f83\u0f8f\u0f92\u0f97\u0f99\u0fa3\u0fa8\u0faa\u0fae"+
		"\u0fb4\u0fc6\u0fc8\u0fd7\u0fe9\u0ff1\u0ffb\u100b\u1020\u102b\u1031\u103a"+
		"\u1043\u1049\u1052\u1057\u105a\u105f\u1062\u1067\u106a\u1072\u1078\u107c"+
		"\u1083\u1089\u108d\u1090\u1092\u1095\u109a\u109d\u10a2\u10a5\u10aa\u10ad"+
		"\u10b2\u10b5\u10c4\u10cf\u10db\u10e2\u10e9\u10ed\u10f2\u10f5\u10fa\u10fd"+
		"\u1102\u1105\u110e\u1115\u1124\u1128\u112d\u1138\u1142\u114e\u1154\u1156"+
		"\u115e\u1167\u116c\u1177\u117a\u117e\u1186\u118a\u118e\u1196\u119b\u11a3"+
		"\u11a8\u11ac\u11ae\u11b3\u11bc\u11bf\u11c4\u11cb\u11d1\u11d3\u11d8\u11de"+
		"\u11e4\u11e9\u11ef\u11f6\u11fb\u1200\u1205\u1208\u120c\u1210\u1214\u1218"+
		"\u121d\u1221\u1225\u122f\u1235\u123c\u123f\u1245\u124b\u1250\u1252\u1258"+
		"\u125a\u125f\u1265\u126b\u1270\u1272\u1276\u127a\u127d\u128b\u1290\u1294"+
		"\u12a1\u12a4\u12a6\u12ae\u12b8\u12be\u12c5\u12c8\u12ce\u12d4\u12d9\u12db"+
		"\u12e1\u12e3\u12e8\u12ee\u12f4\u12fa\u12ff\u1301\u1305\u1309\u130c\u131a"+
		"\u131f\u1323\u1330\u1333\u1335\u133d\u1348\u1351\u135a\u1365\u136e\u1377"+
		"\u1383\u1387\u138c\u138e\u1390\u1395\u1399\u139e\u13a0\u13a2\u13b0\u13b5"+
		"\u13cb\u13e1\u13e6\u13f3\u13fb\u140f\u1412\u1418\u1420\u1427\u142c\u1430"+
		"\u1434\u1437\u143e\u1450\u1452\u1466\u146d\u1474\u1479\u147e\u1484\u1489"+
		"\u148b\u1492\u1498\u149e\u14a1\u14a7\u14b1\u14b4\u14bb\u14be\u14c3\u14c5"+
		"\u14cd\u14d1\u14d7\u14dc\u14de\u14e1\u14e8\u14ee\u14f5\u14f8\u14fe\u1503"+
		"\u1505\u1508\u1510\u1516\u151d\u1520\u1526\u152b\u152d\u1535\u153d\u1543"+
		"\u1548\u154a\u1554\u1559\u1563\u1569\u1575\u1577\u157e\u1584\u158a\u1590"+
		"\u1595\u1597\u159e\u15a6\u15ac\u15ba\u15bc\u15bf\u15c4\u15c6\u15d2\u15d8"+
		"\u15e6\u15e8\u15eb\u15f0\u15f3\u15f8\u15fa\u1603\u160a\u1616\u1626\u162f"+
		"\u1638\u163b\u1640\u1647\u1649\u164f\u1651\u1659\u165b\u1661\u1663\u1669"+
		"\u166b\u1672\u1675\u1677\u167a\u167e\u1680\u1689\u168f\u1693\u169b\u16a2"+
		"\u16a8\u16aa\u16b5\u16ba\u16c0\u16c4\u16ce\u16d6\u16e2\u16e5\u16ed\u16ef"+
		"\u16f2\u16f6\u16f9\u1702\u1705\u1708\u1710\u1716\u171d\u1721\u172c\u1732"+
		"\u1734\u173d\u1741\u1748\u174d\u1750\u1758\u175c\u175f\u1763\u1766\u176a"+
		"\u1771\u1775\u1777\u1779\u177c\u177f\u1782\u1788\u178b\u1793\u1795\u1798"+
		"\u179c\u179f\u17a5\u17a8\u17ac\u17af\u17b2\u17b9\u17bc\u17c3\u17c9\u17cd"+
		"\u17d7\u17da\u17dd\u17e3\u17e6\u17e9\u17ec\u17f0\u17f3\u17fb\u17fd\u1801"+
		"\u1804\u180c\u1810\u1814\u181b\u181f\u1821\u1823\u1826\u1829\u182c\u1834"+
		"\u183a\u1840\u1842\u1846\u1849\u1851\u1855\u185c\u185f\u1868\u186b\u186f"+
		"\u1877\u187a\u187e\u1881\u188f\u1893\u1896\u189a\u189d\u18a1\u18b1\u18b3"+
		"\u18b5\u18b8\u18bb\u18c0\u18c3\u18c9\u18cc\u18d3\u18d7\u18d9\u18e1\u18e4"+
		"\u18e8\u18ef\u18f2\u18fe\u1903\u1906\u1912\u1915\u191b\u1922\u1927\u192c"+
		"\u1932\u1936\u193d\u1940\u1948\u1950\u1953\u195b\u1962\u1969\u196c\u1976"+
		"\u197d\u1982\u1985\u198f\u1992\u1995\u199d\u19a8\u19ab\u19ae\u19b4\u19b9"+
		"\u19bd\u19c7\u19ca\u19cd\u19d3\u19d9\u19df\u19e4\u19e8\u19ec\u19ef\u19f4"+
		"\u1a02\u1a12\u1a16\u1a1c\u1a1e\u1a21\u1a25\u1a2a\u1a2f\u1a37\u1a3c\u1a40"+
		"\u1a45\u1a4a\u1a50\u1a55\u1a58\u1a5d\u1a63\u1a67\u1a70\u1a7a\u1a7d\u1a86"+
		"\u1a8e\u1a91\u1a98\u1a9b\u1ab4\u1ad0\u1ad6\u1ad9\u1adc\u1adf\u1ae5\u1ae9"+
		"\u1af1\u1afd\u1b09\u1b0d\u1b10\u1b19\u1b1f\u1b29\u1b32\u1b3c\u1b42\u1b48"+
		"\u1b4f\u1b55\u1b59\u1b64\u1b73\u1b75\u1b90\u1b9b\u1ba3\u1bae\u1bb3\u1bb6"+
		"\u1bbe\u1bc8\u1bcf\u1bd6\u1bd8\u1be4\u1bef\u1bf3\u1bf8\u1bfb\u1bfd\u1c00"+
		"\u1c0c\u1c0e\u1c10\u1c13\u1c18\u1c1b\u1c20\u1c2a\u1c2e\u1c33\u1c36\u1c38"+
		"\u1c3b\u1c47\u1c49\u1c4b\u1c4e\u1c54\u1c5e\u1c72\u1c78\u1c91\u1c93\u1cad"+
		"\u1cb3\u1cbe\u1cc6\u1cc9\u1cd7\u1cdf\u1ce6\u1cfd\u1d0a\u1d10\u1d17\u1d1f"+
		"\u1d22\u1d25\u1d2e\u1d38\u1d3f\u1d43\u1d47\u1d4d\u1d54\u1d58\u1d5e\u1d65"+
		"\u1d6c\u1d6f\u1d75\u1d7c\u1d80\u1d85\u1d8a\u1d8f\u1d97\u1d9b\u1da1\u1da8"+
		"\u1dac\u1db5\u1dbd\u1dc3\u1dc9\u1dda\u1dde\u1de6\u1dea\u1df2\u1df6\u1dfb"+
		"\u1dff\u1e09\u1e0e\u1e10\u1e17\u1e1b\u1e1f\u1e23\u1e26\u1e2a\u1e30\u1e34"+
		"\u1e36\u1e3d\u1e44\u1e47\u1e4a\u1e51\u1e56\u1e5b\u1e5f\u1e65\u1e69\u1e6b"+
		"\u1e70\u1e75\u1e79\u1e7e\u1e84\u1e88\u1e8c\u1e8e\u1e92\u1e96\u1e9a\u1e9e"+
		"\u1ea4\u1ea7\u1ead\u1eb1\u1eb5\u1ebb\u1ec1\u1ec3\u1ec6\u1eca\u1ece\u1ed2"+
		"\u1ed8\u1edb\u1ee1\u1ee7\u1eea\u1ef0\u1ef3\u1ef9\u1efc\u1f00\u1f04\u1f08"+
		"\u1f0d\u1f10\u1f14\u1f18\u1f29\u1f2b\u1f2d\u1f30\u1f37\u1f3c\u1f40\u1f46"+
		"\u1f4a\u1f4c\u1f51\u1f56\u1f5a\u1f5f\u1f65\u1f69\u1f6d\u1f6f\u1f73\u1f77"+
		"\u1f7b\u1f7f\u1f85\u1f88\u1f8e\u1f92\u1f96\u1f9c\u1fa2\u1fa4\u1fa7\u1fab"+
		"\u1faf\u1fb3\u1fb9\u1fbc\u1fc2\u1fc8\u1fcb\u1fd1\u1fd4\u1fda\u1fdd\u1fe1"+
		"\u1fe5\u1fe9\u1fee\u1ff1\u1ff5\u1ff9\u1fff\u2002\u2006\u2017\u2019\u201b"+
		"\u201e\u202c\u2032\u203a\u2041\u2043\u2046\u2067\u206b\u206f\u2076\u207f"+
		"\u2087\u208a\u208d\u2091\u2095\u2098\u20a0\u20a5\u20aa\u20ac\u20b3\u20bb"+
		"\u20be\u20c9\u20ce\u20d4\u20d9\u20e0\u20e2\u20e6\u20ee\u20f4\u20f8\u20fb"+
		"\u2104\u2107\u210d\u2112\u2119\u211e\u2126\u212b\u2137\u2139\u2144\u214b"+
		"\u2155\u216c\u2179\u2189\u218e\u2195\u2198\u219c\u219e\u21af\u21be\u21c6"+
		"\u21cf\u21d7\u21e0\u21eb\u21ef\u21f1\u21f3\u21f9\u21fe\u2205\u2212\u2214"+
		"\u2216\u2219\u221c\u2223\u2226\u222c\u2231\u2233\u2236\u223c\u2244\u2246"+
		"\u2249\u224d\u2250\u225a\u225d\u2261\u2264\u226a\u226d\u226f\u2273\u2277"+
		"\u227c\u2280\u2285\u228a\u2294\u2297\u229a\u22a2\u22a6\u22a9\u22ad\u22b2"+
		"\u22ba\u22bf\u22c5\u22ca\u22d3\u22d6\u22d9\u22e4\u22e9\u22f4\u22f9\u22ff"+
		"\u2306\u2308\u230c\u230f\u2313\u2317\u231f\u2324\u2326\u2329\u232e\u2337"+
		"\u233b\u2340\u2343\u2346\u234c\u2354\u235c\u235f\u2362\u2366\u236b\u236e"+
		"\u2374\u2378\u237e\u2386\u238c\u238e\u2391\u23a0\u23a3\u23a6\u23a8\u23b3"+
		"\u23be\u23c7\u23ce\u23d5\u23df\u23e1\u23e3\u23e6\u23e9\u23f4\u23f6\u23f8"+
		"\u23fb\u2400\u240b\u2414\u2417\u241a\u2423\u2426\u2429\u2430\u2433\u243a"+
		"\u2440\u244f\u2452\u2459\u2460\u2464\u246f\u247d\u2484\u2486\u2492\u2499"+
		"\u249d\u24a5\u24a9\u24ad\u24b3\u24bd\u24c7\u24d1\u24d9\u24e5\u24eb\u24ef"+
		"\u24f9\u24fd\u2501\u250b\u2511\u2519\u2521\u2523\u253b\u2547\u254e\u2556"+
		"\u255d\u2563\u256a\u256e\u2573\u2575\u2579\u257d\u2584\u2588\u258b\u2590"+
		"\u2594\u2598\u259d\u25a4\u25a7\u25ab\u25b0\u25b4\u25bd\u25c4\u25cd\u25d9"+
		"\u25db\u25e5\u25e8\u25ed\u25f6\u25f8\u25fa\u25ff\u2601\u2609\u260e\u2616"+
		"\u261b\u2621\u2623\u262d\u262f\u2633\u2637\u2639\u2642\u2644\u2649\u2654"+
		"\u2676\u2686\u268d\u268f\u2696\u269f\u26a7\u26ad\u26b5\u26b8\u26bf\u26c6"+
		"\u26c9\u26cb\u26d3\u26d5\u26dd\u26e1\u26e8\u26f0\u26f6\u26ff\u2702\u2706"+
		"\u270a\u270e\u2715\u2717\u271b\u2720\u2722\u2726\u272b\u272d\u2734\u2736"+
		"\u273e\u2740\u2749\u2751\u2754\u275b\u2763\u2766\u276d\u2773\u277a\u2780"+
		"\u2784\u279d\u27a0\u27a4\u27a6\u27a9\u27d7\u27dc\u27f0\u27f4\u27f8\u2808"+
		"\u2811\u2817\u281c\u2830\u2836\u283d\u2841\u2850\u2856\u2869\u2874\u2881"+
		"\u2892\u2898\u289f\u28a3\u28be\u28f8\u28fc\u2935\u2937\u293d\u2947\u295a"+
		"\u296a\u297a\u298a\u299d\u29a2\u29a8\u29ab\u29b0\u29b5\u29be\u29c3\u29c9"+
		"\u29d2\u29dc\u29df\u29ed\u29f3\u29fc\u2a00\u2a08\u2a0f\u2a1c\u2a24\u2a31"+
		"\u2a38\u2a3e\u2a42\u2a53\u2a62\u2a64\u2a71\u2a81\u2a89\u2a8d\u2a90\u2a99"+
		"\u2a9c\u2a9f\u2aac\u2ab0\u2ab8\u2abe\u2ac6\u2acd\u2ad3\u2ae2\u2aeb\u2af1"+
		"\u2af7\u2afa\u2afe\u2b05\u2b0d\u2b10\u2b16\u2b1c\u2b1e\u2b24\u2b27\u2b29"+
		"\u2b2f\u2b31\u2b3f\u2b46\u2b4f\u2b56\u2b62\u2b69\u2b70\u2b77\u2b7d\u2b84"+
		"\u2b87\u2b8c\u2b93\u2b98\u2b9c\u2ba1\u2ba4\u2ba8\u2bac\u2bb1\u2bb5\u2bbb"+
		"\u2bbf\u2bc3\u2bc8\u2bcc\u2bd1\u2bd6\u2bda\u2bdf\u2be3\u2beb\u2bef\u2bf4"+
		"\u2bfe\u2c03\u2c0a\u2c13\u2c17\u2c19\u2c20\u2c2c\u2c31\u2c3c\u2c46\u2c48"+
		"\u2c4e\u2c50\u2c55\u2c57\u2c5a\u2c5e\u2c62\u2c68\u2c71\u2c74\u2c76\u2c79"+
		"\u2c7f\u2c83\u2c86\u2c8f\u2c98\u2ca4\u2ca7\u2cc0\u2cc4\u2cc7\u2ccc\u2cd1"+
		"\u2cd5\u2cd9\u2cdd\u2ce7\u2ced\u2cfe\u2d04";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}